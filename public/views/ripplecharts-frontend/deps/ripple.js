var ripple =
/******/ (function(modules) { // webpackBootstrap
/******/   // The module cache
/******/   var installedModules = {};

/******/   // The require function
/******/   function __webpack_require__(moduleId) {

/******/     // Check if module is in cache
/******/     if(installedModules[moduleId])
/******/       return installedModules[moduleId].exports;

/******/     // Create a new module (and put it into the cache)
/******/     var module = installedModules[moduleId] = {
/******/       exports: {},
/******/       id: moduleId,
/******/       loaded: false
/******/     };

/******/     // Execute the module function
/******/     modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/     // Flag the module as loaded
/******/     module.loaded = true;

/******/     // Return the exports of the module
/******/     return module.exports;
/******/   }


/******/   // expose the modules object (__webpack_modules__)
/******/   __webpack_require__.m = modules;

/******/   // expose the module cache
/******/   __webpack_require__.c = installedModules;

/******/   // __webpack_public_path__
/******/   __webpack_require__.p = "";

/******/   // Load entry module and return exports
/******/   return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  module.exports = {
    RippleAPI: __webpack_require__(1).RippleAPI,
    // Broadcast api is experimental
    RippleAPIBroadcast: __webpack_require__(613).RippleAPIBroadcast,
    // HTTP server is experimental
    createHTTPServer: __webpack_require__(614).createHTTPServer
  };

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(global) {
  'use strict';

  /* eslint-disable max-len */
  // Enable core-js polyfills. This allows use of ES6/7 extensions listed here:
  // https://github.com/zloirock/core-js/blob/fb0890f32dabe8d4d88a4350d1b268446127132e/shim.js#L1-L103
  /* eslint-enable max-len */

  // In node.js env, polyfill might be already loaded (from any npm package),
  // that's why we do this check.

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  if (!global._babelPolyfill) {
    __webpack_require__(2);
  }

  var _ = __webpack_require__(192);
  var EventEmitter = __webpack_require__(193).EventEmitter;
  var common = __webpack_require__(194);
  var server = __webpack_require__(438);
  var connect = server.connect;
  var disconnect = server.disconnect;
  var getServerInfo = server.getServerInfo;
  var getFee = server.getFee;
  var isConnected = server.isConnected;
  var getLedgerVersion = server.getLedgerVersion;
  var getTransaction = __webpack_require__(439);
  var getTransactions = __webpack_require__(458);
  var getTrustlines = __webpack_require__(584);
  var getBalances = __webpack_require__(586);
  var getBalanceSheet = __webpack_require__(587);
  var getPaths = __webpack_require__(588);
  var getOrders = __webpack_require__(590);
  var getOrderbook = __webpack_require__(593);
  var getSettings = __webpack_require__(595);
  var getAccountInfo = __webpack_require__(596);
  var preparePayment = __webpack_require__(597);
  var prepareTrustline = __webpack_require__(599);
  var prepareOrder = __webpack_require__(600);
  var prepareOrderCancellation = __webpack_require__(601);
  var prepareSuspendedPaymentCreation = __webpack_require__(602);
  var prepareSuspendedPaymentExecution = __webpack_require__(603);
  var prepareSuspendedPaymentCancellation = __webpack_require__(604);
  var prepareSettings = __webpack_require__(605);
  var sign = __webpack_require__(606);
  var combine = __webpack_require__(607);
  var submit = __webpack_require__(608);
  var errors = __webpack_require__(194).errors;
  var generateAddress = __webpack_require__(609).generateAddressAPI;
  var computeLedgerHash = __webpack_require__(610);
  var getLedger = __webpack_require__(611);

  // prevent access to non-validated ledger versions

  var RestrictedConnection = function (_common$Connection) {
    _inherits(RestrictedConnection, _common$Connection);

    function RestrictedConnection() {
      _classCallCheck(this, RestrictedConnection);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(RestrictedConnection).apply(this, arguments));
    }

    _createClass(RestrictedConnection, [{
      key: 'request',
      value: function request(_request, timeout) {
        var ledger_index = _request.ledger_index;
        if (ledger_index !== undefined && ledger_index !== 'validated') {
          if (!_.isNumber(ledger_index) || ledger_index > this._ledgerVersion) {
            return Promise.reject(new errors.LedgerVersionError('ledgerVersion ' + ledger_index + ' is greater than server\'s ' + ('most recent validated ledger: ' + this._ledgerVersion)));
          }
        }
        return _get(Object.getPrototypeOf(RestrictedConnection.prototype), 'request', this).call(this, _request, timeout);
      }
    }]);

    return RestrictedConnection;
  }(common.Connection);

  var RippleAPI = function (_EventEmitter) {
    _inherits(RippleAPI, _EventEmitter);

    function RippleAPI() {
      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      _classCallCheck(this, RippleAPI);

      common.validate.apiOptions(options);

      var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(RippleAPI).call(this));

      _this2._feeCushion = options.feeCushion || 1.2;
      var serverURL = options.server;
      if (serverURL !== undefined) {
        _this2.connection = new RestrictedConnection(serverURL, options);
        _this2.connection.on('ledgerClosed', function (message) {
          _this2.emit('ledger', server.formatLedgerClose(message));
        });
        _this2.connection.on('error', function (errorCode, errorMessage, data) {
          _this2.emit('error', errorCode, errorMessage, data);
        });
      } else {
        // use null object pattern to provide better error message if user
        // tries to call a method that requires a connection
        _this2.connection = new RestrictedConnection(null, options);
      }
      return _this2;
    }

    return RippleAPI;
  }(EventEmitter);

  _.assign(RippleAPI.prototype, {
    connect: connect,
    disconnect: disconnect,
    isConnected: isConnected,
    getServerInfo: getServerInfo,
    getFee: getFee,
    getLedgerVersion: getLedgerVersion,

    getTransaction: getTransaction,
    getTransactions: getTransactions,
    getTrustlines: getTrustlines,
    getBalances: getBalances,
    getBalanceSheet: getBalanceSheet,
    getPaths: getPaths,
    getOrders: getOrders,
    getOrderbook: getOrderbook,
    getSettings: getSettings,
    getAccountInfo: getAccountInfo,
    getLedger: getLedger,

    preparePayment: preparePayment,
    prepareTrustline: prepareTrustline,
    prepareOrder: prepareOrder,
    prepareOrderCancellation: prepareOrderCancellation,
    prepareSuspendedPaymentCreation: prepareSuspendedPaymentCreation,
    prepareSuspendedPaymentExecution: prepareSuspendedPaymentExecution,
    prepareSuspendedPaymentCancellation: prepareSuspendedPaymentCancellation,
    prepareSettings: prepareSettings,
    sign: sign,
    combine: combine,
    submit: submit,

    generateAddress: generateAddress,
    computeLedgerHash: computeLedgerHash,
    errors: errors
  });

  // these are exposed only for use by unit tests; they are not part of the API
  RippleAPI._PRIVATE = {
    validate: common.validate,
    RangeSet: __webpack_require__(276).RangeSet,
    ledgerUtils: __webpack_require__(440),
    schemaValidator: __webpack_require__(313)
  };

  module.exports = {
    RippleAPI: RippleAPI
  };
  /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(global) {"use strict";

  __webpack_require__(3);

  __webpack_require__(190);

  if (global._babelPolyfill) {
    throw new Error("only one instance of babel-polyfill is allowed");
  }
  global._babelPolyfill = true;
  /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(4);
  __webpack_require__(37);
  __webpack_require__(43);
  __webpack_require__(45);
  __webpack_require__(47);
  __webpack_require__(49);
  __webpack_require__(51);
  __webpack_require__(53);
  __webpack_require__(54);
  __webpack_require__(55);
  __webpack_require__(56);
  __webpack_require__(57);
  __webpack_require__(58);
  __webpack_require__(59);
  __webpack_require__(60);
  __webpack_require__(61);
  __webpack_require__(62);
  __webpack_require__(63);
  __webpack_require__(64);
  __webpack_require__(67);
  __webpack_require__(68);
  __webpack_require__(69);
  __webpack_require__(71);
  __webpack_require__(72);
  __webpack_require__(73);
  __webpack_require__(74);
  __webpack_require__(75);
  __webpack_require__(76);
  __webpack_require__(77);
  __webpack_require__(79);
  __webpack_require__(80);
  __webpack_require__(81);
  __webpack_require__(83);
  __webpack_require__(84);
  __webpack_require__(85);
  __webpack_require__(87);
  __webpack_require__(88);
  __webpack_require__(89);
  __webpack_require__(90);
  __webpack_require__(91);
  __webpack_require__(92);
  __webpack_require__(93);
  __webpack_require__(94);
  __webpack_require__(95);
  __webpack_require__(96);
  __webpack_require__(97);
  __webpack_require__(98);
  __webpack_require__(99);
  __webpack_require__(100);
  __webpack_require__(105);
  __webpack_require__(106);
  __webpack_require__(110);
  __webpack_require__(111);
  __webpack_require__(113);
  __webpack_require__(114);
  __webpack_require__(119);
  __webpack_require__(120);
  __webpack_require__(123);
  __webpack_require__(125);
  __webpack_require__(127);
  __webpack_require__(129);
  __webpack_require__(130);
  __webpack_require__(131);
  __webpack_require__(133);
  __webpack_require__(134);
  __webpack_require__(136);
  __webpack_require__(137);
  __webpack_require__(138);
  __webpack_require__(139);
  __webpack_require__(146);
  __webpack_require__(149);
  __webpack_require__(150);
  __webpack_require__(152);
  __webpack_require__(153);
  __webpack_require__(154);
  __webpack_require__(155);
  __webpack_require__(156);
  __webpack_require__(157);
  __webpack_require__(158);
  __webpack_require__(159);
  __webpack_require__(160);
  __webpack_require__(161);
  __webpack_require__(162);
  __webpack_require__(163);
  __webpack_require__(165);
  __webpack_require__(166);
  __webpack_require__(167);
  __webpack_require__(168);
  __webpack_require__(169);
  __webpack_require__(170);
  __webpack_require__(172);
  __webpack_require__(173);
  __webpack_require__(174);
  __webpack_require__(175);
  __webpack_require__(177);
  __webpack_require__(178);
  __webpack_require__(180);
  __webpack_require__(181);
  __webpack_require__(183);
  __webpack_require__(184);
  __webpack_require__(185);
  __webpack_require__(188);
  __webpack_require__(189);
  module.exports = __webpack_require__(8);

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $                 = __webpack_require__(5)
    , $export           = __webpack_require__(6)
    , DESCRIPTORS       = __webpack_require__(11)
    , createDesc        = __webpack_require__(10)
    , html              = __webpack_require__(17)
    , cel               = __webpack_require__(18)
    , has               = __webpack_require__(20)
    , cof               = __webpack_require__(21)
    , invoke            = __webpack_require__(22)
    , fails             = __webpack_require__(12)
    , anObject          = __webpack_require__(23)
    , aFunction         = __webpack_require__(16)
    , isObject          = __webpack_require__(19)
    , toObject          = __webpack_require__(24)
    , toIObject         = __webpack_require__(26)
    , toInteger         = __webpack_require__(28)
    , toIndex           = __webpack_require__(29)
    , toLength          = __webpack_require__(30)
    , IObject           = __webpack_require__(27)
    , IE_PROTO          = __webpack_require__(14)('__proto__')
    , createArrayMethod = __webpack_require__(31)
    , arrayIndexOf      = __webpack_require__(36)(false)
    , ObjectProto       = Object.prototype
    , ArrayProto        = Array.prototype
    , arraySlice        = ArrayProto.slice
    , arrayJoin         = ArrayProto.join
    , defineProperty    = $.setDesc
    , getOwnDescriptor  = $.getDesc
    , defineProperties  = $.setDescs
    , factories         = {}
    , IE8_DOM_DEFINE;

  if(!DESCRIPTORS){
    IE8_DOM_DEFINE = !fails(function(){
      return defineProperty(cel('div'), 'a', {get: function(){ return 7; }}).a != 7;
    });
    $.setDesc = function(O, P, Attributes){
      if(IE8_DOM_DEFINE)try {
        return defineProperty(O, P, Attributes);
      } catch(e){ /* empty */ }
      if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
      if('value' in Attributes)anObject(O)[P] = Attributes.value;
      return O;
    };
    $.getDesc = function(O, P){
      if(IE8_DOM_DEFINE)try {
        return getOwnDescriptor(O, P);
      } catch(e){ /* empty */ }
      if(has(O, P))return createDesc(!ObjectProto.propertyIsEnumerable.call(O, P), O[P]);
    };
    $.setDescs = defineProperties = function(O, Properties){
      anObject(O);
      var keys   = $.getKeys(Properties)
        , length = keys.length
        , i = 0
        , P;
      while(length > i)$.setDesc(O, P = keys[i++], Properties[P]);
      return O;
    };
  }
  $export($export.S + $export.F * !DESCRIPTORS, 'Object', {
    // 19.1.2.6 / 15.2.3.3 Object.getOwnPropertyDescriptor(O, P)
    getOwnPropertyDescriptor: $.getDesc,
    // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
    defineProperty: $.setDesc,
    // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
    defineProperties: defineProperties
  });

    // IE 8- don't enum bug keys
  var keys1 = ('constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,' +
              'toLocaleString,toString,valueOf').split(',')
    // Additional keys for getOwnPropertyNames
    , keys2 = keys1.concat('length', 'prototype')
    , keysLen1 = keys1.length;

  // Create object with `null` prototype: use iframe Object with cleared prototype
  var createDict = function(){
    // Thrash, waste and sodomy: IE GC bug
    var iframe = cel('iframe')
      , i      = keysLen1
      , gt     = '>'
      , iframeDocument;
    iframe.style.display = 'none';
    html.appendChild(iframe);
    iframe.src = 'javascript:'; // eslint-disable-line no-script-url
    // createDict = iframe.contentWindow.Object;
    // html.removeChild(iframe);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write('<script>document.F=Object</script' + gt);
    iframeDocument.close();
    createDict = iframeDocument.F;
    while(i--)delete createDict.prototype[keys1[i]];
    return createDict();
  };
  var createGetKeys = function(names, length){
    return function(object){
      var O      = toIObject(object)
        , i      = 0
        , result = []
        , key;
      for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
      // Don't enum bug & hidden keys
      while(length > i)if(has(O, key = names[i++])){
        ~arrayIndexOf(result, key) || result.push(key);
      }
      return result;
    };
  };
  var Empty = function(){};
  $export($export.S, 'Object', {
    // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
    getPrototypeOf: $.getProto = $.getProto || function(O){
      O = toObject(O);
      if(has(O, IE_PROTO))return O[IE_PROTO];
      if(typeof O.constructor == 'function' && O instanceof O.constructor){
        return O.constructor.prototype;
      } return O instanceof Object ? ObjectProto : null;
    },
    // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
    getOwnPropertyNames: $.getNames = $.getNames || createGetKeys(keys2, keys2.length, true),
    // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
    create: $.create = $.create || function(O, /*?*/Properties){
      var result;
      if(O !== null){
        Empty.prototype = anObject(O);
        result = new Empty();
        Empty.prototype = null;
        // add "__proto__" for Object.getPrototypeOf shim
        result[IE_PROTO] = O;
      } else result = createDict();
      return Properties === undefined ? result : defineProperties(result, Properties);
    },
    // 19.1.2.14 / 15.2.3.14 Object.keys(O)
    keys: $.getKeys = $.getKeys || createGetKeys(keys1, keysLen1, false)
  });

  var construct = function(F, len, args){
    if(!(len in factories)){
      for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
      factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
    }
    return factories[len](F, args);
  };

  // 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
  $export($export.P, 'Function', {
    bind: function bind(that /*, args... */){
      var fn       = aFunction(this)
        , partArgs = arraySlice.call(arguments, 1);
      var bound = function(/* args... */){
        var args = partArgs.concat(arraySlice.call(arguments));
        return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
      };
      if(isObject(fn.prototype))bound.prototype = fn.prototype;
      return bound;
    }
  });

  // fallback for not array-like ES3 strings and DOM objects
  $export($export.P + $export.F * fails(function(){
    if(html)arraySlice.call(html);
  }), 'Array', {
    slice: function(begin, end){
      var len   = toLength(this.length)
        , klass = cof(this);
      end = end === undefined ? len : end;
      if(klass == 'Array')return arraySlice.call(this, begin, end);
      var start  = toIndex(begin, len)
        , upTo   = toIndex(end, len)
        , size   = toLength(upTo - start)
        , cloned = Array(size)
        , i      = 0;
      for(; i < size; i++)cloned[i] = klass == 'String'
        ? this.charAt(start + i)
        : this[start + i];
      return cloned;
    }
  });
  $export($export.P + $export.F * (IObject != Object), 'Array', {
    join: function join(separator){
      return arrayJoin.call(IObject(this), separator === undefined ? ',' : separator);
    }
  });

  // 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
  $export($export.S, 'Array', {isArray: __webpack_require__(33)});

  var createArrayReduce = function(isRight){
    return function(callbackfn, memo){
      aFunction(callbackfn);
      var O      = IObject(this)
        , length = toLength(O.length)
        , index  = isRight ? length - 1 : 0
        , i      = isRight ? -1 : 1;
      if(arguments.length < 2)for(;;){
        if(index in O){
          memo = O[index];
          index += i;
          break;
        }
        index += i;
        if(isRight ? index < 0 : length <= index){
          throw TypeError('Reduce of empty array with no initial value');
        }
      }
      for(;isRight ? index >= 0 : length > index; index += i)if(index in O){
        memo = callbackfn(memo, O[index], index, this);
      }
      return memo;
    };
  };

  var methodize = function($fn){
    return function(arg1/*, arg2 = undefined */){
      return $fn(this, arg1, arguments[1]);
    };
  };

  $export($export.P, 'Array', {
    // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
    forEach: $.each = $.each || methodize(createArrayMethod(0)),
    // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
    map: methodize(createArrayMethod(1)),
    // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
    filter: methodize(createArrayMethod(2)),
    // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
    some: methodize(createArrayMethod(3)),
    // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
    every: methodize(createArrayMethod(4)),
    // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
    reduce: createArrayReduce(false),
    // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
    reduceRight: createArrayReduce(true),
    // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
    indexOf: methodize(arrayIndexOf),
    // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
    lastIndexOf: function(el, fromIndex /* = @[*-1] */){
      var O      = toIObject(this)
        , length = toLength(O.length)
        , index  = length - 1;
      if(arguments.length > 1)index = Math.min(index, toInteger(fromIndex));
      if(index < 0)index = toLength(length + index);
      for(;index >= 0; index--)if(index in O)if(O[index] === el)return index;
      return -1;
    }
  });

  // 20.3.3.1 / 15.9.4.4 Date.now()
  $export($export.S, 'Date', {now: function(){ return +new Date; }});

  var lz = function(num){
    return num > 9 ? num : '0' + num;
  };

  // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
  // PhantomJS / old WebKit has a broken implementations
  $export($export.P + $export.F * (fails(function(){
    return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
  }) || !fails(function(){
    new Date(NaN).toISOString();
  })), 'Date', {
    toISOString: function toISOString(){
      if(!isFinite(this))throw RangeError('Invalid time value');
      var d = this
        , y = d.getUTCFullYear()
        , m = d.getUTCMilliseconds()
        , s = y < 0 ? '-' : y > 9999 ? '+' : '';
      return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
        '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
        'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
        ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
    }
  });

/***/ },
/* 5 */
/***/ function(module, exports) {

  var $Object = Object;
  module.exports = {
    create:     $Object.create,
    getProto:   $Object.getPrototypeOf,
    isEnum:     {}.propertyIsEnumerable,
    getDesc:    $Object.getOwnPropertyDescriptor,
    setDesc:    $Object.defineProperty,
    setDescs:   $Object.defineProperties,
    getKeys:    $Object.keys,
    getNames:   $Object.getOwnPropertyNames,
    getSymbols: $Object.getOwnPropertySymbols,
    each:       [].forEach
  };

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

  var global    = __webpack_require__(7)
    , core      = __webpack_require__(8)
    , hide      = __webpack_require__(9)
    , redefine  = __webpack_require__(13)
    , ctx       = __webpack_require__(15)
    , PROTOTYPE = 'prototype';

  var $export = function(type, name, source){
    var IS_FORCED = type & $export.F
      , IS_GLOBAL = type & $export.G
      , IS_STATIC = type & $export.S
      , IS_PROTO  = type & $export.P
      , IS_BIND   = type & $export.B
      , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
      , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
      , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
      , key, own, out, exp;
    if(IS_GLOBAL)source = name;
    for(key in source){
      // contains in native
      own = !IS_FORCED && target && key in target;
      // export native or passed
      out = (own ? target : source)[key];
      // bind timers to global for call from export context
      exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
      // extend global
      if(target && !own)redefine(target, key, out);
      // export
      if(exports[key] != out)hide(exports, key, exp);
      if(IS_PROTO && expProto[key] != out)expProto[key] = out;
    }
  };
  global.core = core;
  // type bitmap
  $export.F = 1;  // forced
  $export.G = 2;  // global
  $export.S = 4;  // static
  $export.P = 8;  // proto
  $export.B = 16; // bind
  $export.W = 32; // wrap
  module.exports = $export;

/***/ },
/* 7 */
/***/ function(module, exports) {

  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global = module.exports = typeof window != 'undefined' && window.Math == Math
    ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
  if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 8 */
/***/ function(module, exports) {

  var core = module.exports = {version: '1.2.6'};
  if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

  var $          = __webpack_require__(5)
    , createDesc = __webpack_require__(10);
  module.exports = __webpack_require__(11) ? function(object, key, value){
    return $.setDesc(object, key, createDesc(1, value));
  } : function(object, key, value){
    object[key] = value;
    return object;
  };

/***/ },
/* 10 */
/***/ function(module, exports) {

  module.exports = function(bitmap, value){
    return {
      enumerable  : !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable    : !(bitmap & 4),
      value       : value
    };
  };

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

  // Thank's IE8 for his funny defineProperty
  module.exports = !__webpack_require__(12)(function(){
    return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
  });

/***/ },
/* 12 */
/***/ function(module, exports) {

  module.exports = function(exec){
    try {
      return !!exec();
    } catch(e){
      return true;
    }
  };

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

  // add fake Function#toString
  // for correct work wrapped methods / constructors with methods like LoDash isNative
  var global    = __webpack_require__(7)
    , hide      = __webpack_require__(9)
    , SRC       = __webpack_require__(14)('src')
    , TO_STRING = 'toString'
    , $toString = Function[TO_STRING]
    , TPL       = ('' + $toString).split(TO_STRING);

  __webpack_require__(8).inspectSource = function(it){
    return $toString.call(it);
  };

  (module.exports = function(O, key, val, safe){
    if(typeof val == 'function'){
      val.hasOwnProperty(SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
      val.hasOwnProperty('name') || hide(val, 'name', key);
    }
    if(O === global){
      O[key] = val;
    } else {
      if(!safe)delete O[key];
      hide(O, key, val);
    }
  })(Function.prototype, TO_STRING, function toString(){
    return typeof this == 'function' && this[SRC] || $toString.call(this);
  });

/***/ },
/* 14 */
/***/ function(module, exports) {

  var id = 0
    , px = Math.random();
  module.exports = function(key){
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

  // optional / simple context binding
  var aFunction = __webpack_require__(16);
  module.exports = function(fn, that, length){
    aFunction(fn);
    if(that === undefined)return fn;
    switch(length){
      case 1: return function(a){
        return fn.call(that, a);
      };
      case 2: return function(a, b){
        return fn.call(that, a, b);
      };
      case 3: return function(a, b, c){
        return fn.call(that, a, b, c);
      };
    }
    return function(/* ...args */){
      return fn.apply(that, arguments);
    };
  };

/***/ },
/* 16 */
/***/ function(module, exports) {

  module.exports = function(it){
    if(typeof it != 'function')throw TypeError(it + ' is not a function!');
    return it;
  };

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(7).document && document.documentElement;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

  var isObject = __webpack_require__(19)
    , document = __webpack_require__(7).document
    // in old IE typeof document.createElement is 'object'
    , is = isObject(document) && isObject(document.createElement);
  module.exports = function(it){
    return is ? document.createElement(it) : {};
  };

/***/ },
/* 19 */
/***/ function(module, exports) {

  module.exports = function(it){
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };

/***/ },
/* 20 */
/***/ function(module, exports) {

  var hasOwnProperty = {}.hasOwnProperty;
  module.exports = function(it, key){
    return hasOwnProperty.call(it, key);
  };

/***/ },
/* 21 */
/***/ function(module, exports) {

  var toString = {}.toString;

  module.exports = function(it){
    return toString.call(it).slice(8, -1);
  };

/***/ },
/* 22 */
/***/ function(module, exports) {

  // fast apply, http://jsperf.lnkit.com/fast-apply/5
  module.exports = function(fn, args, that){
    var un = that === undefined;
    switch(args.length){
      case 0: return un ? fn()
                        : fn.call(that);
      case 1: return un ? fn(args[0])
                        : fn.call(that, args[0]);
      case 2: return un ? fn(args[0], args[1])
                        : fn.call(that, args[0], args[1]);
      case 3: return un ? fn(args[0], args[1], args[2])
                        : fn.call(that, args[0], args[1], args[2]);
      case 4: return un ? fn(args[0], args[1], args[2], args[3])
                        : fn.call(that, args[0], args[1], args[2], args[3]);
    } return              fn.apply(that, args);
  };

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

  var isObject = __webpack_require__(19);
  module.exports = function(it){
    if(!isObject(it))throw TypeError(it + ' is not an object!');
    return it;
  };

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

  // 7.1.13 ToObject(argument)
  var defined = __webpack_require__(25);
  module.exports = function(it){
    return Object(defined(it));
  };

/***/ },
/* 25 */
/***/ function(module, exports) {

  // 7.2.1 RequireObjectCoercible(argument)
  module.exports = function(it){
    if(it == undefined)throw TypeError("Can't call method on  " + it);
    return it;
  };

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

  // to indexed object, toObject with fallback for non-array-like ES3 strings
  var IObject = __webpack_require__(27)
    , defined = __webpack_require__(25);
  module.exports = function(it){
    return IObject(defined(it));
  };

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

  // fallback for non-array-like ES3 and non-enumerable old V8 strings
  var cof = __webpack_require__(21);
  module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
    return cof(it) == 'String' ? it.split('') : Object(it);
  };

/***/ },
/* 28 */
/***/ function(module, exports) {

  // 7.1.4 ToInteger
  var ceil  = Math.ceil
    , floor = Math.floor;
  module.exports = function(it){
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

  var toInteger = __webpack_require__(28)
    , max       = Math.max
    , min       = Math.min;
  module.exports = function(index, length){
    index = toInteger(index);
    return index < 0 ? max(index + length, 0) : min(index, length);
  };

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

  // 7.1.15 ToLength
  var toInteger = __webpack_require__(28)
    , min       = Math.min;
  module.exports = function(it){
    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
  };

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

  // 0 -> Array#forEach
  // 1 -> Array#map
  // 2 -> Array#filter
  // 3 -> Array#some
  // 4 -> Array#every
  // 5 -> Array#find
  // 6 -> Array#findIndex
  var ctx      = __webpack_require__(15)
    , IObject  = __webpack_require__(27)
    , toObject = __webpack_require__(24)
    , toLength = __webpack_require__(30)
    , asc      = __webpack_require__(32);
  module.exports = function(TYPE){
    var IS_MAP        = TYPE == 1
      , IS_FILTER     = TYPE == 2
      , IS_SOME       = TYPE == 3
      , IS_EVERY      = TYPE == 4
      , IS_FIND_INDEX = TYPE == 6
      , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX;
    return function($this, callbackfn, that){
      var O      = toObject($this)
        , self   = IObject(O)
        , f      = ctx(callbackfn, that, 3)
        , length = toLength(self.length)
        , index  = 0
        , result = IS_MAP ? asc($this, length) : IS_FILTER ? asc($this, 0) : undefined
        , val, res;
      for(;length > index; index++)if(NO_HOLES || index in self){
        val = self[index];
        res = f(val, index, O);
        if(TYPE){
          if(IS_MAP)result[index] = res;            // map
          else if(res)switch(TYPE){
            case 3: return true;                    // some
            case 5: return val;                     // find
            case 6: return index;                   // findIndex
            case 2: result.push(val);               // filter
          } else if(IS_EVERY)return false;          // every
        }
      }
      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
    };
  };

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

  // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
  var isObject = __webpack_require__(19)
    , isArray  = __webpack_require__(33)
    , SPECIES  = __webpack_require__(34)('species');
  module.exports = function(original, length){
    var C;
    if(isArray(original)){
      C = original.constructor;
      // cross-realm fallback
      if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
      if(isObject(C)){
        C = C[SPECIES];
        if(C === null)C = undefined;
      }
    } return new (C === undefined ? Array : C)(length);
  };

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

  // 7.2.2 IsArray(argument)
  var cof = __webpack_require__(21);
  module.exports = Array.isArray || function(arg){
    return cof(arg) == 'Array';
  };

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

  var store  = __webpack_require__(35)('wks')
    , uid    = __webpack_require__(14)
    , Symbol = __webpack_require__(7).Symbol;
  module.exports = function(name){
    return store[name] || (store[name] =
      Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));
  };

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

  var global = __webpack_require__(7)
    , SHARED = '__core-js_shared__'
    , store  = global[SHARED] || (global[SHARED] = {});
  module.exports = function(key){
    return store[key] || (store[key] = {});
  };

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

  // false -> Array#indexOf
  // true  -> Array#includes
  var toIObject = __webpack_require__(26)
    , toLength  = __webpack_require__(30)
    , toIndex   = __webpack_require__(29);
  module.exports = function(IS_INCLUDES){
    return function($this, el, fromIndex){
      var O      = toIObject($this)
        , length = toLength(O.length)
        , index  = toIndex(fromIndex, length)
        , value;
      // Array#includes uses SameValueZero equality algorithm
      if(IS_INCLUDES && el != el)while(length > index){
        value = O[index++];
        if(value != value)return true;
      // Array#toIndex ignores holes, Array#includes - not
      } else for(;length > index; index++)if(IS_INCLUDES || index in O){
        if(O[index] === el)return IS_INCLUDES || index;
      } return !IS_INCLUDES && -1;
    };
  };

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // ECMAScript 6 symbols shim
  var $              = __webpack_require__(5)
    , global         = __webpack_require__(7)
    , has            = __webpack_require__(20)
    , DESCRIPTORS    = __webpack_require__(11)
    , $export        = __webpack_require__(6)
    , redefine       = __webpack_require__(13)
    , $fails         = __webpack_require__(12)
    , shared         = __webpack_require__(35)
    , setToStringTag = __webpack_require__(38)
    , uid            = __webpack_require__(14)
    , wks            = __webpack_require__(34)
    , keyOf          = __webpack_require__(39)
    , $names         = __webpack_require__(40)
    , enumKeys       = __webpack_require__(41)
    , isArray        = __webpack_require__(33)
    , anObject       = __webpack_require__(23)
    , toIObject      = __webpack_require__(26)
    , createDesc     = __webpack_require__(10)
    , getDesc        = $.getDesc
    , setDesc        = $.setDesc
    , _create        = $.create
    , getNames       = $names.get
    , $Symbol        = global.Symbol
    , $JSON          = global.JSON
    , _stringify     = $JSON && $JSON.stringify
    , setter         = false
    , HIDDEN         = wks('_hidden')
    , isEnum         = $.isEnum
    , SymbolRegistry = shared('symbol-registry')
    , AllSymbols     = shared('symbols')
    , useNative      = typeof $Symbol == 'function'
    , ObjectProto    = Object.prototype;

  // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
  var setSymbolDesc = DESCRIPTORS && $fails(function(){
    return _create(setDesc({}, 'a', {
      get: function(){ return setDesc(this, 'a', {value: 7}).a; }
    })).a != 7;
  }) ? function(it, key, D){
    var protoDesc = getDesc(ObjectProto, key);
    if(protoDesc)delete ObjectProto[key];
    setDesc(it, key, D);
    if(protoDesc && it !== ObjectProto)setDesc(ObjectProto, key, protoDesc);
  } : setDesc;

  var wrap = function(tag){
    var sym = AllSymbols[tag] = _create($Symbol.prototype);
    sym._k = tag;
    DESCRIPTORS && setter && setSymbolDesc(ObjectProto, tag, {
      configurable: true,
      set: function(value){
        if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
        setSymbolDesc(this, tag, createDesc(1, value));
      }
    });
    return sym;
  };

  var isSymbol = function(it){
    return typeof it == 'symbol';
  };

  var $defineProperty = function defineProperty(it, key, D){
    if(D && has(AllSymbols, key)){
      if(!D.enumerable){
        if(!has(it, HIDDEN))setDesc(it, HIDDEN, createDesc(1, {}));
        it[HIDDEN][key] = true;
      } else {
        if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
        D = _create(D, {enumerable: createDesc(0, false)});
      } return setSymbolDesc(it, key, D);
    } return setDesc(it, key, D);
  };
  var $defineProperties = function defineProperties(it, P){
    anObject(it);
    var keys = enumKeys(P = toIObject(P))
      , i    = 0
      , l = keys.length
      , key;
    while(l > i)$defineProperty(it, key = keys[i++], P[key]);
    return it;
  };
  var $create = function create(it, P){
    return P === undefined ? _create(it) : $defineProperties(_create(it), P);
  };
  var $propertyIsEnumerable = function propertyIsEnumerable(key){
    var E = isEnum.call(this, key);
    return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key]
      ? E : true;
  };
  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
    var D = getDesc(it = toIObject(it), key);
    if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
    return D;
  };
  var $getOwnPropertyNames = function getOwnPropertyNames(it){
    var names  = getNames(toIObject(it))
      , result = []
      , i      = 0
      , key;
    while(names.length > i)if(!has(AllSymbols, key = names[i++]) && key != HIDDEN)result.push(key);
    return result;
  };
  var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
    var names  = getNames(toIObject(it))
      , result = []
      , i      = 0
      , key;
    while(names.length > i)if(has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);
    return result;
  };
  var $stringify = function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , $$   = arguments
      , replacer, $replacer;
    while($$.length > i)args.push($$[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  };
  var buggyJSON = $fails(function(){
    var S = $Symbol();
    // MS Edge converts symbol values to JSON as {}
    // WebKit converts symbol values to JSON as null
    // V8 throws on boxed symbols
    return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
  });

  // 19.4.1.1 Symbol([description])
  if(!useNative){
    $Symbol = function Symbol(){
      if(isSymbol(this))throw TypeError('Symbol is not a constructor');
      return wrap(uid(arguments.length > 0 ? arguments[0] : undefined));
    };
    redefine($Symbol.prototype, 'toString', function toString(){
      return this._k;
    });

    isSymbol = function(it){
      return it instanceof $Symbol;
    };

    $.create     = $create;
    $.isEnum     = $propertyIsEnumerable;
    $.getDesc    = $getOwnPropertyDescriptor;
    $.setDesc    = $defineProperty;
    $.setDescs   = $defineProperties;
    $.getNames   = $names.get = $getOwnPropertyNames;
    $.getSymbols = $getOwnPropertySymbols;

    if(DESCRIPTORS && !__webpack_require__(42)){
      redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
    }
  }

  var symbolStatics = {
    // 19.4.2.1 Symbol.for(key)
    'for': function(key){
      return has(SymbolRegistry, key += '')
        ? SymbolRegistry[key]
        : SymbolRegistry[key] = $Symbol(key);
    },
    // 19.4.2.5 Symbol.keyFor(sym)
    keyFor: function keyFor(key){
      return keyOf(SymbolRegistry, key);
    },
    useSetter: function(){ setter = true; },
    useSimple: function(){ setter = false; }
  };
  // 19.4.2.2 Symbol.hasInstance
  // 19.4.2.3 Symbol.isConcatSpreadable
  // 19.4.2.4 Symbol.iterator
  // 19.4.2.6 Symbol.match
  // 19.4.2.8 Symbol.replace
  // 19.4.2.9 Symbol.search
  // 19.4.2.10 Symbol.species
  // 19.4.2.11 Symbol.split
  // 19.4.2.12 Symbol.toPrimitive
  // 19.4.2.13 Symbol.toStringTag
  // 19.4.2.14 Symbol.unscopables
  $.each.call((
    'hasInstance,isConcatSpreadable,iterator,match,replace,search,' +
    'species,split,toPrimitive,toStringTag,unscopables'
  ).split(','), function(it){
    var sym = wks(it);
    symbolStatics[it] = useNative ? sym : wrap(sym);
  });

  setter = true;

  $export($export.G + $export.W, {Symbol: $Symbol});

  $export($export.S, 'Symbol', symbolStatics);

  $export($export.S + $export.F * !useNative, 'Object', {
    // 19.1.2.2 Object.create(O [, Properties])
    create: $create,
    // 19.1.2.4 Object.defineProperty(O, P, Attributes)
    defineProperty: $defineProperty,
    // 19.1.2.3 Object.defineProperties(O, Properties)
    defineProperties: $defineProperties,
    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
    // 19.1.2.7 Object.getOwnPropertyNames(O)
    getOwnPropertyNames: $getOwnPropertyNames,
    // 19.1.2.8 Object.getOwnPropertySymbols(O)
    getOwnPropertySymbols: $getOwnPropertySymbols
  });

  // 24.3.2 JSON.stringify(value [, replacer [, space]])
  $JSON && $export($export.S + $export.F * (!useNative || buggyJSON), 'JSON', {stringify: $stringify});

  // 19.4.3.5 Symbol.prototype[@@toStringTag]
  setToStringTag($Symbol, 'Symbol');
  // 20.2.1.9 Math[@@toStringTag]
  setToStringTag(Math, 'Math', true);
  // 24.3.3 JSON[@@toStringTag]
  setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

  var def = __webpack_require__(5).setDesc
    , has = __webpack_require__(20)
    , TAG = __webpack_require__(34)('toStringTag');

  module.exports = function(it, tag, stat){
    if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
  };

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

  var $         = __webpack_require__(5)
    , toIObject = __webpack_require__(26);
  module.exports = function(object, el){
    var O      = toIObject(object)
      , keys   = $.getKeys(O)
      , length = keys.length
      , index  = 0
      , key;
    while(length > index)if(O[key = keys[index++]] === el)return key;
  };

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

  // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
  var toIObject = __webpack_require__(26)
    , getNames  = __webpack_require__(5).getNames
    , toString  = {}.toString;

  var windowNames = typeof window == 'object' && Object.getOwnPropertyNames
    ? Object.getOwnPropertyNames(window) : [];

  var getWindowNames = function(it){
    try {
      return getNames(it);
    } catch(e){
      return windowNames.slice();
    }
  };

  module.exports.get = function getOwnPropertyNames(it){
    if(windowNames && toString.call(it) == '[object Window]')return getWindowNames(it);
    return getNames(toIObject(it));
  };

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

  // all enumerable object keys, includes symbols
  var $ = __webpack_require__(5);
  module.exports = function(it){
    var keys       = $.getKeys(it)
      , getSymbols = $.getSymbols;
    if(getSymbols){
      var symbols = getSymbols(it)
        , isEnum  = $.isEnum
        , i       = 0
        , key;
      while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))keys.push(key);
    }
    return keys;
  };

/***/ },
/* 42 */
/***/ function(module, exports) {

  module.exports = false;

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.3.1 Object.assign(target, source)
  var $export = __webpack_require__(6);

  $export($export.S + $export.F, 'Object', {assign: __webpack_require__(44)});

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.1 Object.assign(target, source, ...)
  var $        = __webpack_require__(5)
    , toObject = __webpack_require__(24)
    , IObject  = __webpack_require__(27);

  // should work with symbols and should have deterministic property order (V8 bug)
  module.exports = __webpack_require__(12)(function(){
    var a = Object.assign
      , A = {}
      , B = {}
      , S = Symbol()
      , K = 'abcdefghijklmnopqrst';
    A[S] = 7;
    K.split('').forEach(function(k){ B[k] = k; });
    return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;
  }) ? function assign(target, source){ // eslint-disable-line no-unused-vars
    var T     = toObject(target)
      , $$    = arguments
      , $$len = $$.length
      , index = 1
      , getKeys    = $.getKeys
      , getSymbols = $.getSymbols
      , isEnum     = $.isEnum;
    while($$len > index){
      var S      = IObject($$[index++])
        , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
        , length = keys.length
        , j      = 0
        , key;
      while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
    }
    return T;
  } : Object.assign;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.3.10 Object.is(value1, value2)
  var $export = __webpack_require__(6);
  $export($export.S, 'Object', {is: __webpack_require__(46)});

/***/ },
/* 46 */
/***/ function(module, exports) {

  // 7.2.9 SameValue(x, y)
  module.exports = Object.is || function is(x, y){
    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
  };

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.3.19 Object.setPrototypeOf(O, proto)
  var $export = __webpack_require__(6);
  $export($export.S, 'Object', {setPrototypeOf: __webpack_require__(48).set});

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

  // Works with __proto__ only. Old v8 can't work with null proto objects.
  /* eslint-disable no-proto */
  var getDesc  = __webpack_require__(5).getDesc
    , isObject = __webpack_require__(19)
    , anObject = __webpack_require__(23);
  var check = function(O, proto){
    anObject(O);
    if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
  };
  module.exports = {
    set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
      function(test, buggy, set){
        try {
          set = __webpack_require__(15)(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
          set(test, []);
          buggy = !(test instanceof Array);
        } catch(e){ buggy = true; }
        return function setPrototypeOf(O, proto){
          check(O, proto);
          if(buggy)O.__proto__ = proto;
          else set(O, proto);
          return O;
        };
      }({}, false) : undefined),
    check: check
  };

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // 19.1.3.6 Object.prototype.toString()
  var classof = __webpack_require__(50)
    , test    = {};
  test[__webpack_require__(34)('toStringTag')] = 'z';
  if(test + '' != '[object z]'){
    __webpack_require__(13)(Object.prototype, 'toString', function toString(){
      return '[object ' + classof(this) + ']';
    }, true);
  }

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

  // getting tag from 19.1.3.6 Object.prototype.toString()
  var cof = __webpack_require__(21)
    , TAG = __webpack_require__(34)('toStringTag')
    // ES3 wrong here
    , ARG = cof(function(){ return arguments; }()) == 'Arguments';

  module.exports = function(it){
    var O, T, B;
    return it === undefined ? 'Undefined' : it === null ? 'Null'
      // @@toStringTag case
      : typeof (T = (O = Object(it))[TAG]) == 'string' ? T
      // builtinTag case
      : ARG ? cof(O)
      // ES3 arguments fallback
      : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.5 Object.freeze(O)
  var isObject = __webpack_require__(19);

  __webpack_require__(52)('freeze', function($freeze){
    return function freeze(it){
      return $freeze && isObject(it) ? $freeze(it) : it;
    };
  });

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

  // most Object methods by ES6 should accept primitives
  var $export = __webpack_require__(6)
    , core    = __webpack_require__(8)
    , fails   = __webpack_require__(12);
  module.exports = function(KEY, exec){
    var fn  = (core.Object || {})[KEY] || Object[KEY]
      , exp = {};
    exp[KEY] = exec(fn);
    $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
  };

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.17 Object.seal(O)
  var isObject = __webpack_require__(19);

  __webpack_require__(52)('seal', function($seal){
    return function seal(it){
      return $seal && isObject(it) ? $seal(it) : it;
    };
  });

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.15 Object.preventExtensions(O)
  var isObject = __webpack_require__(19);

  __webpack_require__(52)('preventExtensions', function($preventExtensions){
    return function preventExtensions(it){
      return $preventExtensions && isObject(it) ? $preventExtensions(it) : it;
    };
  });

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.12 Object.isFrozen(O)
  var isObject = __webpack_require__(19);

  __webpack_require__(52)('isFrozen', function($isFrozen){
    return function isFrozen(it){
      return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
    };
  });

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.13 Object.isSealed(O)
  var isObject = __webpack_require__(19);

  __webpack_require__(52)('isSealed', function($isSealed){
    return function isSealed(it){
      return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
    };
  });

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.11 Object.isExtensible(O)
  var isObject = __webpack_require__(19);

  __webpack_require__(52)('isExtensible', function($isExtensible){
    return function isExtensible(it){
      return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
    };
  });

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  var toIObject = __webpack_require__(26);

  __webpack_require__(52)('getOwnPropertyDescriptor', function($getOwnPropertyDescriptor){
    return function getOwnPropertyDescriptor(it, key){
      return $getOwnPropertyDescriptor(toIObject(it), key);
    };
  });

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.9 Object.getPrototypeOf(O)
  var toObject = __webpack_require__(24);

  __webpack_require__(52)('getPrototypeOf', function($getPrototypeOf){
    return function getPrototypeOf(it){
      return $getPrototypeOf(toObject(it));
    };
  });

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.14 Object.keys(O)
  var toObject = __webpack_require__(24);

  __webpack_require__(52)('keys', function($keys){
    return function keys(it){
      return $keys(toObject(it));
    };
  });

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.7 Object.getOwnPropertyNames(O)
  __webpack_require__(52)('getOwnPropertyNames', function(){
    return __webpack_require__(40).get;
  });

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

  var setDesc    = __webpack_require__(5).setDesc
    , createDesc = __webpack_require__(10)
    , has        = __webpack_require__(20)
    , FProto     = Function.prototype
    , nameRE     = /^\s*function ([^ (]*)/
    , NAME       = 'name';
  // 19.2.4.2 name
  NAME in FProto || __webpack_require__(11) && setDesc(FProto, NAME, {
    configurable: true,
    get: function(){
      var match = ('' + this).match(nameRE)
        , name  = match ? match[1] : '';
      has(this, NAME) || setDesc(this, NAME, createDesc(5, name));
      return name;
    }
  });

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $             = __webpack_require__(5)
    , isObject      = __webpack_require__(19)
    , HAS_INSTANCE  = __webpack_require__(34)('hasInstance')
    , FunctionProto = Function.prototype;
  // 19.2.3.6 Function.prototype[@@hasInstance](V)
  if(!(HAS_INSTANCE in FunctionProto))$.setDesc(FunctionProto, HAS_INSTANCE, {value: function(O){
    if(typeof this != 'function' || !isObject(O))return false;
    if(!isObject(this.prototype))return O instanceof this;
    // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
    while(O = $.getProto(O))if(this.prototype === O)return true;
    return false;
  }});

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $           = __webpack_require__(5)
    , global      = __webpack_require__(7)
    , has         = __webpack_require__(20)
    , cof         = __webpack_require__(21)
    , toPrimitive = __webpack_require__(65)
    , fails       = __webpack_require__(12)
    , $trim       = __webpack_require__(66).trim
    , NUMBER      = 'Number'
    , $Number     = global[NUMBER]
    , Base        = $Number
    , proto       = $Number.prototype
    // Opera ~12 has broken Object#toString
    , BROKEN_COF  = cof($.create(proto)) == NUMBER
    , TRIM        = 'trim' in String.prototype;

  // 7.1.3 ToNumber(argument)
  var toNumber = function(argument){
    var it = toPrimitive(argument, false);
    if(typeof it == 'string' && it.length > 2){
      it = TRIM ? it.trim() : $trim(it, 3);
      var first = it.charCodeAt(0)
        , third, radix, maxCode;
      if(first === 43 || first === 45){
        third = it.charCodeAt(2);
        if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
      } else if(first === 48){
        switch(it.charCodeAt(1)){
          case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
          case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
          default : return +it;
        }
        for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
          code = digits.charCodeAt(i);
          // parseInt parses a string to a first unavailable symbol
          // but ToNumber should return NaN if a string contains unavailable symbols
          if(code < 48 || code > maxCode)return NaN;
        } return parseInt(digits, radix);
      }
    } return +it;
  };

  if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
    $Number = function Number(value){
      var it = arguments.length < 1 ? 0 : value
        , that = this;
      return that instanceof $Number
        // check on 1..constructor(foo) case
        && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
          ? new Base(toNumber(it)) : toNumber(it);
    };
    $.each.call(__webpack_require__(11) ? $.getNames(Base) : (
      // ES3:
      'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
      // ES6 (in case, if modules with ES6 Number statics required before):
      'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
      'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
    ).split(','), function(key){
      if(has(Base, key) && !has($Number, key)){
        $.setDesc($Number, key, $.getDesc(Base, key));
      }
    });
    $Number.prototype = proto;
    proto.constructor = $Number;
    __webpack_require__(13)(global, NUMBER, $Number);
  }

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

  // 7.1.1 ToPrimitive(input [, PreferredType])
  var isObject = __webpack_require__(19);
  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string
  module.exports = function(it, S){
    if(!isObject(it))return it;
    var fn, val;
    if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
    if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
    if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
    throw TypeError("Can't convert object to primitive value");
  };

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

  var $export = __webpack_require__(6)
    , defined = __webpack_require__(25)
    , fails   = __webpack_require__(12)
    , spaces  = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
        '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF'
    , space   = '[' + spaces + ']'
    , non     = '\u200b\u0085'
    , ltrim   = RegExp('^' + space + space + '*')
    , rtrim   = RegExp(space + space + '*$');

  var exporter = function(KEY, exec){
    var exp  = {};
    exp[KEY] = exec(trim);
    $export($export.P + $export.F * fails(function(){
      return !!spaces[KEY]() || non[KEY]() != non;
    }), 'String', exp);
  };

  // 1 -> String#trimLeft
  // 2 -> String#trimRight
  // 3 -> String#trim
  var trim = exporter.trim = function(string, TYPE){
    string = String(defined(string));
    if(TYPE & 1)string = string.replace(ltrim, '');
    if(TYPE & 2)string = string.replace(rtrim, '');
    return string;
  };

  module.exports = exporter;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

  // 20.1.2.1 Number.EPSILON
  var $export = __webpack_require__(6);

  $export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

  // 20.1.2.2 Number.isFinite(number)
  var $export   = __webpack_require__(6)
    , _isFinite = __webpack_require__(7).isFinite;

  $export($export.S, 'Number', {
    isFinite: function isFinite(it){
      return typeof it == 'number' && _isFinite(it);
    }
  });

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

  // 20.1.2.3 Number.isInteger(number)
  var $export = __webpack_require__(6);

  $export($export.S, 'Number', {isInteger: __webpack_require__(70)});

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

  // 20.1.2.3 Number.isInteger(number)
  var isObject = __webpack_require__(19)
    , floor    = Math.floor;
  module.exports = function isInteger(it){
    return !isObject(it) && isFinite(it) && floor(it) === it;
  };

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

  // 20.1.2.4 Number.isNaN(number)
  var $export = __webpack_require__(6);

  $export($export.S, 'Number', {
    isNaN: function isNaN(number){
      return number != number;
    }
  });

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

  // 20.1.2.5 Number.isSafeInteger(number)
  var $export   = __webpack_require__(6)
    , isInteger = __webpack_require__(70)
    , abs       = Math.abs;

  $export($export.S, 'Number', {
    isSafeInteger: function isSafeInteger(number){
      return isInteger(number) && abs(number) <= 0x1fffffffffffff;
    }
  });

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

  // 20.1.2.6 Number.MAX_SAFE_INTEGER
  var $export = __webpack_require__(6);

  $export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

  // 20.1.2.10 Number.MIN_SAFE_INTEGER
  var $export = __webpack_require__(6);

  $export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

  // 20.1.2.12 Number.parseFloat(string)
  var $export = __webpack_require__(6);

  $export($export.S, 'Number', {parseFloat: parseFloat});

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

  // 20.1.2.13 Number.parseInt(string, radix)
  var $export = __webpack_require__(6);

  $export($export.S, 'Number', {parseInt: parseInt});

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.3 Math.acosh(x)
  var $export = __webpack_require__(6)
    , log1p   = __webpack_require__(78)
    , sqrt    = Math.sqrt
    , $acosh  = Math.acosh;

  // V8 bug https://code.google.com/p/v8/issues/detail?id=3509
  $export($export.S + $export.F * !($acosh && Math.floor($acosh(Number.MAX_VALUE)) == 710), 'Math', {
    acosh: function acosh(x){
      return (x = +x) < 1 ? NaN : x > 94906265.62425156
        ? Math.log(x) + Math.LN2
        : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
    }
  });

/***/ },
/* 78 */
/***/ function(module, exports) {

  // 20.2.2.20 Math.log1p(x)
  module.exports = Math.log1p || function log1p(x){
    return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
  };

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.5 Math.asinh(x)
  var $export = __webpack_require__(6);

  function asinh(x){
    return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
  }

  $export($export.S, 'Math', {asinh: asinh});

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.7 Math.atanh(x)
  var $export = __webpack_require__(6);

  $export($export.S, 'Math', {
    atanh: function atanh(x){
      return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
    }
  });

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.9 Math.cbrt(x)
  var $export = __webpack_require__(6)
    , sign    = __webpack_require__(82);

  $export($export.S, 'Math', {
    cbrt: function cbrt(x){
      return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
    }
  });

/***/ },
/* 82 */
/***/ function(module, exports) {

  // 20.2.2.28 Math.sign(x)
  module.exports = Math.sign || function sign(x){
    return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
  };

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.11 Math.clz32(x)
  var $export = __webpack_require__(6);

  $export($export.S, 'Math', {
    clz32: function clz32(x){
      return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
    }
  });

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.12 Math.cosh(x)
  var $export = __webpack_require__(6)
    , exp     = Math.exp;

  $export($export.S, 'Math', {
    cosh: function cosh(x){
      return (exp(x = +x) + exp(-x)) / 2;
    }
  });

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.14 Math.expm1(x)
  var $export = __webpack_require__(6);

  $export($export.S, 'Math', {expm1: __webpack_require__(86)});

/***/ },
/* 86 */
/***/ function(module, exports) {

  // 20.2.2.14 Math.expm1(x)
  module.exports = Math.expm1 || function expm1(x){
    return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
  };

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.16 Math.fround(x)
  var $export   = __webpack_require__(6)
    , sign      = __webpack_require__(82)
    , pow       = Math.pow
    , EPSILON   = pow(2, -52)
    , EPSILON32 = pow(2, -23)
    , MAX32     = pow(2, 127) * (2 - EPSILON32)
    , MIN32     = pow(2, -126);

  var roundTiesToEven = function(n){
    return n + 1 / EPSILON - 1 / EPSILON;
  };


  $export($export.S, 'Math', {
    fround: function fround(x){
      var $abs  = Math.abs(x)
        , $sign = sign(x)
        , a, result;
      if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
      a = (1 + EPSILON32 / EPSILON) * $abs;
      result = a - (a - $abs);
      if(result > MAX32 || result != result)return $sign * Infinity;
      return $sign * result;
    }
  });

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
  var $export = __webpack_require__(6)
    , abs     = Math.abs;

  $export($export.S, 'Math', {
    hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
      var sum   = 0
        , i     = 0
        , $$    = arguments
        , $$len = $$.length
        , larg  = 0
        , arg, div;
      while(i < $$len){
        arg = abs($$[i++]);
        if(larg < arg){
          div  = larg / arg;
          sum  = sum * div * div + 1;
          larg = arg;
        } else if(arg > 0){
          div  = arg / larg;
          sum += div * div;
        } else sum += arg;
      }
      return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
    }
  });

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.18 Math.imul(x, y)
  var $export = __webpack_require__(6)
    , $imul   = Math.imul;

  // some WebKit versions fails with big numbers, some has wrong arity
  $export($export.S + $export.F * __webpack_require__(12)(function(){
    return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
  }), 'Math', {
    imul: function imul(x, y){
      var UINT16 = 0xffff
        , xn = +x
        , yn = +y
        , xl = UINT16 & xn
        , yl = UINT16 & yn;
      return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
    }
  });

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.21 Math.log10(x)
  var $export = __webpack_require__(6);

  $export($export.S, 'Math', {
    log10: function log10(x){
      return Math.log(x) / Math.LN10;
    }
  });

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.20 Math.log1p(x)
  var $export = __webpack_require__(6);

  $export($export.S, 'Math', {log1p: __webpack_require__(78)});

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.22 Math.log2(x)
  var $export = __webpack_require__(6);

  $export($export.S, 'Math', {
    log2: function log2(x){
      return Math.log(x) / Math.LN2;
    }
  });

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.28 Math.sign(x)
  var $export = __webpack_require__(6);

  $export($export.S, 'Math', {sign: __webpack_require__(82)});

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.30 Math.sinh(x)
  var $export = __webpack_require__(6)
    , expm1   = __webpack_require__(86)
    , exp     = Math.exp;

  // V8 near Chromium 38 has a problem with very small numbers
  $export($export.S + $export.F * __webpack_require__(12)(function(){
    return !Math.sinh(-2e-17) != -2e-17;
  }), 'Math', {
    sinh: function sinh(x){
      return Math.abs(x = +x) < 1
        ? (expm1(x) - expm1(-x)) / 2
        : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
    }
  });

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.33 Math.tanh(x)
  var $export = __webpack_require__(6)
    , expm1   = __webpack_require__(86)
    , exp     = Math.exp;

  $export($export.S, 'Math', {
    tanh: function tanh(x){
      var a = expm1(x = +x)
        , b = expm1(-x);
      return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
    }
  });

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

  // 20.2.2.34 Math.trunc(x)
  var $export = __webpack_require__(6);

  $export($export.S, 'Math', {
    trunc: function trunc(it){
      return (it > 0 ? Math.floor : Math.ceil)(it);
    }
  });

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

  var $export        = __webpack_require__(6)
    , toIndex        = __webpack_require__(29)
    , fromCharCode   = String.fromCharCode
    , $fromCodePoint = String.fromCodePoint;

  // length should be 1, old FF problem
  $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
    // 21.1.2.2 String.fromCodePoint(...codePoints)
    fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
      var res   = []
        , $$    = arguments
        , $$len = $$.length
        , i     = 0
        , code;
      while($$len > i){
        code = +$$[i++];
        if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
        res.push(code < 0x10000
          ? fromCharCode(code)
          : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
        );
      } return res.join('');
    }
  });

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

  var $export   = __webpack_require__(6)
    , toIObject = __webpack_require__(26)
    , toLength  = __webpack_require__(30);

  $export($export.S, 'String', {
    // 21.1.2.4 String.raw(callSite, ...substitutions)
    raw: function raw(callSite){
      var tpl   = toIObject(callSite.raw)
        , len   = toLength(tpl.length)
        , $$    = arguments
        , $$len = $$.length
        , res   = []
        , i     = 0;
      while(len > i){
        res.push(String(tpl[i++]));
        if(i < $$len)res.push(String($$[i]));
      } return res.join('');
    }
  });

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // 21.1.3.25 String.prototype.trim()
  __webpack_require__(66)('trim', function($trim){
    return function trim(){
      return $trim(this, 3);
    };
  });

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $at  = __webpack_require__(101)(true);

  // 21.1.3.27 String.prototype[@@iterator]()
  __webpack_require__(102)(String, 'String', function(iterated){
    this._t = String(iterated); // target
    this._i = 0;                // next index
  // 21.1.5.2.1 %StringIteratorPrototype%.next()
  }, function(){
    var O     = this._t
      , index = this._i
      , point;
    if(index >= O.length)return {value: undefined, done: true};
    point = $at(O, index);
    this._i += point.length;
    return {value: point, done: false};
  });

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

  var toInteger = __webpack_require__(28)
    , defined   = __webpack_require__(25);
  // true  -> String#at
  // false -> String#codePointAt
  module.exports = function(TO_STRING){
    return function(that, pos){
      var s = String(defined(that))
        , i = toInteger(pos)
        , l = s.length
        , a, b;
      if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
        ? TO_STRING ? s.charAt(i) : a
        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var LIBRARY        = __webpack_require__(42)
    , $export        = __webpack_require__(6)
    , redefine       = __webpack_require__(13)
    , hide           = __webpack_require__(9)
    , has            = __webpack_require__(20)
    , Iterators      = __webpack_require__(103)
    , $iterCreate    = __webpack_require__(104)
    , setToStringTag = __webpack_require__(38)
    , getProto       = __webpack_require__(5).getProto
    , ITERATOR       = __webpack_require__(34)('iterator')
    , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
    , FF_ITERATOR    = '@@iterator'
    , KEYS           = 'keys'
    , VALUES         = 'values';

  var returnThis = function(){ return this; };

  module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
    $iterCreate(Constructor, NAME, next);
    var getMethod = function(kind){
      if(!BUGGY && kind in proto)return proto[kind];
      switch(kind){
        case KEYS: return function keys(){ return new Constructor(this, kind); };
        case VALUES: return function values(){ return new Constructor(this, kind); };
      } return function entries(){ return new Constructor(this, kind); };
    };
    var TAG        = NAME + ' Iterator'
      , DEF_VALUES = DEFAULT == VALUES
      , VALUES_BUG = false
      , proto      = Base.prototype
      , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
      , $default   = $native || getMethod(DEFAULT)
      , methods, key;
    // Fix native
    if($native){
      var IteratorPrototype = getProto($default.call(new Base));
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // FF fix
      if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
      // fix Array#{values, @@iterator}.name in V8 / FF
      if(DEF_VALUES && $native.name !== VALUES){
        VALUES_BUG = true;
        $default = function values(){ return $native.call(this); };
      }
    }
    // Define iterator
    if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
      hide(proto, ITERATOR, $default);
    }
    // Plug for library
    Iterators[NAME] = $default;
    Iterators[TAG]  = returnThis;
    if(DEFAULT){
      methods = {
        values:  DEF_VALUES  ? $default : getMethod(VALUES),
        keys:    IS_SET      ? $default : getMethod(KEYS),
        entries: !DEF_VALUES ? $default : getMethod('entries')
      };
      if(FORCED)for(key in methods){
        if(!(key in proto))redefine(proto, key, methods[key]);
      } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }
    return methods;
  };

/***/ },
/* 103 */
/***/ function(module, exports) {

  module.exports = {};

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $              = __webpack_require__(5)
    , descriptor     = __webpack_require__(10)
    , setToStringTag = __webpack_require__(38)
    , IteratorPrototype = {};

  // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
  __webpack_require__(9)(IteratorPrototype, __webpack_require__(34)('iterator'), function(){ return this; });

  module.exports = function(Constructor, NAME, next){
    Constructor.prototype = $.create(IteratorPrototype, {next: descriptor(1, next)});
    setToStringTag(Constructor, NAME + ' Iterator');
  };

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export = __webpack_require__(6)
    , $at     = __webpack_require__(101)(false);
  $export($export.P, 'String', {
    // 21.1.3.3 String.prototype.codePointAt(pos)
    codePointAt: function codePointAt(pos){
      return $at(this, pos);
    }
  });

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

  // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
  'use strict';
  var $export   = __webpack_require__(6)
    , toLength  = __webpack_require__(30)
    , context   = __webpack_require__(107)
    , ENDS_WITH = 'endsWith'
    , $endsWith = ''[ENDS_WITH];

  $export($export.P + $export.F * __webpack_require__(109)(ENDS_WITH), 'String', {
    endsWith: function endsWith(searchString /*, endPosition = @length */){
      var that = context(this, searchString, ENDS_WITH)
        , $$   = arguments
        , endPosition = $$.length > 1 ? $$[1] : undefined
        , len    = toLength(that.length)
        , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
        , search = String(searchString);
      return $endsWith
        ? $endsWith.call(that, search, end)
        : that.slice(end - search.length, end) === search;
    }
  });

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

  // helper for String#{startsWith, endsWith, includes}
  var isRegExp = __webpack_require__(108)
    , defined  = __webpack_require__(25);

  module.exports = function(that, searchString, NAME){
    if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
    return String(defined(that));
  };

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

  // 7.2.8 IsRegExp(argument)
  var isObject = __webpack_require__(19)
    , cof      = __webpack_require__(21)
    , MATCH    = __webpack_require__(34)('match');
  module.exports = function(it){
    var isRegExp;
    return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
  };

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

  var MATCH = __webpack_require__(34)('match');
  module.exports = function(KEY){
    var re = /./;
    try {
      '/./'[KEY](re);
    } catch(e){
      try {
        re[MATCH] = false;
        return !'/./'[KEY](re);
      } catch(f){ /* empty */ }
    } return true;
  };

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

  // 21.1.3.7 String.prototype.includes(searchString, position = 0)
  'use strict';
  var $export  = __webpack_require__(6)
    , context  = __webpack_require__(107)
    , INCLUDES = 'includes';

  $export($export.P + $export.F * __webpack_require__(109)(INCLUDES), 'String', {
    includes: function includes(searchString /*, position = 0 */){
      return !!~context(this, searchString, INCLUDES)
        .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

  var $export = __webpack_require__(6);

  $export($export.P, 'String', {
    // 21.1.3.13 String.prototype.repeat(count)
    repeat: __webpack_require__(112)
  });

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var toInteger = __webpack_require__(28)
    , defined   = __webpack_require__(25);

  module.exports = function repeat(count){
    var str = String(defined(this))
      , res = ''
      , n   = toInteger(count);
    if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
    for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
    return res;
  };

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

  // 21.1.3.18 String.prototype.startsWith(searchString [, position ])
  'use strict';
  var $export     = __webpack_require__(6)
    , toLength    = __webpack_require__(30)
    , context     = __webpack_require__(107)
    , STARTS_WITH = 'startsWith'
    , $startsWith = ''[STARTS_WITH];

  $export($export.P + $export.F * __webpack_require__(109)(STARTS_WITH), 'String', {
    startsWith: function startsWith(searchString /*, position = 0 */){
      var that   = context(this, searchString, STARTS_WITH)
        , $$     = arguments
        , index  = toLength(Math.min($$.length > 1 ? $$[1] : undefined, that.length))
        , search = String(searchString);
      return $startsWith
        ? $startsWith.call(that, search, index)
        : that.slice(index, index + search.length) === search;
    }
  });

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var ctx         = __webpack_require__(15)
    , $export     = __webpack_require__(6)
    , toObject    = __webpack_require__(24)
    , call        = __webpack_require__(115)
    , isArrayIter = __webpack_require__(116)
    , toLength    = __webpack_require__(30)
    , getIterFn   = __webpack_require__(117);
  $export($export.S + $export.F * !__webpack_require__(118)(function(iter){ Array.from(iter); }), 'Array', {
    // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
    from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
      var O       = toObject(arrayLike)
        , C       = typeof this == 'function' ? this : Array
        , $$      = arguments
        , $$len   = $$.length
        , mapfn   = $$len > 1 ? $$[1] : undefined
        , mapping = mapfn !== undefined
        , index   = 0
        , iterFn  = getIterFn(O)
        , length, result, step, iterator;
      if(mapping)mapfn = ctx(mapfn, $$len > 2 ? $$[2] : undefined, 2);
      // if object isn't iterable or it's array with default iterator - use simple case
      if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
        for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
          result[index] = mapping ? call(iterator, mapfn, [step.value, index], true) : step.value;
        }
      } else {
        length = toLength(O.length);
        for(result = new C(length); length > index; index++){
          result[index] = mapping ? mapfn(O[index], index) : O[index];
        }
      }
      result.length = index;
      return result;
    }
  });


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

  // call something on iterator step with safe closing on error
  var anObject = __webpack_require__(23);
  module.exports = function(iterator, fn, value, entries){
    try {
      return entries ? fn(anObject(value)[0], value[1]) : fn(value);
    // 7.4.6 IteratorClose(iterator, completion)
    } catch(e){
      var ret = iterator['return'];
      if(ret !== undefined)anObject(ret.call(iterator));
      throw e;
    }
  };

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

  // check on default Array iterator
  var Iterators  = __webpack_require__(103)
    , ITERATOR   = __webpack_require__(34)('iterator')
    , ArrayProto = Array.prototype;

  module.exports = function(it){
    return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
  };

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

  var classof   = __webpack_require__(50)
    , ITERATOR  = __webpack_require__(34)('iterator')
    , Iterators = __webpack_require__(103);
  module.exports = __webpack_require__(8).getIteratorMethod = function(it){
    if(it != undefined)return it[ITERATOR]
      || it['@@iterator']
      || Iterators[classof(it)];
  };

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

  var ITERATOR     = __webpack_require__(34)('iterator')
    , SAFE_CLOSING = false;

  try {
    var riter = [7][ITERATOR]();
    riter['return'] = function(){ SAFE_CLOSING = true; };
    Array.from(riter, function(){ throw 2; });
  } catch(e){ /* empty */ }

  module.exports = function(exec, skipClosing){
    if(!skipClosing && !SAFE_CLOSING)return false;
    var safe = false;
    try {
      var arr  = [7]
        , iter = arr[ITERATOR]();
      iter.next = function(){ safe = true; };
      arr[ITERATOR] = function(){ return iter; };
      exec(arr);
    } catch(e){ /* empty */ }
    return safe;
  };

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export = __webpack_require__(6);

  // WebKit Array.of isn't generic
  $export($export.S + $export.F * __webpack_require__(12)(function(){
    function F(){}
    return !(Array.of.call(F) instanceof F);
  }), 'Array', {
    // 22.1.2.3 Array.of( ...items)
    of: function of(/* ...args */){
      var index  = 0
        , $$     = arguments
        , $$len  = $$.length
        , result = new (typeof this == 'function' ? this : Array)($$len);
      while($$len > index)result[index] = $$[index++];
      result.length = $$len;
      return result;
    }
  });

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var addToUnscopables = __webpack_require__(121)
    , step             = __webpack_require__(122)
    , Iterators        = __webpack_require__(103)
    , toIObject        = __webpack_require__(26);

  // 22.1.3.4 Array.prototype.entries()
  // 22.1.3.13 Array.prototype.keys()
  // 22.1.3.29 Array.prototype.values()
  // 22.1.3.30 Array.prototype[@@iterator]()
  module.exports = __webpack_require__(102)(Array, 'Array', function(iterated, kind){
    this._t = toIObject(iterated); // target
    this._i = 0;                   // next index
    this._k = kind;                // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
  }, function(){
    var O     = this._t
      , kind  = this._k
      , index = this._i++;
    if(!O || index >= O.length){
      this._t = undefined;
      return step(1);
    }
    if(kind == 'keys'  )return step(0, index);
    if(kind == 'values')return step(0, O[index]);
    return step(0, [index, O[index]]);
  }, 'values');

  // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
  Iterators.Arguments = Iterators.Array;

  addToUnscopables('keys');
  addToUnscopables('values');
  addToUnscopables('entries');

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

  // 22.1.3.31 Array.prototype[@@unscopables]
  var UNSCOPABLES = __webpack_require__(34)('unscopables')
    , ArrayProto  = Array.prototype;
  if(ArrayProto[UNSCOPABLES] == undefined)__webpack_require__(9)(ArrayProto, UNSCOPABLES, {});
  module.exports = function(key){
    ArrayProto[UNSCOPABLES][key] = true;
  };

/***/ },
/* 122 */
/***/ function(module, exports) {

  module.exports = function(done, value){
    return {value: value, done: !!done};
  };

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(124)('Array');

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var global      = __webpack_require__(7)
    , $           = __webpack_require__(5)
    , DESCRIPTORS = __webpack_require__(11)
    , SPECIES     = __webpack_require__(34)('species');

  module.exports = function(KEY){
    var C = global[KEY];
    if(DESCRIPTORS && C && !C[SPECIES])$.setDesc(C, SPECIES, {
      configurable: true,
      get: function(){ return this; }
    });
  };

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

  // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
  var $export = __webpack_require__(6);

  $export($export.P, 'Array', {copyWithin: __webpack_require__(126)});

  __webpack_require__(121)('copyWithin');

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

  // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
  'use strict';
  var toObject = __webpack_require__(24)
    , toIndex  = __webpack_require__(29)
    , toLength = __webpack_require__(30);

  module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
    var O     = toObject(this)
      , len   = toLength(O.length)
      , to    = toIndex(target, len)
      , from  = toIndex(start, len)
      , $$    = arguments
      , end   = $$.length > 2 ? $$[2] : undefined
      , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
      , inc   = 1;
    if(from < to && to < from + count){
      inc  = -1;
      from += count - 1;
      to   += count - 1;
    }
    while(count-- > 0){
      if(from in O)O[to] = O[from];
      else delete O[to];
      to   += inc;
      from += inc;
    } return O;
  };

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

  // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
  var $export = __webpack_require__(6);

  $export($export.P, 'Array', {fill: __webpack_require__(128)});

  __webpack_require__(121)('fill');

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

  // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
  'use strict';
  var toObject = __webpack_require__(24)
    , toIndex  = __webpack_require__(29)
    , toLength = __webpack_require__(30);
  module.exports = [].fill || function fill(value /*, start = 0, end = @length */){
    var O      = toObject(this)
      , length = toLength(O.length)
      , $$     = arguments
      , $$len  = $$.length
      , index  = toIndex($$len > 1 ? $$[1] : undefined, length)
      , end    = $$len > 2 ? $$[2] : undefined
      , endPos = end === undefined ? length : toIndex(end, length);
    while(endPos > index)O[index++] = value;
    return O;
  };

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
  var $export = __webpack_require__(6)
    , $find   = __webpack_require__(31)(5)
    , KEY     = 'find'
    , forced  = true;
  // Shouldn't skip holes
  if(KEY in [])Array(1)[KEY](function(){ forced = false; });
  $export($export.P + $export.F * forced, 'Array', {
    find: function find(callbackfn/*, that = undefined */){
      return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });
  __webpack_require__(121)(KEY);

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
  var $export = __webpack_require__(6)
    , $find   = __webpack_require__(31)(6)
    , KEY     = 'findIndex'
    , forced  = true;
  // Shouldn't skip holes
  if(KEY in [])Array(1)[KEY](function(){ forced = false; });
  $export($export.P + $export.F * forced, 'Array', {
    findIndex: function findIndex(callbackfn/*, that = undefined */){
      return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });
  __webpack_require__(121)(KEY);

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

  var $        = __webpack_require__(5)
    , global   = __webpack_require__(7)
    , isRegExp = __webpack_require__(108)
    , $flags   = __webpack_require__(132)
    , $RegExp  = global.RegExp
    , Base     = $RegExp
    , proto    = $RegExp.prototype
    , re1      = /a/g
    , re2      = /a/g
    // "new" creates a new object, old webkit buggy here
    , CORRECT_NEW = new $RegExp(re1) !== re1;

  if(__webpack_require__(11) && (!CORRECT_NEW || __webpack_require__(12)(function(){
    re2[__webpack_require__(34)('match')] = false;
    // RegExp constructor can alter flags and IsRegExp works correct with @@match
    return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
  }))){
    $RegExp = function RegExp(p, f){
      var piRE = isRegExp(p)
        , fiU  = f === undefined;
      return !(this instanceof $RegExp) && piRE && p.constructor === $RegExp && fiU ? p
        : CORRECT_NEW
          ? new Base(piRE && !fiU ? p.source : p, f)
          : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f);
    };
    $.each.call($.getNames(Base), function(key){
      key in $RegExp || $.setDesc($RegExp, key, {
        configurable: true,
        get: function(){ return Base[key]; },
        set: function(it){ Base[key] = it; }
      });
    });
    proto.constructor = $RegExp;
    $RegExp.prototype = proto;
    __webpack_require__(13)(global, 'RegExp', $RegExp);
  }

  __webpack_require__(124)('RegExp');

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // 21.2.5.3 get RegExp.prototype.flags
  var anObject = __webpack_require__(23);
  module.exports = function(){
    var that   = anObject(this)
      , result = '';
    if(that.global)     result += 'g';
    if(that.ignoreCase) result += 'i';
    if(that.multiline)  result += 'm';
    if(that.unicode)    result += 'u';
    if(that.sticky)     result += 'y';
    return result;
  };

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

  // 21.2.5.3 get RegExp.prototype.flags()
  var $ = __webpack_require__(5);
  if(__webpack_require__(11) && /./g.flags != 'g')$.setDesc(RegExp.prototype, 'flags', {
    configurable: true,
    get: __webpack_require__(132)
  });

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

  // @@match logic
  __webpack_require__(135)('match', 1, function(defined, MATCH){
    // 21.1.3.11 String.prototype.match(regexp)
    return function match(regexp){
      'use strict';
      var O  = defined(this)
        , fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    };
  });

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var hide     = __webpack_require__(9)
    , redefine = __webpack_require__(13)
    , fails    = __webpack_require__(12)
    , defined  = __webpack_require__(25)
    , wks      = __webpack_require__(34);

  module.exports = function(KEY, length, exec){
    var SYMBOL   = wks(KEY)
      , original = ''[KEY];
    if(fails(function(){
      var O = {};
      O[SYMBOL] = function(){ return 7; };
      return ''[KEY](O) != 7;
    })){
      redefine(String.prototype, KEY, exec(defined, SYMBOL, original));
      hide(RegExp.prototype, SYMBOL, length == 2
        // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
        // 21.2.5.11 RegExp.prototype[@@split](string, limit)
        ? function(string, arg){ return original.call(string, this, arg); }
        // 21.2.5.6 RegExp.prototype[@@match](string)
        // 21.2.5.9 RegExp.prototype[@@search](string)
        : function(string){ return original.call(string, this); }
      );
    }
  };

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

  // @@replace logic
  __webpack_require__(135)('replace', 2, function(defined, REPLACE, $replace){
    // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
    return function replace(searchValue, replaceValue){
      'use strict';
      var O  = defined(this)
        , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    };
  });

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

  // @@search logic
  __webpack_require__(135)('search', 1, function(defined, SEARCH){
    // 21.1.3.15 String.prototype.search(regexp)
    return function search(regexp){
      'use strict';
      var O  = defined(this)
        , fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    };
  });

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

  // @@split logic
  __webpack_require__(135)('split', 2, function(defined, SPLIT, $split){
    // 21.1.3.17 String.prototype.split(separator, limit)
    return function split(separator, limit){
      'use strict';
      var O  = defined(this)
        , fn = separator == undefined ? undefined : separator[SPLIT];
      return fn !== undefined
        ? fn.call(separator, O, limit)
        : $split.call(String(O), separator, limit);
    };
  });

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $          = __webpack_require__(5)
    , LIBRARY    = __webpack_require__(42)
    , global     = __webpack_require__(7)
    , ctx        = __webpack_require__(15)
    , classof    = __webpack_require__(50)
    , $export    = __webpack_require__(6)
    , isObject   = __webpack_require__(19)
    , anObject   = __webpack_require__(23)
    , aFunction  = __webpack_require__(16)
    , strictNew  = __webpack_require__(140)
    , forOf      = __webpack_require__(141)
    , setProto   = __webpack_require__(48).set
    , same       = __webpack_require__(46)
    , SPECIES    = __webpack_require__(34)('species')
    , speciesConstructor = __webpack_require__(142)
    , asap       = __webpack_require__(143)
    , PROMISE    = 'Promise'
    , process    = global.process
    , isNode     = classof(process) == 'process'
    , P          = global[PROMISE]
    , Wrapper;

  var testResolve = function(sub){
    var test = new P(function(){});
    if(sub)test.constructor = Object;
    return P.resolve(test) === test;
  };

  var USE_NATIVE = function(){
    var works = false;
    function P2(x){
      var self = new P(x);
      setProto(self, P2.prototype);
      return self;
    }
    try {
      works = P && P.resolve && testResolve();
      setProto(P2, P);
      P2.prototype = $.create(P.prototype, {constructor: {value: P2}});
      // actual Firefox has broken subclass support, test that
      if(!(P2.resolve(5).then(function(){}) instanceof P2)){
        works = false;
      }
      // actual V8 bug, https://code.google.com/p/v8/issues/detail?id=4162
      if(works && __webpack_require__(11)){
        var thenableThenGotten = false;
        P.resolve($.setDesc({}, 'then', {
          get: function(){ thenableThenGotten = true; }
        }));
        works = thenableThenGotten;
      }
    } catch(e){ works = false; }
    return works;
  }();

  // helpers
  var sameConstructor = function(a, b){
    // library wrapper special case
    if(LIBRARY && a === P && b === Wrapper)return true;
    return same(a, b);
  };
  var getConstructor = function(C){
    var S = anObject(C)[SPECIES];
    return S != undefined ? S : C;
  };
  var isThenable = function(it){
    var then;
    return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
  };
  var PromiseCapability = function(C){
    var resolve, reject;
    this.promise = new C(function($$resolve, $$reject){
      if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
      resolve = $$resolve;
      reject  = $$reject;
    });
    this.resolve = aFunction(resolve),
    this.reject  = aFunction(reject)
  };
  var perform = function(exec){
    try {
      exec();
    } catch(e){
      return {error: e};
    }
  };
  var notify = function(record, isReject){
    if(record.n)return;
    record.n = true;
    var chain = record.c;
    asap(function(){
      var value = record.v
        , ok    = record.s == 1
        , i     = 0;
      var run = function(reaction){
        var handler = ok ? reaction.ok : reaction.fail
          , resolve = reaction.resolve
          , reject  = reaction.reject
          , result, then;
        try {
          if(handler){
            if(!ok)record.h = true;
            result = handler === true ? value : handler(value);
            if(result === reaction.promise){
              reject(TypeError('Promise-chain cycle'));
            } else if(then = isThenable(result)){
              then.call(result, resolve, reject);
            } else resolve(result);
          } else reject(value);
        } catch(e){
          reject(e);
        }
      };
      while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
      chain.length = 0;
      record.n = false;
      if(isReject)setTimeout(function(){
        var promise = record.p
          , handler, console;
        if(isUnhandled(promise)){
          if(isNode){
            process.emit('unhandledRejection', value, promise);
          } else if(handler = global.onunhandledrejection){
            handler({promise: promise, reason: value});
          } else if((console = global.console) && console.error){
            console.error('Unhandled promise rejection', value);
          }
        } record.a = undefined;
      }, 1);
    });
  };
  var isUnhandled = function(promise){
    var record = promise._d
      , chain  = record.a || record.c
      , i      = 0
      , reaction;
    if(record.h)return false;
    while(chain.length > i){
      reaction = chain[i++];
      if(reaction.fail || !isUnhandled(reaction.promise))return false;
    } return true;
  };
  var $reject = function(value){
    var record = this;
    if(record.d)return;
    record.d = true;
    record = record.r || record; // unwrap
    record.v = value;
    record.s = 2;
    record.a = record.c.slice();
    notify(record, true);
  };
  var $resolve = function(value){
    var record = this
      , then;
    if(record.d)return;
    record.d = true;
    record = record.r || record; // unwrap
    try {
      if(record.p === value)throw TypeError("Promise can't be resolved itself");
      if(then = isThenable(value)){
        asap(function(){
          var wrapper = {r: record, d: false}; // wrap
          try {
            then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
          } catch(e){
            $reject.call(wrapper, e);
          }
        });
      } else {
        record.v = value;
        record.s = 1;
        notify(record, false);
      }
    } catch(e){
      $reject.call({r: record, d: false}, e); // wrap
    }
  };

  // constructor polyfill
  if(!USE_NATIVE){
    // 25.4.3.1 Promise(executor)
    P = function Promise(executor){
      aFunction(executor);
      var record = this._d = {
        p: strictNew(this, P, PROMISE),         // <- promise
        c: [],                                  // <- awaiting reactions
        a: undefined,                           // <- checked in isUnhandled reactions
        s: 0,                                   // <- state
        d: false,                               // <- done
        v: undefined,                           // <- value
        h: false,                               // <- handled rejection
        n: false                                // <- notify
      };
      try {
        executor(ctx($resolve, record, 1), ctx($reject, record, 1));
      } catch(err){
        $reject.call(record, err);
      }
    };
    __webpack_require__(145)(P.prototype, {
      // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
      then: function then(onFulfilled, onRejected){
        var reaction = new PromiseCapability(speciesConstructor(this, P))
          , promise  = reaction.promise
          , record   = this._d;
        reaction.ok   = typeof onFulfilled == 'function' ? onFulfilled : true;
        reaction.fail = typeof onRejected == 'function' && onRejected;
        record.c.push(reaction);
        if(record.a)record.a.push(reaction);
        if(record.s)notify(record, false);
        return promise;
      },
      // 25.4.5.1 Promise.prototype.catch(onRejected)
      'catch': function(onRejected){
        return this.then(undefined, onRejected);
      }
    });
  }

  $export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: P});
  __webpack_require__(38)(P, PROMISE);
  __webpack_require__(124)(PROMISE);
  Wrapper = __webpack_require__(8)[PROMISE];

  // statics
  $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
    // 25.4.4.5 Promise.reject(r)
    reject: function reject(r){
      var capability = new PromiseCapability(this)
        , $$reject   = capability.reject;
      $$reject(r);
      return capability.promise;
    }
  });
  $export($export.S + $export.F * (!USE_NATIVE || testResolve(true)), PROMISE, {
    // 25.4.4.6 Promise.resolve(x)
    resolve: function resolve(x){
      // instanceof instead of internal slot check because we should fix it without replacement native Promise core
      if(x instanceof P && sameConstructor(x.constructor, this))return x;
      var capability = new PromiseCapability(this)
        , $$resolve  = capability.resolve;
      $$resolve(x);
      return capability.promise;
    }
  });
  $export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(118)(function(iter){
    P.all(iter)['catch'](function(){});
  })), PROMISE, {
    // 25.4.4.1 Promise.all(iterable)
    all: function all(iterable){
      var C          = getConstructor(this)
        , capability = new PromiseCapability(C)
        , resolve    = capability.resolve
        , reject     = capability.reject
        , values     = [];
      var abrupt = perform(function(){
        forOf(iterable, false, values.push, values);
        var remaining = values.length
          , results   = Array(remaining);
        if(remaining)$.each.call(values, function(promise, index){
          var alreadyCalled = false;
          C.resolve(promise).then(function(value){
            if(alreadyCalled)return;
            alreadyCalled = true;
            results[index] = value;
            --remaining || resolve(results);
          }, reject);
        });
        else resolve(results);
      });
      if(abrupt)reject(abrupt.error);
      return capability.promise;
    },
    // 25.4.4.4 Promise.race(iterable)
    race: function race(iterable){
      var C          = getConstructor(this)
        , capability = new PromiseCapability(C)
        , reject     = capability.reject;
      var abrupt = perform(function(){
        forOf(iterable, false, function(promise){
          C.resolve(promise).then(capability.resolve, reject);
        });
      });
      if(abrupt)reject(abrupt.error);
      return capability.promise;
    }
  });

/***/ },
/* 140 */
/***/ function(module, exports) {

  module.exports = function(it, Constructor, name){
    if(!(it instanceof Constructor))throw TypeError(name + ": use the 'new' operator!");
    return it;
  };

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

  var ctx         = __webpack_require__(15)
    , call        = __webpack_require__(115)
    , isArrayIter = __webpack_require__(116)
    , anObject    = __webpack_require__(23)
    , toLength    = __webpack_require__(30)
    , getIterFn   = __webpack_require__(117);
  module.exports = function(iterable, entries, fn, that){
    var iterFn = getIterFn(iterable)
      , f      = ctx(fn, that, entries ? 2 : 1)
      , index  = 0
      , length, step, iterator;
    if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
    // fast case for arrays with default iterator
    if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
      entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
      call(iterator, f, step.value, entries);
    }
  };

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

  // 7.3.20 SpeciesConstructor(O, defaultConstructor)
  var anObject  = __webpack_require__(23)
    , aFunction = __webpack_require__(16)
    , SPECIES   = __webpack_require__(34)('species');
  module.exports = function(O, D){
    var C = anObject(O).constructor, S;
    return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
  };

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

  var global    = __webpack_require__(7)
    , macrotask = __webpack_require__(144).set
    , Observer  = global.MutationObserver || global.WebKitMutationObserver
    , process   = global.process
    , Promise   = global.Promise
    , isNode    = __webpack_require__(21)(process) == 'process'
    , head, last, notify;

  var flush = function(){
    var parent, domain, fn;
    if(isNode && (parent = process.domain)){
      process.domain = null;
      parent.exit();
    }
    while(head){
      domain = head.domain;
      fn     = head.fn;
      if(domain)domain.enter();
      fn(); // <- currently we use it only for Promise - try / catch not required
      if(domain)domain.exit();
      head = head.next;
    } last = undefined;
    if(parent)parent.enter();
  };

  // Node.js
  if(isNode){
    notify = function(){
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if(Observer){
    var toggle = 1
      , node   = document.createTextNode('');
    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
    notify = function(){
      node.data = toggle = -toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if(Promise && Promise.resolve){
    notify = function(){
      Promise.resolve().then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function(){
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  module.exports = function asap(fn){
    var task = {fn: fn, next: undefined, domain: isNode && process.domain};
    if(last)last.next = task;
    if(!head){
      head = task;
      notify();
    } last = task;
  };

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

  var ctx                = __webpack_require__(15)
    , invoke             = __webpack_require__(22)
    , html               = __webpack_require__(17)
    , cel                = __webpack_require__(18)
    , global             = __webpack_require__(7)
    , process            = global.process
    , setTask            = global.setImmediate
    , clearTask          = global.clearImmediate
    , MessageChannel     = global.MessageChannel
    , counter            = 0
    , queue              = {}
    , ONREADYSTATECHANGE = 'onreadystatechange'
    , defer, channel, port;
  var run = function(){
    var id = +this;
    if(queue.hasOwnProperty(id)){
      var fn = queue[id];
      delete queue[id];
      fn();
    }
  };
  var listner = function(event){
    run.call(event.data);
  };
  // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
  if(!setTask || !clearTask){
    setTask = function setImmediate(fn){
      var args = [], i = 1;
      while(arguments.length > i)args.push(arguments[i++]);
      queue[++counter] = function(){
        invoke(typeof fn == 'function' ? fn : Function(fn), args);
      };
      defer(counter);
      return counter;
    };
    clearTask = function clearImmediate(id){
      delete queue[id];
    };
    // Node.js 0.8-
    if(__webpack_require__(21)(process) == 'process'){
      defer = function(id){
        process.nextTick(ctx(run, id, 1));
      };
    // Browsers with MessageChannel, includes WebWorkers
    } else if(MessageChannel){
      channel = new MessageChannel;
      port    = channel.port2;
      channel.port1.onmessage = listner;
      defer = ctx(port.postMessage, port, 1);
    // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
    } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
      defer = function(id){
        global.postMessage(id + '', '*');
      };
      global.addEventListener('message', listner, false);
    // IE8-
    } else if(ONREADYSTATECHANGE in cel('script')){
      defer = function(id){
        html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
          html.removeChild(this);
          run.call(id);
        };
      };
    // Rest old browsers
    } else {
      defer = function(id){
        setTimeout(ctx(run, id, 1), 0);
      };
    }
  }
  module.exports = {
    set:   setTask,
    clear: clearTask
  };

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

  var redefine = __webpack_require__(13);
  module.exports = function(target, src){
    for(var key in src)redefine(target, key, src[key]);
    return target;
  };

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var strong = __webpack_require__(147);

  // 23.1 Map Objects
  __webpack_require__(148)('Map', function(get){
    return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
  }, {
    // 23.1.3.6 Map.prototype.get(key)
    get: function get(key){
      var entry = strong.getEntry(this, key);
      return entry && entry.v;
    },
    // 23.1.3.9 Map.prototype.set(key, value)
    set: function set(key, value){
      return strong.def(this, key === 0 ? 0 : key, value);
    }
  }, strong, true);

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $            = __webpack_require__(5)
    , hide         = __webpack_require__(9)
    , redefineAll  = __webpack_require__(145)
    , ctx          = __webpack_require__(15)
    , strictNew    = __webpack_require__(140)
    , defined      = __webpack_require__(25)
    , forOf        = __webpack_require__(141)
    , $iterDefine  = __webpack_require__(102)
    , step         = __webpack_require__(122)
    , ID           = __webpack_require__(14)('id')
    , $has         = __webpack_require__(20)
    , isObject     = __webpack_require__(19)
    , setSpecies   = __webpack_require__(124)
    , DESCRIPTORS  = __webpack_require__(11)
    , isExtensible = Object.isExtensible || isObject
    , SIZE         = DESCRIPTORS ? '_s' : 'size'
    , id           = 0;

  var fastKey = function(it, create){
    // return primitive with prefix
    if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    if(!$has(it, ID)){
      // can't set id to frozen object
      if(!isExtensible(it))return 'F';
      // not necessary to add id
      if(!create)return 'E';
      // add missing object id
      hide(it, ID, ++id);
    // return object id with prefix
    } return 'O' + it[ID];
  };

  var getEntry = function(that, key){
    // fast case
    var index = fastKey(key), entry;
    if(index !== 'F')return that._i[index];
    // frozen object case
    for(entry = that._f; entry; entry = entry.n){
      if(entry.k == key)return entry;
    }
  };

  module.exports = {
    getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
      var C = wrapper(function(that, iterable){
        strictNew(that, C, NAME);
        that._i = $.create(null); // index
        that._f = undefined;      // first entry
        that._l = undefined;      // last entry
        that[SIZE] = 0;           // size
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
      });
      redefineAll(C.prototype, {
        // 23.1.3.1 Map.prototype.clear()
        // 23.2.3.2 Set.prototype.clear()
        clear: function clear(){
          for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
            entry.r = true;
            if(entry.p)entry.p = entry.p.n = undefined;
            delete data[entry.i];
          }
          that._f = that._l = undefined;
          that[SIZE] = 0;
        },
        // 23.1.3.3 Map.prototype.delete(key)
        // 23.2.3.4 Set.prototype.delete(value)
        'delete': function(key){
          var that  = this
            , entry = getEntry(that, key);
          if(entry){
            var next = entry.n
              , prev = entry.p;
            delete that._i[entry.i];
            entry.r = true;
            if(prev)prev.n = next;
            if(next)next.p = prev;
            if(that._f == entry)that._f = next;
            if(that._l == entry)that._l = prev;
            that[SIZE]--;
          } return !!entry;
        },
        // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
        // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
        forEach: function forEach(callbackfn /*, that = undefined */){
          var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
            , entry;
          while(entry = entry ? entry.n : this._f){
            f(entry.v, entry.k, this);
            // revert to the last existing entry
            while(entry && entry.r)entry = entry.p;
          }
        },
        // 23.1.3.7 Map.prototype.has(key)
        // 23.2.3.7 Set.prototype.has(value)
        has: function has(key){
          return !!getEntry(this, key);
        }
      });
      if(DESCRIPTORS)$.setDesc(C.prototype, 'size', {
        get: function(){
          return defined(this[SIZE]);
        }
      });
      return C;
    },
    def: function(that, key, value){
      var entry = getEntry(that, key)
        , prev, index;
      // change existing entry
      if(entry){
        entry.v = value;
      // create new entry
      } else {
        that._l = entry = {
          i: index = fastKey(key, true), // <- index
          k: key,                        // <- key
          v: value,                      // <- value
          p: prev = that._l,             // <- previous entry
          n: undefined,                  // <- next entry
          r: false                       // <- removed
        };
        if(!that._f)that._f = entry;
        if(prev)prev.n = entry;
        that[SIZE]++;
        // add to index
        if(index !== 'F')that._i[index] = entry;
      } return that;
    },
    getEntry: getEntry,
    setStrong: function(C, NAME, IS_MAP){
      // add .keys, .values, .entries, [@@iterator]
      // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
      $iterDefine(C, NAME, function(iterated, kind){
        this._t = iterated;  // target
        this._k = kind;      // kind
        this._l = undefined; // previous
      }, function(){
        var that  = this
          , kind  = that._k
          , entry = that._l;
        // revert to the last existing entry
        while(entry && entry.r)entry = entry.p;
        // get next entry
        if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
          // or finish the iteration
          that._t = undefined;
          return step(1);
        }
        // return step by kind
        if(kind == 'keys'  )return step(0, entry.k);
        if(kind == 'values')return step(0, entry.v);
        return step(0, [entry.k, entry.v]);
      }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

      // add [@@species], 23.1.2.2, 23.2.2.2
      setSpecies(NAME);
    }
  };

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var global         = __webpack_require__(7)
    , $export        = __webpack_require__(6)
    , redefine       = __webpack_require__(13)
    , redefineAll    = __webpack_require__(145)
    , forOf          = __webpack_require__(141)
    , strictNew      = __webpack_require__(140)
    , isObject       = __webpack_require__(19)
    , fails          = __webpack_require__(12)
    , $iterDetect    = __webpack_require__(118)
    , setToStringTag = __webpack_require__(38);

  module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
    var Base  = global[NAME]
      , C     = Base
      , ADDER = IS_MAP ? 'set' : 'add'
      , proto = C && C.prototype
      , O     = {};
    var fixMethod = function(KEY){
      var fn = proto[KEY];
      redefine(proto, KEY,
        KEY == 'delete' ? function(a){
          return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
        } : KEY == 'has' ? function has(a){
          return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
        } : KEY == 'get' ? function get(a){
          return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
        } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
          : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
      );
    };
    if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
      new C().entries().next();
    }))){
      // create collection constructor
      C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
      redefineAll(C.prototype, methods);
    } else {
      var instance             = new C
        // early implementations not supports chaining
        , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
        // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
        , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
        // most early implementations doesn't supports iterables, most modern - not close it correctly
        , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
        // for early implementations -0 and +0 not the same
        , BUGGY_ZERO;
      if(!ACCEPT_ITERABLES){
        C = wrapper(function(target, iterable){
          strictNew(target, C, NAME);
          var that = new Base;
          if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
          return that;
        });
        C.prototype = proto;
        proto.constructor = C;
      }
      IS_WEAK || instance.forEach(function(val, key){
        BUGGY_ZERO = 1 / key === -Infinity;
      });
      if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
        fixMethod('delete');
        fixMethod('has');
        IS_MAP && fixMethod('get');
      }
      if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
      // weak collections should not contains .clear method
      if(IS_WEAK && proto.clear)delete proto.clear;
    }

    setToStringTag(C, NAME);

    O[NAME] = C;
    $export($export.G + $export.W + $export.F * (C != Base), O);

    if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

    return C;
  };

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var strong = __webpack_require__(147);

  // 23.2 Set Objects
  __webpack_require__(148)('Set', function(get){
    return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
  }, {
    // 23.2.3.1 Set.prototype.add(value)
    add: function add(value){
      return strong.def(this, value = value === 0 ? 0 : value, value);
    }
  }, strong);

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $            = __webpack_require__(5)
    , redefine     = __webpack_require__(13)
    , weak         = __webpack_require__(151)
    , isObject     = __webpack_require__(19)
    , has          = __webpack_require__(20)
    , frozenStore  = weak.frozenStore
    , WEAK         = weak.WEAK
    , isExtensible = Object.isExtensible || isObject
    , tmp          = {};

  // 23.3 WeakMap Objects
  var $WeakMap = __webpack_require__(148)('WeakMap', function(get){
    return function WeakMap(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
  }, {
    // 23.3.3.3 WeakMap.prototype.get(key)
    get: function get(key){
      if(isObject(key)){
        if(!isExtensible(key))return frozenStore(this).get(key);
        if(has(key, WEAK))return key[WEAK][this._i];
      }
    },
    // 23.3.3.5 WeakMap.prototype.set(key, value)
    set: function set(key, value){
      return weak.def(this, key, value);
    }
  }, weak, true, true);

  // IE11 WeakMap frozen keys fix
  if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
    $.each.call(['delete', 'has', 'get', 'set'], function(key){
      var proto  = $WeakMap.prototype
        , method = proto[key];
      redefine(proto, key, function(a, b){
        // store frozen objects on leaky map
        if(isObject(a) && !isExtensible(a)){
          var result = frozenStore(this)[key](a, b);
          return key == 'set' ? this : result;
        // store all the rest on native weakmap
        } return method.call(this, a, b);
      });
    });
  }

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var hide              = __webpack_require__(9)
    , redefineAll       = __webpack_require__(145)
    , anObject          = __webpack_require__(23)
    , isObject          = __webpack_require__(19)
    , strictNew         = __webpack_require__(140)
    , forOf             = __webpack_require__(141)
    , createArrayMethod = __webpack_require__(31)
    , $has              = __webpack_require__(20)
    , WEAK              = __webpack_require__(14)('weak')
    , isExtensible      = Object.isExtensible || isObject
    , arrayFind         = createArrayMethod(5)
    , arrayFindIndex    = createArrayMethod(6)
    , id                = 0;

  // fallback for frozen keys
  var frozenStore = function(that){
    return that._l || (that._l = new FrozenStore);
  };
  var FrozenStore = function(){
    this.a = [];
  };
  var findFrozen = function(store, key){
    return arrayFind(store.a, function(it){
      return it[0] === key;
    });
  };
  FrozenStore.prototype = {
    get: function(key){
      var entry = findFrozen(this, key);
      if(entry)return entry[1];
    },
    has: function(key){
      return !!findFrozen(this, key);
    },
    set: function(key, value){
      var entry = findFrozen(this, key);
      if(entry)entry[1] = value;
      else this.a.push([key, value]);
    },
    'delete': function(key){
      var index = arrayFindIndex(this.a, function(it){
        return it[0] === key;
      });
      if(~index)this.a.splice(index, 1);
      return !!~index;
    }
  };

  module.exports = {
    getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
      var C = wrapper(function(that, iterable){
        strictNew(that, C, NAME);
        that._i = id++;      // collection id
        that._l = undefined; // leak store for frozen objects
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
      });
      redefineAll(C.prototype, {
        // 23.3.3.2 WeakMap.prototype.delete(key)
        // 23.4.3.3 WeakSet.prototype.delete(value)
        'delete': function(key){
          if(!isObject(key))return false;
          if(!isExtensible(key))return frozenStore(this)['delete'](key);
          return $has(key, WEAK) && $has(key[WEAK], this._i) && delete key[WEAK][this._i];
        },
        // 23.3.3.4 WeakMap.prototype.has(key)
        // 23.4.3.4 WeakSet.prototype.has(value)
        has: function has(key){
          if(!isObject(key))return false;
          if(!isExtensible(key))return frozenStore(this).has(key);
          return $has(key, WEAK) && $has(key[WEAK], this._i);
        }
      });
      return C;
    },
    def: function(that, key, value){
      if(!isExtensible(anObject(key))){
        frozenStore(that).set(key, value);
      } else {
        $has(key, WEAK) || hide(key, WEAK, {});
        key[WEAK][that._i] = value;
      } return that;
    },
    frozenStore: frozenStore,
    WEAK: WEAK
  };

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var weak = __webpack_require__(151);

  // 23.4 WeakSet Objects
  __webpack_require__(148)('WeakSet', function(get){
    return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
  }, {
    // 23.4.3.1 WeakSet.prototype.add(value)
    add: function add(value){
      return weak.def(this, value, true);
    }
  }, weak, false, true);

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
  var $export = __webpack_require__(6)
    , _apply  = Function.apply;

  $export($export.S, 'Reflect', {
    apply: function apply(target, thisArgument, argumentsList){
      return _apply.call(target, thisArgument, argumentsList);
    }
  });

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
  var $         = __webpack_require__(5)
    , $export   = __webpack_require__(6)
    , aFunction = __webpack_require__(16)
    , anObject  = __webpack_require__(23)
    , isObject  = __webpack_require__(19)
    , bind      = Function.bind || __webpack_require__(8).Function.prototype.bind;

  // MS Edge supports only 2 arguments
  // FF Nightly sets third argument as `new.target`, but does not create `this` from it
  $export($export.S + $export.F * __webpack_require__(12)(function(){
    function F(){}
    return !(Reflect.construct(function(){}, [], F) instanceof F);
  }), 'Reflect', {
    construct: function construct(Target, args /*, newTarget*/){
      aFunction(Target);
      var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
      if(Target == newTarget){
        // w/o altered newTarget, optimization for 0-4 arguments
        if(args != undefined)switch(anObject(args).length){
          case 0: return new Target;
          case 1: return new Target(args[0]);
          case 2: return new Target(args[0], args[1]);
          case 3: return new Target(args[0], args[1], args[2]);
          case 4: return new Target(args[0], args[1], args[2], args[3]);
        }
        // w/o altered newTarget, lot of arguments case
        var $args = [null];
        $args.push.apply($args, args);
        return new (bind.apply(Target, $args));
      }
      // with altered newTarget, not support built-in constructors
      var proto    = newTarget.prototype
        , instance = $.create(isObject(proto) ? proto : Object.prototype)
        , result   = Function.apply.call(Target, instance, args);
      return isObject(result) ? result : instance;
    }
  });

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
  var $        = __webpack_require__(5)
    , $export  = __webpack_require__(6)
    , anObject = __webpack_require__(23);

  // MS Edge has broken Reflect.defineProperty - throwing instead of returning false
  $export($export.S + $export.F * __webpack_require__(12)(function(){
    Reflect.defineProperty($.setDesc({}, 1, {value: 1}), 1, {value: 2});
  }), 'Reflect', {
    defineProperty: function defineProperty(target, propertyKey, attributes){
      anObject(target);
      try {
        $.setDesc(target, propertyKey, attributes);
        return true;
      } catch(e){
        return false;
      }
    }
  });

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.4 Reflect.deleteProperty(target, propertyKey)
  var $export  = __webpack_require__(6)
    , getDesc  = __webpack_require__(5).getDesc
    , anObject = __webpack_require__(23);

  $export($export.S, 'Reflect', {
    deleteProperty: function deleteProperty(target, propertyKey){
      var desc = getDesc(anObject(target), propertyKey);
      return desc && !desc.configurable ? false : delete target[propertyKey];
    }
  });

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // 26.1.5 Reflect.enumerate(target)
  var $export  = __webpack_require__(6)
    , anObject = __webpack_require__(23);
  var Enumerate = function(iterated){
    this._t = anObject(iterated); // target
    this._i = 0;                  // next index
    var keys = this._k = []       // keys
      , key;
    for(key in iterated)keys.push(key);
  };
  __webpack_require__(104)(Enumerate, 'Object', function(){
    var that = this
      , keys = that._k
      , key;
    do {
      if(that._i >= keys.length)return {value: undefined, done: true};
    } while(!((key = keys[that._i++]) in that._t));
    return {value: key, done: false};
  });

  $export($export.S, 'Reflect', {
    enumerate: function enumerate(target){
      return new Enumerate(target);
    }
  });

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.6 Reflect.get(target, propertyKey [, receiver])
  var $        = __webpack_require__(5)
    , has      = __webpack_require__(20)
    , $export  = __webpack_require__(6)
    , isObject = __webpack_require__(19)
    , anObject = __webpack_require__(23);

  function get(target, propertyKey/*, receiver*/){
    var receiver = arguments.length < 3 ? target : arguments[2]
      , desc, proto;
    if(anObject(target) === receiver)return target[propertyKey];
    if(desc = $.getDesc(target, propertyKey))return has(desc, 'value')
      ? desc.value
      : desc.get !== undefined
        ? desc.get.call(receiver)
        : undefined;
    if(isObject(proto = $.getProto(target)))return get(proto, propertyKey, receiver);
  }

  $export($export.S, 'Reflect', {get: get});

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
  var $        = __webpack_require__(5)
    , $export  = __webpack_require__(6)
    , anObject = __webpack_require__(23);

  $export($export.S, 'Reflect', {
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
      return $.getDesc(anObject(target), propertyKey);
    }
  });

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.8 Reflect.getPrototypeOf(target)
  var $export  = __webpack_require__(6)
    , getProto = __webpack_require__(5).getProto
    , anObject = __webpack_require__(23);

  $export($export.S, 'Reflect', {
    getPrototypeOf: function getPrototypeOf(target){
      return getProto(anObject(target));
    }
  });

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.9 Reflect.has(target, propertyKey)
  var $export = __webpack_require__(6);

  $export($export.S, 'Reflect', {
    has: function has(target, propertyKey){
      return propertyKey in target;
    }
  });

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.10 Reflect.isExtensible(target)
  var $export       = __webpack_require__(6)
    , anObject      = __webpack_require__(23)
    , $isExtensible = Object.isExtensible;

  $export($export.S, 'Reflect', {
    isExtensible: function isExtensible(target){
      anObject(target);
      return $isExtensible ? $isExtensible(target) : true;
    }
  });

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.11 Reflect.ownKeys(target)
  var $export = __webpack_require__(6);

  $export($export.S, 'Reflect', {ownKeys: __webpack_require__(164)});

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

  // all object keys, includes non-enumerable and symbols
  var $        = __webpack_require__(5)
    , anObject = __webpack_require__(23)
    , Reflect  = __webpack_require__(7).Reflect;
  module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
    var keys       = $.getNames(anObject(it))
      , getSymbols = $.getSymbols;
    return getSymbols ? keys.concat(getSymbols(it)) : keys;
  };

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.12 Reflect.preventExtensions(target)
  var $export            = __webpack_require__(6)
    , anObject           = __webpack_require__(23)
    , $preventExtensions = Object.preventExtensions;

  $export($export.S, 'Reflect', {
    preventExtensions: function preventExtensions(target){
      anObject(target);
      try {
        if($preventExtensions)$preventExtensions(target);
        return true;
      } catch(e){
        return false;
      }
    }
  });

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
  var $          = __webpack_require__(5)
    , has        = __webpack_require__(20)
    , $export    = __webpack_require__(6)
    , createDesc = __webpack_require__(10)
    , anObject   = __webpack_require__(23)
    , isObject   = __webpack_require__(19);

  function set(target, propertyKey, V/*, receiver*/){
    var receiver = arguments.length < 4 ? target : arguments[3]
      , ownDesc  = $.getDesc(anObject(target), propertyKey)
      , existingDescriptor, proto;
    if(!ownDesc){
      if(isObject(proto = $.getProto(target))){
        return set(proto, propertyKey, V, receiver);
      }
      ownDesc = createDesc(0);
    }
    if(has(ownDesc, 'value')){
      if(ownDesc.writable === false || !isObject(receiver))return false;
      existingDescriptor = $.getDesc(receiver, propertyKey) || createDesc(0);
      existingDescriptor.value = V;
      $.setDesc(receiver, propertyKey, existingDescriptor);
      return true;
    }
    return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
  }

  $export($export.S, 'Reflect', {set: set});

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

  // 26.1.14 Reflect.setPrototypeOf(target, proto)
  var $export  = __webpack_require__(6)
    , setProto = __webpack_require__(48);

  if(setProto)$export($export.S, 'Reflect', {
    setPrototypeOf: function setPrototypeOf(target, proto){
      setProto.check(target, proto);
      try {
        setProto.set(target, proto);
        return true;
      } catch(e){
        return false;
      }
    }
  });

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export   = __webpack_require__(6)
    , $includes = __webpack_require__(36)(true);

  $export($export.P, 'Array', {
    // https://github.com/domenic/Array.prototype.includes
    includes: function includes(el /*, fromIndex = 0 */){
      return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  __webpack_require__(121)('includes');

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // https://github.com/mathiasbynens/String.prototype.at
  var $export = __webpack_require__(6)
    , $at     = __webpack_require__(101)(true);

  $export($export.P, 'String', {
    at: function at(pos){
      return $at(this, pos);
    }
  });

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export = __webpack_require__(6)
    , $pad    = __webpack_require__(171);

  $export($export.P, 'String', {
    padLeft: function padLeft(maxLength /*, fillString = ' ' */){
      return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
    }
  });

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

  // https://github.com/ljharb/proposal-string-pad-left-right
  var toLength = __webpack_require__(30)
    , repeat   = __webpack_require__(112)
    , defined  = __webpack_require__(25);

  module.exports = function(that, maxLength, fillString, left){
    var S            = String(defined(that))
      , stringLength = S.length
      , fillStr      = fillString === undefined ? ' ' : String(fillString)
      , intMaxLength = toLength(maxLength);
    if(intMaxLength <= stringLength)return S;
    if(fillStr == '')fillStr = ' ';
    var fillLen = intMaxLength - stringLength
      , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
    if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);
    return left ? stringFiller + S : S + stringFiller;
  };

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $export = __webpack_require__(6)
    , $pad    = __webpack_require__(171);

  $export($export.P, 'String', {
    padRight: function padRight(maxLength /*, fillString = ' ' */){
      return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
    }
  });

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // https://github.com/sebmarkbage/ecmascript-string-left-right-trim
  __webpack_require__(66)('trimLeft', function($trim){
    return function trimLeft(){
      return $trim(this, 1);
    };
  });

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  // https://github.com/sebmarkbage/ecmascript-string-left-right-trim
  __webpack_require__(66)('trimRight', function($trim){
    return function trimRight(){
      return $trim(this, 2);
    };
  });

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

  // https://github.com/benjamingr/RexExp.escape
  var $export = __webpack_require__(6)
    , $re     = __webpack_require__(176)(/[\\^$*+?.()|[\]{}]/g, '\\$&');

  $export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});


/***/ },
/* 176 */
/***/ function(module, exports) {

  module.exports = function(regExp, replace){
    var replacer = replace === Object(replace) ? function(part){
      return replace[part];
    } : replace;
    return function(it){
      return String(it).replace(regExp, replacer);
    };
  };

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

  // https://gist.github.com/WebReflection/9353781
  var $          = __webpack_require__(5)
    , $export    = __webpack_require__(6)
    , ownKeys    = __webpack_require__(164)
    , toIObject  = __webpack_require__(26)
    , createDesc = __webpack_require__(10);

  $export($export.S, 'Object', {
    getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
      var O       = toIObject(object)
        , setDesc = $.setDesc
        , getDesc = $.getDesc
        , keys    = ownKeys(O)
        , result  = {}
        , i       = 0
        , key, D;
      while(keys.length > i){
        D = getDesc(O, key = keys[i++]);
        if(key in result)setDesc(result, key, createDesc(0, D));
        else result[key] = D;
      } return result;
    }
  });

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

  // http://goo.gl/XkBrjD
  var $export = __webpack_require__(6)
    , $values = __webpack_require__(179)(false);

  $export($export.S, 'Object', {
    values: function values(it){
      return $values(it);
    }
  });

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

  var $         = __webpack_require__(5)
    , toIObject = __webpack_require__(26)
    , isEnum    = $.isEnum;
  module.exports = function(isEntries){
    return function(it){
      var O      = toIObject(it)
        , keys   = $.getKeys(O)
        , length = keys.length
        , i      = 0
        , result = []
        , key;
      while(length > i)if(isEnum.call(O, key = keys[i++])){
        result.push(isEntries ? [key, O[key]] : O[key]);
      } return result;
    };
  };

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

  // http://goo.gl/XkBrjD
  var $export  = __webpack_require__(6)
    , $entries = __webpack_require__(179)(true);

  $export($export.S, 'Object', {
    entries: function entries(it){
      return $entries(it);
    }
  });

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

  // https://github.com/DavidBruant/Map-Set.prototype.toJSON
  var $export  = __webpack_require__(6);

  $export($export.P, 'Map', {toJSON: __webpack_require__(182)('Map')});

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

  // https://github.com/DavidBruant/Map-Set.prototype.toJSON
  var forOf   = __webpack_require__(141)
    , classof = __webpack_require__(50);
  module.exports = function(NAME){
    return function toJSON(){
      if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
      var arr = [];
      forOf(this, false, arr.push, arr);
      return arr;
    };
  };

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

  // https://github.com/DavidBruant/Map-Set.prototype.toJSON
  var $export  = __webpack_require__(6);

  $export($export.P, 'Set', {toJSON: __webpack_require__(182)('Set')});

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

  // JavaScript 1.6 / Strawman array statics shim
  var $       = __webpack_require__(5)
    , $export = __webpack_require__(6)
    , $ctx    = __webpack_require__(15)
    , $Array  = __webpack_require__(8).Array || Array
    , statics = {};
  var setStatics = function(keys, length){
    $.each.call(keys.split(','), function(key){
      if(length == undefined && key in $Array)statics[key] = $Array[key];
      else if(key in [])statics[key] = $ctx(Function.call, [][key], length);
    });
  };
  setStatics('pop,reverse,shift,keys,values,entries', 1);
  setStatics('indexOf,every,some,forEach,map,filter,find,findIndex,includes', 3);
  setStatics('join,slice,concat,push,splice,unshift,sort,lastIndexOf,' +
             'reduce,reduceRight,copyWithin,fill');
  $export($export.S, 'Array', statics);

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

  // ie9- setTimeout & setInterval additional parameters fix
  var global     = __webpack_require__(7)
    , $export    = __webpack_require__(6)
    , invoke     = __webpack_require__(22)
    , partial    = __webpack_require__(186)
    , navigator  = global.navigator
    , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
  var wrap = function(set){
    return MSIE ? function(fn, time /*, ...args */){
      return set(invoke(
        partial,
        [].slice.call(arguments, 2),
        typeof fn == 'function' ? fn : Function(fn)
      ), time);
    } : set;
  };
  $export($export.G + $export.B + $export.F * MSIE, {
    setTimeout:  wrap(global.setTimeout),
    setInterval: wrap(global.setInterval)
  });

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var path      = __webpack_require__(187)
    , invoke    = __webpack_require__(22)
    , aFunction = __webpack_require__(16);
  module.exports = function(/* ...pargs */){
    var fn     = aFunction(this)
      , length = arguments.length
      , pargs  = Array(length)
      , i      = 0
      , _      = path._
      , holder = false;
    while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
    return function(/* ...args */){
      var that  = this
        , $$    = arguments
        , $$len = $$.length
        , j = 0, k = 0, args;
      if(!holder && !$$len)return invoke(fn, pargs, that);
      args = pargs.slice();
      if(holder)for(;length > j; j++)if(args[j] === _)args[j] = $$[k++];
      while($$len > k)args.push($$[k++]);
      return invoke(fn, args, that);
    };
  };

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(7);

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

  var $export = __webpack_require__(6)
    , $task   = __webpack_require__(144);
  $export($export.G + $export.B, {
    setImmediate:   $task.set,
    clearImmediate: $task.clear
  });

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(120);
  var global      = __webpack_require__(7)
    , hide        = __webpack_require__(9)
    , Iterators   = __webpack_require__(103)
    , ITERATOR    = __webpack_require__(34)('iterator')
    , NL          = global.NodeList
    , HTC         = global.HTMLCollection
    , NLProto     = NL && NL.prototype
    , HTCProto    = HTC && HTC.prototype
    , ArrayValues = Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;
  if(NLProto && !NLProto[ITERATOR])hide(NLProto, ITERATOR, ArrayValues);
  if(HTCProto && !HTCProto[ITERATOR])hide(HTCProto, ITERATOR, ArrayValues);

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(global, process) {/**
   * Copyright (c) 2014, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
   * additional grant of patent rights can be found in the PATENTS file in
   * the same directory.
   */

  !(function(global) {
    "use strict";

    var hasOwn = Object.prototype.hasOwnProperty;
    var undefined; // More compressible than void 0.
    var iteratorSymbol =
      typeof Symbol === "function" && Symbol.iterator || "@@iterator";

    var inModule = typeof module === "object";
    var runtime = global.regeneratorRuntime;
    if (runtime) {
      if (inModule) {
        // If regeneratorRuntime is defined globally and we're in a module,
        // make the exports object identical to regeneratorRuntime.
        module.exports = runtime;
      }
      // Don't bother evaluating the rest of this file if the runtime was
      // already defined globally.
      return;
    }

    // Define the runtime globally (as expected by generated code) as either
    // module.exports (if we're in a module) or a new, empty object.
    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided, then outerFn.prototype instanceof Generator.
      var generator = Object.create((outerFn || Generator).prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    runtime.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunction.displayName = "GeneratorFunction";

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method) {
        prototype[method] = function(arg) {
          return this._invoke(method, arg);
        };
      });
    }

    runtime.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor
        ? ctor === GeneratorFunction ||
          // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction"
        : false;
    };

    runtime.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `value instanceof AwaitArgument` to determine if the yielded value is
    // meant to be awaited. Some may consider the name of this method too
    // cutesy, but they are curmudgeons.
    runtime.awrap = function(arg) {
      return new AwaitArgument(arg);
    };

    function AwaitArgument(arg) {
      this.arg = arg;
    }

    function AsyncIterator(generator) {
      // This invoke function is written in a style that assumes some
      // calling function (or Promise) will handle exceptions.
      function invoke(method, arg) {
        var result = generator[method](arg);
        var value = result.value;
        return value instanceof AwaitArgument
          ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)
          : Promise.resolve(value).then(function(unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration. If the Promise is rejected, however, the
              // result for this iteration will be rejected with the same
              // reason. Note that rejections of yielded Promises are not
              // thrown back into the generator function, as is the case
              // when an awaited Promise is rejected. This difference in
              // behavior between yield and await is important, because it
              // allows the consumer to decide what to do with the yielded
              // rejection (swallow it and continue, manually .throw it back
              // into the generator, abandon iteration, whatever). With
              // await, by contrast, there is no opportunity to examine the
              // rejection reason outside the generator function, so the
              // only option is to throw it from the await expression, and
              // let the generator function handle the exception.
              result.value = unwrapped;
              return result;
            });
      }

      if (typeof process === "object" && process.domain) {
        invoke = process.domain.bind(invoke);
      }

      var invokeNext = invoke.bind(generator, "next");
      var invokeThrow = invoke.bind(generator, "throw");
      var invokeReturn = invoke.bind(generator, "return");
      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return invoke(method, arg);
        }

        return previousPromise =
          // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(
            callInvokeWithMethodAndArg,
            // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg
          ) : new Promise(function (resolve) {
            resolve(callInvokeWithMethodAndArg());
          });
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    runtime.async = function(innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(
        wrap(innerFn, outerFn, self, tryLocsList)
      );

      return runtime.isGeneratorFunction(outerFn)
        ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            if (method === "return" ||
                (method === "throw" && delegate.iterator[method] === undefined)) {
              // A return or throw (when the delegate iterator has no throw
              // method) always terminates the yield* loop.
              context.delegate = null;

              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              var returnMethod = delegate.iterator["return"];
              if (returnMethod) {
                var record = tryCatch(returnMethod, delegate.iterator, arg);
                if (record.type === "throw") {
                  // If the return method threw an exception, let that
                  // exception prevail over the original return or throw.
                  method = "throw";
                  arg = record.arg;
                  continue;
                }
              }

              if (method === "return") {
                // Continue with the outer return, now that the delegate
                // iterator has been terminated.
                continue;
              }
            }

            var record = tryCatch(
              delegate.iterator[method],
              delegate.iterator,
              arg
            );

            if (record.type === "throw") {
              context.delegate = null;

              // Like returning generator.throw(uncaught), but without the
              // overhead of an extra function call.
              method = "throw";
              arg = record.arg;
              continue;
            }

            // Delegate generator ran and handled its own exceptions so
            // regardless of what the method was, we continue as if it is
            // "next" with an undefined arg.
            method = "next";
            arg = undefined;

            var info = record.arg;
            if (info.done) {
              context[delegate.resultName] = info.value;
              context.next = delegate.nextLoc;
            } else {
              state = GenStateSuspendedYield;
              return info;
            }

            context.delegate = null;
          }

          if (method === "next") {
            context._sent = arg;

            if (state === GenStateSuspendedYield) {
              context.sent = arg;
            } else {
              context.sent = undefined;
            }
          } else if (method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw arg;
            }

            if (context.dispatchException(arg)) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              method = "next";
              arg = undefined;
            }

          } else if (method === "return") {
            context.abrupt("return", arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done
              ? GenStateCompleted
              : GenStateSuspendedYield;

            var info = {
              value: record.arg,
              done: context.done
            };

            if (record.arg === ContinueSentinel) {
              if (context.delegate && method === "next") {
                // Deliberately forget the last sent value so that we don't
                // accidentally pass it on to the delegate.
                arg = undefined;
              }
            } else {
              return info;
            }

          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(arg) call above.
            method = "throw";
            arg = record.arg;
          }
        }
      };
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    Gp[iteratorSymbol] = function() {
      return this;
    };

    Gp.toString = function() {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    runtime.keys = function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1, next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    runtime.values = values;

    function doneResult() {
      return { value: undefined, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = undefined;
        this.done = false;
        this.delegate = null;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" &&
                hasOwn.call(this, name) &&
                !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },

      stop: function() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;
          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }

            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev &&
              hasOwn.call(entry, "finallyLoc") &&
              this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry &&
            (type === "break" ||
             type === "continue") &&
            finallyEntry.tryLoc <= arg &&
            arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.next = finallyEntry.finallyLoc;
        } else {
          this.complete(record);
        }

        return ContinueSentinel;
      },

      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" ||
            record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = record.arg;
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }
      },

      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        return ContinueSentinel;
      }
    };
  })(
    // Among the various tricks for obtaining a reference to the global
    // object, this seems to be the most reliable technique that does not
    // use indirect eval (which violates Content Security Policy).
    typeof global === "object" ? global :
    typeof window === "object" ? window :
    typeof self === "object" ? self : this
  );

  /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(191)))

/***/ },
/* 191 */
/***/ function(module, exports) {

  // shim for using process in browser

  var process = module.exports = {};
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = setTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      clearTimeout(timeout);
  }

  process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          setTimeout(drainQueue, 0);
      }
  };

  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  process.title = 'browser';
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = ''; // empty string to avoid regexp issues
  process.versions = {};

  function noop() {}

  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;

  process.binding = function (name) {
      throw new Error('process.binding is not supported');
  };

  process.cwd = function () { return '/' };
  process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
  };
  process.umask = function() { return 0; };


/***/ },
/* 192 */
/***/ function(module, exports) {

  module.exports = _;

/***/ },
/* 193 */
/***/ function(module, exports) {

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  function EventEmitter() {
    this._events = this._events || {};
    this._maxListeners = this._maxListeners || undefined;
  }
  module.exports = EventEmitter;

  // Backwards-compat with node 0.10.x
  EventEmitter.EventEmitter = EventEmitter;

  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  EventEmitter.defaultMaxListeners = 10;

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter.prototype.setMaxListeners = function(n) {
    if (!isNumber(n) || n < 0 || isNaN(n))
      throw TypeError('n must be a positive number');
    this._maxListeners = n;
    return this;
  };

  EventEmitter.prototype.emit = function(type) {
    var er, handler, len, args, i, listeners;

    if (!this._events)
      this._events = {};

    // If there is no 'error' event listener then throw.
    if (type === 'error') {
      if (!this._events.error ||
          (isObject(this._events.error) && !this._events.error.length)) {
        er = arguments[1];
        if (er instanceof Error) {
          throw er; // Unhandled 'error' event
        }
        throw TypeError('Uncaught, unspecified "error" event.');
      }
    }

    handler = this._events[type];

    if (isUndefined(handler))
      return false;

    if (isFunction(handler)) {
      switch (arguments.length) {
        // fast cases
        case 1:
          handler.call(this);
          break;
        case 2:
          handler.call(this, arguments[1]);
          break;
        case 3:
          handler.call(this, arguments[1], arguments[2]);
          break;
        // slower
        default:
          args = Array.prototype.slice.call(arguments, 1);
          handler.apply(this, args);
      }
    } else if (isObject(handler)) {
      args = Array.prototype.slice.call(arguments, 1);
      listeners = handler.slice();
      len = listeners.length;
      for (i = 0; i < len; i++)
        listeners[i].apply(this, args);
    }

    return true;
  };

  EventEmitter.prototype.addListener = function(type, listener) {
    var m;

    if (!isFunction(listener))
      throw TypeError('listener must be a function');

    if (!this._events)
      this._events = {};

    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (this._events.newListener)
      this.emit('newListener', type,
                isFunction(listener.listener) ?
                listener.listener : listener);

    if (!this._events[type])
      // Optimize the case of one listener. Don't need the extra array object.
      this._events[type] = listener;
    else if (isObject(this._events[type]))
      // If we've already got an array, just append.
      this._events[type].push(listener);
    else
      // Adding the second element, need to change to array.
      this._events[type] = [this._events[type], listener];

    // Check for listener leak
    if (isObject(this._events[type]) && !this._events[type].warned) {
      if (!isUndefined(this._maxListeners)) {
        m = this._maxListeners;
      } else {
        m = EventEmitter.defaultMaxListeners;
      }

      if (m && m > 0 && this._events[type].length > m) {
        this._events[type].warned = true;
        console.error('(node) warning: possible EventEmitter memory ' +
                      'leak detected. %d listeners added. ' +
                      'Use emitter.setMaxListeners() to increase limit.',
                      this._events[type].length);
        if (typeof console.trace === 'function') {
          // not supported in IE 10
          console.trace();
        }
      }
    }

    return this;
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.once = function(type, listener) {
    if (!isFunction(listener))
      throw TypeError('listener must be a function');

    var fired = false;

    function g() {
      this.removeListener(type, g);

      if (!fired) {
        fired = true;
        listener.apply(this, arguments);
      }
    }

    g.listener = listener;
    this.on(type, g);

    return this;
  };

  // emits a 'removeListener' event iff the listener was removed
  EventEmitter.prototype.removeListener = function(type, listener) {
    var list, position, length, i;

    if (!isFunction(listener))
      throw TypeError('listener must be a function');

    if (!this._events || !this._events[type])
      return this;

    list = this._events[type];
    length = list.length;
    position = -1;

    if (list === listener ||
        (isFunction(list.listener) && list.listener === listener)) {
      delete this._events[type];
      if (this._events.removeListener)
        this.emit('removeListener', type, listener);

    } else if (isObject(list)) {
      for (i = length; i-- > 0;) {
        if (list[i] === listener ||
            (list[i].listener && list[i].listener === listener)) {
          position = i;
          break;
        }
      }

      if (position < 0)
        return this;

      if (list.length === 1) {
        list.length = 0;
        delete this._events[type];
      } else {
        list.splice(position, 1);
      }

      if (this._events.removeListener)
        this.emit('removeListener', type, listener);
    }

    return this;
  };

  EventEmitter.prototype.removeAllListeners = function(type) {
    var key, listeners;

    if (!this._events)
      return this;

    // not listening for removeListener, no need to emit
    if (!this._events.removeListener) {
      if (arguments.length === 0)
        this._events = {};
      else if (this._events[type])
        delete this._events[type];
      return this;
    }

    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
      for (key in this._events) {
        if (key === 'removeListener') continue;
        this.removeAllListeners(key);
      }
      this.removeAllListeners('removeListener');
      this._events = {};
      return this;
    }

    listeners = this._events[type];

    if (isFunction(listeners)) {
      this.removeListener(type, listeners);
    } else if (listeners) {
      // LIFO order
      while (listeners.length)
        this.removeListener(type, listeners[listeners.length - 1]);
    }
    delete this._events[type];

    return this;
  };

  EventEmitter.prototype.listeners = function(type) {
    var ret;
    if (!this._events || !this._events[type])
      ret = [];
    else if (isFunction(this._events[type]))
      ret = [this._events[type]];
    else
      ret = this._events[type].slice();
    return ret;
  };

  EventEmitter.prototype.listenerCount = function(type) {
    if (this._events) {
      var evlistener = this._events[type];

      if (isFunction(evlistener))
        return 1;
      else if (evlistener)
        return evlistener.length;
    }
    return 0;
  };

  EventEmitter.listenerCount = function(emitter, type) {
    return emitter.listenerCount(type);
  };

  function isFunction(arg) {
    return typeof arg === 'function';
  }

  function isNumber(arg) {
    return typeof arg === 'number';
  }

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isUndefined(arg) {
    return arg === void 0;
  }


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var utils = __webpack_require__(195);

  module.exports = {
    Connection: __webpack_require__(269),
    constants: __webpack_require__(310),
    errors: __webpack_require__(277),
    validate: __webpack_require__(312),
    txFlags: __webpack_require__(311).txFlags,
    serverInfo: __webpack_require__(437),
    dropsToXrp: utils.dropsToXrp,
    xrpToDrops: utils.xrpToDrops,
    toRippledAmount: utils.toRippledAmount,
    generateAddress: utils.generateAddress,
    generateAddressAPI: utils.generateAddressAPI,
    removeUndefined: utils.removeUndefined,
    convertKeysFromSnakeCaseToCamelCase: utils.convertKeysFromSnakeCaseToCamelCase,
    iso8601ToRippleTime: utils.iso8601ToRippleTime,
    rippleTimeToISO8601: utils.rippleTimeToISO8601,
    isValidSecret: utils.isValidSecret
  };

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

  var _ = __webpack_require__(192);
  var BigNumber = __webpack_require__(196);

  var _require = __webpack_require__(197);

  var deriveKeypair = _require.deriveKeypair;

  function isValidSecret(secret) {
    try {
      deriveKeypair(secret);
      return true;
    } catch (err) {
      return false;
    }
  }

  function dropsToXrp(drops) {
    return new BigNumber(drops).dividedBy(1000000.0).toString();
  }

  function xrpToDrops(xrp) {
    return new BigNumber(xrp).times(1000000.0).floor().toString();
  }

  function toRippledAmount(amount) {
    if (amount.currency === 'XRP') {
      return xrpToDrops(amount.value);
    }
    return {
      currency: amount.currency,
      issuer: amount.counterparty ? amount.counterparty : amount.issuer ? amount.issuer : undefined,
      value: amount.value
    };
  }

  function convertKeysFromSnakeCaseToCamelCase(obj) {
    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
      var _ret = function () {
        var newKey = undefined;
        return {
          v: _.reduce(obj, function (result, value, key) {
            newKey = key;
            // taking this out of function leads to error in PhantomJS
            var FINDSNAKE = /([a-zA-Z]_[a-zA-Z])/g;
            if (FINDSNAKE.test(key)) {
              newKey = key.replace(FINDSNAKE, function (r) {
                return r[0] + r[2].toUpperCase();
              });
            }
            result[newKey] = convertKeysFromSnakeCaseToCamelCase(value);
            return result;
          }, {})
        };
      }();

      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    }
    return obj;
  }

  function removeUndefined(obj) {
    return _.omit(obj, _.isUndefined);
  }

  /**
   * @param {Number} rpepoch (seconds since 1/1/2000 GMT)
   * @return {Number} ms since unix epoch
   *
   */
  function rippleToUnixTimestamp(rpepoch) {
    return (rpepoch + 0x386D4380) * 1000;
  }

  /**
   * @param {Number|Date} timestamp (ms since unix epoch)
   * @return {Number} seconds since ripple epoch ( 1/1/2000 GMT)
   */
  function unixToRippleTimestamp(timestamp) {
    return Math.round(timestamp / 1000) - 0x386D4380;
  }

  function rippleTimeToISO8601(rippleTime) {
    return new Date(rippleToUnixTimestamp(rippleTime)).toISOString();
  }

  function iso8601ToRippleTime(iso8601) {
    return unixToRippleTimestamp(Date.parse(iso8601));
  }

  module.exports = {
    dropsToXrp: dropsToXrp,
    xrpToDrops: xrpToDrops,
    toRippledAmount: toRippledAmount,
    convertKeysFromSnakeCaseToCamelCase: convertKeysFromSnakeCaseToCamelCase,
    removeUndefined: removeUndefined,
    rippleTimeToISO8601: rippleTimeToISO8601,
    iso8601ToRippleTime: iso8601ToRippleTime,
    isValidSecret: isValidSecret
  };

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

  var __WEBPACK_AMD_DEFINE_RESULT__;/*! bignumber.js v2.1.2 https://github.com/MikeMcl/bignumber.js/LICENCE */

  ;(function (global) {
      'use strict';

      /*
        bignumber.js v2.1.2
        A JavaScript library for arbitrary-precision arithmetic.
        https://github.com/MikeMcl/bignumber.js
        Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>
        MIT Expat Licence
      */


      var BigNumber, parseNumeric,
          crypto = global.crypto,
          isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
          mathceil = Math.ceil,
          mathfloor = Math.floor,
          notBool = ' not a boolean or binary digit',
          roundingMode = 'rounding mode',
          tooManyDigits = 'number type has more than 15 significant digits',
          ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
          BASE = 1e14,
          LOG_BASE = 14,
          MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
          // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
          POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
          SQRT_BASE = 1e7,

          /*
           * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
           * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an
           * exception is thrown (if ERRORS is true).
           */
          MAX = 1E9;                                   // 0 to MAX_INT32


      /*
       * Create and return a BigNumber constructor.
       */
      function another(configObj) {
          var div,

              // id tracks the caller function, so its name can be included in error messages.
              id = 0,
              P = BigNumber.prototype,
              ONE = new BigNumber(1),


              /********************************* EDITABLE DEFAULTS **********************************/


              /*
               * The default values below must be integers within the inclusive ranges stated.
               * The values can also be changed at run-time using BigNumber.config.
               */

              // The maximum number of decimal places for operations involving division.
              DECIMAL_PLACES = 20,                     // 0 to MAX

              /*
               * The rounding mode used when rounding to the above decimal places, and when using
               * toExponential, toFixed, toFormat and toPrecision, and round (default value).
               * UP         0 Away from zero.
               * DOWN       1 Towards zero.
               * CEIL       2 Towards +Infinity.
               * FLOOR      3 Towards -Infinity.
               * HALF_UP    4 Towards nearest neighbour. If equidistant, up.
               * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
               * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
               * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
               * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
               */
              ROUNDING_MODE = 4,                       // 0 to 8

              // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

              // The exponent value at and beneath which toString returns exponential notation.
              // Number type: -7
              TO_EXP_NEG = -7,                         // 0 to -MAX

              // The exponent value at and above which toString returns exponential notation.
              // Number type: 21
              TO_EXP_POS = 21,                         // 0 to MAX

              // RANGE : [MIN_EXP, MAX_EXP]

              // The minimum exponent value, beneath which underflow to zero occurs.
              // Number type: -324  (5e-324)
              MIN_EXP = -1e7,                          // -1 to -MAX

              // The maximum exponent value, above which overflow to Infinity occurs.
              // Number type:  308  (1.7976931348623157e+308)
              // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
              MAX_EXP = 1e7,                           // 1 to MAX

              // Whether BigNumber Errors are ever thrown.
              ERRORS = true,                           // true or false

              // Change to intValidatorNoErrors if ERRORS is false.
              isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors

              // Whether to use cryptographically-secure random number generation, if available.
              CRYPTO = false,                          // true or false

              /*
               * The modulo mode used when calculating the modulus: a mod n.
               * The quotient (q = a / n) is calculated according to the corresponding rounding mode.
               * The remainder (r) is calculated as: r = a - n * q.
               *
               * UP        0 The remainder is positive if the dividend is negative, else is negative.
               * DOWN      1 The remainder has the same sign as the dividend.
               *             This modulo mode is commonly known as 'truncated division' and is
               *             equivalent to (a % n) in JavaScript.
               * FLOOR     3 The remainder has the same sign as the divisor (Python %).
               * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
               * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
               *             The remainder is always positive.
               *
               * The truncated division, floored division, Euclidian division and IEEE 754 remainder
               * modes are commonly used for the modulus operation.
               * Although the other rounding modes can also be used, they may not give useful results.
               */
              MODULO_MODE = 1,                         // 0 to 9

              // The maximum number of significant digits of the result of the toPower operation.
              // If POW_PRECISION is 0, there will be unlimited significant digits.
              POW_PRECISION = 100,                     // 0 to MAX

              // The format specification used by the BigNumber.prototype.toFormat method.
              FORMAT = {
                  decimalSeparator: '.',
                  groupSeparator: ',',
                  groupSize: 3,
                  secondaryGroupSize: 0,
                  fractionGroupSeparator: '\xA0',      // non-breaking space
                  fractionGroupSize: 0
              };


          /******************************************************************************************/


          // CONSTRUCTOR


          /*
           * The BigNumber constructor and exported function.
           * Create and return a new instance of a BigNumber object.
           *
           * n {number|string|BigNumber} A numeric value.
           * [b] {number} The base of n. Integer, 2 to 64 inclusive.
           */
          function BigNumber( n, b ) {
              var c, e, i, num, len, str,
                  x = this;

              // Enable constructor usage without new.
              if ( !( x instanceof BigNumber ) ) {

                  // 'BigNumber() constructor call without new: {n}'
                  if (ERRORS) raise( 26, 'constructor call without new', n );
                  return new BigNumber( n, b );
              }

              // 'new BigNumber() base not an integer: {b}'
              // 'new BigNumber() base out of range: {b}'
              if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {

                  // Duplicate.
                  if ( n instanceof BigNumber ) {
                      x.s = n.s;
                      x.e = n.e;
                      x.c = ( n = n.c ) ? n.slice() : n;
                      id = 0;
                      return;
                  }

                  if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {
                      x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;

                      // Fast path for integers.
                      if ( n === ~~n ) {
                          for ( e = 0, i = n; i >= 10; i /= 10, e++ );
                          x.e = e;
                          x.c = [n];
                          id = 0;
                          return;
                      }

                      str = n + '';
                  } else {
                      if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );
                      x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;
                  }
              } else {
                  b = b | 0;
                  str = n + '';

                  // Ensure return value is rounded to DECIMAL_PLACES as with other bases.
                  // Allow exponential notation to be used with base 10 argument.
                  if ( b == 10 ) {
                      x = new BigNumber( n instanceof BigNumber ? n : str );
                      return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );
                  }

                  // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                  // Any number in exponential form will fail due to the [Ee][+-].
                  if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||
                    !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +
                      '(?:\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {
                      return parseNumeric( x, str, num, b );
                  }

                  if (num) {
                      x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;

                      if ( ERRORS && str.replace( /^0\.0*|\./, '' ).length > 15 ) {

                          // 'new BigNumber() number type has more than 15 significant digits: {n}'
                          raise( id, tooManyDigits, n );
                      }

                      // Prevent later check for length on converted number.
                      num = false;
                  } else {
                      x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;
                  }

                  str = convertBase( str, 10, b, x.s );
              }

              // Decimal point?
              if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );

              // Exponential form?
              if ( ( i = str.search( /e/i ) ) > 0 ) {

                  // Determine exponent.
                  if ( e < 0 ) e = i;
                  e += +str.slice( i + 1 );
                  str = str.substring( 0, i );
              } else if ( e < 0 ) {

                  // Integer.
                  e = str.length;
              }

              // Determine leading zeros.
              for ( i = 0; str.charCodeAt(i) === 48; i++ );

              // Determine trailing zeros.
              for ( len = str.length; str.charCodeAt(--len) === 48; );
              str = str.slice( i, len + 1 );

              if (str) {
                  len = str.length;

                  // Disallow numbers with over 15 significant digits if number type.
                  // 'new BigNumber() number type has more than 15 significant digits: {n}'
                  if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );

                  e = e - i - 1;

                   // Overflow?
                  if ( e > MAX_EXP ) {

                      // Infinity.
                      x.c = x.e = null;

                  // Underflow?
                  } else if ( e < MIN_EXP ) {

                      // Zero.
                      x.c = [ x.e = 0 ];
                  } else {
                      x.e = e;
                      x.c = [];

                      // Transform base

                      // e is the base 10 exponent.
                      // i is where to slice str to get the first element of the coefficient array.
                      i = ( e + 1 ) % LOG_BASE;
                      if ( e < 0 ) i += LOG_BASE;

                      if ( i < len ) {
                          if (i) x.c.push( +str.slice( 0, i ) );

                          for ( len -= LOG_BASE; i < len; ) {
                              x.c.push( +str.slice( i, i += LOG_BASE ) );
                          }

                          str = str.slice(i);
                          i = LOG_BASE - str.length;
                      } else {
                          i -= len;
                      }

                      for ( ; i--; str += '0' );
                      x.c.push( +str );
                  }
              } else {

                  // Zero.
                  x.c = [ x.e = 0 ];
              }

              id = 0;
          }


          // CONSTRUCTOR PROPERTIES


          BigNumber.another = another;

          BigNumber.ROUND_UP = 0;
          BigNumber.ROUND_DOWN = 1;
          BigNumber.ROUND_CEIL = 2;
          BigNumber.ROUND_FLOOR = 3;
          BigNumber.ROUND_HALF_UP = 4;
          BigNumber.ROUND_HALF_DOWN = 5;
          BigNumber.ROUND_HALF_EVEN = 6;
          BigNumber.ROUND_HALF_CEIL = 7;
          BigNumber.ROUND_HALF_FLOOR = 8;
          BigNumber.EUCLID = 9;


          /*
           * Configure infrequently-changing library-wide settings.
           *
           * Accept an object or an argument list, with one or many of the following properties or
           * parameters respectively:
           *
           *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive
           *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive
           *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or
           *                                      [integer -MAX to 0 incl., 0 to MAX incl.]
           *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or
           *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]
           *   ERRORS          {boolean|number}   true, false, 1 or 0
           *   CRYPTO          {boolean|number}   true, false, 1 or 0
           *   MODULO_MODE     {number}           0 to 9 inclusive
           *   POW_PRECISION   {number}           0 to MAX inclusive
           *   FORMAT          {object}           See BigNumber.prototype.toFormat
           *      decimalSeparator       {string}
           *      groupSeparator         {string}
           *      groupSize              {number}
           *      secondaryGroupSize     {number}
           *      fractionGroupSeparator {string}
           *      fractionGroupSize      {number}
           *
           * (The values assigned to the above FORMAT object properties are not checked for validity.)
           *
           * E.g.
           * BigNumber.config(20, 4) is equivalent to
           * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
           *
           * Ignore properties/parameters set to null or undefined.
           * Return an object with the properties current values.
           */
          BigNumber.config = function () {
              var v, p,
                  i = 0,
                  r = {},
                  a = arguments,
                  o = a[0],
                  has = o && typeof o == 'object'
                    ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }
                    : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };

              // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
              // 'config() DECIMAL_PLACES not an integer: {v}'
              // 'config() DECIMAL_PLACES out of range: {v}'
              if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {
                  DECIMAL_PLACES = v | 0;
              }
              r[p] = DECIMAL_PLACES;

              // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
              // 'config() ROUNDING_MODE not an integer: {v}'
              // 'config() ROUNDING_MODE out of range: {v}'
              if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {
                  ROUNDING_MODE = v | 0;
              }
              r[p] = ROUNDING_MODE;

              // EXPONENTIAL_AT {number|number[]}
              // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].
              // 'config() EXPONENTIAL_AT not an integer: {v}'
              // 'config() EXPONENTIAL_AT out of range: {v}'
              if ( has( p = 'EXPONENTIAL_AT' ) ) {

                  if ( isArray(v) ) {
                      if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {
                          TO_EXP_NEG = v[0] | 0;
                          TO_EXP_POS = v[1] | 0;
                      }
                  } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {
                      TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );
                  }
              }
              r[p] = [ TO_EXP_NEG, TO_EXP_POS ];

              // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
              // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
              // 'config() RANGE not an integer: {v}'
              // 'config() RANGE cannot be zero: {v}'
              // 'config() RANGE out of range: {v}'
              if ( has( p = 'RANGE' ) ) {

                  if ( isArray(v) ) {
                      if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {
                          MIN_EXP = v[0] | 0;
                          MAX_EXP = v[1] | 0;
                      }
                  } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {
                      if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );
                      else if (ERRORS) raise( 2, p + ' cannot be zero', v );
                  }
              }
              r[p] = [ MIN_EXP, MAX_EXP ];

              // ERRORS {boolean|number} true, false, 1 or 0.
              // 'config() ERRORS not a boolean or binary digit: {v}'
              if ( has( p = 'ERRORS' ) ) {

                  if ( v === !!v || v === 1 || v === 0 ) {
                      id = 0;
                      isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;
                  } else if (ERRORS) {
                      raise( 2, p + notBool, v );
                  }
              }
              r[p] = ERRORS;

              // CRYPTO {boolean|number} true, false, 1 or 0.
              // 'config() CRYPTO not a boolean or binary digit: {v}'
              // 'config() crypto unavailable: {crypto}'
              if ( has( p = 'CRYPTO' ) ) {

                  if ( v === !!v || v === 1 || v === 0 ) {
                      CRYPTO = !!( v && crypto && typeof crypto == 'object' );
                      if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );
                  } else if (ERRORS) {
                      raise( 2, p + notBool, v );
                  }
              }
              r[p] = CRYPTO;

              // MODULO_MODE {number} Integer, 0 to 9 inclusive.
              // 'config() MODULO_MODE not an integer: {v}'
              // 'config() MODULO_MODE out of range: {v}'
              if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {
                  MODULO_MODE = v | 0;
              }
              r[p] = MODULO_MODE;

              // POW_PRECISION {number} Integer, 0 to MAX inclusive.
              // 'config() POW_PRECISION not an integer: {v}'
              // 'config() POW_PRECISION out of range: {v}'
              if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {
                  POW_PRECISION = v | 0;
              }
              r[p] = POW_PRECISION;

              // FORMAT {object}
              // 'config() FORMAT not an object: {v}'
              if ( has( p = 'FORMAT' ) ) {

                  if ( typeof v == 'object' ) {
                      FORMAT = v;
                  } else if (ERRORS) {
                      raise( 2, p + ' not an object', v );
                  }
              }
              r[p] = FORMAT;

              return r;
          };


          /*
           * Return a new BigNumber whose value is the maximum of the arguments.
           *
           * arguments {number|string|BigNumber}
           */
          BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };


          /*
           * Return a new BigNumber whose value is the minimum of the arguments.
           *
           * arguments {number|string|BigNumber}
           */
          BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };


          /*
           * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
           * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
           * zeros are produced).
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           *
           * 'random() decimal places not an integer: {dp}'
           * 'random() decimal places out of range: {dp}'
           * 'random() crypto unavailable: {crypto}'
           */
          BigNumber.random = (function () {
              var pow2_53 = 0x20000000000000;

              // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
              // Check if Math.random() produces more than 32 bits of randomness.
              // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
              // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
              var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
                ? function () { return mathfloor( Math.random() * pow2_53 ); }
                : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
                    (Math.random() * 0x800000 | 0); };

              return function (dp) {
                  var a, b, e, k, v,
                      i = 0,
                      c = [],
                      rand = new BigNumber(ONE);

                  dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;
                  k = mathceil( dp / LOG_BASE );

                  if (CRYPTO) {

                      // Browsers supporting crypto.getRandomValues.
                      if ( crypto && crypto.getRandomValues ) {

                          a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );

                          for ( ; i < k; ) {

                              // 53 bits:
                              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                              // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                              //                                     11111 11111111 11111111
                              // 0x20000 is 2^21.
                              v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                              // Rejection sampling:
                              // 0 <= v < 9007199254740992
                              // Probability that v >= 9e15, is
                              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                              if ( v >= 9e15 ) {
                                  b = crypto.getRandomValues( new Uint32Array(2) );
                                  a[i] = b[0];
                                  a[i + 1] = b[1];
                              } else {

                                  // 0 <= v <= 8999999999999999
                                  // 0 <= (v % 1e14) <= 99999999999999
                                  c.push( v % 1e14 );
                                  i += 2;
                              }
                          }
                          i = k / 2;

                      // Node.js supporting crypto.randomBytes.
                      } else if ( crypto && crypto.randomBytes ) {

                          // buffer
                          a = crypto.randomBytes( k *= 7 );

                          for ( ; i < k; ) {

                              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                              // 0x100000000 is 2^32, 0x1000000 is 2^24
                              // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                              // 0 <= v < 9007199254740992
                              v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +
                                    ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +
                                    ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];

                              if ( v >= 9e15 ) {
                                  crypto.randomBytes(7).copy( a, i );
                              } else {

                                  // 0 <= (v % 1e14) <= 99999999999999
                                  c.push( v % 1e14 );
                                  i += 7;
                              }
                          }
                          i = k / 7;
                      } else if (ERRORS) {
                          raise( 14, 'crypto unavailable', crypto );
                      }
                  }

                  // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.
                  if (!i) {

                      for ( ; i < k; ) {
                          v = random53bitInt();
                          if ( v < 9e15 ) c[i++] = v % 1e14;
                      }
                  }

                  k = c[--i];
                  dp %= LOG_BASE;

                  // Convert trailing digits to zeros according to dp.
                  if ( k && dp ) {
                      v = POWS_TEN[LOG_BASE - dp];
                      c[i] = mathfloor( k / v ) * v;
                  }

                  // Remove trailing elements which are zero.
                  for ( ; c[i] === 0; c.pop(), i-- );

                  // Zero?
                  if ( i < 0 ) {
                      c = [ e = 0 ];
                  } else {

                      // Remove leading elements which are zero and adjust exponent accordingly.
                      for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);

                      // Count the digits of the first element of c to determine leading zeros, and...
                      for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);

                      // adjust the exponent accordingly.
                      if ( i < LOG_BASE ) e -= LOG_BASE - i;
                  }

                  rand.e = e;
                  rand.c = c;
                  return rand;
              };
          })();


          // PRIVATE FUNCTIONS


          // Convert a numeric string of baseIn to a numeric string of baseOut.
          function convertBase( str, baseOut, baseIn, sign ) {
              var d, e, k, r, x, xc, y,
                  i = str.indexOf( '.' ),
                  dp = DECIMAL_PLACES,
                  rm = ROUNDING_MODE;

              if ( baseIn < 37 ) str = str.toLowerCase();

              // Non-integer.
              if ( i >= 0 ) {
                  k = POW_PRECISION;

                  // Unlimited precision.
                  POW_PRECISION = 0;
                  str = str.replace( '.', '' );
                  y = new BigNumber(baseIn);
                  x = y.pow( str.length - i );
                  POW_PRECISION = k;

                  // Convert str as if an integer, then restore the fraction part by dividing the
                  // result by its base raised to a power.
                  y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );
                  y.e = y.c.length;
              }

              // Convert the number as integer.
              xc = toBaseOut( str, baseIn, baseOut );
              e = k = xc.length;

              // Remove trailing zeros.
              for ( ; xc[--k] == 0; xc.pop() );
              if ( !xc[0] ) return '0';

              if ( i < 0 ) {
                  --e;
              } else {
                  x.c = xc;
                  x.e = e;

                  // sign is needed for correct rounding.
                  x.s = sign;
                  x = div( x, y, dp, rm, baseOut );
                  xc = x.c;
                  r = x.r;
                  e = x.e;
              }

              d = e + dp + 1;

              // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.
              i = xc[d];
              k = baseOut / 2;
              r = r || d < 0 || xc[d + 1] != null;

              r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
                         : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
                           rm == ( x.s < 0 ? 8 : 7 ) );

              if ( d < 1 || !xc[0] ) {

                  // 1^-dp or 0.
                  str = r ? toFixedPoint( '1', -dp ) : '0';
              } else {
                  xc.length = d;

                  if (r) {

                      // Rounding up may mean the previous digit has to be rounded up and so on.
                      for ( --baseOut; ++xc[--d] > baseOut; ) {
                          xc[d] = 0;

                          if ( !d ) {
                              ++e;
                              xc.unshift(1);
                          }
                      }
                  }

                  // Determine trailing zeros.
                  for ( k = xc.length; !xc[--k]; );

                  // E.g. [4, 11, 15] becomes 4bf.
                  for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );
                  str = toFixedPoint( str, e );
              }

              // The caller will add the sign.
              return str;
          }


          // Perform division in the specified base. Called by div and convertBase.
          div = (function () {

              // Assume non-zero x and k.
              function multiply( x, k, base ) {
                  var m, temp, xlo, xhi,
                      carry = 0,
                      i = x.length,
                      klo = k % SQRT_BASE,
                      khi = k / SQRT_BASE | 0;

                  for ( x = x.slice(); i--; ) {
                      xlo = x[i] % SQRT_BASE;
                      xhi = x[i] / SQRT_BASE | 0;
                      m = khi * xlo + xhi * klo;
                      temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;
                      carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;
                      x[i] = temp % base;
                  }

                  if (carry) x.unshift(carry);

                  return x;
              }

              function compare( a, b, aL, bL ) {
                  var i, cmp;

                  if ( aL != bL ) {
                      cmp = aL > bL ? 1 : -1;
                  } else {

                      for ( i = cmp = 0; i < aL; i++ ) {

                          if ( a[i] != b[i] ) {
                              cmp = a[i] > b[i] ? 1 : -1;
                              break;
                          }
                      }
                  }
                  return cmp;
              }

              function subtract( a, b, aL, base ) {
                  var i = 0;

                  // Subtract b from a.
                  for ( ; aL--; ) {
                      a[aL] -= i;
                      i = a[aL] < b[aL] ? 1 : 0;
                      a[aL] = i * base + a[aL] - b[aL];
                  }

                  // Remove leading zeros.
                  for ( ; !a[0] && a.length > 1; a.shift() );
              }

              // x: dividend, y: divisor.
              return function ( x, y, dp, rm, base ) {
                  var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
                      yL, yz,
                      s = x.s == y.s ? 1 : -1,
                      xc = x.c,
                      yc = y.c;

                  // Either NaN, Infinity or 0?
                  if ( !xc || !xc[0] || !yc || !yc[0] ) {

                      return new BigNumber(

                        // Return NaN if either NaN, or both Infinity or 0.
                        !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :

                          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                          xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                      );
                  }

                  q = new BigNumber(s);
                  qc = q.c = [];
                  e = x.e - y.e;
                  s = dp + e + 1;

                  if ( !base ) {
                      base = BASE;
                      e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );
                      s = s / LOG_BASE | 0;
                  }

                  // Result exponent may be one less then the current value of e.
                  // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                  for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );
                  if ( yc[i] > ( xc[i] || 0 ) ) e--;

                  if ( s < 0 ) {
                      qc.push(1);
                      more = true;
                  } else {
                      xL = xc.length;
                      yL = yc.length;
                      i = 0;
                      s += 2;

                      // Normalise xc and yc so highest order digit of yc is >= base / 2.

                      n = mathfloor( base / ( yc[0] + 1 ) );

                      // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.
                      // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {
                      if ( n > 1 ) {
                          yc = multiply( yc, n, base );
                          xc = multiply( xc, n, base );
                          yL = yc.length;
                          xL = xc.length;
                      }

                      xi = yL;
                      rem = xc.slice( 0, yL );
                      remL = rem.length;

                      // Add zeros to make remainder as long as divisor.
                      for ( ; remL < yL; rem[remL++] = 0 );
                      yz = yc.slice();
                      yz.unshift(0);
                      yc0 = yc[0];
                      if ( yc[1] >= base / 2 ) yc0++;
                      // Not necessary, but to prevent trial digit n > base, when using base 3.
                      // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;

                      do {
                          n = 0;

                          // Compare divisor and remainder.
                          cmp = compare( yc, rem, yL, remL );

                          // If divisor < remainder.
                          if ( cmp < 0 ) {

                              // Calculate trial digit, n.

                              rem0 = rem[0];
                              if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );

                              // n is how many times the divisor goes into the current remainder.
                              n = mathfloor( rem0 / yc0 );

                              //  Algorithm:
                              //  1. product = divisor * trial digit (n)
                              //  2. if product > remainder: product -= divisor, n--
                              //  3. remainder -= product
                              //  4. if product was < remainder at 2:
                              //    5. compare new remainder and divisor
                              //    6. If remainder > divisor: remainder -= divisor, n++

                              if ( n > 1 ) {

                                  // n may be > base only when base is 3.
                                  if (n >= base) n = base - 1;

                                  // product = divisor * trial digit.
                                  prod = multiply( yc, n, base );
                                  prodL = prod.length;
                                  remL = rem.length;

                                  // Compare product and remainder.
                                  // If product > remainder.
                                  // Trial digit n too high.
                                  // n is 1 too high about 5% of the time, and is not known to have
                                  // ever been more than 1 too high.
                                  while ( compare( prod, rem, prodL, remL ) == 1 ) {
                                      n--;

                                      // Subtract divisor from product.
                                      subtract( prod, yL < prodL ? yz : yc, prodL, base );
                                      prodL = prod.length;
                                      cmp = 1;
                                  }
                              } else {

                                  // n is 0 or 1, cmp is -1.
                                  // If n is 0, there is no need to compare yc and rem again below,
                                  // so change cmp to 1 to avoid it.
                                  // If n is 1, leave cmp as -1, so yc and rem are compared again.
                                  if ( n == 0 ) {

                                      // divisor < remainder, so n must be at least 1.
                                      cmp = n = 1;
                                  }

                                  // product = divisor
                                  prod = yc.slice();
                                  prodL = prod.length;
                              }

                              if ( prodL < remL ) prod.unshift(0);

                              // Subtract product from remainder.
                              subtract( rem, prod, remL, base );
                              remL = rem.length;

                               // If product was < remainder.
                              if ( cmp == -1 ) {

                                  // Compare divisor and new remainder.
                                  // If divisor < new remainder, subtract divisor from remainder.
                                  // Trial digit n too low.
                                  // n is 1 too low about 5% of the time, and very rarely 2 too low.
                                  while ( compare( yc, rem, yL, remL ) < 1 ) {
                                      n++;

                                      // Subtract divisor from remainder.
                                      subtract( rem, yL < remL ? yz : yc, remL, base );
                                      remL = rem.length;
                                  }
                              }
                          } else if ( cmp === 0 ) {
                              n++;
                              rem = [0];
                          } // else cmp === 1 and n will be 0

                          // Add the next digit, n, to the result array.
                          qc[i++] = n;

                          // Update the remainder.
                          if ( rem[0] ) {
                              rem[remL++] = xc[xi] || 0;
                          } else {
                              rem = [ xc[xi] ];
                              remL = 1;
                          }
                      } while ( ( xi++ < xL || rem[0] != null ) && s-- );

                      more = rem[0] != null;

                      // Leading zero?
                      if ( !qc[0] ) qc.shift();
                  }

                  if ( base == BASE ) {

                      // To calculate q.e, first get the number of digits of qc[0].
                      for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );
                      round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );

                  // Caller is convertBase.
                  } else {
                      q.e = e;
                      q.r = +more;
                  }

                  return q;
              };
          })();


          /*
           * Return a string representing the value of BigNumber n in fixed-point or exponential
           * notation rounded to the specified decimal places or significant digits.
           *
           * n is a BigNumber.
           * i is the index of the last digit required (i.e. the digit that may be rounded up).
           * rm is the rounding mode.
           * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.
           */
          function format( n, i, rm, caller ) {
              var c0, e, ne, len, str;

              rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )
                ? rm | 0 : ROUNDING_MODE;

              if ( !n.c ) return n.toString();
              c0 = n.c[0];
              ne = n.e;

              if ( i == null ) {
                  str = coeffToString( n.c );
                  str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG
                    ? toExponential( str, ne )
                    : toFixedPoint( str, ne );
              } else {
                  n = round( new BigNumber(n), i, rm );

                  // n.e may have changed if the value was rounded up.
                  e = n.e;

                  str = coeffToString( n.c );
                  len = str.length;

                  // toPrecision returns exponential notation if the number of significant digits
                  // specified is less than the number of digits necessary to represent the integer
                  // part of the value in fixed-point notation.

                  // Exponential notation.
                  if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {

                      // Append zeros?
                      for ( ; len < i; str += '0', len++ );
                      str = toExponential( str, e );

                  // Fixed-point notation.
                  } else {
                      i -= ne;
                      str = toFixedPoint( str, e );

                      // Append zeros?
                      if ( e + 1 > len ) {
                          if ( --i > 0 ) for ( str += '.'; i--; str += '0' );
                      } else {
                          i += e - len;
                          if ( i > 0 ) {
                              if ( e + 1 == len ) str += '.';
                              for ( ; i--; str += '0' );
                          }
                      }
                  }
              }

              return n.s < 0 && c0 ? '-' + str : str;
          }


          // Handle BigNumber.max and BigNumber.min.
          function maxOrMin( args, method ) {
              var m, n,
                  i = 0;

              if ( isArray( args[0] ) ) args = args[0];
              m = new BigNumber( args[0] );

              for ( ; ++i < args.length; ) {
                  n = new BigNumber( args[i] );

                  // If any number is NaN, return NaN.
                  if ( !n.s ) {
                      m = n;
                      break;
                  } else if ( method.call( m, n ) ) {
                      m = n;
                  }
              }

              return m;
          }


          /*
           * Return true if n is an integer in range, otherwise throw.
           * Use for argument validation when ERRORS is true.
           */
          function intValidatorWithErrors( n, min, max, caller, name ) {
              if ( n < min || n > max || n != truncate(n) ) {
                  raise( caller, ( name || 'decimal places' ) +
                    ( n < min || n > max ? ' out of range' : ' not an integer' ), n );
              }

              return true;
          }


          /*
           * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
           * Called by minus, plus and times.
           */
          function normalise( n, c, e ) {
              var i = 1,
                  j = c.length;

               // Remove trailing zeros.
              for ( ; !c[--j]; c.pop() );

              // Calculate the base 10 exponent. First get the number of digits of c[0].
              for ( j = c[0]; j >= 10; j /= 10, i++ );

              // Overflow?
              if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {

                  // Infinity.
                  n.c = n.e = null;

              // Underflow?
              } else if ( e < MIN_EXP ) {

                  // Zero.
                  n.c = [ n.e = 0 ];
              } else {
                  n.e = e;
                  n.c = c;
              }

              return n;
          }


          // Handle values that fail the validity test in BigNumber.
          parseNumeric = (function () {
              var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
                  dotAfter = /^([^.]+)\.$/,
                  dotBefore = /^\.([^.]+)$/,
                  isInfinityOrNaN = /^-?(Infinity|NaN)$/,
                  whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

              return function ( x, str, num, b ) {
                  var base,
                      s = num ? str : str.replace( whitespaceOrPlus, '' );

                  // No exception on ±Infinity or NaN.
                  if ( isInfinityOrNaN.test(s) ) {
                      x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                  } else {
                      if ( !num ) {

                          // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                          s = s.replace( basePrefix, function ( m, p1, p2 ) {
                              base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                              return !b || b == base ? p1 : m;
                          });

                          if (b) {
                              base = b;

                              // E.g. '1.' to '1', '.1' to '0.1'
                              s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );
                          }

                          if ( str != s ) return new BigNumber( s, base );
                      }

                      // 'new BigNumber() not a number: {n}'
                      // 'new BigNumber() not a base {b} number: {n}'
                      if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );
                      x.s = null;
                  }

                  x.c = x.e = null;
                  id = 0;
              }
          })();


          // Throw a BigNumber Error.
          function raise( caller, msg, val ) {
              var error = new Error( [
                  'new BigNumber',     // 0
                  'cmp',               // 1
                  'config',            // 2
                  'div',               // 3
                  'divToInt',          // 4
                  'eq',                // 5
                  'gt',                // 6
                  'gte',               // 7
                  'lt',                // 8
                  'lte',               // 9
                  'minus',             // 10
                  'mod',               // 11
                  'plus',              // 12
                  'precision',         // 13
                  'random',            // 14
                  'round',             // 15
                  'shift',             // 16
                  'times',             // 17
                  'toDigits',          // 18
                  'toExponential',     // 19
                  'toFixed',           // 20
                  'toFormat',          // 21
                  'toFraction',        // 22
                  'pow',               // 23
                  'toPrecision',       // 24
                  'toString',          // 25
                  'BigNumber'          // 26
              ][caller] + '() ' + msg + ': ' + val );

              error.name = 'BigNumber Error';
              id = 0;
              throw error;
          }


          /*
           * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
           * If r is truthy, it is known that there are more digits after the rounding digit.
           */
          function round( x, sd, rm, r ) {
              var d, i, j, k, n, ni, rd,
                  xc = x.c,
                  pows10 = POWS_TEN;

              // if x is not Infinity or NaN...
              if (xc) {

                  // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                  // n is a base 1e14 number, the value of the element of array x.c containing rd.
                  // ni is the index of n within x.c.
                  // d is the number of digits of n.
                  // i is the index of rd within n including leading zeros.
                  // j is the actual index of rd within n (if < 0, rd is a leading zero).
                  out: {

                      // Get the number of digits of the first element of xc.
                      for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );
                      i = sd - d;

                      // If the rounding digit is in the first element of xc...
                      if ( i < 0 ) {
                          i += LOG_BASE;
                          j = sd;
                          n = xc[ ni = 0 ];

                          // Get the rounding digit at index j of n.
                          rd = n / pows10[ d - j - 1 ] % 10 | 0;
                      } else {
                          ni = mathceil( ( i + 1 ) / LOG_BASE );

                          if ( ni >= xc.length ) {

                              if (r) {

                                  // Needed by sqrt.
                                  for ( ; xc.length <= ni; xc.push(0) );
                                  n = rd = 0;
                                  d = 1;
                                  i %= LOG_BASE;
                                  j = i - LOG_BASE + 1;
                              } else {
                                  break out;
                              }
                          } else {
                              n = k = xc[ni];

                              // Get the number of digits of n.
                              for ( d = 1; k >= 10; k /= 10, d++ );

                              // Get the index of rd within n.
                              i %= LOG_BASE;

                              // Get the index of rd within n, adjusted for leading zeros.
                              // The number of leading zeros of n is given by LOG_BASE - d.
                              j = i - LOG_BASE + d;

                              // Get the rounding digit at index j of n.
                              rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;
                          }
                      }

                      r = r || sd < 0 ||

                      // Are there any non-zero digits after the rounding digit?
                      // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right
                      // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                        xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );

                      r = rm < 4
                        ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
                        : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&

                          // Check whether the digit to the left of the rounding digit is odd.
                          ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||
                            rm == ( x.s < 0 ? 8 : 7 ) );

                      if ( sd < 1 || !xc[0] ) {
                          xc.length = 0;

                          if (r) {

                              // Convert sd to decimal places.
                              sd -= x.e + 1;

                              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                              xc[0] = pows10[ ( LOG_BASE - sd % LOG_BASE ) % LOG_BASE ];
                              x.e = -sd || 0;
                          } else {

                              // Zero.
                              xc[0] = x.e = 0;
                          }

                          return x;
                      }

                      // Remove excess digits.
                      if ( i == 0 ) {
                          xc.length = ni;
                          k = 1;
                          ni--;
                      } else {
                          xc.length = ni + 1;
                          k = pows10[ LOG_BASE - i ];

                          // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                          // j > 0 means i > number of leading zeros of n.
                          xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;
                      }

                      // Round up?
                      if (r) {

                          for ( ; ; ) {

                              // If the digit to be rounded up is in the first element of xc...
                              if ( ni == 0 ) {

                                  // i will be the length of xc[0] before k is added.
                                  for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );
                                  j = xc[0] += k;
                                  for ( k = 1; j >= 10; j /= 10, k++ );

                                  // if i != k the length has increased.
                                  if ( i != k ) {
                                      x.e++;
                                      if ( xc[0] == BASE ) xc[0] = 1;
                                  }

                                  break;
                              } else {
                                  xc[ni] += k;
                                  if ( xc[ni] != BASE ) break;
                                  xc[ni--] = 0;
                                  k = 1;
                              }
                          }
                      }

                      // Remove trailing zeros.
                      for ( i = xc.length; xc[--i] === 0; xc.pop() );
                  }

                  // Overflow? Infinity.
                  if ( x.e > MAX_EXP ) {
                      x.c = x.e = null;

                  // Underflow? Zero.
                  } else if ( x.e < MIN_EXP ) {
                      x.c = [ x.e = 0 ];
                  }
              }

              return x;
          }


          // PROTOTYPE/INSTANCE METHODS


          /*
           * Return a new BigNumber whose value is the absolute value of this BigNumber.
           */
          P.absoluteValue = P.abs = function () {
              var x = new BigNumber(this);
              if ( x.s < 0 ) x.s = 1;
              return x;
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
           * number in the direction of Infinity.
           */
          P.ceil = function () {
              return round( new BigNumber(this), this.e + 1, 2 );
          };


          /*
           * Return
           * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
           * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
           * 0 if they have the same value,
           * or null if the value of either is NaN.
           */
          P.comparedTo = P.cmp = function ( y, b ) {
              id = 1;
              return compare( this, new BigNumber( y, b ) );
          };


          /*
           * Return the number of decimal places of the value of this BigNumber, or null if the value
           * of this BigNumber is ±Infinity or NaN.
           */
          P.decimalPlaces = P.dp = function () {
              var n, v,
                  c = this.c;

              if ( !c ) return null;
              n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;

              // Subtract the number of trailing zeros of the last number.
              if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );
              if ( n < 0 ) n = 0;

              return n;
          };


          /*
           *  n / 0 = I
           *  n / N = N
           *  n / I = 0
           *  0 / n = 0
           *  0 / 0 = N
           *  0 / N = N
           *  0 / I = 0
           *  N / n = N
           *  N / 0 = N
           *  N / N = N
           *  N / I = N
           *  I / n = I
           *  I / 0 = I
           *  I / N = N
           *  I / I = N
           *
           * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
           * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
           */
          P.dividedBy = P.div = function ( y, b ) {
              id = 3;
              return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );
          };


          /*
           * Return a new BigNumber whose value is the integer part of dividing the value of this
           * BigNumber by the value of BigNumber(y, b).
           */
          P.dividedToIntegerBy = P.divToInt = function ( y, b ) {
              id = 4;
              return div( this, new BigNumber( y, b ), 0, 1 );
          };


          /*
           * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
           * otherwise returns false.
           */
          P.equals = P.eq = function ( y, b ) {
              id = 5;
              return compare( this, new BigNumber( y, b ) ) === 0;
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
           * number in the direction of -Infinity.
           */
          P.floor = function () {
              return round( new BigNumber(this), this.e + 1, 3 );
          };


          /*
           * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
           * otherwise returns false.
           */
          P.greaterThan = P.gt = function ( y, b ) {
              id = 6;
              return compare( this, new BigNumber( y, b ) ) > 0;
          };


          /*
           * Return true if the value of this BigNumber is greater than or equal to the value of
           * BigNumber(y, b), otherwise returns false.
           */
          P.greaterThanOrEqualTo = P.gte = function ( y, b ) {
              id = 7;
              return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;

          };


          /*
           * Return true if the value of this BigNumber is a finite number, otherwise returns false.
           */
          P.isFinite = function () {
              return !!this.c;
          };


          /*
           * Return true if the value of this BigNumber is an integer, otherwise return false.
           */
          P.isInteger = P.isInt = function () {
              return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;
          };


          /*
           * Return true if the value of this BigNumber is NaN, otherwise returns false.
           */
          P.isNaN = function () {
              return !this.s;
          };


          /*
           * Return true if the value of this BigNumber is negative, otherwise returns false.
           */
          P.isNegative = P.isNeg = function () {
              return this.s < 0;
          };


          /*
           * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.
           */
          P.isZero = function () {
              return !!this.c && this.c[0] == 0;
          };


          /*
           * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
           * otherwise returns false.
           */
          P.lessThan = P.lt = function ( y, b ) {
              id = 8;
              return compare( this, new BigNumber( y, b ) ) < 0;
          };


          /*
           * Return true if the value of this BigNumber is less than or equal to the value of
           * BigNumber(y, b), otherwise returns false.
           */
          P.lessThanOrEqualTo = P.lte = function ( y, b ) {
              id = 9;
              return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;
          };


          /*
           *  n - 0 = n
           *  n - N = N
           *  n - I = -I
           *  0 - n = -n
           *  0 - 0 = 0
           *  0 - N = N
           *  0 - I = -I
           *  N - n = N
           *  N - 0 = N
           *  N - N = N
           *  N - I = N
           *  I - n = I
           *  I - 0 = I
           *  I - N = N
           *  I - I = N
           *
           * Return a new BigNumber whose value is the value of this BigNumber minus the value of
           * BigNumber(y, b).
           */
          P.minus = P.sub = function ( y, b ) {
              var i, j, t, xLTy,
                  x = this,
                  a = x.s;

              id = 10;
              y = new BigNumber( y, b );
              b = y.s;

              // Either NaN?
              if ( !a || !b ) return new BigNumber(NaN);

              // Signs differ?
              if ( a != b ) {
                  y.s = -b;
                  return x.plus(y);
              }

              var xe = x.e / LOG_BASE,
                  ye = y.e / LOG_BASE,
                  xc = x.c,
                  yc = y.c;

              if ( !xe || !ye ) {

                  // Either Infinity?
                  if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );

                  // Either zero?
                  if ( !xc[0] || !yc[0] ) {

                      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                      return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :

                        // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                        ROUNDING_MODE == 3 ? -0 : 0 );
                  }
              }

              xe = bitFloor(xe);
              ye = bitFloor(ye);
              xc = xc.slice();

              // Determine which is the bigger number.
              if ( a = xe - ye ) {

                  if ( xLTy = a < 0 ) {
                      a = -a;
                      t = xc;
                  } else {
                      ye = xe;
                      t = yc;
                  }

                  t.reverse();

                  // Prepend zeros to equalise exponents.
                  for ( b = a; b--; t.push(0) );
                  t.reverse();
              } else {

                  // Exponents equal. Check digit by digit.
                  j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;

                  for ( a = b = 0; b < j; b++ ) {

                      if ( xc[b] != yc[b] ) {
                          xLTy = xc[b] < yc[b];
                          break;
                      }
                  }
              }

              // x < y? Point xc to the array of the bigger number.
              if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

              b = ( j = yc.length ) - ( i = xc.length );

              // Append zeros to xc if shorter.
              // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
              if ( b > 0 ) for ( ; b--; xc[i++] = 0 );
              b = BASE - 1;

              // Subtract yc from xc.
              for ( ; j > a; ) {

                  if ( xc[--j] < yc[j] ) {
                      for ( i = j; i && !xc[--i]; xc[i] = b );
                      --xc[i];
                      xc[j] += BASE;
                  }

                  xc[j] -= yc[j];
              }

              // Remove leading zeros and adjust exponent accordingly.
              for ( ; xc[0] == 0; xc.shift(), --ye );

              // Zero?
              if ( !xc[0] ) {

                  // Following IEEE 754 (2008) 6.3,
                  // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                  y.s = ROUNDING_MODE == 3 ? -1 : 1;
                  y.c = [ y.e = 0 ];
                  return y;
              }

              // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
              // for finite x and y.
              return normalise( y, xc, ye );
          };


          /*
           *   n % 0 =  N
           *   n % N =  N
           *   n % I =  n
           *   0 % n =  0
           *  -0 % n = -0
           *   0 % 0 =  N
           *   0 % N =  N
           *   0 % I =  0
           *   N % n =  N
           *   N % 0 =  N
           *   N % N =  N
           *   N % I =  N
           *   I % n =  N
           *   I % 0 =  N
           *   I % N =  N
           *   I % I =  N
           *
           * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
           * BigNumber(y, b). The result depends on the value of MODULO_MODE.
           */
          P.modulo = P.mod = function ( y, b ) {
              var q, s,
                  x = this;

              id = 11;
              y = new BigNumber( y, b );

              // Return NaN if x is Infinity or NaN, or y is NaN or zero.
              if ( !x.c || !y.s || y.c && !y.c[0] ) {
                  return new BigNumber(NaN);

              // Return x if y is Infinity or x is zero.
              } else if ( !y.c || x.c && !x.c[0] ) {
                  return new BigNumber(x);
              }

              if ( MODULO_MODE == 9 ) {

                  // Euclidian division: q = sign(y) * floor(x / abs(y))
                  // r = x - qy    where  0 <= r < abs(y)
                  s = y.s;
                  y.s = 1;
                  q = div( x, y, 0, 3 );
                  y.s = s;
                  q.s *= s;
              } else {
                  q = div( x, y, 0, MODULO_MODE );
              }

              return x.minus( q.times(y) );
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber negated,
           * i.e. multiplied by -1.
           */
          P.negated = P.neg = function () {
              var x = new BigNumber(this);
              x.s = -x.s || null;
              return x;
          };


          /*
           *  n + 0 = n
           *  n + N = N
           *  n + I = I
           *  0 + n = n
           *  0 + 0 = 0
           *  0 + N = N
           *  0 + I = I
           *  N + n = N
           *  N + 0 = N
           *  N + N = N
           *  N + I = N
           *  I + n = I
           *  I + 0 = I
           *  I + N = N
           *  I + I = I
           *
           * Return a new BigNumber whose value is the value of this BigNumber plus the value of
           * BigNumber(y, b).
           */
          P.plus = P.add = function ( y, b ) {
              var t,
                  x = this,
                  a = x.s;

              id = 12;
              y = new BigNumber( y, b );
              b = y.s;

              // Either NaN?
              if ( !a || !b ) return new BigNumber(NaN);

              // Signs differ?
               if ( a != b ) {
                  y.s = -b;
                  return x.minus(y);
              }

              var xe = x.e / LOG_BASE,
                  ye = y.e / LOG_BASE,
                  xc = x.c,
                  yc = y.c;

              if ( !xe || !ye ) {

                  // Return ±Infinity if either ±Infinity.
                  if ( !xc || !yc ) return new BigNumber( a / 0 );

                  // Either zero?
                  // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                  if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );
              }

              xe = bitFloor(xe);
              ye = bitFloor(ye);
              xc = xc.slice();

              // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
              if ( a = xe - ye ) {
                  if ( a > 0 ) {
                      ye = xe;
                      t = yc;
                  } else {
                      a = -a;
                      t = xc;
                  }

                  t.reverse();
                  for ( ; a--; t.push(0) );
                  t.reverse();
              }

              a = xc.length;
              b = yc.length;

              // Point xc to the longer array, and b to the shorter length.
              if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;

              // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
              for ( a = 0; b; ) {
                  a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;
                  xc[b] %= BASE;
              }

              if (a) {
                  xc.unshift(a);
                  ++ye;
              }

              // No need to check for zero, as +x + +y != 0 && -x + -y != 0
              // ye = MAX_EXP + 1 possible
              return normalise( y, xc, ye );
          };


          /*
           * Return the number of significant digits of the value of this BigNumber.
           *
           * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
           */
          P.precision = P.sd = function (z) {
              var n, v,
                  x = this,
                  c = x.c;

              // 'precision() argument not a boolean or binary digit: {z}'
              if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {
                  if (ERRORS) raise( 13, 'argument' + notBool, z );
                  if ( z != !!z ) z = null;
              }

              if ( !c ) return null;
              v = c.length - 1;
              n = v * LOG_BASE + 1;

              if ( v = c[v] ) {

                  // Subtract the number of trailing zeros of the last element.
                  for ( ; v % 10 == 0; v /= 10, n-- );

                  // Add the number of digits of the first element.
                  for ( v = c[0]; v >= 10; v /= 10, n++ );
              }

              if ( z && x.e + 1 > n ) n = x.e + 1;

              return n;
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
           * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if
           * omitted.
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * 'round() decimal places out of range: {dp}'
           * 'round() decimal places not an integer: {dp}'
           * 'round() rounding mode not an integer: {rm}'
           * 'round() rounding mode out of range: {rm}'
           */
          P.round = function ( dp, rm ) {
              var n = new BigNumber(this);

              if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {
                  round( n, ~~dp + this.e + 1, rm == null ||
                    !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );
              }

              return n;
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
           * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
           *
           * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
           *
           * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity
           * otherwise.
           *
           * 'shift() argument not an integer: {k}'
           * 'shift() argument out of range: {k}'
           */
          P.shift = function (k) {
              var n = this;
              return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )

                // k < 1e+21, or truncate(k) will produce exponential notation.
                ? n.times( '1e' + truncate(k) )
                : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )
                  ? n.s * ( k < 0 ? 0 : 1 / 0 )
                  : n );
          };


          /*
           *  sqrt(-n) =  N
           *  sqrt( N) =  N
           *  sqrt(-I) =  N
           *  sqrt( I) =  I
           *  sqrt( 0) =  0
           *  sqrt(-0) = -0
           *
           * Return a new BigNumber whose value is the square root of the value of this BigNumber,
           * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
           */
          P.squareRoot = P.sqrt = function () {
              var m, n, r, rep, t,
                  x = this,
                  c = x.c,
                  s = x.s,
                  e = x.e,
                  dp = DECIMAL_PLACES + 4,
                  half = new BigNumber('0.5');

              // Negative/NaN/Infinity/zero?
              if ( s !== 1 || !c || !c[0] ) {
                  return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );
              }

              // Initial estimate.
              s = Math.sqrt( +x );

              // Math.sqrt underflow/overflow?
              // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
              if ( s == 0 || s == 1 / 0 ) {
                  n = coeffToString(c);
                  if ( ( n.length + e ) % 2 == 0 ) n += '0';
                  s = Math.sqrt(n);
                  e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );

                  if ( s == 1 / 0 ) {
                      n = '1e' + e;
                  } else {
                      n = s.toExponential();
                      n = n.slice( 0, n.indexOf('e') + 1 ) + e;
                  }

                  r = new BigNumber(n);
              } else {
                  r = new BigNumber( s + '' );
              }

              // Check for zero.
              // r could be zero if MIN_EXP is changed after the this value was created.
              // This would cause a division by zero (x/t) and hence Infinity below, which would cause
              // coeffToString to throw.
              if ( r.c[0] ) {
                  e = r.e;
                  s = e + dp;
                  if ( s < 3 ) s = 0;

                  // Newton-Raphson iteration.
                  for ( ; ; ) {
                      t = r;
                      r = half.times( t.plus( div( x, t, dp, 1 ) ) );

                      if ( coeffToString( t.c   ).slice( 0, s ) === ( n =
                           coeffToString( r.c ) ).slice( 0, s ) ) {

                          // The exponent of r may here be one less than the final result exponent,
                          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                          // are indexed correctly.
                          if ( r.e < e ) --s;
                          n = n.slice( s - 3, s + 1 );

                          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                          // iteration.
                          if ( n == '9999' || !rep && n == '4999' ) {

                              // On the first iteration only, check to see if rounding up gives the
                              // exact result as the nines may infinitely repeat.
                              if ( !rep ) {
                                  round( t, t.e + DECIMAL_PLACES + 2, 0 );

                                  if ( t.times(t).eq(x) ) {
                                      r = t;
                                      break;
                                  }
                              }

                              dp += 4;
                              s += 4;
                              rep = 1;
                          } else {

                              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                              // result. If not, then there are further digits and m will be truthy.
                              if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {

                                  // Truncate to the first rounding digit.
                                  round( r, r.e + DECIMAL_PLACES + 2, 1 );
                                  m = !r.times(r).eq(x);
                              }

                              break;
                          }
                      }
                  }
              }

              return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );
          };


          /*
           *  n * 0 = 0
           *  n * N = N
           *  n * I = I
           *  0 * n = 0
           *  0 * 0 = 0
           *  0 * N = N
           *  0 * I = N
           *  N * n = N
           *  N * 0 = N
           *  N * N = N
           *  N * I = N
           *  I * n = I
           *  I * 0 = N
           *  I * N = N
           *  I * I = I
           *
           * Return a new BigNumber whose value is the value of this BigNumber times the value of
           * BigNumber(y, b).
           */
          P.times = P.mul = function ( y, b ) {
              var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
                  base, sqrtBase,
                  x = this,
                  xc = x.c,
                  yc = ( id = 17, y = new BigNumber( y, b ) ).c;

              // Either NaN, ±Infinity or ±0?
              if ( !xc || !yc || !xc[0] || !yc[0] ) {

                  // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                  if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {
                      y.c = y.e = y.s = null;
                  } else {
                      y.s *= x.s;

                      // Return ±Infinity if either is ±Infinity.
                      if ( !xc || !yc ) {
                          y.c = y.e = null;

                      // Return ±0 if either is ±0.
                      } else {
                          y.c = [0];
                          y.e = 0;
                      }
                  }

                  return y;
              }

              e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );
              y.s *= x.s;
              xcL = xc.length;
              ycL = yc.length;

              // Ensure xc points to longer array and xcL to its length.
              if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

              // Initialise the result array with zeros.
              for ( i = xcL + ycL, zc = []; i--; zc.push(0) );

              base = BASE;
              sqrtBase = SQRT_BASE;

              for ( i = ycL; --i >= 0; ) {
                  c = 0;
                  ylo = yc[i] % sqrtBase;
                  yhi = yc[i] / sqrtBase | 0;

                  for ( k = xcL, j = i + k; j > i; ) {
                      xlo = xc[--k] % sqrtBase;
                      xhi = xc[k] / sqrtBase | 0;
                      m = yhi * xlo + xhi * ylo;
                      xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;
                      c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;
                      zc[j--] = xlo % base;
                  }

                  zc[j] = c;
              }

              if (c) {
                  ++e;
              } else {
                  zc.shift();
              }

              return normalise( y, zc, e );
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
           * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.
           *
           * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * 'toDigits() precision out of range: {sd}'
           * 'toDigits() precision not an integer: {sd}'
           * 'toDigits() rounding mode not an integer: {rm}'
           * 'toDigits() rounding mode out of range: {rm}'
           */
          P.toDigits = function ( sd, rm ) {
              var n = new BigNumber(this);
              sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;
              rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;
              return sd ? round( n, sd, rm ) : n;
          };


          /*
           * Return a string representing the value of this BigNumber in exponential notation and
           * rounded using ROUNDING_MODE to dp fixed decimal places.
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * 'toExponential() decimal places not an integer: {dp}'
           * 'toExponential() decimal places out of range: {dp}'
           * 'toExponential() rounding mode not an integer: {rm}'
           * 'toExponential() rounding mode out of range: {rm}'
           */
          P.toExponential = function ( dp, rm ) {
              return format( this,
                dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );
          };


          /*
           * Return a string representing the value of this BigNumber in fixed-point notation rounding
           * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
           *
           * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
           * but e.g. (-0.00001).toFixed(0) is '-0'.
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * 'toFixed() decimal places not an integer: {dp}'
           * 'toFixed() decimal places out of range: {dp}'
           * 'toFixed() rounding mode not an integer: {rm}'
           * 'toFixed() rounding mode out of range: {rm}'
           */
          P.toFixed = function ( dp, rm ) {
              return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )
                ? ~~dp + this.e + 1 : null, rm, 20 );
          };


          /*
           * Return a string representing the value of this BigNumber in fixed-point notation rounded
           * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
           * of the FORMAT object (see BigNumber.config).
           *
           * FORMAT = {
           *      decimalSeparator : '.',
           *      groupSeparator : ',',
           *      groupSize : 3,
           *      secondaryGroupSize : 0,
           *      fractionGroupSeparator : '\xA0',    // non-breaking space
           *      fractionGroupSize : 0
           * };
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * 'toFormat() decimal places not an integer: {dp}'
           * 'toFormat() decimal places out of range: {dp}'
           * 'toFormat() rounding mode not an integer: {rm}'
           * 'toFormat() rounding mode out of range: {rm}'
           */
          P.toFormat = function ( dp, rm ) {
              var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )
                ? ~~dp + this.e + 1 : null, rm, 21 );

              if ( this.c ) {
                  var i,
                      arr = str.split('.'),
                      g1 = +FORMAT.groupSize,
                      g2 = +FORMAT.secondaryGroupSize,
                      groupSeparator = FORMAT.groupSeparator,
                      intPart = arr[0],
                      fractionPart = arr[1],
                      isNeg = this.s < 0,
                      intDigits = isNeg ? intPart.slice(1) : intPart,
                      len = intDigits.length;

                  if (g2) i = g1, g1 = g2, g2 = i, len -= i;

                  if ( g1 > 0 && len > 0 ) {
                      i = len % g1 || g1;
                      intPart = intDigits.substr( 0, i );

                      for ( ; i < len; i += g1 ) {
                          intPart += groupSeparator + intDigits.substr( i, g1 );
                      }

                      if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);
                      if (isNeg) intPart = '-' + intPart;
                  }

                  str = fractionPart
                    ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )
                      ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),
                        '$&' + FORMAT.fractionGroupSeparator )
                      : fractionPart )
                    : intPart;
              }

              return str;
          };


          /*
           * Return a string array representing the value of this BigNumber as a simple fraction with
           * an integer numerator and an integer denominator. The denominator will be a positive
           * non-zero value less than or equal to the specified maximum denominator. If a maximum
           * denominator is not specified, the denominator will be the lowest value necessary to
           * represent the number exactly.
           *
           * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.
           *
           * 'toFraction() max denominator not an integer: {md}'
           * 'toFraction() max denominator out of range: {md}'
           */
          P.toFraction = function (md) {
              var arr, d0, d2, e, exp, n, n0, q, s,
                  k = ERRORS,
                  x = this,
                  xc = x.c,
                  d = new BigNumber(ONE),
                  n1 = d0 = new BigNumber(ONE),
                  d1 = n0 = new BigNumber(ONE);

              if ( md != null ) {
                  ERRORS = false;
                  n = new BigNumber(md);
                  ERRORS = k;

                  if ( !( k = n.isInt() ) || n.lt(ONE) ) {

                      if (ERRORS) {
                          raise( 22,
                            'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );
                      }

                      // ERRORS is false:
                      // If md is a finite non-integer >= 1, round it to an integer and use it.
                      md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;
                  }
              }

              if ( !xc ) return x.toString();
              s = coeffToString(xc);

              // Determine initial denominator.
              // d is a power of 10 and the minimum max denominator that specifies the value exactly.
              e = d.e = s.length - x.e - 1;
              d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];
              md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;

              exp = MAX_EXP;
              MAX_EXP = 1 / 0;
              n = new BigNumber(s);

              // n0 = d1 = 0
              n0.c[0] = 0;

              for ( ; ; )  {
                  q = div( n, d, 0, 1 );
                  d2 = d0.plus( q.times(d1) );
                  if ( d2.cmp(md) == 1 ) break;
                  d0 = d1;
                  d1 = d2;
                  n1 = n0.plus( q.times( d2 = n1 ) );
                  n0 = d2;
                  d = n.minus( q.times( d2 = d ) );
                  n = d2;
              }

              d2 = div( md.minus(d0), d1, 0, 1 );
              n0 = n0.plus( d2.times(n1) );
              d0 = d0.plus( d2.times(d1) );
              n0.s = n1.s = x.s;
              e *= 2;

              // Determine which fraction is closer to x, n0/d0 or n1/d1
              arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(
                    div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1
                      ? [ n1.toString(), d1.toString() ]
                      : [ n0.toString(), d0.toString() ];

              MAX_EXP = exp;
              return arr;
          };


          /*
           * Return the value of this BigNumber converted to a number primitive.
           */
          P.toNumber = function () {
              return +this;
          };


          /*
           * Return a BigNumber whose value is the value of this BigNumber raised to the power n.
           * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
           * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.
           *
           * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.
           * (Performs 54 loop iterations for n of 9007199254740992.)
           *
           * 'pow() exponent not an integer: {n}'
           * 'pow() exponent out of range: {n}'
           */
          P.toPower = P.pow = function (n) {
              var k, y,
                  i = mathfloor( n < 0 ? -n : +n ),
                  x = this;

              // Pass ±Infinity to Math.pow if exponent is out of range.
              if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&
                ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||
                  parseFloat(n) != n && !( n = NaN ) ) ) {
                  return new BigNumber( Math.pow( +x, n ) );
              }

              // Truncating each coefficient array to a length of k after each multiplication equates
              // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a
              // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)
              k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;
              y = new BigNumber(ONE);

              for ( ; ; ) {

                  if ( i % 2 ) {
                      y = y.times(x);
                      if ( !y.c ) break;
                      if ( k && y.c.length > k ) y.c.length = k;
                  }

                  i = mathfloor( i / 2 );
                  if ( !i ) break;

                  x = x.times(x);
                  if ( k && x.c && x.c.length > k ) x.c.length = k;
              }

              if ( n < 0 ) y = ONE.div(y);
              return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;
          };


          /*
           * Return a string representing the value of this BigNumber rounded to sd significant digits
           * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
           * necessary to represent the integer part of the value in fixed-point notation, then use
           * exponential notation.
           *
           * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * 'toPrecision() precision not an integer: {sd}'
           * 'toPrecision() precision out of range: {sd}'
           * 'toPrecision() rounding mode not an integer: {rm}'
           * 'toPrecision() rounding mode out of range: {rm}'
           */
          P.toPrecision = function ( sd, rm ) {
              return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )
                ? sd | 0 : null, rm, 24 );
          };


          /*
           * Return a string representing the value of this BigNumber in base b, or base 10 if b is
           * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
           * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
           * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
           * TO_EXP_NEG, return exponential notation.
           *
           * [b] {number} Integer, 2 to 64 inclusive.
           *
           * 'toString() base not an integer: {b}'
           * 'toString() base out of range: {b}'
           */
          P.toString = function (b) {
              var str,
                  n = this,
                  s = n.s,
                  e = n.e;

              // Infinity or NaN?
              if ( e === null ) {

                  if (s) {
                      str = 'Infinity';
                      if ( s < 0 ) str = '-' + str;
                  } else {
                      str = 'NaN';
                  }
              } else {
                  str = coeffToString( n.c );

                  if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {
                      str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                        ? toExponential( str, e )
                        : toFixedPoint( str, e );
                  } else {
                      str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );
                  }

                  if ( s < 0 && n.c[0] ) str = '-' + str;
              }

              return str;
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole
           * number.
           */
          P.truncated = P.trunc = function () {
              return round( new BigNumber(this), this.e + 1, 1 );
          };



          /*
           * Return as toString, but do not accept a base argument, and include the minus sign for
           * negative zero.
           */
          P.valueOf = P.toJSON = function () {
              var str,
                  n = this,
                  e = n.e;

              if ( e === null ) return n.toString();

              str = coeffToString( n.c );

              str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                  ? toExponential( str, e )
                  : toFixedPoint( str, e );

              return n.s < 0 ? '-' + str : str;
          };


          // Aliases for BigDecimal methods.
          //P.add = P.plus;         // P.add included above
          //P.subtract = P.minus;   // P.sub included above
          //P.multiply = P.times;   // P.mul included above
          //P.divide = P.div;
          //P.remainder = P.mod;
          //P.compareTo = P.cmp;
          //P.negate = P.neg;


          if ( configObj != null ) BigNumber.config(configObj);

          return BigNumber;
      }


      // PRIVATE HELPER FUNCTIONS


      function bitFloor(n) {
          var i = n | 0;
          return n > 0 || n === i ? i : i - 1;
      }


      // Return a coefficient array as a string of base 10 digits.
      function coeffToString(a) {
          var s, z,
              i = 1,
              j = a.length,
              r = a[0] + '';

          for ( ; i < j; ) {
              s = a[i++] + '';
              z = LOG_BASE - s.length;
              for ( ; z--; s = '0' + s );
              r += s;
          }

          // Determine trailing zeros.
          for ( j = r.length; r.charCodeAt(--j) === 48; );
          return r.slice( 0, j + 1 || 1 );
      }


      // Compare the value of BigNumbers x and y.
      function compare( x, y ) {
          var a, b,
              xc = x.c,
              yc = y.c,
              i = x.s,
              j = y.s,
              k = x.e,
              l = y.e;

          // Either NaN?
          if ( !i || !j ) return null;

          a = xc && !xc[0];
          b = yc && !yc[0];

          // Either zero?
          if ( a || b ) return a ? b ? 0 : -j : i;

          // Signs differ?
          if ( i != j ) return i;

          a = i < 0;
          b = k == l;

          // Either Infinity?
          if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;

          // Compare exponents.
          if ( !b ) return k > l ^ a ? 1 : -1;

          j = ( k = xc.length ) < ( l = yc.length ) ? k : l;

          // Compare digit by digit.
          for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;

          // Compare lengths.
          return k == l ? 0 : k > l ^ a ? 1 : -1;
      }


      /*
       * Return true if n is a valid number in range, otherwise false.
       * Use for argument validation when ERRORS is false.
       * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.
       */
      function intValidatorNoErrors( n, min, max ) {
          return ( n = truncate(n) ) >= min && n <= max;
      }


      function isArray(obj) {
          return Object.prototype.toString.call(obj) == '[object Array]';
      }


      /*
       * Convert string of baseIn to an array of numbers of baseOut.
       * Eg. convertBase('255', 10, 16) returns [15, 15].
       * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
       */
      function toBaseOut( str, baseIn, baseOut ) {
          var j,
              arr = [0],
              arrL,
              i = 0,
              len = str.length;

          for ( ; i < len; ) {
              for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );
              arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );

              for ( ; j < arr.length; j++ ) {

                  if ( arr[j] > baseOut - 1 ) {
                      if ( arr[j + 1] == null ) arr[j + 1] = 0;
                      arr[j + 1] += arr[j] / baseOut | 0;
                      arr[j] %= baseOut;
                  }
              }
          }

          return arr.reverse();
      }


      function toExponential( str, e ) {
          return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +
            ( e < 0 ? 'e' : 'e+' ) + e;
      }


      function toFixedPoint( str, e ) {
          var len, z;

          // Negative exponent?
          if ( e < 0 ) {

              // Prepend zeros.
              for ( z = '0.'; ++e; z += '0' );
              str = z + str;

          // Positive exponent
          } else {
              len = str.length;

              // Append zeros.
              if ( ++e > len ) {
                  for ( z = '0', e -= len; --e; z += '0' );
                  str += z;
              } else if ( e < len ) {
                  str = str.slice( 0, e ) + '.' + str.slice(e);
              }
          }

          return str;
      }


      function truncate(n) {
          n = parseFloat(n);
          return n < 0 ? mathceil(n) : mathfloor(n);
      }


      // EXPORT


      BigNumber = another();

      // AMD.
      if ( true ) {
          !(__WEBPACK_AMD_DEFINE_RESULT__ = function () { return BigNumber; }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

      // Node and other environments that support module.exports.
      } else if ( typeof module != 'undefined' && module.exports ) {
          module.exports = BigNumber;
          if ( !crypto ) try { crypto = require('cry' + 'pto'); } catch (e) {}

      // Browser.
      } else {
          global.BigNumber = BigNumber;
      }
  })(this);


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var assert = __webpack_require__(198);
  var brorand = __webpack_require__(202);
  var hashjs = __webpack_require__(222);
  var elliptic = __webpack_require__(229);
  var Ed25519 = elliptic.eddsa('ed25519');
  var Secp256k1 = elliptic.ec('secp256k1');
  var addressCodec = __webpack_require__(249);
  var derivePrivateKey = __webpack_require__(261).derivePrivateKey;
  var accountPublicFromPublicGenerator = __webpack_require__(261).accountPublicFromPublicGenerator;
  var utils = __webpack_require__(268);
  var hexToBytes = utils.hexToBytes;
  var bytesToHex = utils.bytesToHex;

  function generateSeed() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    assert(!options.entropy || options.entropy.length >= 16, 'entropy too short');
    var entropy = options.entropy ? options.entropy.slice(0, 16) : brorand(16);
    var type = options.algorithm === 'ed25519' ? 'ed25519' : 'secp256k1';
    return addressCodec.encodeSeed(entropy, type);
  }

  function hash(message) {
    return hashjs.sha512().update(message).digest().slice(0, 32);
  }

  var secp256k1 = {
    deriveKeypair: function deriveKeypair(entropy, options) {
      var prefix = '00';
      var privateKey = prefix + derivePrivateKey(entropy, options).toString(16, 64).toUpperCase();
      var publicKey = bytesToHex(Secp256k1.keyFromPrivate(privateKey.slice(2)).getPublic().encodeCompressed());
      return { privateKey: privateKey, publicKey: publicKey };
    },
    sign: function sign(message, privateKey) {
      return bytesToHex(Secp256k1.sign(hash(message), hexToBytes(privateKey), { canonical: true }).toDER());
    },
    verify: function verify(message, signature, publicKey) {
      return Secp256k1.verify(hash(message), signature, hexToBytes(publicKey));
    }
  };

  var ed25519 = {
    deriveKeypair: function deriveKeypair(entropy) {
      var prefix = 'ED';
      var rawPrivateKey = hash(entropy);
      var privateKey = prefix + bytesToHex(rawPrivateKey);
      var publicKey = prefix + bytesToHex(Ed25519.keyFromSecret(rawPrivateKey).pubBytes());
      return { privateKey: privateKey, publicKey: publicKey };
    },
    sign: function sign(message, privateKey) {
      // caution: Ed25519.sign interprets all strings as hex, stripping
      // any non-hex characters without warning
      assert(Array.isArray(message), 'message must be array of octets');
      return bytesToHex(Ed25519.sign(message, hexToBytes(privateKey).slice(1)).toBytes());
    },
    verify: function verify(message, signature, publicKey) {
      return Ed25519.verify(message, hexToBytes(signature), hexToBytes(publicKey).slice(1));
    }
  };

  function select(algorithm) {
    var methods = { 'ecdsa-secp256k1': secp256k1, ed25519: ed25519 };
    return methods[algorithm];
  }

  function deriveKeypair(seed, options) {
    var decoded = addressCodec.decodeSeed(seed);
    var algorithm = decoded.type === 'ed25519' ? 'ed25519' : 'ecdsa-secp256k1';
    return select(algorithm).deriveKeypair(decoded.bytes, options);
  }

  function getAlgorithmFromKey(key) {
    var bytes = hexToBytes(key);
    return bytes.length === 33 && bytes[0] === 0xED ? 'ed25519' : 'ecdsa-secp256k1';
  }

  function sign(messageHex, privateKey) {
    var algorithm = getAlgorithmFromKey(privateKey);
    return select(algorithm).sign(hexToBytes(messageHex), privateKey);
  }

  function verify(messageHex, signature, publicKey) {
    var algorithm = getAlgorithmFromKey(publicKey);
    return select(algorithm).verify(hexToBytes(messageHex), signature, publicKey);
  }

  function deriveAddressFromBytes(publicKeyBytes) {
    return addressCodec.encodeAccountID(utils.computePublicKeyHash(publicKeyBytes));
  }

  function deriveAddress(publicKey) {
    return deriveAddressFromBytes(hexToBytes(publicKey));
  }

  function deriveNodeAddress(publicKey) {
    var generatorBytes = addressCodec.decodeNodePublic(publicKey);
    var accountPublicBytes = accountPublicFromPublicGenerator(generatorBytes);
    return deriveAddressFromBytes(accountPublicBytes);
  }

  module.exports = {
    generateSeed: generateSeed,
    deriveKeypair: deriveKeypair,
    sign: sign,
    verify: verify,
    deriveAddress: deriveAddress,
    deriveNodeAddress: deriveNodeAddress
  };

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

  // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
  //
  // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
  //
  // Originally from narwhal.js (http://narwhaljs.org)
  // Copyright (c) 2009 Thomas Robinson <280north.com>
  //
  // Permission is hereby granted, free of charge, to any person obtaining a copy
  // of this software and associated documentation files (the 'Software'), to
  // deal in the Software without restriction, including without limitation the
  // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  // sell copies of the Software, and to permit persons to whom the Software is
  // furnished to do so, subject to the following conditions:
  //
  // The above copyright notice and this permission notice shall be included in
  // all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  // when used in node, this will actually load the util module we depend on
  // versus loading the builtin util module as happens otherwise
  // this is a bug in node module loading as far as I am concerned
  var util = __webpack_require__(199);

  var pSlice = Array.prototype.slice;
  var hasOwn = Object.prototype.hasOwnProperty;

  // 1. The assert module provides functions that throw
  // AssertionError's when particular conditions are not met. The
  // assert module must conform to the following interface.

  var assert = module.exports = ok;

  // 2. The AssertionError is defined in assert.
  // new assert.AssertionError({ message: message,
  //                             actual: actual,
  //                             expected: expected })

  assert.AssertionError = function AssertionError(options) {
    this.name = 'AssertionError';
    this.actual = options.actual;
    this.expected = options.expected;
    this.operator = options.operator;
    if (options.message) {
      this.message = options.message;
      this.generatedMessage = false;
    } else {
      this.message = getMessage(this);
      this.generatedMessage = true;
    }
    var stackStartFunction = options.stackStartFunction || fail;

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, stackStartFunction);
    }
    else {
      // non v8 browsers so we can have a stacktrace
      var err = new Error();
      if (err.stack) {
        var out = err.stack;

        // try to strip useless frames
        var fn_name = stackStartFunction.name;
        var idx = out.indexOf('\n' + fn_name);
        if (idx >= 0) {
          // once we have located the function frame
          // we need to strip out everything before it (and its line)
          var next_line = out.indexOf('\n', idx + 1);
          out = out.substring(next_line + 1);
        }

        this.stack = out;
      }
    }
  };

  // assert.AssertionError instanceof Error
  util.inherits(assert.AssertionError, Error);

  function replacer(key, value) {
    if (util.isUndefined(value)) {
      return '' + value;
    }
    if (util.isNumber(value) && !isFinite(value)) {
      return value.toString();
    }
    if (util.isFunction(value) || util.isRegExp(value)) {
      return value.toString();
    }
    return value;
  }

  function truncate(s, n) {
    if (util.isString(s)) {
      return s.length < n ? s : s.slice(0, n);
    } else {
      return s;
    }
  }

  function getMessage(self) {
    return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
           self.operator + ' ' +
           truncate(JSON.stringify(self.expected, replacer), 128);
  }

  // At present only the three keys mentioned above are used and
  // understood by the spec. Implementations or sub modules can pass
  // other keys to the AssertionError's constructor - they will be
  // ignored.

  // 3. All of the following functions must throw an AssertionError
  // when a corresponding condition is not met, with a message that
  // may be undefined if not provided.  All assertion methods provide
  // both the actual and expected values to the assertion error for
  // display purposes.

  function fail(actual, expected, message, operator, stackStartFunction) {
    throw new assert.AssertionError({
      message: message,
      actual: actual,
      expected: expected,
      operator: operator,
      stackStartFunction: stackStartFunction
    });
  }

  // EXTENSION! allows for well behaved errors defined elsewhere.
  assert.fail = fail;

  // 4. Pure assertion tests whether a value is truthy, as determined
  // by !!guard.
  // assert.ok(guard, message_opt);
  // This statement is equivalent to assert.equal(true, !!guard,
  // message_opt);. To test strictly for the value true, use
  // assert.strictEqual(true, guard, message_opt);.

  function ok(value, message) {
    if (!value) fail(value, true, message, '==', assert.ok);
  }
  assert.ok = ok;

  // 5. The equality assertion tests shallow, coercive equality with
  // ==.
  // assert.equal(actual, expected, message_opt);

  assert.equal = function equal(actual, expected, message) {
    if (actual != expected) fail(actual, expected, message, '==', assert.equal);
  };

  // 6. The non-equality assertion tests for whether two objects are not equal
  // with != assert.notEqual(actual, expected, message_opt);

  assert.notEqual = function notEqual(actual, expected, message) {
    if (actual == expected) {
      fail(actual, expected, message, '!=', assert.notEqual);
    }
  };

  // 7. The equivalence assertion tests a deep equality relation.
  // assert.deepEqual(actual, expected, message_opt);

  assert.deepEqual = function deepEqual(actual, expected, message) {
    if (!_deepEqual(actual, expected)) {
      fail(actual, expected, message, 'deepEqual', assert.deepEqual);
    }
  };

  function _deepEqual(actual, expected) {
    // 7.1. All identical values are equivalent, as determined by ===.
    if (actual === expected) {
      return true;

    } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
      if (actual.length != expected.length) return false;

      for (var i = 0; i < actual.length; i++) {
        if (actual[i] !== expected[i]) return false;
      }

      return true;

    // 7.2. If the expected value is a Date object, the actual value is
    // equivalent if it is also a Date object that refers to the same time.
    } else if (util.isDate(actual) && util.isDate(expected)) {
      return actual.getTime() === expected.getTime();

    // 7.3 If the expected value is a RegExp object, the actual value is
    // equivalent if it is also a RegExp object with the same source and
    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
    } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
      return actual.source === expected.source &&
             actual.global === expected.global &&
             actual.multiline === expected.multiline &&
             actual.lastIndex === expected.lastIndex &&
             actual.ignoreCase === expected.ignoreCase;

    // 7.4. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
    } else if (!util.isObject(actual) && !util.isObject(expected)) {
      return actual == expected;

    // 7.5 For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
    } else {
      return objEquiv(actual, expected);
    }
  }

  function isArguments(object) {
    return Object.prototype.toString.call(object) == '[object Arguments]';
  }

  function objEquiv(a, b) {
    if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
      return false;
    // an identical 'prototype' property.
    if (a.prototype !== b.prototype) return false;
    // if one is a primitive, the other must be same
    if (util.isPrimitive(a) || util.isPrimitive(b)) {
      return a === b;
    }
    var aIsArgs = isArguments(a),
        bIsArgs = isArguments(b);
    if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
      return false;
    if (aIsArgs) {
      a = pSlice.call(a);
      b = pSlice.call(b);
      return _deepEqual(a, b);
    }
    var ka = objectKeys(a),
        kb = objectKeys(b),
        key, i;
    // having the same number of owned properties (keys incorporates
    // hasOwnProperty)
    if (ka.length != kb.length)
      return false;
    //the same set of keys (although not necessarily the same order),
    ka.sort();
    kb.sort();
    //~~~cheap key test
    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] != kb[i])
        return false;
    }
    //equivalent values for every corresponding key, and
    //~~~possibly expensive deep test
    for (i = ka.length - 1; i >= 0; i--) {
      key = ka[i];
      if (!_deepEqual(a[key], b[key])) return false;
    }
    return true;
  }

  // 8. The non-equivalence assertion tests for any deep inequality.
  // assert.notDeepEqual(actual, expected, message_opt);

  assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
    if (_deepEqual(actual, expected)) {
      fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
    }
  };

  // 9. The strict equality assertion tests strict equality, as determined by ===.
  // assert.strictEqual(actual, expected, message_opt);

  assert.strictEqual = function strictEqual(actual, expected, message) {
    if (actual !== expected) {
      fail(actual, expected, message, '===', assert.strictEqual);
    }
  };

  // 10. The strict non-equality assertion tests for strict inequality, as
  // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

  assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
    if (actual === expected) {
      fail(actual, expected, message, '!==', assert.notStrictEqual);
    }
  };

  function expectedException(actual, expected) {
    if (!actual || !expected) {
      return false;
    }

    if (Object.prototype.toString.call(expected) == '[object RegExp]') {
      return expected.test(actual);
    } else if (actual instanceof expected) {
      return true;
    } else if (expected.call({}, actual) === true) {
      return true;
    }

    return false;
  }

  function _throws(shouldThrow, block, expected, message) {
    var actual;

    if (util.isString(expected)) {
      message = expected;
      expected = null;
    }

    try {
      block();
    } catch (e) {
      actual = e;
    }

    message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
              (message ? ' ' + message : '.');

    if (shouldThrow && !actual) {
      fail(actual, expected, 'Missing expected exception' + message);
    }

    if (!shouldThrow && expectedException(actual, expected)) {
      fail(actual, expected, 'Got unwanted exception' + message);
    }

    if ((shouldThrow && actual && expected &&
        !expectedException(actual, expected)) || (!shouldThrow && actual)) {
      throw actual;
    }
  }

  // 11. Expected to throw an error:
  // assert.throws(block, Error_opt, message_opt);

  assert.throws = function(block, /*optional*/error, /*optional*/message) {
    _throws.apply(this, [true].concat(pSlice.call(arguments)));
  };

  // EXTENSION! This is annoying to write outside this module.
  assert.doesNotThrow = function(block, /*optional*/message) {
    _throws.apply(this, [false].concat(pSlice.call(arguments)));
  };

  assert.ifError = function(err) { if (err) {throw err;}};

  var objectKeys = Object.keys || function (obj) {
    var keys = [];
    for (var key in obj) {
      if (hasOwn.call(obj, key)) keys.push(key);
    }
    return keys;
  };


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  var formatRegExp = /%[sdj%]/g;
  exports.format = function(f) {
    if (!isString(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }
      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
      if (x === '%%') return '%';
      if (i >= len) return x;
      switch (x) {
        case '%s': return String(args[i++]);
        case '%d': return Number(args[i++]);
        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }
        default:
          return x;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }
    return str;
  };


  // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  exports.deprecate = function(fn, msg) {
    // Allow for deprecating things in the process of starting up.
    if (isUndefined(global.process)) {
      return function() {
        return exports.deprecate(fn, msg).apply(this, arguments);
      };
    }

    if (process.noDeprecation === true) {
      return fn;
    }

    var warned = false;
    function deprecated() {
      if (!warned) {
        if (process.throwDeprecation) {
          throw new Error(msg);
        } else if (process.traceDeprecation) {
          console.trace(msg);
        } else {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }

    return deprecated;
  };


  var debugs = {};
  var debugEnviron;
  exports.debuglog = function(set) {
    if (isUndefined(debugEnviron))
      debugEnviron = process.env.NODE_DEBUG || '';
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = process.pid;
        debugs[set] = function() {
          var msg = exports.format.apply(exports, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function() {};
      }
    }
    return debugs[set];
  };


  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */
  /* legacy: obj, showHidden, depth, colors*/
  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      exports._extend(ctx, opts);
    }
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }
  exports.inspect = inspect;


  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  inspect.colors = {
    'bold' : [1, 22],
    'italic' : [3, 23],
    'underline' : [4, 24],
    'inverse' : [7, 27],
    'white' : [37, 39],
    'grey' : [90, 39],
    'black' : [30, 39],
    'blue' : [34, 39],
    'cyan' : [36, 39],
    'green' : [32, 39],
    'magenta' : [35, 39],
    'red' : [31, 39],
    'yellow' : [33, 39]
  };

  // Don't use 'blue' not visible on cmd.exe
  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };


  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str +
             '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }


  function stylizeNoColor(str, styleType) {
    return str;
  }


  function arrayToHash(array) {
    var hash = {};

    array.forEach(function(val, idx) {
      hash[val] = true;
    });

    return hash;
  }


  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect &&
        value &&
        isFunction(value.inspect) &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== exports.inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }

    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }

    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value)
        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '', array = false, braces = ['{', '}'];

    // Make Array say that they are Array
    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    }

    // Make functions say that they are functions
    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    // Make RegExps say that they are RegExps
    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    // Make error with message first say the error
    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }


  function formatPrimitive(ctx, value) {
    if (isUndefined(value))
      return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value))
      return ctx.stylize('' + value, 'number');
    if (isBoolean(value))
      return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if (isNull(value))
      return ctx.stylize('null', 'null');
  }


  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }


  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            key, true));
      }
    });
    return output;
  }


  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function(line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function(line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'")
                   .replace(/\\"/g, '"')
                   .replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }


  function reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
      numLinesEst++;
      if (cur.indexOf('\n') >= 0) numLinesEst++;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] +
             (base === '' ? '' : base + '\n ') +
             ' ' +
             output.join(',\n  ') +
             ' ' +
             braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }


  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  function isArray(ar) {
    return Array.isArray(ar);
  }
  exports.isArray = isArray;

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }
  exports.isBoolean = isBoolean;

  function isNull(arg) {
    return arg === null;
  }
  exports.isNull = isNull;

  function isNullOrUndefined(arg) {
    return arg == null;
  }
  exports.isNullOrUndefined = isNullOrUndefined;

  function isNumber(arg) {
    return typeof arg === 'number';
  }
  exports.isNumber = isNumber;

  function isString(arg) {
    return typeof arg === 'string';
  }
  exports.isString = isString;

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }
  exports.isSymbol = isSymbol;

  function isUndefined(arg) {
    return arg === void 0;
  }
  exports.isUndefined = isUndefined;

  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }
  exports.isRegExp = isRegExp;

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  exports.isObject = isObject;

  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }
  exports.isDate = isDate;

  function isError(e) {
    return isObject(e) &&
        (objectToString(e) === '[object Error]' || e instanceof Error);
  }
  exports.isError = isError;

  function isFunction(arg) {
    return typeof arg === 'function';
  }
  exports.isFunction = isFunction;

  function isPrimitive(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }
  exports.isPrimitive = isPrimitive;

  exports.isBuffer = __webpack_require__(200);

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }


  function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
  }


  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                'Oct', 'Nov', 'Dec'];

  // 26 Feb 16:19:34
  function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())].join(':');
    return [d.getDate(), months[d.getMonth()], time].join(' ');
  }


  // log is just a thin wrapper to console.log that prepends a timestamp
  exports.log = function() {
    console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
  };


  /**
   * Inherit the prototype methods from one constructor into another.
   *
   * The Function.prototype.inherits from lang.js rewritten as a standalone
   * function (not on Function.prototype). NOTE: If this file is to be loaded
   * during bootstrapping this function needs to be rewritten using some native
   * functions as prototype setup using normal JavaScript does not work as
   * expected during bootstrapping (see mirror.js in r114903).
   *
   * @param {function} ctor Constructor function which needs to inherit the
   *     prototype.
   * @param {function} superCtor Constructor function to inherit prototype from.
   */
  exports.inherits = __webpack_require__(201);

  exports._extend = function(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;

    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  };

  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(191)))

/***/ },
/* 200 */
/***/ function(module, exports) {

  module.exports = function isBuffer(arg) {
    return arg && typeof arg === 'object'
      && typeof arg.copy === 'function'
      && typeof arg.fill === 'function'
      && typeof arg.readUInt8 === 'function';
  }

/***/ },
/* 201 */
/***/ function(module, exports) {

  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

  var r;

  module.exports = function rand(len) {
    if (!r)
      r = new Rand(null);

    return r.generate(len);
  };

  function Rand(rand) {
    this.rand = rand;
  }
  module.exports.Rand = Rand;

  Rand.prototype.generate = function generate(len) {
    return this._rand(len);
  };

  if (typeof window === 'object') {
    if (window.crypto && window.crypto.getRandomValues) {
      // Modern browsers
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        window.crypto.getRandomValues(arr);
        return arr;
      };
    } else if (window.msCrypto && window.msCrypto.getRandomValues) {
      // IE
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        window.msCrypto.getRandomValues(arr);
        return arr;
      };
    } else {
      // Old junk
      Rand.prototype._rand = function() {
        throw new Error('Not implemented yet');
      };
    }
  } else {
    // Node.js or Web worker
    try {
      var crypto = __webpack_require__(203);

      Rand.prototype._rand = function _rand(n) {
        return crypto.randomBytes(n);
      };
    } catch (e) {
      // Emulate crypto API using randy
      Rand.prototype._rand = function _rand(n) {
        var res = new Uint8Array(n);
        for (var i = 0; i < res.length; i++)
          res[i] = this.rand.getByte();
        return res;
      };
    }
  }


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(208)

  function error () {
    var m = [].slice.call(arguments).join(' ')
    throw new Error([
      m,
      'we accept pull requests',
      'http://github.com/dominictarr/crypto-browserify'
      ].join('\n'))
  }

  exports.createHash = __webpack_require__(210)

  exports.createHmac = __webpack_require__(219)

  exports.randomBytes = function(size, callback) {
    if (callback && callback.call) {
      try {
        callback.call(this, undefined, new Buffer(rng(size)))
      } catch (err) { callback(err) }
    } else {
      return new Buffer(rng(size))
    }
  }

  function each(a, f) {
    for(var i in a)
      f(a[i], i)
  }

  exports.getHashes = function () {
    return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
  }

  var p = __webpack_require__(220)(exports)
  exports.pbkdf2 = p.pbkdf2
  exports.pbkdf2Sync = p.pbkdf2Sync


  // the least I can do is make error messages for the rest of the node.js/crypto api.
  each(['createCredentials'
  , 'createCipher'
  , 'createCipheriv'
  , 'createDecipher'
  , 'createDecipheriv'
  , 'createSign'
  , 'createVerify'
  , 'createDiffieHellman'
  ], function (name) {
    exports[name] = function () {
      error('sorry,', name, 'is not implemented yet')
    }
  })

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */
  /* eslint-disable no-proto */

  'use strict'

  var base64 = __webpack_require__(205)
  var ieee754 = __webpack_require__(206)
  var isArray = __webpack_require__(207)

  exports.Buffer = Buffer
  exports.SlowBuffer = SlowBuffer
  exports.INSPECT_MAX_BYTES = 50
  Buffer.poolSize = 8192 // not used by this implementation

  var rootParent = {}

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
   *     on objects.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
    ? global.TYPED_ARRAY_SUPPORT
    : typedArraySupport()

  function typedArraySupport () {
    function Bar () {}
    try {
      var arr = new Uint8Array(1)
      arr.foo = function () { return 42 }
      arr.constructor = Bar
      return arr.foo() === 42 && // typed array instances can be augmented
          arr.constructor === Bar && // constructor can be set
          typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
          arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
    } catch (e) {
      return false
    }
  }

  function kMaxLength () {
    return Buffer.TYPED_ARRAY_SUPPORT
      ? 0x7fffffff
      : 0x3fffffff
  }

  /**
   * Class: Buffer
   * =============
   *
   * The Buffer constructor returns instances of `Uint8Array` that are augmented
   * with function properties for all the node `Buffer` API functions. We use
   * `Uint8Array` so that square bracket notation works as expected -- it returns
   * a single octet.
   *
   * By augmenting the instances, we can avoid modifying the `Uint8Array`
   * prototype.
   */
  function Buffer (arg) {
    if (!(this instanceof Buffer)) {
      // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
      if (arguments.length > 1) return new Buffer(arg, arguments[1])
      return new Buffer(arg)
    }

    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      this.length = 0
      this.parent = undefined
    }

    // Common case.
    if (typeof arg === 'number') {
      return fromNumber(this, arg)
    }

    // Slightly less common case.
    if (typeof arg === 'string') {
      return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
    }

    // Unusual.
    return fromObject(this, arg)
  }

  function fromNumber (that, length) {
    that = allocate(that, length < 0 ? 0 : checked(length) | 0)
    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < length; i++) {
        that[i] = 0
      }
    }
    return that
  }

  function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

    // Assumption: byteLength() return value is always < kMaxLength.
    var length = byteLength(string, encoding) | 0
    that = allocate(that, length)

    that.write(string, encoding)
    return that
  }

  function fromObject (that, object) {
    if (Buffer.isBuffer(object)) return fromBuffer(that, object)

    if (isArray(object)) return fromArray(that, object)

    if (object == null) {
      throw new TypeError('must start with number, buffer, array or string')
    }

    if (typeof ArrayBuffer !== 'undefined') {
      if (object.buffer instanceof ArrayBuffer) {
        return fromTypedArray(that, object)
      }
      if (object instanceof ArrayBuffer) {
        return fromArrayBuffer(that, object)
      }
    }

    if (object.length) return fromArrayLike(that, object)

    return fromJsonObject(that, object)
  }

  function fromBuffer (that, buffer) {
    var length = checked(buffer.length) | 0
    that = allocate(that, length)
    buffer.copy(that, 0, 0, length)
    return that
  }

  function fromArray (that, array) {
    var length = checked(array.length) | 0
    that = allocate(that, length)
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255
    }
    return that
  }

  // Duplicate of fromArray() to keep fromArray() monomorphic.
  function fromTypedArray (that, array) {
    var length = checked(array.length) | 0
    that = allocate(that, length)
    // Truncating the elements is probably not what people expect from typed
    // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
    // of the old Buffer constructor.
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255
    }
    return that
  }

  function fromArrayBuffer (that, array) {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      array.byteLength
      that = Buffer._augment(new Uint8Array(array))
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromTypedArray(that, new Uint8Array(array))
    }
    return that
  }

  function fromArrayLike (that, array) {
    var length = checked(array.length) | 0
    that = allocate(that, length)
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255
    }
    return that
  }

  // Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
  // Returns a zero-length buffer for inputs that don't conform to the spec.
  function fromJsonObject (that, object) {
    var array
    var length = 0

    if (object.type === 'Buffer' && isArray(object.data)) {
      array = object.data
      length = checked(array.length) | 0
    }
    that = allocate(that, length)

    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255
    }
    return that
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype
    Buffer.__proto__ = Uint8Array
  } else {
    // pre-set for values that may exist in the future
    Buffer.prototype.length = undefined
    Buffer.prototype.parent = undefined
  }

  function allocate (that, length) {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = Buffer._augment(new Uint8Array(length))
      that.__proto__ = Buffer.prototype
    } else {
      // Fallback: Return an object instance of the Buffer class
      that.length = length
      that._isBuffer = true
    }

    var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
    if (fromPool) that.parent = rootParent

    return that
  }

  function checked (length) {
    // Note: cannot use `length < kMaxLength` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
  }

  function SlowBuffer (subject, encoding) {
    if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

    var buf = new Buffer(subject, encoding)
    delete buf.parent
    return buf
  }

  Buffer.isBuffer = function isBuffer (b) {
    return !!(b != null && b._isBuffer)
  }

  Buffer.compare = function compare (a, b) {
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) return 0

    var x = a.length
    var y = b.length

    var i = 0
    var len = Math.min(x, y)
    while (i < len) {
      if (a[i] !== b[i]) break

      ++i
    }

    if (i !== len) {
      x = a[i]
      y = b[i]
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  }

  Buffer.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'binary':
      case 'base64':
      case 'raw':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  }

  Buffer.concat = function concat (list, length) {
    if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

    if (list.length === 0) {
      return new Buffer(0)
    }

    var i
    if (length === undefined) {
      length = 0
      for (i = 0; i < list.length; i++) {
        length += list[i].length
      }
    }

    var buf = new Buffer(length)
    var pos = 0
    for (i = 0; i < list.length; i++) {
      var item = list[i]
      item.copy(buf, pos)
      pos += item.length
    }
    return buf
  }

  function byteLength (string, encoding) {
    if (typeof string !== 'string') string = '' + string

    var len = string.length
    if (len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'binary':
        // Deprecated
        case 'raw':
        case 'raws':
          return len
        case 'utf8':
        case 'utf-8':
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) return utf8ToBytes(string).length // assume utf8
          encoding = ('' + encoding).toLowerCase()
          loweredCase = true
      }
    }
  }
  Buffer.byteLength = byteLength

  function slowToString (encoding, start, end) {
    var loweredCase = false

    start = start | 0
    end = end === undefined || end === Infinity ? this.length : end | 0

    if (!encoding) encoding = 'utf8'
    if (start < 0) start = 0
    if (end > this.length) end = this.length
    if (end <= start) return ''

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'binary':
          return binarySlice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase()
          loweredCase = true
      }
    }
  }

  Buffer.prototype.toString = function toString () {
    var length = this.length | 0
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  }

  Buffer.prototype.equals = function equals (b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer.compare(this, b) === 0
  }

  Buffer.prototype.inspect = function inspect () {
    var str = ''
    var max = exports.INSPECT_MAX_BYTES
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
      if (this.length > max) str += ' ... '
    }
    return '<Buffer ' + str + '>'
  }

  Buffer.prototype.compare = function compare (b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return 0
    return Buffer.compare(this, b)
  }

  Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
    if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
    else if (byteOffset < -0x80000000) byteOffset = -0x80000000
    byteOffset >>= 0

    if (this.length === 0) return -1
    if (byteOffset >= this.length) return -1

    // Negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

    if (typeof val === 'string') {
      if (val.length === 0) return -1 // special case: looking for empty string always fails
      return String.prototype.indexOf.call(this, val, byteOffset)
    }
    if (Buffer.isBuffer(val)) {
      return arrayIndexOf(this, val, byteOffset)
    }
    if (typeof val === 'number') {
      if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
        return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
      }
      return arrayIndexOf(this, [ val ], byteOffset)
    }

    function arrayIndexOf (arr, val, byteOffset) {
      var foundIndex = -1
      for (var i = 0; byteOffset + i < arr.length; i++) {
        if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
          if (foundIndex === -1) foundIndex = i
          if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
        } else {
          foundIndex = -1
        }
      }
      return -1
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  // `get` is deprecated
  Buffer.prototype.get = function get (offset) {
    console.log('.get() is deprecated. Access using array indexes instead.')
    return this.readUInt8(offset)
  }

  // `set` is deprecated
  Buffer.prototype.set = function set (v, offset) {
    console.log('.set() is deprecated. Access using array indexes instead.')
    return this.writeUInt8(v, offset)
  }

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0
    var remaining = buf.length - offset
    if (!length) {
      length = remaining
    } else {
      length = Number(length)
      if (length > remaining) {
        length = remaining
      }
    }

    // must be an even number of digits
    var strLen = string.length
    if (strLen % 2 !== 0) throw new Error('Invalid hex string')

    if (length > strLen / 2) {
      length = strLen / 2
    }
    for (var i = 0; i < length; i++) {
      var parsed = parseInt(string.substr(i * 2, 2), 16)
      if (isNaN(parsed)) throw new Error('Invalid hex string')
      buf[offset + i] = parsed
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function binaryWrite (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8'
      length = this.length
      offset = 0
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset
      length = this.length
      offset = 0
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0
      if (isFinite(length)) {
        length = length | 0
        if (encoding === undefined) encoding = 'utf8'
      } else {
        encoding = length
        length = undefined
      }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      var swap = encoding
      encoding = offset
      offset = length | 0
      length = swap
    }

    var remaining = this.length - offset
    if (length === undefined || length > remaining) length = remaining

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8'

    var loweredCase = false
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'binary':
          return binaryWrite(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase()
          loweredCase = true
      }
    }
  }

  Buffer.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  }

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf)
    } else {
      return base64.fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end)
    var res = []

    var i = start
    while (i < end) {
      var firstByte = buf[i]
      var codePoint = null
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte
            }
            break
          case 2:
            secondByte = buf[i + 1]
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint
              }
            }
            break
          case 3:
            secondByte = buf[i + 1]
            thirdByte = buf[i + 2]
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint
              }
            }
            break
          case 4:
            secondByte = buf[i + 1]
            thirdByte = buf[i + 2]
            fourthByte = buf[i + 3]
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD
        bytesPerSequence = 1
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000
        res.push(codePoint >>> 10 & 0x3FF | 0xD800)
        codePoint = 0xDC00 | codePoint & 0x3FF
      }

      res.push(codePoint)
      i += bytesPerSequence
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = ''
    var i = 0
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      )
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = ''
    end = Math.min(buf.length, end)

    for (var i = start; i < end; i++) {
      ret += String.fromCharCode(buf[i] & 0x7F)
    }
    return ret
  }

  function binarySlice (buf, start, end) {
    var ret = ''
    end = Math.min(buf.length, end)

    for (var i = start; i < end; i++) {
      ret += String.fromCharCode(buf[i])
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length

    if (!start || start < 0) start = 0
    if (!end || end < 0 || end > len) end = len

    var out = ''
    for (var i = start; i < end; i++) {
      out += toHex(buf[i])
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end)
    var res = ''
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
    }
    return res
  }

  Buffer.prototype.slice = function slice (start, end) {
    var len = this.length
    start = ~~start
    end = end === undefined ? len : ~~end

    if (start < 0) {
      start += len
      if (start < 0) start = 0
    } else if (start > len) {
      start = len
    }

    if (end < 0) {
      end += len
      if (end < 0) end = 0
    } else if (end > len) {
      end = len
    }

    if (end < start) end = start

    var newBuf
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      newBuf = Buffer._augment(this.subarray(start, end))
    } else {
      var sliceLen = end - start
      newBuf = new Buffer(sliceLen, undefined)
      for (var i = 0; i < sliceLen; i++) {
        newBuf[i] = this[i + start]
      }
    }

    if (newBuf.length) newBuf.parent = this.parent || this

    return newBuf
  }

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)

    var val = this[offset]
    var mul = 1
    var i = 0
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul
    }

    return val
  }

  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length)
    }

    var val = this[offset + --byteLength]
    var mul = 1
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul
    }

    return val
  }

  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length)
    return this[offset]
  }

  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    return this[offset] | (this[offset + 1] << 8)
  }

  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    return (this[offset] << 8) | this[offset + 1]
  }

  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  }

  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  }

  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)

    var val = this[offset]
    var mul = 1
    var i = 0
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul
    }
    mul *= 0x80

    if (val >= mul) val -= Math.pow(2, 8 * byteLength)

    return val
  }

  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)

    var i = byteLength
    var mul = 1
    var val = this[offset + --i]
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul
    }
    mul *= 0x80

    if (val >= mul) val -= Math.pow(2, 8 * byteLength)

    return val
  }

  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length)
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  }

  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    var val = this[offset] | (this[offset + 1] << 8)
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  }

  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    var val = this[offset + 1] | (this[offset] << 8)
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  }

  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  }

  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  }

  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)
    return ieee754.read(this, offset, true, 23, 4)
  }

  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)
    return ieee754.read(this, offset, false, 23, 4)
  }

  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length)
    return ieee754.read(this, offset, true, 52, 8)
  }

  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length)
    return ieee754.read(this, offset, false, 52, 8)
  }

  function checkInt (buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('value is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('index out of range')
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

    var mul = 1
    var i = 0
    this[offset] = value & 0xFF
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

    var i = byteLength - 1
    var mul = 1
    this[offset + i] = value & 0xFF
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
    this[offset] = (value & 0xff)
    return offset + 1
  }

  function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
        (littleEndian ? i : 1 - i) * 8
    }
  }

  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
    } else {
      objectWriteUInt16(this, value, offset, true)
    }
    return offset + 2
  }

  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8)
      this[offset + 1] = (value & 0xff)
    } else {
      objectWriteUInt16(this, value, offset, false)
    }
    return offset + 2
  }

  function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
    }
  }

  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24)
      this[offset + 2] = (value >>> 16)
      this[offset + 1] = (value >>> 8)
      this[offset] = (value & 0xff)
    } else {
      objectWriteUInt32(this, value, offset, true)
    }
    return offset + 4
  }

  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24)
      this[offset + 1] = (value >>> 16)
      this[offset + 2] = (value >>> 8)
      this[offset + 3] = (value & 0xff)
    } else {
      objectWriteUInt32(this, value, offset, false)
    }
    return offset + 4
  }

  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1)

      checkInt(this, value, offset, byteLength, limit - 1, -limit)
    }

    var i = 0
    var mul = 1
    var sub = value < 0 ? 1 : 0
    this[offset] = value & 0xFF
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1)

      checkInt(this, value, offset, byteLength, limit - 1, -limit)
    }

    var i = byteLength - 1
    var mul = 1
    var sub = value < 0 ? 1 : 0
    this[offset + i] = value & 0xFF
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
    if (value < 0) value = 0xff + value + 1
    this[offset] = (value & 0xff)
    return offset + 1
  }

  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
    } else {
      objectWriteUInt16(this, value, offset, true)
    }
    return offset + 2
  }

  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8)
      this[offset + 1] = (value & 0xff)
    } else {
      objectWriteUInt16(this, value, offset, false)
    }
    return offset + 2
  }

  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
      this[offset + 2] = (value >>> 16)
      this[offset + 3] = (value >>> 24)
    } else {
      objectWriteUInt32(this, value, offset, true)
    }
    return offset + 4
  }

  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
    if (value < 0) value = 0xffffffff + value + 1
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24)
      this[offset + 1] = (value >>> 16)
      this[offset + 2] = (value >>> 8)
      this[offset + 3] = (value & 0xff)
    } else {
      objectWriteUInt32(this, value, offset, false)
    }
    return offset + 4
  }

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (value > max || value < min) throw new RangeError('value is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('index out of range')
    if (offset < 0) throw new RangeError('index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
    }
    ieee754.write(buf, value, offset, littleEndian, 23, 4)
    return offset + 4
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  }

  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  }

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
    }
    ieee754.write(buf, value, offset, littleEndian, 52, 8)
    return offset + 8
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  }

  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  }

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0
    if (!end && end !== 0) end = this.length
    if (targetStart >= target.length) targetStart = target.length
    if (!targetStart) targetStart = 0
    if (end > 0 && end < start) end = start

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start
    }

    var len = end - start
    var i

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; i--) {
        target[i + targetStart] = this[i + start]
      }
    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; i++) {
        target[i + targetStart] = this[i + start]
      }
    } else {
      target._set(this.subarray(start, start + len), targetStart)
    }

    return len
  }

  // fill(value, start=0, end=buffer.length)
  Buffer.prototype.fill = function fill (value, start, end) {
    if (!value) value = 0
    if (!start) start = 0
    if (!end) end = this.length

    if (end < start) throw new RangeError('end < start')

    // Fill 0 bytes; we're done
    if (end === start) return
    if (this.length === 0) return

    if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
    if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

    var i
    if (typeof value === 'number') {
      for (i = start; i < end; i++) {
        this[i] = value
      }
    } else {
      var bytes = utf8ToBytes(value.toString())
      var len = bytes.length
      for (i = start; i < end; i++) {
        this[i] = bytes[i % len]
      }
    }

    return this
  }

  /**
   * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
   * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
   */
  Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
    if (typeof Uint8Array !== 'undefined') {
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        return (new Buffer(this)).buffer
      } else {
        var buf = new Uint8Array(this.length)
        for (var i = 0, len = buf.length; i < len; i += 1) {
          buf[i] = this[i]
        }
        return buf.buffer
      }
    } else {
      throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
    }
  }

  // HELPER FUNCTIONS
  // ================

  var BP = Buffer.prototype

  /**
   * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
   */
  Buffer._augment = function _augment (arr) {
    arr.constructor = Buffer
    arr._isBuffer = true

    // save reference to original Uint8Array set method before overwriting
    arr._set = arr.set

    // deprecated
    arr.get = BP.get
    arr.set = BP.set

    arr.write = BP.write
    arr.toString = BP.toString
    arr.toLocaleString = BP.toString
    arr.toJSON = BP.toJSON
    arr.equals = BP.equals
    arr.compare = BP.compare
    arr.indexOf = BP.indexOf
    arr.copy = BP.copy
    arr.slice = BP.slice
    arr.readUIntLE = BP.readUIntLE
    arr.readUIntBE = BP.readUIntBE
    arr.readUInt8 = BP.readUInt8
    arr.readUInt16LE = BP.readUInt16LE
    arr.readUInt16BE = BP.readUInt16BE
    arr.readUInt32LE = BP.readUInt32LE
    arr.readUInt32BE = BP.readUInt32BE
    arr.readIntLE = BP.readIntLE
    arr.readIntBE = BP.readIntBE
    arr.readInt8 = BP.readInt8
    arr.readInt16LE = BP.readInt16LE
    arr.readInt16BE = BP.readInt16BE
    arr.readInt32LE = BP.readInt32LE
    arr.readInt32BE = BP.readInt32BE
    arr.readFloatLE = BP.readFloatLE
    arr.readFloatBE = BP.readFloatBE
    arr.readDoubleLE = BP.readDoubleLE
    arr.readDoubleBE = BP.readDoubleBE
    arr.writeUInt8 = BP.writeUInt8
    arr.writeUIntLE = BP.writeUIntLE
    arr.writeUIntBE = BP.writeUIntBE
    arr.writeUInt16LE = BP.writeUInt16LE
    arr.writeUInt16BE = BP.writeUInt16BE
    arr.writeUInt32LE = BP.writeUInt32LE
    arr.writeUInt32BE = BP.writeUInt32BE
    arr.writeIntLE = BP.writeIntLE
    arr.writeIntBE = BP.writeIntBE
    arr.writeInt8 = BP.writeInt8
    arr.writeInt16LE = BP.writeInt16LE
    arr.writeInt16BE = BP.writeInt16BE
    arr.writeInt32LE = BP.writeInt32LE
    arr.writeInt32BE = BP.writeInt32BE
    arr.writeFloatLE = BP.writeFloatLE
    arr.writeFloatBE = BP.writeFloatBE
    arr.writeDoubleLE = BP.writeDoubleLE
    arr.writeDoubleBE = BP.writeDoubleBE
    arr.fill = BP.fill
    arr.inspect = BP.inspect
    arr.toArrayBuffer = BP.toArrayBuffer

    return arr
  }

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '')
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '='
    }
    return str
  }

  function stringtrim (str) {
    if (str.trim) return str.trim()
    return str.replace(/^\s+|\s+$/g, '')
  }

  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes (string, units) {
    units = units || Infinity
    var codePoint
    var length = string.length
    var leadSurrogate = null
    var bytes = []

    for (var i = 0; i < length; i++) {
      codePoint = string.charCodeAt(i)

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            continue
          }

          // valid lead
          leadSurrogate = codePoint

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          leadSurrogate = codePoint
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
      }

      leadSurrogate = null

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint)
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        )
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        )
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        )
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = []
    for (var i = 0; i < str.length; i++) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF)
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo
    var byteArray = []
    for (var i = 0; i < str.length; i++) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i)
      hi = c >> 8
      lo = c % 256
      byteArray.push(lo)
      byteArray.push(hi)
    }

    return byteArray
  }

  function base64ToBytes (str) {
    return base64.toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; i++) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i]
    }
    return i
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer, (function() { return this; }())))

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

  var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

  ;(function (exports) {
    'use strict';

    var Arr = (typeof Uint8Array !== 'undefined')
      ? Uint8Array
      : Array

    var PLUS   = '+'.charCodeAt(0)
    var SLASH  = '/'.charCodeAt(0)
    var NUMBER = '0'.charCodeAt(0)
    var LOWER  = 'a'.charCodeAt(0)
    var UPPER  = 'A'.charCodeAt(0)
    var PLUS_URL_SAFE = '-'.charCodeAt(0)
    var SLASH_URL_SAFE = '_'.charCodeAt(0)

    function decode (elt) {
      var code = elt.charCodeAt(0)
      if (code === PLUS ||
          code === PLUS_URL_SAFE)
        return 62 // '+'
      if (code === SLASH ||
          code === SLASH_URL_SAFE)
        return 63 // '/'
      if (code < NUMBER)
        return -1 //no match
      if (code < NUMBER + 10)
        return code - NUMBER + 26 + 26
      if (code < UPPER + 26)
        return code - UPPER
      if (code < LOWER + 26)
        return code - LOWER + 26
    }

    function b64ToByteArray (b64) {
      var i, j, l, tmp, placeHolders, arr

      if (b64.length % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // the number of equal signs (place holders)
      // if there are two placeholders, than the two characters before it
      // represent one byte
      // if there is only one, then the three characters before it represent 2 bytes
      // this is just a cheap hack to not do indexOf twice
      var len = b64.length
      placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

      // base64 is 4/3 + up to two characters of the original data
      arr = new Arr(b64.length * 3 / 4 - placeHolders)

      // if there are placeholders, only get up to the last complete 4 chars
      l = placeHolders > 0 ? b64.length - 4 : b64.length

      var L = 0

      function push (v) {
        arr[L++] = v
      }

      for (i = 0, j = 0; i < l; i += 4, j += 3) {
        tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
        push((tmp & 0xFF0000) >> 16)
        push((tmp & 0xFF00) >> 8)
        push(tmp & 0xFF)
      }

      if (placeHolders === 2) {
        tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
        push(tmp & 0xFF)
      } else if (placeHolders === 1) {
        tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
        push((tmp >> 8) & 0xFF)
        push(tmp & 0xFF)
      }

      return arr
    }

    function uint8ToBase64 (uint8) {
      var i,
        extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
        output = "",
        temp, length

      function encode (num) {
        return lookup.charAt(num)
      }

      function tripletToBase64 (num) {
        return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
      }

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
        temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
        output += tripletToBase64(temp)
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      switch (extraBytes) {
        case 1:
          temp = uint8[uint8.length - 1]
          output += encode(temp >> 2)
          output += encode((temp << 4) & 0x3F)
          output += '=='
          break
        case 2:
          temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
          output += encode(temp >> 10)
          output += encode((temp >> 4) & 0x3F)
          output += encode((temp << 2) & 0x3F)
          output += '='
          break
      }

      return output
    }

    exports.toByteArray = b64ToByteArray
    exports.fromByteArray = uint8ToBase64
  }( false ? (this.base64js = {}) : exports))


/***/ },
/* 206 */
/***/ function(module, exports) {

  exports.read = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m
    var eLen = nBytes * 8 - mLen - 1
    var eMax = (1 << eLen) - 1
    var eBias = eMax >> 1
    var nBits = -7
    var i = isLE ? (nBytes - 1) : 0
    var d = isLE ? -1 : 1
    var s = buffer[offset + i]

    i += d

    e = s & ((1 << (-nBits)) - 1)
    s >>= (-nBits)
    nBits += eLen
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1)
    e >>= (-nBits)
    nBits += mLen
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen)
      e = e - eBias
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }

  exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c
    var eLen = nBytes * 8 - mLen - 1
    var eMax = (1 << eLen) - 1
    var eBias = eMax >> 1
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
    var i = isLE ? 0 : (nBytes - 1)
    var d = isLE ? 1 : -1
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

    value = Math.abs(value)

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0
      e = eMax
    } else {
      e = Math.floor(Math.log(value) / Math.LN2)
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--
        c *= 2
      }
      if (e + eBias >= 1) {
        value += rt / c
      } else {
        value += rt * Math.pow(2, 1 - eBias)
      }
      if (value * c >= 2) {
        e++
        c /= 2
      }

      if (e + eBias >= eMax) {
        m = 0
        e = eMax
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen)
        e = e + eBias
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
        e = 0
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m
    eLen += mLen
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128
  }


/***/ },
/* 207 */
/***/ function(module, exports) {

  var toString = {}.toString;

  module.exports = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
    var g = ('undefined' === typeof window ? global : window) || {}
    _crypto = (
      g.crypto || g.msCrypto || __webpack_require__(209)
    )
    module.exports = function(size) {
      // Modern Browsers
      if(_crypto.getRandomValues) {
        var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
        /* This will not work in older browsers.
         * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
         */

        _crypto.getRandomValues(bytes);
        return bytes;
      }
      else if (_crypto.randomBytes) {
        return _crypto.randomBytes(size)
      }
      else
        throw new Error(
          'secure random number generation not supported by this browser\n'+
          'use chrome, FireFox or Internet Explorer 11'
        )
    }
  }())

  /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(204).Buffer))

/***/ },
/* 209 */
/***/ function(module, exports) {

  /* (ignored) */

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(211)

  var md5 = toConstructor(__webpack_require__(216))
  var rmd160 = toConstructor(__webpack_require__(218))

  function toConstructor (fn) {
    return function () {
      var buffers = []
      var m= {
        update: function (data, enc) {
          if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
          buffers.push(data)
          return this
        },
        digest: function (enc) {
          var buf = Buffer.concat(buffers)
          var r = fn(buf)
          buffers = null
          return enc ? r.toString(enc) : r
        }
      }
      return m
    }
  }

  module.exports = function (alg) {
    if('md5' === alg) return new md5()
    if('rmd160' === alg) return new rmd160()
    return createHash(alg)
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

  var exports = module.exports = function (alg) {
    var Alg = exports[alg]
    if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
    return new Alg()
  }

  var Buffer = __webpack_require__(204).Buffer
  var Hash   = __webpack_require__(212)(Buffer)

  exports.sha1 = __webpack_require__(213)(Buffer, Hash)
  exports.sha256 = __webpack_require__(214)(Buffer, Hash)
  exports.sha512 = __webpack_require__(215)(Buffer, Hash)


/***/ },
/* 212 */
/***/ function(module, exports) {

  module.exports = function (Buffer) {

    //prototype class for hash functions
    function Hash (blockSize, finalSize) {
      this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
      this._finalSize = finalSize
      this._blockSize = blockSize
      this._len = 0
      this._s = 0
    }

    Hash.prototype.init = function () {
      this._s = 0
      this._len = 0
    }

    Hash.prototype.update = function (data, enc) {
      if ("string" === typeof data) {
        enc = enc || "utf8"
        data = new Buffer(data, enc)
      }

      var l = this._len += data.length
      var s = this._s = (this._s || 0)
      var f = 0
      var buffer = this._block

      while (s < l) {
        var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
        var ch = (t - f)

        for (var i = 0; i < ch; i++) {
          buffer[(s % this._blockSize) + i] = data[i + f]
        }

        s += ch
        f += ch

        if ((s % this._blockSize) === 0) {
          this._update(buffer)
        }
      }
      this._s = s

      return this
    }

    Hash.prototype.digest = function (enc) {
      // Suppose the length of the message M, in bits, is l
      var l = this._len * 8

      // Append the bit 1 to the end of the message
      this._block[this._len % this._blockSize] = 0x80

      // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
      this._block.fill(0, this._len % this._blockSize + 1)

      if (l % (this._blockSize * 8) >= this._finalSize * 8) {
        this._update(this._block)
        this._block.fill(0)
      }

      // to this append the block which is equal to the number l written in binary
      // TODO: handle case where l is > Math.pow(2, 29)
      this._block.writeInt32BE(l, this._blockSize - 4)

      var hash = this._update(this._block) || this._hash()

      return enc ? hash.toString(enc) : hash
    }

    Hash.prototype._update = function () {
      throw new Error('_update must be implemented by subclass')
    }

    return Hash
  }


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
   * in FIPS PUB 180-1
   * Version 2.1a Copyright Paul Johnston 2000 - 2002.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for details.
   */

  var inherits = __webpack_require__(199).inherits

  module.exports = function (Buffer, Hash) {

    var A = 0|0
    var B = 4|0
    var C = 8|0
    var D = 12|0
    var E = 16|0

    var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

    var POOL = []

    function Sha1 () {
      if(POOL.length)
        return POOL.pop().init()

      if(!(this instanceof Sha1)) return new Sha1()
      this._w = W
      Hash.call(this, 16*4, 14*4)

      this._h = null
      this.init()
    }

    inherits(Sha1, Hash)

    Sha1.prototype.init = function () {
      this._a = 0x67452301
      this._b = 0xefcdab89
      this._c = 0x98badcfe
      this._d = 0x10325476
      this._e = 0xc3d2e1f0

      Hash.prototype.init.call(this)
      return this
    }

    Sha1.prototype._POOL = POOL
    Sha1.prototype._update = function (X) {

      var a, b, c, d, e, _a, _b, _c, _d, _e

      a = _a = this._a
      b = _b = this._b
      c = _c = this._c
      d = _d = this._d
      e = _e = this._e

      var w = this._w

      for(var j = 0; j < 80; j++) {
        var W = w[j] = j < 16 ? X.readInt32BE(j*4)
          : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

        var t = add(
          add(rol(a, 5), sha1_ft(j, b, c, d)),
          add(add(e, W), sha1_kt(j))
        )

        e = d
        d = c
        c = rol(b, 30)
        b = a
        a = t
      }

      this._a = add(a, _a)
      this._b = add(b, _b)
      this._c = add(c, _c)
      this._d = add(d, _d)
      this._e = add(e, _e)
    }

    Sha1.prototype._hash = function () {
      if(POOL.length < 100) POOL.push(this)
      var H = new Buffer(20)
      //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
      H.writeInt32BE(this._a|0, A)
      H.writeInt32BE(this._b|0, B)
      H.writeInt32BE(this._c|0, C)
      H.writeInt32BE(this._d|0, D)
      H.writeInt32BE(this._e|0, E)
      return H
    }

    /*
     * Perform the appropriate triplet combination function for the current
     * iteration
     */
    function sha1_ft(t, b, c, d) {
      if(t < 20) return (b & c) | ((~b) & d);
      if(t < 40) return b ^ c ^ d;
      if(t < 60) return (b & c) | (b & d) | (c & d);
      return b ^ c ^ d;
    }

    /*
     * Determine the appropriate additive constant for the current iteration
     */
    function sha1_kt(t) {
      return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
             (t < 60) ? -1894007588 : -899497514;
    }

    /*
     * Add integers, wrapping at 2^32. This uses 16-bit operations internally
     * to work around bugs in some JS interpreters.
     * //dominictarr: this is 10 years old, so maybe this can be dropped?)
     *
     */
    function add(x, y) {
      return (x + y ) | 0
    //lets see how this goes on testling.
    //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
    //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    //  return (msw << 16) | (lsw & 0xFFFF);
    }

    /*
     * Bitwise rotate a 32-bit number to the left.
     */
    function rol(num, cnt) {
      return (num << cnt) | (num >>> (32 - cnt));
    }

    return Sha1
  }


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {


  /**
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
   * in FIPS 180-2
   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   *
   */

  var inherits = __webpack_require__(199).inherits

  module.exports = function (Buffer, Hash) {

    var K = [
        0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
        0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
        0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
        0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
        0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
        0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
        0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
        0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
        0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
        0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
        0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
        0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
        0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
        0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
        0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
        0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
      ]

    var W = new Array(64)

    function Sha256() {
      this.init()

      this._w = W //new Array(64)

      Hash.call(this, 16*4, 14*4)
    }

    inherits(Sha256, Hash)

    Sha256.prototype.init = function () {

      this._a = 0x6a09e667|0
      this._b = 0xbb67ae85|0
      this._c = 0x3c6ef372|0
      this._d = 0xa54ff53a|0
      this._e = 0x510e527f|0
      this._f = 0x9b05688c|0
      this._g = 0x1f83d9ab|0
      this._h = 0x5be0cd19|0

      this._len = this._s = 0

      return this
    }

    function S (X, n) {
      return (X >>> n) | (X << (32 - n));
    }

    function R (X, n) {
      return (X >>> n);
    }

    function Ch (x, y, z) {
      return ((x & y) ^ ((~x) & z));
    }

    function Maj (x, y, z) {
      return ((x & y) ^ (x & z) ^ (y & z));
    }

    function Sigma0256 (x) {
      return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
    }

    function Sigma1256 (x) {
      return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
    }

    function Gamma0256 (x) {
      return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
    }

    function Gamma1256 (x) {
      return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
    }

    Sha256.prototype._update = function(M) {

      var W = this._w
      var a, b, c, d, e, f, g, h
      var T1, T2

      a = this._a | 0
      b = this._b | 0
      c = this._c | 0
      d = this._d | 0
      e = this._e | 0
      f = this._f | 0
      g = this._g | 0
      h = this._h | 0

      for (var j = 0; j < 64; j++) {
        var w = W[j] = j < 16
          ? M.readInt32BE(j * 4)
          : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

        T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

        T2 = Sigma0256(a) + Maj(a, b, c);
        h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
      }

      this._a = (a + this._a) | 0
      this._b = (b + this._b) | 0
      this._c = (c + this._c) | 0
      this._d = (d + this._d) | 0
      this._e = (e + this._e) | 0
      this._f = (f + this._f) | 0
      this._g = (g + this._g) | 0
      this._h = (h + this._h) | 0

    };

    Sha256.prototype._hash = function () {
      var H = new Buffer(32)

      H.writeInt32BE(this._a,  0)
      H.writeInt32BE(this._b,  4)
      H.writeInt32BE(this._c,  8)
      H.writeInt32BE(this._d, 12)
      H.writeInt32BE(this._e, 16)
      H.writeInt32BE(this._f, 20)
      H.writeInt32BE(this._g, 24)
      H.writeInt32BE(this._h, 28)

      return H
    }

    return Sha256

  }


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

  var inherits = __webpack_require__(199).inherits

  module.exports = function (Buffer, Hash) {
    var K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ]

    var W = new Array(160)

    function Sha512() {
      this.init()
      this._w = W

      Hash.call(this, 128, 112)
    }

    inherits(Sha512, Hash)

    Sha512.prototype.init = function () {

      this._a = 0x6a09e667|0
      this._b = 0xbb67ae85|0
      this._c = 0x3c6ef372|0
      this._d = 0xa54ff53a|0
      this._e = 0x510e527f|0
      this._f = 0x9b05688c|0
      this._g = 0x1f83d9ab|0
      this._h = 0x5be0cd19|0

      this._al = 0xf3bcc908|0
      this._bl = 0x84caa73b|0
      this._cl = 0xfe94f82b|0
      this._dl = 0x5f1d36f1|0
      this._el = 0xade682d1|0
      this._fl = 0x2b3e6c1f|0
      this._gl = 0xfb41bd6b|0
      this._hl = 0x137e2179|0

      this._len = this._s = 0

      return this
    }

    function S (X, Xl, n) {
      return (X >>> n) | (Xl << (32 - n))
    }

    function Ch (x, y, z) {
      return ((x & y) ^ ((~x) & z));
    }

    function Maj (x, y, z) {
      return ((x & y) ^ (x & z) ^ (y & z));
    }

    Sha512.prototype._update = function(M) {

      var W = this._w
      var a, b, c, d, e, f, g, h
      var al, bl, cl, dl, el, fl, gl, hl

      a = this._a | 0
      b = this._b | 0
      c = this._c | 0
      d = this._d | 0
      e = this._e | 0
      f = this._f | 0
      g = this._g | 0
      h = this._h | 0

      al = this._al | 0
      bl = this._bl | 0
      cl = this._cl | 0
      dl = this._dl | 0
      el = this._el | 0
      fl = this._fl | 0
      gl = this._gl | 0
      hl = this._hl | 0

      for (var i = 0; i < 80; i++) {
        var j = i * 2

        var Wi, Wil

        if (i < 16) {
          Wi = W[j] = M.readInt32BE(j * 4)
          Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

        } else {
          var x  = W[j - 15*2]
          var xl = W[j - 15*2 + 1]
          var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
          var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

          x  = W[j - 2*2]
          xl = W[j - 2*2 + 1]
          var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
          var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

          // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
          var Wi7  = W[j - 7*2]
          var Wi7l = W[j - 7*2 + 1]

          var Wi16  = W[j - 16*2]
          var Wi16l = W[j - 16*2 + 1]

          Wil = gamma0l + Wi7l
          Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
          Wil = Wil + gamma1l
          Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
          Wil = Wil + Wi16l
          Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

          W[j] = Wi
          W[j + 1] = Wil
        }

        var maj = Maj(a, b, c)
        var majl = Maj(al, bl, cl)

        var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
        var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
        var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
        var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

        // t1 = h + sigma1 + ch + K[i] + W[i]
        var Ki = K[j]
        var Kil = K[j + 1]

        var ch = Ch(e, f, g)
        var chl = Ch(el, fl, gl)

        var t1l = hl + sigma1l
        var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
        t1l = t1l + chl
        t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
        t1l = t1l + Kil
        t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
        t1l = t1l + Wil
        t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

        // t2 = sigma0 + maj
        var t2l = sigma0l + majl
        var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

        h  = g
        hl = gl
        g  = f
        gl = fl
        f  = e
        fl = el
        el = (dl + t1l) | 0
        e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
        d  = c
        dl = cl
        c  = b
        cl = bl
        b  = a
        bl = al
        al = (t1l + t2l) | 0
        a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
      }

      this._al = (this._al + al) | 0
      this._bl = (this._bl + bl) | 0
      this._cl = (this._cl + cl) | 0
      this._dl = (this._dl + dl) | 0
      this._el = (this._el + el) | 0
      this._fl = (this._fl + fl) | 0
      this._gl = (this._gl + gl) | 0
      this._hl = (this._hl + hl) | 0

      this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
      this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
      this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
      this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
      this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
      this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
      this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
      this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
    }

    Sha512.prototype._hash = function () {
      var H = new Buffer(64)

      function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset)
        H.writeInt32BE(l, offset + 4)
      }

      writeInt64BE(this._a, this._al, 0)
      writeInt64BE(this._b, this._bl, 8)
      writeInt64BE(this._c, this._cl, 16)
      writeInt64BE(this._d, this._dl, 24)
      writeInt64BE(this._e, this._el, 32)
      writeInt64BE(this._f, this._fl, 40)
      writeInt64BE(this._g, this._gl, 48)
      writeInt64BE(this._h, this._hl, 56)

      return H
    }

    return Sha512

  }


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
   * Digest Algorithm, as defined in RFC 1321.
   * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for more info.
   */

  var helpers = __webpack_require__(217);

  /*
   * Calculate the MD5 of an array of little-endian words, and a bit length
   */
  function core_md5(x, len)
  {
    /* append padding */
    x[len >> 5] |= 0x80 << ((len) % 32);
    x[(((len + 64) >>> 9) << 4) + 14] = len;

    var a =  1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d =  271733878;

    for(var i = 0; i < x.length; i += 16)
    {
      var olda = a;
      var oldb = b;
      var oldc = c;
      var oldd = d;

      a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
      d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
      c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
      b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
      a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
      d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
      c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
      b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
      a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
      d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
      c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
      b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
      a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
      d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
      c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
      b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

      a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
      d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
      c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
      b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
      a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
      d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
      c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
      b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
      a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
      d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
      c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
      b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
      a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
      d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
      c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
      b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

      a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
      d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
      c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
      b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
      a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
      d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
      c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
      b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
      a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
      d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
      c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
      b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
      a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
      d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
      c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
      b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

      a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
      d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
      c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
      b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
      a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
      d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
      c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
      b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
      a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
      d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
      c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
      b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
      a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
      d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
      c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
      b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

      a = safe_add(a, olda);
      b = safe_add(b, oldb);
      c = safe_add(c, oldc);
      d = safe_add(d, oldd);
    }
    return Array(a, b, c, d);

  }

  /*
   * These functions implement the four basic operations the algorithm uses.
   */
  function md5_cmn(q, a, b, x, s, t)
  {
    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
  }
  function md5_ff(a, b, c, d, x, s, t)
  {
    return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
  }
  function md5_gg(a, b, c, d, x, s, t)
  {
    return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
  }
  function md5_hh(a, b, c, d, x, s, t)
  {
    return md5_cmn(b ^ c ^ d, a, b, x, s, t);
  }
  function md5_ii(a, b, c, d, x, s, t)
  {
    return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
  }

  /*
   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
   * to work around bugs in some JS interpreters.
   */
  function safe_add(x, y)
  {
    var lsw = (x & 0xFFFF) + (y & 0xFFFF);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return (msw << 16) | (lsw & 0xFFFF);
  }

  /*
   * Bitwise rotate a 32-bit number to the left.
   */
  function bit_rol(num, cnt)
  {
    return (num << cnt) | (num >>> (32 - cnt));
  }

  module.exports = function md5(buf) {
    return helpers.hash(buf, core_md5, 16);
  };


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
  var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
  var chrsz = 8;

  function toArray(buf, bigEndian) {
    if ((buf.length % intSize) !== 0) {
      var len = buf.length + (intSize - (buf.length % intSize));
      buf = Buffer.concat([buf, zeroBuffer], len);
    }

    var arr = [];
    var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
    for (var i = 0; i < buf.length; i += intSize) {
      arr.push(fn.call(buf, i));
    }
    return arr;
  }

  function toBuffer(arr, size, bigEndian) {
    var buf = new Buffer(size);
    var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
    for (var i = 0; i < arr.length; i++) {
      fn.call(buf, arr[i], i * 4, true);
    }
    return buf;
  }

  function hash(buf, fn, hashSize, bigEndian) {
    if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
    var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
    return toBuffer(arr, hashSize, bigEndian);
  }

  module.exports = { hash: hash };

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {
  module.exports = ripemd160



  /*
  CryptoJS v3.1.2
  code.google.com/p/crypto-js
  (c) 2009-2013 by Jeff Mott. All rights reserved.
  code.google.com/p/crypto-js/wiki/License
  */
  /** @preserve
  (c) 2012 by Cédric Mesnil. All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

      - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
      - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */

  // Constants table
  var zl = [
      0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
      7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
      3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
      1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
      4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
  var zr = [
      5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
      6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
      15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
      8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
      12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
  var sl = [
       11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
      7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
      11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
        11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
      9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
  var sr = [
      8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
      9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
      9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
      15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
      8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

  var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
  var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

  var bytesToWords = function (bytes) {
    var words = [];
    for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
      words[b >>> 5] |= bytes[i] << (24 - b % 32);
    }
    return words;
  };

  var wordsToBytes = function (words) {
    var bytes = [];
    for (var b = 0; b < words.length * 32; b += 8) {
      bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
    }
    return bytes;
  };

  var processBlock = function (H, M, offset) {

    // Swap endian
    for (var i = 0; i < 16; i++) {
      var offset_i = offset + i;
      var M_offset_i = M[offset_i];

      // Swap
      M[offset_i] = (
          (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
          (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
      );
    }

    // Working variables
    var al, bl, cl, dl, el;
    var ar, br, cr, dr, er;

    ar = al = H[0];
    br = bl = H[1];
    cr = cl = H[2];
    dr = dl = H[3];
    er = el = H[4];
    // Computation
    var t;
    for (var i = 0; i < 80; i += 1) {
      t = (al +  M[offset+zl[i]])|0;
      if (i<16){
          t +=  f1(bl,cl,dl) + hl[0];
      } else if (i<32) {
          t +=  f2(bl,cl,dl) + hl[1];
      } else if (i<48) {
          t +=  f3(bl,cl,dl) + hl[2];
      } else if (i<64) {
          t +=  f4(bl,cl,dl) + hl[3];
      } else {// if (i<80) {
          t +=  f5(bl,cl,dl) + hl[4];
      }
      t = t|0;
      t =  rotl(t,sl[i]);
      t = (t+el)|0;
      al = el;
      el = dl;
      dl = rotl(cl, 10);
      cl = bl;
      bl = t;

      t = (ar + M[offset+zr[i]])|0;
      if (i<16){
          t +=  f5(br,cr,dr) + hr[0];
      } else if (i<32) {
          t +=  f4(br,cr,dr) + hr[1];
      } else if (i<48) {
          t +=  f3(br,cr,dr) + hr[2];
      } else if (i<64) {
          t +=  f2(br,cr,dr) + hr[3];
      } else {// if (i<80) {
          t +=  f1(br,cr,dr) + hr[4];
      }
      t = t|0;
      t =  rotl(t,sr[i]) ;
      t = (t+er)|0;
      ar = er;
      er = dr;
      dr = rotl(cr, 10);
      cr = br;
      br = t;
    }
    // Intermediate hash value
    t    = (H[1] + cl + dr)|0;
    H[1] = (H[2] + dl + er)|0;
    H[2] = (H[3] + el + ar)|0;
    H[3] = (H[4] + al + br)|0;
    H[4] = (H[0] + bl + cr)|0;
    H[0] =  t;
  };

  function f1(x, y, z) {
    return ((x) ^ (y) ^ (z));
  }

  function f2(x, y, z) {
    return (((x)&(y)) | ((~x)&(z)));
  }

  function f3(x, y, z) {
    return (((x) | (~(y))) ^ (z));
  }

  function f4(x, y, z) {
    return (((x) & (z)) | ((y)&(~(z))));
  }

  function f5(x, y, z) {
    return ((x) ^ ((y) |(~(z))));
  }

  function rotl(x,n) {
    return (x<<n) | (x>>>(32-n));
  }

  function ripemd160(message) {
    var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

    if (typeof message == 'string')
      message = new Buffer(message, 'utf8');

    var m = bytesToWords(message);

    var nBitsLeft = message.length * 8;
    var nBitsTotal = message.length * 8;

    // Add padding
    m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
    m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
        (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
        (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
    );

    for (var i=0 ; i<m.length; i += 16) {
      processBlock(H, m, i);
    }

    // Swap endian
    for (var i = 0; i < 5; i++) {
        // Shortcut
      var H_i = H[i];

      // Swap
      H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
            (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
    }

    var digestbytes = wordsToBytes(H);
    return new Buffer(digestbytes);
  }



  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(210)

  var zeroBuffer = new Buffer(128)
  zeroBuffer.fill(0)

  module.exports = Hmac

  function Hmac (alg, key) {
    if(!(this instanceof Hmac)) return new Hmac(alg, key)
    this._opad = opad
    this._alg = alg

    var blocksize = (alg === 'sha512') ? 128 : 64

    key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

    if(key.length > blocksize) {
      key = createHash(alg).update(key).digest()
    } else if(key.length < blocksize) {
      key = Buffer.concat([key, zeroBuffer], blocksize)
    }

    var ipad = this._ipad = new Buffer(blocksize)
    var opad = this._opad = new Buffer(blocksize)

    for(var i = 0; i < blocksize; i++) {
      ipad[i] = key[i] ^ 0x36
      opad[i] = key[i] ^ 0x5C
    }

    this._hash = createHash(alg).update(ipad)
  }

  Hmac.prototype.update = function (data, enc) {
    this._hash.update(data, enc)
    return this
  }

  Hmac.prototype.digest = function (enc) {
    var h = this._hash.digest()
    return createHash(this._alg).update(this._opad).update(h).digest(enc)
  }


  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

  var pbkdf2Export = __webpack_require__(221)

  module.exports = function (crypto, exports) {
    exports = exports || {}

    var exported = pbkdf2Export(crypto)

    exports.pbkdf2 = exported.pbkdf2
    exports.pbkdf2Sync = exported.pbkdf2Sync

    return exports
  }


/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
    function pbkdf2(password, salt, iterations, keylen, digest, callback) {
      if ('function' === typeof digest) {
        callback = digest
        digest = undefined
      }

      if ('function' !== typeof callback)
        throw new Error('No callback provided to pbkdf2')

      setTimeout(function() {
        var result

        try {
          result = pbkdf2Sync(password, salt, iterations, keylen, digest)
        } catch (e) {
          return callback(e)
        }

        callback(undefined, result)
      })
    }

    function pbkdf2Sync(password, salt, iterations, keylen, digest) {
      if ('number' !== typeof iterations)
        throw new TypeError('Iterations not a number')

      if (iterations < 0)
        throw new TypeError('Bad iterations')

      if ('number' !== typeof keylen)
        throw new TypeError('Key length not a number')

      if (keylen < 0)
        throw new TypeError('Bad key length')

      digest = digest || 'sha1'

      if (!Buffer.isBuffer(password)) password = new Buffer(password)
      if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

      var hLen, l = 1, r, T
      var DK = new Buffer(keylen)
      var block1 = new Buffer(salt.length + 4)
      salt.copy(block1, 0, 0, salt.length)

      for (var i = 1; i <= l; i++) {
        block1.writeUInt32BE(i, salt.length)

        var U = crypto.createHmac(digest, password).update(block1).digest()

        if (!hLen) {
          hLen = U.length
          T = new Buffer(hLen)
          l = Math.ceil(keylen / hLen)
          r = keylen - (l - 1) * hLen

          if (keylen > (Math.pow(2, 32) - 1) * hLen)
            throw new TypeError('keylen exceeds maximum length')
        }

        U.copy(T, 0, 0, hLen)

        for (var j = 1; j < iterations; j++) {
          U = crypto.createHmac(digest, password).update(U).digest()

          for (var k = 0; k < hLen; k++) {
            T[k] ^= U[k]
          }
        }

        var destPos = (i - 1) * hLen
        var len = (i == l ? r : hLen)
        T.copy(DK, destPos, 0, len)
      }

      return DK
    }

    return {
      pbkdf2: pbkdf2,
      pbkdf2Sync: pbkdf2Sync
    }
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

  var hash = exports;

  hash.utils = __webpack_require__(223);
  hash.common = __webpack_require__(225);
  hash.sha = __webpack_require__(226);
  hash.ripemd = __webpack_require__(227);
  hash.hmac = __webpack_require__(228);

  // Proxy hash functions to the main object
  hash.sha1 = hash.sha.sha1;
  hash.sha256 = hash.sha.sha256;
  hash.sha224 = hash.sha.sha224;
  hash.sha384 = hash.sha.sha384;
  hash.sha512 = hash.sha.sha512;
  hash.ripemd160 = hash.ripemd.ripemd160;


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

  var utils = exports;
  var inherits = __webpack_require__(224);

  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === 'string') {
      if (!enc) {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      } else if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    } else {
      for (var i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
    }
    return res;
  }
  utils.toArray = toArray;

  function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  utils.toHex = toHex;

  function htonl(w) {
    var res = (w >>> 24) |
              ((w >>> 8) & 0xff00) |
              ((w << 8) & 0xff0000) |
              ((w & 0xff) << 24);
    return res >>> 0;
  }
  utils.htonl = htonl;

  function toHex32(msg, endian) {
    var res = '';
    for (var i = 0; i < msg.length; i++) {
      var w = msg[i];
      if (endian === 'little')
        w = htonl(w);
      res += zero8(w.toString(16));
    }
    return res;
  }
  utils.toHex32 = toHex32;

  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  utils.zero2 = zero2;

  function zero8(word) {
    if (word.length === 7)
      return '0' + word;
    else if (word.length === 6)
      return '00' + word;
    else if (word.length === 5)
      return '000' + word;
    else if (word.length === 4)
      return '0000' + word;
    else if (word.length === 3)
      return '00000' + word;
    else if (word.length === 2)
      return '000000' + word;
    else if (word.length === 1)
      return '0000000' + word;
    else
      return word;
  }
  utils.zero8 = zero8;

  function join32(msg, start, end, endian) {
    var len = end - start;
    assert(len % 4 === 0);
    var res = new Array(len / 4);
    for (var i = 0, k = start; i < res.length; i++, k += 4) {
      var w;
      if (endian === 'big')
        w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
      else
        w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
      res[i] = w >>> 0;
    }
    return res;
  }
  utils.join32 = join32;

  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
      var m = msg[i];
      if (endian === 'big') {
        res[k] = m >>> 24;
        res[k + 1] = (m >>> 16) & 0xff;
        res[k + 2] = (m >>> 8) & 0xff;
        res[k + 3] = m & 0xff;
      } else {
        res[k + 3] = m >>> 24;
        res[k + 2] = (m >>> 16) & 0xff;
        res[k + 1] = (m >>> 8) & 0xff;
        res[k] = m & 0xff;
      }
    }
    return res;
  }
  utils.split32 = split32;

  function rotr32(w, b) {
    return (w >>> b) | (w << (32 - b));
  }
  utils.rotr32 = rotr32;

  function rotl32(w, b) {
    return (w << b) | (w >>> (32 - b));
  }
  utils.rotl32 = rotl32;

  function sum32(a, b) {
    return (a + b) >>> 0;
  }
  utils.sum32 = sum32;

  function sum32_3(a, b, c) {
    return (a + b + c) >>> 0;
  }
  utils.sum32_3 = sum32_3;

  function sum32_4(a, b, c, d) {
    return (a + b + c + d) >>> 0;
  }
  utils.sum32_4 = sum32_4;

  function sum32_5(a, b, c, d, e) {
    return (a + b + c + d + e) >>> 0;
  }
  utils.sum32_5 = sum32_5;

  function assert(cond, msg) {
    if (!cond)
      throw new Error(msg || 'Assertion failed');
  }
  utils.assert = assert;

  utils.inherits = inherits;

  function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];

    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  exports.sum64 = sum64;

  function sum64_hi(ah, al, bh, bl) {
    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  };
  exports.sum64_hi = sum64_hi;

  function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  };
  exports.sum64_lo = sum64_lo;

  function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;

    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  };
  exports.sum64_4_hi = sum64_4_hi;

  function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  };
  exports.sum64_4_lo = sum64_4_lo;

  function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = (lo + el) >>> 0;
    carry += lo < el ? 1 : 0;

    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  };
  exports.sum64_5_hi = sum64_5_hi;

  function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;

    return lo >>> 0;
  };
  exports.sum64_5_lo = sum64_5_lo;

  function rotr64_hi(ah, al, num) {
    var r = (al << (32 - num)) | (ah >>> num);
    return r >>> 0;
  };
  exports.rotr64_hi = rotr64_hi;

  function rotr64_lo(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  };
  exports.rotr64_lo = rotr64_lo;

  function shr64_hi(ah, al, num) {
    return ah >>> num;
  };
  exports.shr64_hi = shr64_hi;

  function shr64_lo(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  };
  exports.shr64_lo = shr64_lo;


/***/ },
/* 224 */
/***/ function(module, exports) {

  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

  var hash = __webpack_require__(222);
  var utils = hash.utils;
  var assert = utils.assert;

  function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';

    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  exports.BlockHash = BlockHash;

  BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;

    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
      msg = this.pending;

      // Process pending data in blocks
      var r = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r, msg.length);
      if (this.pending.length === 0)
        this.pending = null;

      msg = utils.join32(msg, 0, msg.length - r, this.endian);
      for (var i = 0; i < msg.length; i += this._delta32)
        this._update(msg, i, i + this._delta32);
    }

    return this;
  };

  BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert(this.pending === null);

    return this._digest(enc);
  };

  BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - ((len + this.padLength) % bytes);
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for (var i = 1; i < k; i++)
      res[i] = 0;

    // Append length
    len <<= 3;
    if (this.endian === 'big') {
      for (var t = 8; t < this.padLength; t++)
        res[i++] = 0;

      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = len & 0xff;
    } else {
      res[i++] = len & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;

      for (var t = 8; t < this.padLength; t++)
        res[i++] = 0;
    }

    return res;
  };


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

  var hash = __webpack_require__(222);
  var utils = hash.utils;
  var assert = utils.assert;

  var rotr32 = utils.rotr32;
  var rotl32 = utils.rotl32;
  var sum32 = utils.sum32;
  var sum32_4 = utils.sum32_4;
  var sum32_5 = utils.sum32_5;
  var rotr64_hi = utils.rotr64_hi;
  var rotr64_lo = utils.rotr64_lo;
  var shr64_hi = utils.shr64_hi;
  var shr64_lo = utils.shr64_lo;
  var sum64 = utils.sum64;
  var sum64_hi = utils.sum64_hi;
  var sum64_lo = utils.sum64_lo;
  var sum64_4_hi = utils.sum64_4_hi;
  var sum64_4_lo = utils.sum64_4_lo;
  var sum64_5_hi = utils.sum64_5_hi;
  var sum64_5_lo = utils.sum64_5_lo;
  var BlockHash = hash.common.BlockHash;

  var sha256_K = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
  ];

  var sha512_K = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  ];

  var sha1_K = [
    0x5A827999, 0x6ED9EBA1,
    0x8F1BBCDC, 0xCA62C1D6
  ];

  function SHA256() {
    if (!(this instanceof SHA256))
      return new SHA256();

    BlockHash.call(this);
    this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
               0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];
    this.k = sha256_K;
    this.W = new Array(64);
  }
  utils.inherits(SHA256, BlockHash);
  exports.sha256 = SHA256;

  SHA256.blockSize = 512;
  SHA256.outSize = 256;
  SHA256.hmacStrength = 192;
  SHA256.padLength = 64;

  SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i++)
      W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];

    assert(this.k.length === W.length);
    for (var i = 0; i < W.length; i++) {
      var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
      var T2 = sum32(s0_256(a), maj32(a, b, c));
      h = g;
      g = f;
      f = e;
      e = sum32(d, T1);
      d = c;
      c = b;
      b = a;
      a = sum32(T1, T2);
    }

    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
    this.h[5] = sum32(this.h[5], f);
    this.h[6] = sum32(this.h[6], g);
    this.h[7] = sum32(this.h[7], h);
  };

  SHA256.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'big');
    else
      return utils.split32(this.h, 'big');
  };

  function SHA224() {
    if (!(this instanceof SHA224))
      return new SHA224();

    SHA256.call(this);
    this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
               0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
  }
  utils.inherits(SHA224, SHA256);
  exports.sha224 = SHA224;

  SHA224.blockSize = 512;
  SHA224.outSize = 224;
  SHA224.hmacStrength = 192;
  SHA224.padLength = 64;

  SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === 'hex')
      return utils.toHex32(this.h.slice(0, 7), 'big');
    else
      return utils.split32(this.h.slice(0, 7), 'big');
  };

  function SHA512() {
    if (!(this instanceof SHA512))
      return new SHA512();

    BlockHash.call(this);
    this.h = [ 0x6a09e667, 0xf3bcc908,
               0xbb67ae85, 0x84caa73b,
               0x3c6ef372, 0xfe94f82b,
               0xa54ff53a, 0x5f1d36f1,
               0x510e527f, 0xade682d1,
               0x9b05688c, 0x2b3e6c1f,
               0x1f83d9ab, 0xfb41bd6b,
               0x5be0cd19, 0x137e2179 ];
    this.k = sha512_K;
    this.W = new Array(160);
  }
  utils.inherits(SHA512, BlockHash);
  exports.sha512 = SHA512;

  SHA512.blockSize = 1024;
  SHA512.outSize = 512;
  SHA512.hmacStrength = 192;
  SHA512.padLength = 128;

  SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;

    // 32 x 32bit words
    for (var i = 0; i < 32; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i += 2) {
      var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
      var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
      var c1_hi = W[i - 14];  // i - 7
      var c1_lo = W[i - 13];
      var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
      var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
      var c3_hi = W[i - 32];  // i - 16
      var c3_lo = W[i - 31];

      W[i] = sum64_4_hi(c0_hi, c0_lo,
                        c1_hi, c1_lo,
                        c2_hi, c2_lo,
                        c3_hi, c3_lo);
      W[i + 1] = sum64_4_lo(c0_hi, c0_lo,
                            c1_hi, c1_lo,
                            c2_hi, c2_lo,
                            c3_hi, c3_lo);
    }
  };

  SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);

    var W = this.W;

    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];

    assert(this.k.length === W.length);
    for (var i = 0; i < W.length; i += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = this.k[i];
      var c3_lo = this.k[i + 1];
      var c4_hi = W[i];
      var c4_lo = W[i + 1];

      var T1_hi = sum64_5_hi(c0_hi, c0_lo,
                             c1_hi, c1_lo,
                             c2_hi, c2_lo,
                             c3_hi, c3_lo,
                             c4_hi, c4_lo);
      var T1_lo = sum64_5_lo(c0_hi, c0_lo,
                             c1_hi, c1_lo,
                             c2_hi, c2_lo,
                             c3_hi, c3_lo,
                             c4_hi, c4_lo);

      var c0_hi = s0_512_hi(ah, al);
      var c0_lo = s0_512_lo(ah, al);
      var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
      var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

      var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

      hh = gh;
      hl = gl;

      gh = fh;
      gl = fl;

      fh = eh;
      fl = el;

      eh = sum64_hi(dh, dl, T1_hi, T1_lo);
      el = sum64_lo(dl, dl, T1_hi, T1_lo);

      dh = ch;
      dl = cl;

      ch = bh;
      cl = bl;

      bh = ah;
      bl = al;

      ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }

    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
  };

  SHA512.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'big');
    else
      return utils.split32(this.h, 'big');
  };

  function SHA384() {
    if (!(this instanceof SHA384))
      return new SHA384();

    SHA512.call(this);
    this.h = [ 0xcbbb9d5d, 0xc1059ed8,
               0x629a292a, 0x367cd507,
               0x9159015a, 0x3070dd17,
               0x152fecd8, 0xf70e5939,
               0x67332667, 0xffc00b31,
               0x8eb44a87, 0x68581511,
               0xdb0c2e0d, 0x64f98fa7,
               0x47b5481d, 0xbefa4fa4 ];
  }
  utils.inherits(SHA384, SHA512);
  exports.sha384 = SHA384;

  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;

  SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h.slice(0, 12), 'big');
    else
      return utils.split32(this.h.slice(0, 12), 'big');
  };

  function SHA1() {
    if (!(this instanceof SHA1))
      return new SHA1();

    BlockHash.call(this);
    this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,
               0x10325476, 0xc3d2e1f0 ];
    this.W = new Array(80);
  }

  utils.inherits(SHA1, BlockHash);
  exports.sha1 = SHA1;

  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;

  SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];

    for(; i < W.length; i++)
      W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];

    for (var i = 0; i < W.length; i++) {
      var s = ~~(i / 20);
      var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
      e = d;
      d = c;
      c = rotl32(b, 30);
      b = a;
      a = t;
    }

    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
  };

  SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'big');
    else
      return utils.split32(this.h, 'big');
  };

  function ch32(x, y, z) {
    return (x & y) ^ ((~x) & z);
  }

  function maj32(x, y, z) {
    return (x & y) ^ (x & z) ^ (y & z);
  }

  function p32(x, y, z) {
    return x ^ y ^ z;
  }

  function s0_256(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
  }

  function s1_256(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
  }

  function g0_256(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
  }

  function g1_256(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
  }

  function ft_1(s, x, y, z) {
    if (s === 0)
      return ch32(x, y, z);
    if (s === 1 || s === 3)
      return p32(x, y, z);
    if (s === 2)
      return maj32(x, y, z);
  }

  function ch64_hi(xh, xl, yh, yl, zh, zl) {
    var r = (xh & yh) ^ ((~xh) & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ ((~xl) & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function maj64_hi(xh, xl, yh, yl, zh, zl) {
    var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2);  // 34
    var c2_hi = rotr64_hi(xl, xh, 7);  // 39

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2);  // 34
    var c2_lo = rotr64_lo(xl, xh, 7);  // 39

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9);  // 41

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9);  // 41

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29);  // 61
    var c2_hi = shr64_hi(xh, xl, 6);

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29);  // 61
    var c2_lo = shr64_lo(xh, xl, 6);

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

  var hash = __webpack_require__(222);
  var utils = hash.utils;

  var rotl32 = utils.rotl32;
  var sum32 = utils.sum32;
  var sum32_3 = utils.sum32_3;
  var sum32_4 = utils.sum32_4;
  var BlockHash = hash.common.BlockHash;

  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();

    BlockHash.call(this);

    this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
    this.endian = 'little';
  }
  utils.inherits(RIPEMD160, BlockHash);
  exports.ripemd160 = RIPEMD160;

  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;

  RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for (var j = 0; j < 80; j++) {
      var T = sum32(
        rotl32(
          sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
          s[j]),
        E);
      A = E;
      E = D;
      D = rotl32(C, 10);
      C = B;
      B = T;
      T = sum32(
        rotl32(
          sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
          sh[j]),
        Eh);
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32(Ch, 10);
      Ch = Bh;
      Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
  };

  RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'little');
    else
      return utils.split32(this.h, 'little');
  };

  function f(j, x, y, z) {
    if (j <= 15)
      return x ^ y ^ z;
    else if (j <= 31)
      return (x & y) | ((~x) & z);
    else if (j <= 47)
      return (x | (~y)) ^ z;
    else if (j <= 63)
      return (x & z) | (y & (~z));
    else
      return x ^ (y | (~z));
  }

  function K(j) {
    if (j <= 15)
      return 0x00000000;
    else if (j <= 31)
      return 0x5a827999;
    else if (j <= 47)
      return 0x6ed9eba1;
    else if (j <= 63)
      return 0x8f1bbcdc;
    else
      return 0xa953fd4e;
  }

  function Kh(j) {
    if (j <= 15)
      return 0x50a28be6;
    else if (j <= 31)
      return 0x5c4dd124;
    else if (j <= 47)
      return 0x6d703ef3;
    else if (j <= 63)
      return 0x7a6d76e9;
    else
      return 0x00000000;
  }

  var r = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  ];

  var rh = [
    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  ];

  var s = [
    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  ];

  var sh = [
    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  ];


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

  var hmac = exports;

  var hash = __webpack_require__(222);
  var utils = hash.utils;
  var assert = utils.assert;

  function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac))
      return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;

    this._init(utils.toArray(key, enc));
  }
  module.exports = Hmac;

  Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize)
      key = new this.Hash().update(key).digest();
    assert(key.length <= this.blockSize);

    // Add padding to key
    for (var i = key.length; i < this.blockSize; i++)
      key.push(0);

    for (var i = 0; i < key.length; i++)
      key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);

    // 0x36 ^ 0x5c = 0x6a
    for (var i = 0; i < key.length; i++)
      key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
  };

  Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };

  Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var elliptic = exports;

  elliptic.version = __webpack_require__(230).version;
  elliptic.utils = __webpack_require__(231);
  elliptic.rand = __webpack_require__(202);
  elliptic.hmacDRBG = __webpack_require__(234);
  elliptic.curve = __webpack_require__(235);
  elliptic.curves = __webpack_require__(241);

  // Protocols
  elliptic.ec = __webpack_require__(243);
  elliptic.eddsa = __webpack_require__(246);


/***/ },
/* 230 */
/***/ function(module, exports) {

  module.exports = {
    "name": "elliptic",
    "version": "5.2.1",
    "description": "EC cryptography",
    "main": "lib/elliptic.js",
    "scripts": {
      "test": "make lint && istanbul test _mocha --reporter=spec test/*-test.js",
      "coveralls": "cat ./coverage/lcov.info | coveralls"
    },
    "repository": {
      "type": "git",
      "url": "git+ssh://git@github.com/indutny/elliptic.git"
    },
    "keywords": [
      "EC",
      "Elliptic",
      "curve",
      "Cryptography"
    ],
    "author": {
      "name": "Fedor Indutny",
      "email": "fedor@indutny.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/indutny/elliptic/issues"
    },
    "homepage": "https://github.com/indutny/elliptic",
    "devDependencies": {
      "browserify": "^3.44.2",
      "coveralls": "^2.11.3",
      "istanbul": "^0.3.17",
      "jscs": "^1.11.3",
      "jshint": "^2.6.0",
      "mocha": "^2.1.0",
      "uglify-js": "^2.4.13"
    },
    "dependencies": {
      "bn.js": "^3.1.1",
      "brorand": "^1.0.1",
      "hash.js": "^1.0.0",
      "inherits": "^2.0.1"
    },
    "readme": "# Elliptic [![Build Status](https://secure.travis-ci.org/indutny/elliptic.png)](http://travis-ci.org/indutny/elliptic) [![Coverage Status](https://coveralls.io/repos/indutny/elliptic/badge.svg?branch=master&service=github)](https://coveralls.io/github/indutny/elliptic?branch=master)\n\nFast elliptic-curve cryptography in a plain javascript implementation.\n\nNOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve\nfor your cryptography operations.\n\n## Incentive\n\nECC is much slower than regular RSA cryptography, the JS implementations are\neven more slower.\n\n## Benchmarks\n\n```bash\n$ node benchmarks/index.js\nBenchmarking: sign\nelliptic#sign x 262 ops/sec ±0.51% (177 runs sampled)\neccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled)\n------------------------\nFastest is elliptic#sign\n========================\nBenchmarking: verify\nelliptic#verify x 113 ops/sec ±0.50% (166 runs sampled)\neccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled)\n------------------------\nFastest is elliptic#verify\n========================\nBenchmarking: gen\nelliptic#gen x 294 ops/sec ±0.43% (176 runs sampled)\neccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled)\n------------------------\nFastest is elliptic#gen\n========================\nBenchmarking: ecdh\nelliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled)\n------------------------\nFastest is elliptic#ecdh\n========================\n```\n\n## API\n\n### ECDSA\n\n```javascript\nvar EC = require('elliptic').ec;\n\n// Create and initialize EC context\n// (better do it once and reuse it)\nvar ec = new EC('secp256k1');\n\n// Generate keys\nvar key = ec.genKeyPair();\n\n// Sign message (must be an array, or it'll be treated as a hex sequence)\nvar msg = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];\nvar signature = key.sign(msg);\n\n// Export DER encoded signature in Array\nvar derSign = signature.toDER();\n\n// Verify signature\nconsole.log(key.verify(msg, derSign));\n```\n\n### ECDH\n\n```javascript\n// Generate keys\nvar key1 = ec.genKeyPair();\nvar key2 = ec.genKeyPair();\n\nvar shared1 = key1.derive(key2.getPublic());\nvar shared2 = key2.derive(key1.getPublic());\n\nconsole.log('Both shared secrets are BN instances');\nconsole.log(shared1.toString(16));\nconsole.log(shared2.toString(16));\n```\n\nNOTE: `.derive()` returns a [BN][1] instance.\n\n## Supported curves\n\nElliptic.js support following curve types:\n\n* Short Weierstrass\n* Montgomery\n* Edwards\n* Twisted Edwards\n\nFollowing curve 'presets' are embedded into the library:\n\n* `secp256k1`\n* `p192`\n* `p224`\n* `p256`\n* `curve25519`\n* `ed25519`\n\nNOTE: That `curve25519` could not be used for ECDSA, use `ed25519` instead.\n\n### Implementation details\n\nECDSA is using deterministic `k` value generation as per [RFC6979][0]. Most of\nthe curve operations are performed on non-affine coordinates (either projective\nor extended), various windowing techniques are used for different cases.\n\nAll operations are performed in reduction context using [bn.js][1], hashing is\nprovided by [hash.js][2]\n\n### Related projects\n\n* [eccrypto][3]: isomorphic implementation of ECDSA, ECDH and ECIES for both\n  browserify and node (uses `elliptic` for browser and [secp256k1-node][4] for\n  node)\n\n#### LICENSE\n\nThis software is licensed under the MIT License.\n\nCopyright Fedor Indutny, 2014.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\nNO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\nUSE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[0]: http://tools.ietf.org/html/rfc6979\n[1]: https://github.com/indutny/bn.js\n[2]: https://github.com/indutny/hash.js\n[3]: https://github.com/bitchan/eccrypto\n[4]: https://github.com/wanderer/secp256k1-node\n",
    "readmeFilename": "README.md",
    "_id": "elliptic@5.2.1",
    "_shasum": "fa294b6563c6ddbc9ba3dc8594687ae840858f10",
    "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-5.2.1.tgz",
    "_from": "https://registry.npmjs.org/elliptic/-/elliptic-5.2.1.tgz"
  };

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var utils = exports;
  var bn = __webpack_require__(232);

  utils.assert = function assert(val, msg) {
    if (!val)
      throw new Error(msg || 'Assertion failed');
  };

  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg !== 'string') {
      for (var i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
      return res;
    }
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
    return res;
  }
  utils.toArray = toArray;

  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  utils.zero2 = zero2;

  function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  utils.toHex = toHex;

  utils.encode = function encode(arr, enc) {
    if (enc === 'hex')
      return toHex(arr);
    else
      return arr;
  };

  // Represent num in a w-NAF form
  function getNAF(num, w) {
    var naf = [];
    var ws = 1 << (w + 1);
    var k = num.clone();
    while (k.cmpn(1) >= 0) {
      var z;
      if (k.isOdd()) {
        var mod = k.andln(ws - 1);
        if (mod > (ws >> 1) - 1)
          z = (ws >> 1) - mod;
        else
          z = mod;
        k.isubn(z);
      } else {
        z = 0;
      }
      naf.push(z);

      // Optimization, shift by word if possible
      var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
      for (var i = 1; i < shift; i++)
        naf.push(0);
      k.iushrn(shift);
    }

    return naf;
  }
  utils.getNAF = getNAF;

  // Represent k1, k2 in a Joint Sparse Form
  function getJSF(k1, k2) {
    var jsf = [
      [],
      []
    ];

    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

      // First phase
      var m14 = (k1.andln(3) + d1) & 3;
      var m24 = (k2.andln(3) + d2) & 3;
      if (m14 === 3)
        m14 = -1;
      if (m24 === 3)
        m24 = -1;
      var u1;
      if ((m14 & 1) === 0) {
        u1 = 0;
      } else {
        var m8 = (k1.andln(7) + d1) & 7;
        if ((m8 === 3 || m8 === 5) && m24 === 2)
          u1 = -m14;
        else
          u1 = m14;
      }
      jsf[0].push(u1);

      var u2;
      if ((m24 & 1) === 0) {
        u2 = 0;
      } else {
        var m8 = (k2.andln(7) + d2) & 7;
        if ((m8 === 3 || m8 === 5) && m14 === 2)
          u2 = -m24;
        else
          u2 = m24;
      }
      jsf[1].push(u2);

      // Second phase
      if (2 * d1 === u1 + 1)
        d1 = 1 - d1;
      if (2 * d2 === u2 + 1)
        d2 = 1 - d2;
      k1.iushrn(1);
      k2.iushrn(1);
    }

    return jsf;
  }
  utils.getJSF = getJSF;

  function cachedProperty(obj, computer) {
    var name = computer.name;
    var key = '_' + name;
    obj.prototype[name] = function cachedProperty() {
      return this[key] !== undefined ? this[key] :
             this[key] = computer.call(this);
    };
  }
  utils.cachedProperty = cachedProperty;

  function parseBytes(bytes) {
    return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                       bytes;
  }
  utils.parseBytes = parseBytes;

  function intFromLE(bytes) {
    return new bn(bytes, 'hex', 'le');
  }
  utils.intFromLE = intFromLE;



/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {

  'use strict';

  // Utils

  function assert(val, msg) {
    if (!val)
      throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN(number, base, endian) {
    // May be `new BN(bn)` ?
    if (number !== null &&
        typeof number === 'object' &&
        Array.isArray(number.words)) {
      return number;
    }

    this.sign = false;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (base === 'le' || base === 'be') {
      endian = base;
      base = 10;
    }

    if (number !== null)
      this._init(number || 0, base || 10, endian || 'be');
  }
  if (typeof module === 'object')
    module.exports = BN;
  else
    exports.BN = BN;

  BN.BN = BN;
  BN.wordSize = 26;

  BN.max = function max(left, right) {
    if (left.cmp(right) > 0)
      return left;
    else
      return right;
  };

  BN.min = function min(left, right) {
    if (left.cmp(right) < 0)
      return left;
    else
      return right;
  };

  BN.prototype._init = function init(number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    } else if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }
    if (base === 'hex')
      base = 16;
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-')
      start++;

    if (base === 16)
      this._parseHex(number, start);
    else
      this._parseBase(number, base, start);

    if (number[0] === '-')
      this.sign = true;

    this.strip();

    if (endian !== 'le')
      return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber(number, base, endian) {
    if (number < 0) {
      this.sign = true;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le')
      return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray(number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++)
      this.words[i] = 0;

    var off = 0;
    if (endian === 'be') {
      for (var i = number.length - 1, j = 0; i >= 0; i -= 3) {
        var w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (var i = 0, j = 0; i < number.length; i += 3) {
        var w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex(str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54)
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      else if (c >= 17 && c <= 22)
        r |= c - 17 + 0xa;

      // '0' - '9'
      else
        r |= c & 0xf;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex(number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++)
      this.words[i] = 0;

    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (var i = number.length - 6, j = 0; i >= start; i -= 6) {
      var w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      var w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase(str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49)
        r += c - 49 + 0xa;

      // 'A'
      else if (c >= 17)
        r += c - 17 + 0xa;

      // '0' - '9'
      else
        r += c;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase(number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)
      limbLen++;
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000)
        this.words[0] += word;
      else
        this._iaddn(word);
    }

    if (mod !== 0) {
      var pow = 1;
      var word = parseBase(number, i, number.length, base);

      for (var i = 0; i < mod; i++)
        pow *= base;
      this.imuln(pow);
      if (this.words[0] + word < 0x4000000)
        this.words[0] += word;
      else
        this._iaddn(word);
    }
  };

  BN.prototype.copy = function copy(dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++)
      dest.words[i] = this.words[i];
    dest.length = this.length;
    dest.sign = this.sign;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone() {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip() {
    while (this.length > 1 && this.words[this.length - 1] === 0)
      this.length--;
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign() {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0)
      this.sign = false;
    return this;
  };

  BN.prototype.inspect = function inspect() {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString(base, padding) {
    base = base || 10;
    var padding = padding | 0 || 1;
    if (base === 16 || base === 'hex') {
      var out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1)
          out = zeros[6 - word.length] + word + out;
        else
          out = word + out;
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0)
        out = carry.toString(16) + out;
      while (out.length % padding !== 0)
        out = '0' + out;
      if (this.sign)
        out = '-' + out;
      return out;
    } else if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      var out = '';
      var c = this.clone();
      c.sign = false;
      while (c.cmpn(0) !== 0) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (c.cmpn(0) !== 0)
          out = zeros[groupSize - r.length] + r + out;
        else
          out = r + out;
      }
      if (this.cmpn(0) === 0)
        out = '0' + out;
      while (out.length % padding !== 0)
        out = '0' + out;
      if (this.sign)
        out = '-' + out;
      return out;
    } else {
      assert(false, 'Base should be between 2 and 36');
    }
  };

  BN.prototype.toJSON = function toJSON() {
    return this.toString(16);
  };

  BN.prototype.toArray = function toArray(endian, length) {
    this.strip();
    var littleEndian = endian === 'le';
    var res = new Array(this.byteLength());
    res[0] = 0;

    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (var i = 0; q.cmpn(0) !== 0; i++) {
        var b = q.andln(0xff);
        q.iushrn(8);

        res[res.length - i - 1] = b;
      }
    } else {
      for (var i = 0; q.cmpn(0) !== 0; i++) {
        var b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }
    }

    if (length) {
      assert(res.length <= length, 'byte array longer than desired length');

      while (res.length < length) {
        if (littleEndian)
          res.push(0);
        else
          res.unshift(0);
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits(w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits(w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits(w) {
    // Short-cut
    if (w === 0)
      return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0)
      r++;
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength() {
    var hi = 0;
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray(num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits() {
    if (this.cmpn(0) === 0)
      return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26)
        break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength() {
    return Math.ceil(this.bitLength() / 8);
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg() {
    if (this.cmpn(0) === 0)
      return this.clone();

    var r = this.clone();
    r.sign = !this.sign;
    return r;
  };


  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor(num) {
    while (this.length < num.length)
      this.words[this.length++] = 0;

    for (var i = 0; i < num.length; i++)
      this.words[i] = this.words[i] | num.words[i];

    return this.strip();
  };

  BN.prototype.ior = function ior(num) {
    assert(!this.sign && !num.sign);
    return this.iuor(num);
  };


  // Or `num` with `this`
  BN.prototype.or = function or(num) {
    if (this.length > num.length)
      return this.clone().ior(num);
    else
      return num.clone().ior(this);
  };

  BN.prototype.uor = function uor(num) {
    if (this.length > num.length)
      return this.clone().iuor(num);
    else
      return num.clone().iuor(this);
  };


  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand(num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length)
      b = num;
    else
      b = this;

    for (var i = 0; i < b.length; i++)
      this.words[i] = this.words[i] & num.words[i];

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand(num) {
    assert(!this.sign && !num.sign);
    return this.iuand(num);
  };


  // And `num` with `this`
  BN.prototype.and = function and(num) {
    if (this.length > num.length)
      return this.clone().iand(num);
    else
      return num.clone().iand(this);
  };

  BN.prototype.uand = function uand(num) {
    if (this.length > num.length)
      return this.clone().iuand(num);
    else
      return num.clone().iuand(this);
  };


  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor(num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++)
      this.words[i] = a.words[i] ^ b.words[i];

    if (this !== a)
      for (; i < a.length; i++)
        this.words[i] = a.words[i];

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor(num) {
    assert(!this.sign && !num.sign);
    return this.iuxor(num);
  };


  // Xor `num` with `this`
  BN.prototype.xor = function xor(num) {
    if (this.length > num.length)
      return this.clone().ixor(num);
    else
      return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor(num) {
    if (this.length > num.length)
      return this.clone().iuxor(num);
    else
      return num.clone().iuxor(this);
  };


  // Set `bit` of `this`
  BN.prototype.setn = function setn(bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    while (this.length <= off)
      this.words[this.length++] = 0;

    if (val)
      this.words[off] = this.words[off] | (1 << wbit);
    else
      this.words[off] = this.words[off] & ~(1 << wbit);

    return this.strip();
  };


  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd(num) {
    // negative + positive
    if (this.sign && !num.sign) {
      this.sign = false;
      var r = this.isub(num);
      this.sign = !this.sign;
      return this._normSign();

    // positive + negative
    } else if (!this.sign && num.sign) {
      num.sign = false;
      var r = this.isub(num);
      num.sign = true;
      return r._normSign();
    }

    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      var r = a.words[i] + b.words[i] + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      var r = a.words[i] + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++)
        this.words[i] = a.words[i];
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add(num) {
    if (num.sign && !this.sign) {
      num.sign = false;
      var res = this.sub(num);
      num.sign = true;
      return res;
    } else if (!num.sign && this.sign) {
      this.sign = false;
      var res = num.sub(this);
      this.sign = true;
      return res;
    }

    if (this.length > num.length)
      return this.clone().iadd(num);
    else
      return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub(num) {
    // this - (-num) = this + num
    if (num.sign) {
      num.sign = false;
      var r = this.iadd(num);
      num.sign = true;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.sign) {
      this.sign = false;
      this.iadd(num);
      this.sign = true;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.sign = false;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a;
    var b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      var r = a.words[i] - b.words[i] + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      var r = a.words[i] + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this)
      for (; i < a.length; i++)
        this.words[i] = a.words[i];
    this.length = Math.max(this.length, i);

    if (a !== this)
      this.sign = true;

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub(num) {
    return this.clone().isub(num);
  };

  /*
  // NOTE: This could be potentionally used to generate loop-less multiplications
  function _genCombMulTo(alen, blen) {
    var len = alen + blen - 1;
    var src = [
      'var a = this.words, b = num.words, o = out.words, c = 0, w, ' +
          'mask = 0x3ffffff, shift = 0x4000000;',
      'out.length = ' + len + ';'
    ];
    for (var k = 0; k < len; k++) {
      var minJ = Math.max(0, k - alen + 1);
      var maxJ = Math.min(k, blen - 1);

      for (var j = minJ; j <= maxJ; j++) {
        var i = k - j;
        var mul = 'a[' + i + '] * b[' + j + ']';

        if (j === minJ) {
          src.push('w = ' + mul + ' + c;');
          src.push('c = (w / shift) | 0;');
        } else {
          src.push('w += ' + mul + ';');
          src.push('c += (w / shift) | 0;');
        }
        src.push('w &= mask;');
      }
      src.push('o[' + k + '] = w;');
    }
    src.push('if (c !== 0) {',
             '  o[' + k + '] = c;',
             '  out.length++;',
             '}',
             'return out;');

    return src.join('\n');
  }
  */

  BN.prototype._smallMulTo = function _smallMulTo(num, out) {
    out.sign = num.sign !== this.sign;
    out.length = this.length + num.length;

    var carry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = this.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;
      }
      out.words[k] = rword;
      carry = ncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  };

  BN.prototype._bigMulTo = function _bigMulTo(num, out) {
    out.sign = num.sign !== this.sign;
    out.length = this.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = this.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  };

  BN.prototype.mulTo = function mulTo(num, out) {
    var res;
    if (this.length + num.length < 63)
      res = this._smallMulTo(num, out);
    else
      res = this._bigMulTo(num, out);
    return res;
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul(num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul(num) {
    if (this.cmpn(0) === 0 || num.cmpn(0) === 0) {
      this.words[0] = 0;
      this.length = 1;
      return this;
    }

    var tlen = this.length;
    var nlen = num.length;

    this.sign = num.sign !== this.sign;
    this.length = this.length + num.length;
    this.words[this.length - 1] = 0;

    for (var k = this.length - 2; k >= 0; k--) {
      // Sum all words with the same `i + j = k` and accumulate `carry`,
      // note that carry could be >= 0x3ffffff
      var carry = 0;
      var rword = 0;
      var maxJ = Math.min(k, nlen - 1);
      for (var j = Math.max(0, k - tlen + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = this.words[i];
        var b = num.words[j];
        var r = a * b;

        var lo = r & 0x3ffffff;
        carry += (r / 0x4000000) | 0;
        lo += rword;
        rword = lo & 0x3ffffff;
        carry += lo >>> 26;
      }
      this.words[k] = rword;
      this.words[k + 1] += carry;
      carry = 0;
    }

    // Propagate overflows
    var carry = 0;
    for (var i = 1; i < this.length; i++) {
      var w = this.words[i] + carry;
      this.words[i] = w & 0x3ffffff;
      carry = w >>> 26;
    }

    return this.strip();
  };

  BN.prototype.imuln = function imuln(num) {
    assert(typeof num === 'number');

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = this.words[i] * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln(num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr() {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr() {
    return this.mul(this);
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow(num) {
    var w = toBitArray(num);
    if (w.length === 0)
      return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr())
      if (w[i] !== 0)
        break;

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0)
          continue;
        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);

    if (r !== 0) {
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = (this.words[i] - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }
      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (var i = this.length - 1; i >= 0; i--)
        this.words[i + s] = this.words[i];
      for (var i = 0; i < s; i++)
        this.words[i] = 0;
      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln(bits) {
    // TODO(indutny): implement me
    assert(!this.sign);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn(bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint)
      h = (hint - (hint % 26)) / 26;
    else
      h = 0;

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++)
        maskedWords.words[i] = this.words[i];
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (var i = 0; i < this.length; i++)
        this.words[i] = this.words[i + s];
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (var i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i];
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0)
      maskedWords.words[maskedWords.length++] = carry;

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    this.strip();

    return this;
  };

  BN.prototype.ishrn = function ishrn(bits, hint, extended) {
    // TODO(indutny): implement me
    assert(!this.sign);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln(bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln(bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn(bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn(bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn(bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      return false;
    }

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(!this.sign, 'imaskn works only with positive numbers');

    if (r !== 0)
      s++;
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn(bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn(num) {
    assert(typeof num === 'number');
    if (num < 0)
      return this.isubn(-num);

    // Possible sign change
    if (this.sign) {
      if (this.length === 1 && this.words[0] < num) {
        this.words[0] = num - this.words[0];
        this.sign = false;
        return this;
      }

      this.sign = false;
      this.isubn(num);
      this.sign = true;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn(num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1)
        this.words[i + 1] = 1;
      else
        this.words[i + 1]++;
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn(num) {
    assert(typeof num === 'number');
    if (num < 0)
      return this.iaddn(-num);

    if (this.sign) {
      this.sign = false;
      this.iaddn(num);
      this.sign = true;
      return this;
    }

    this.words[0] -= num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] < 0; i++) {
      this.words[i] += 0x4000000;
      this.words[i + 1] -= 1;
    }

    return this.strip();
  };

  BN.prototype.addn = function addn(num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn(num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs() {
    this.sign = false;

    return this;
  };

  BN.prototype.abs = function abs() {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
    // Bigger storage is needed
    var len = num.length + shift;
    var i;
    if (this.words.length < len) {
      var t = new Array(len);
      for (var i = 0; i < this.length; i++)
        t[i] = this.words[i];
      this.words = t;
    } else {
      i = this.length;
    }

    // Zeroify rest
    this.length = Math.max(this.length, len);
    for (; i < this.length; i++)
      this.words[i] = 0;

    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var w = this.words[i + shift] + carry;
      var right = num.words[i] * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      var w = this.words[i + shift] + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0)
      return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = -this.words[i] + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.sign = true;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv(num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1];
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1];
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++)
        q.words[i] = 0;
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (!diff.sign) {
      a = diff;
      if (q)
        q.words[m] = 1;
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = a.words[b.length + j] * 0x4000000 + a.words[b.length + j - 1];

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.sign) {
        qj--;
        a.sign = false;
        a._ishlnsubmul(b, 1, j);
        if (a.cmpn(0) !== 0)
          a.sign = !a.sign;
      }
      if (q)
        q.words[j] = qj;
    }
    if (q)
      q.strip();
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0)
      a.iushrn(shift);
    return { div: q ? q : null, mod: a };
  };

  BN.prototype.divmod = function divmod(num, mode, positive) {
    assert(num.cmpn(0) !== 0);

    if (this.sign && !num.sign) {
      var res = this.neg().divmod(num, mode);
      var div;
      var mod;
      if (mode !== 'mod')
        div = res.div.neg();
      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.neg)
          mod = mod.add(num);
      }
      return {
        div: div,
        mod: mod
      };
    } else if (!this.sign && num.sign) {
      var res = this.divmod(num.neg(), mode);
      var div;
      if (mode !== 'mod')
        div = res.div.neg();
      return { div: div, mod: res.mod };
    } else if (this.sign && num.sign) {
      var res = this.neg().divmod(num.neg(), mode);
      var mod;
      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.neg)
          mod = mod.isub(num);
      }
      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0)
      return { div: new BN(0), mod: this };

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div')
        return { div: this.divn(num.words[0]), mod: null };
      else if (mode === 'mod')
        return { div: null, mod: new BN(this.modn(num.words[0])) };
      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div(num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod(num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod(num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound(num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.cmpn(0) === 0)
      return dm.div;

    var mod = dm.div.sign ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0)
      return dm.div;

    // Round up
    return dm.div.sign ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn(num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--)
      acc = (p * acc + this.words[i]) % num;

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn(num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = this.words[i] + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn(num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd(p) {
    assert(!p.sign);
    assert(p.cmpn(0) !== 0);

    var x = this;
    var y = p.clone();

    if (x.sign)
      x = x.umod(p);
    else
      x = x.clone();

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (x.cmpn(0) !== 0) {
      while (x.isEven()) {
        x.iushrn(1);
        if (A.isEven() && B.isEven()) {
          A.iushrn(1);
          B.iushrn(1);
        } else {
          A.iadd(yp).iushrn(1);
          B.isub(xp).iushrn(1);
        }
      }

      while (y.isEven()) {
        y.iushrn(1);
        if (C.isEven() && D.isEven()) {
          C.iushrn(1);
          D.iushrn(1);
        } else {
          C.iadd(yp).iushrn(1);
          D.isub(xp).iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp(p) {
    assert(!p.sign);
    assert(p.cmpn(0) !== 0);

    var a = this;
    var b = p.clone();

    if (a.sign)
      a = a.umod(p);
    else
      a = a.clone();

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      while (a.isEven()) {
        a.iushrn(1);
        if (x1.isEven())
          x1.iushrn(1);
        else
          x1.iadd(delta).iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
        if (x2.isEven())
          x2.iushrn(1);
        else
          x2.iadd(delta).iushrn(1);
      }
      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0)
      res = x1;
    else
      res = x2;

    if (res.cmpn(0) < 0)
      res.iadd(p);

    return res;
  };

  BN.prototype.gcd = function gcd(num) {
    if (this.cmpn(0) === 0)
      return num.clone();
    if (num.cmpn(0) === 0)
      return this.clone();

    var a = this.clone();
    var b = num.clone();
    a.sign = false;
    b.sign = false;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven())
        a.iushrn(1);
      while (b.isEven())
        b.iushrn(1);

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm(num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven() {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd() {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln(num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn(bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      for (var i = this.length; i < s + 1; i++)
        this.words[i] = 0;
      this.words[s] |= q;
      this.length = s + 1;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i];
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.cmpn = function cmpn(num) {
    var sign = num < 0;
    if (sign)
      num = -num;

    if (this.sign && !sign)
      return -1;
    else if (!this.sign && sign)
      return 1;

    num &= 0x3ffffff;
    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      var w = this.words[0];
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.sign)
      res = -res;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp(num) {
    if (this.sign && !num.sign)
      return -1;
    else if (!this.sign && num.sign)
      return 1;

    var res = this.ucmp(num);
    if (this.sign)
      return -res;
    else
      return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp(num) {
    // At this point both numbers have the same sign
    if (this.length > num.length)
      return 1;
    else if (this.length < num.length)
      return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i];
      var b = num.words[i];

      if (a === b)
        continue;
      if (a < b)
        res = -1;
      else if (a > b)
        res = 1;
      break;
    }
    return res;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red(num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(!this.sign, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed() {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed(ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd(num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd(num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub(num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub(num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl(num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.ushl(this, num);
  };

  BN.prototype.redMul = function redMul(num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul(num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr() {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr() {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt() {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm() {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg() {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow(num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime(name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp() {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce(num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split(input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK(num) {
    return num.imul(this.k);
  };

  function K256() {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split(input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++)
      output.words[i] = input.words[i];
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (var i = 10; i < input.length; i++) {
      var next = input.words[i];
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    input.words[i - 10] = prev >>> 22;
    input.length -= 9;
  };

  K256.prototype.imulK = function imulK(num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var hi;
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i];
      hi = w * 0x40;
      lo += w * 0x3d1;
      hi += (lo / 0x4000000) | 0;
      lo &= 0x3ffffff;

      num.words[i] = lo;

      lo = hi;
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0)
        num.length--;
    }
    return num;
  };

  function P224() {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192() {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519() {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK(num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = num.words[i] * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0)
      num.words[num.length++] = carry;
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime(name) {
    // Cached version of prime
    if (primes[name])
      return primes[name];

    var prime;
    if (name === 'k256')
      prime = new K256();
    else if (name === 'p224')
      prime = new P224();
    else if (name === 'p192')
      prime = new P192();
    else if (name === 'p25519')
      prime = new P25519();
    else
      throw new Error('Unknown prime ' + name);
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red(m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1(a) {
    assert(!a.sign, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2(a, b) {
    assert(!a.sign && !b.sign, 'red works only with positives');
    assert(a.red && a.red === b.red,
           'red works only with red numbers');
  };

  Red.prototype.imod = function imod(a) {
    if (this.prime)
      return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg(a) {
    var r = a.clone();
    r.sign = !r.sign;
    return r.iadd(this.m)._forceRed(this);
  };

  Red.prototype.add = function add(a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0)
      res.isub(this.m);
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd(a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0)
      res.isub(this.m);
    return res;
  };

  Red.prototype.sub = function sub(a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0)
      res.iadd(this.m);
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub(a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0)
      res.iadd(this.m);
    return res;
  };

  Red.prototype.shl = function shl(a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul(a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul(a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr(a) {
    return this.imul(a, a);
  };

  Red.prototype.sqr = function sqr(a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt(a) {
    if (a.cmpn(0) === 0)
      return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      var r = this.pow(a, pow);
      return r;
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (q.cmpn(0) !== 0 && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(q.cmpn(0) !== 0);

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);
    while (this.pow(z, lpow).cmp(nOne) !== 0)
      z.redIAdd(nOne);

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++)
        tmp = tmp.redSqr();
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm(a) {
    var inv = a._invmp(this.m);
    if (inv.sign) {
      inv.sign = false;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow(a, num) {
    var w = toBitArray(num);
    if (w.length === 0)
      return new BN(1);

    // Skip leading zeroes
    var res = a;
    for (var i = 0; i < w.length; i++, res = this.sqr(res))
      if (w[i] !== 0)
        break;

    if (++i < w.length) {
      for (var q = this.sqr(res); i < w.length; i++, q = this.sqr(q)) {
        if (w[i] === 0)
          continue;
        res = this.mul(res, q);
      }
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo(num) {
    var r = num.umod(this.m);
    if (r === num)
      return r.clone();
    else
      return r;
  };

  Red.prototype.convertFrom = function convertFrom(num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont(num) {
    return new Mont(num);
  };

  function Mont(m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0)
      this.shift += 26 - (this.shift % 26);
    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo(num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom(num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul(a, b) {
    if (a.cmpn(0) === 0 || b.cmpn(0) === 0) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0)
      res = u.isub(this.m);
    else if (u.cmpn(0) < 0)
      res = u.iadd(this.m);

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul(a, b) {
    if (a.cmpn(0) === 0 || b.cmpn(0) === 0)
      return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0)
      res = u.isub(this.m);
    else if (u.cmpn(0) < 0)
      res = u.iadd(this.m);

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm(a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };

  })(typeof module === 'undefined' || module, this);

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(233)(module)))

/***/ },
/* 233 */
/***/ function(module, exports) {

  module.exports = function(module) {
    if(!module.webpackPolyfill) {
      module.deprecate = function() {};
      module.paths = [];
      // module.parent = undefined by default
      module.children = [];
      module.webpackPolyfill = 1;
    }
    return module;
  }


/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var hash = __webpack_require__(222);
  var elliptic = __webpack_require__(229);
  var utils = elliptic.utils;
  var assert = utils.assert;

  function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG))
      return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;

    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;

    this.reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;

    var entropy = utils.toArray(options.entropy, options.entropyEnc);
    var nonce = utils.toArray(options.nonce, options.nonceEnc);
    var pers = utils.toArray(options.pers, options.persEnc);
    assert(entropy.length >= (this.minEntropy / 8),
           'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._init(entropy, nonce, pers);
  }
  module.exports = HmacDRBG;

  HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);

    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i = 0; i < this.V.length; i++) {
      this.K[i] = 0x00;
      this.V[i] = 0x01;
    }

    this._update(seed);
    this.reseed = 1;
    this.reseedInterval = 0x1000000000000;  // 2^48
  };

  HmacDRBG.prototype._hmac = function hmac() {
    return new hash.hmac(this.hash, this.K);
  };

  HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac()
                   .update(this.V)
                   .update([ 0x00 ]);
    if (seed)
      kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed)
      return;

    this.K = this._hmac()
                 .update(this.V)
                 .update([ 0x01 ])
                 .update(seed)
                 .digest();
    this.V = this._hmac().update(this.V).digest();
  };

  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== 'string') {
      addEnc = add;
      add = entropyEnc;
      entropyEnc = null;
    }

    entropy = utils.toBuffer(entropy, entropyEnc);
    add = utils.toBuffer(add, addEnc);

    assert(entropy.length >= (this.minEntropy / 8),
           'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

    this._update(entropy.concat(add || []));
    this.reseed = 1;
  };

  HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this.reseed > this.reseedInterval)
      throw new Error('Reseed is required');

    // Optional encoding
    if (typeof enc !== 'string') {
      addEnc = add;
      add = enc;
      enc = null;
    }

    // Optional additional data
    if (add) {
      add = utils.toArray(add, addEnc);
      this._update(add);
    }

    var temp = [];
    while (temp.length < len) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }

    var res = temp.slice(0, len);
    this._update(add);
    this.reseed++;
    return utils.encode(res, enc);
  };


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var curve = exports;

  curve.base = __webpack_require__(236);
  curve.short = __webpack_require__(237);
  curve.mont = __webpack_require__(239);
  curve.edwards = __webpack_require__(240);


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var bn = __webpack_require__(232);
  var elliptic = __webpack_require__(229);
  var utils = elliptic.utils;
  var getNAF = utils.getNAF;
  var getJSF = utils.getJSF;
  var assert = utils.assert;

  function BaseCurve(type, conf) {
    this.type = type;
    this.p = new bn(conf.p, 16);

    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);

    // Useful for many curves
    this.zero = new bn(0).toRed(this.red);
    this.one = new bn(1).toRed(this.red);
    this.two = new bn(2).toRed(this.red);

    // Curve configuration, optional
    this.n = conf.n && new bn(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
  }
  module.exports = BaseCurve;

  BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
  };

  BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
  };

  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert(p.precomputed);
    var doubles = p._getDoubles();

    var naf = getNAF(k, 1);
    var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;

    // Translate into more windowed form
    var repr = [];
    for (var j = 0; j < naf.length; j += doubles.step) {
      var nafW = 0;
      for (var k = j + doubles.step - 1; k >= j; k--)
        nafW = (nafW << 1) + naf[k];
      repr.push(nafW);
    }

    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for (var i = I; i > 0; i--) {
      for (var j = 0; j < repr.length; j++) {
        var nafW = repr[j];
        if (nafW === i)
          b = b.mixedAdd(doubles.points[j]);
        else if (nafW === -i)
          b = b.mixedAdd(doubles.points[j].neg());
      }
      a = a.add(b);
    }
    return a.toP();
  };

  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;

    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;

    // Get NAF form
    var naf = getNAF(k, w);

    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for (var i = naf.length - 1; i >= 0; i--) {
      // Count zeroes
      for (var k = 0; i >= 0 && naf[i] === 0; i--)
        k++;
      if (i >= 0)
        k++;
      acc = acc.dblp(k);

      if (i < 0)
        break;
      var z = naf[i];
      assert(z !== 0);
      if (p.type === 'affine') {
        // J +- P
        if (z > 0)
          acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
        else
          acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
      } else {
        // J +- J
        if (z > 0)
          acc = acc.add(wnd[(z - 1) >> 1]);
        else
          acc = acc.add(wnd[(-z - 1) >> 1].neg());
      }
    }
    return p.type === 'affine' ? acc.toP() : acc;
  };

  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                         points,
                                                         coeffs,
                                                         len) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;

    // Fill all arrays
    var max = 0;
    for (var i = 0; i < len; i++) {
      var p = points[i];
      var nafPoints = p._getNAFPoints(defW);
      wndWidth[i] = nafPoints.wnd;
      wnd[i] = nafPoints.points;
    }

    // Comb small window NAFs
    for (var i = len - 1; i >= 1; i -= 2) {
      var a = i - 1;
      var b = i;
      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
        naf[a] = getNAF(coeffs[a], wndWidth[a]);
        naf[b] = getNAF(coeffs[b], wndWidth[b]);
        max = Math.max(naf[a].length, max);
        max = Math.max(naf[b].length, max);
        continue;
      }

      var comb = [
        points[a], /* 1 */
        null, /* 3 */
        null, /* 5 */
        points[b] /* 7 */
      ];

      // Try to avoid Projective points, if possible
      if (points[a].y.cmp(points[b].y) === 0) {
        comb[1] = points[a].add(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].add(points[b].neg());
      } else {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      }

      var index = [
        -3, /* -1 -1 */
        -1, /* -1 0 */
        -5, /* -1 1 */
        -7, /* 0 -1 */
        0, /* 0 0 */
        7, /* 0 1 */
        5, /* 1 -1 */
        1, /* 1 0 */
        3  /* 1 1 */
      ];

      var jsf = getJSF(coeffs[a], coeffs[b]);
      max = Math.max(jsf[0].length, max);
      naf[a] = new Array(max);
      naf[b] = new Array(max);
      for (var j = 0; j < max; j++) {
        var ja = jsf[0][j] | 0;
        var jb = jsf[1][j] | 0;

        naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
        naf[b][j] = 0;
        wnd[a] = comb;
      }
    }

    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (var i = max; i >= 0; i--) {
      var k = 0;

      while (i >= 0) {
        var zero = true;
        for (var j = 0; j < len; j++) {
          tmp[j] = naf[j][i] | 0;
          if (tmp[j] !== 0)
            zero = false;
        }
        if (!zero)
          break;
        k++;
        i--;
      }
      if (i >= 0)
        k++;
      acc = acc.dblp(k);
      if (i < 0)
        break;

      for (var j = 0; j < len; j++) {
        var z = tmp[j];
        var p;
        if (z === 0)
          continue;
        else if (z > 0)
          p = wnd[j][(z - 1) >> 1];
        else if (z < 0)
          p = wnd[j][(-z - 1) >> 1].neg();

        if (p.type === 'affine')
          acc = acc.mixedAdd(p);
        else
          acc = acc.add(p);
      }
    }
    // Zeroify references
    for (var i = 0; i < len; i++)
      wnd[i] = null;
    return acc.toP();
  };

  function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;

  BasePoint.prototype.eq = function eq(/*other*/) {
    throw new Error('Not implemented');
  };

  BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
  };

  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils.toArray(bytes, enc);

    var len = this.p.byteLength();
    if (bytes[0] === 0x04 && bytes.length - 1 === 2 * len) {
      return this.point(bytes.slice(1, 1 + len),
                        bytes.slice(1 + len, 1 + 2 * len));
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                bytes.length - 1 === len) {
      return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    }
    throw new Error('Unknown point format');
  };

  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };

  BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);

    if (compact)
      return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

    return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
  };

  BasePoint.prototype.encode = function encode(enc, compact) {
    return utils.encode(this._encode(compact), enc);
  };

  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;

    var precomputed = {
      doubles: null,
      naf: null,
      beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;

    return this;
  };

  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed)
      return false;

    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;

    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
  };

  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;

    var doubles = [ this ];
    var acc = this;
    for (var i = 0; i < power; i += step) {
      for (var j = 0; j < step; j++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return {
      step: step,
      points: doubles
    };
  };

  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;

    var res = [ this ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for (var i = 1; i < max; i++)
      res[i] = res[i - 1].add(dbl);
    return {
      wnd: wnd,
      points: res
    };
  };

  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };

  BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for (var i = 0; i < k; i++)
      r = r.dbl();
    return r;
  };


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var curve = __webpack_require__(235);
  var elliptic = __webpack_require__(229);
  var bn = __webpack_require__(232);
  var inherits = __webpack_require__(238);
  var Base = curve.base;

  var assert = elliptic.utils.assert;

  function ShortCurve(conf) {
    Base.call(this, 'short', conf);

    this.a = new bn(conf.a, 16).toRed(this.red);
    this.b = new bn(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();

    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  inherits(ShortCurve, Base);
  module.exports = ShortCurve;

  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
      return;

    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) {
      beta = new bn(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);
      // Choose the smallest beta
      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
      lambda = new bn(conf.lambda, 16);
    } else {
      // Choose the lambda that is matching selected beta
      var lambdas = this._getEndoRoots(this.n);
      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }

    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) {
      basis = conf.basis.map(function(vec) {
        return {
          a: new bn(vec.a, 16),
          b: new bn(vec.b, 16)
        };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }

    return {
      beta: beta,
      lambda: lambda,
      basis: basis
    };
  };

  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : bn.mont(num);
    var tinv = new bn(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();

    var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);

    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [ l1, l2 ];
  };

  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new bn(1);
    var y1 = new bn(0);
    var x2 = new bn(0);
    var y2 = new bn(1);

    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;

    var prevR;
    var i = 0;
    var r;
    var x;
    while (u.cmpn(0) !== 0) {
      var q = v.div(u);
      r = v.sub(q.mul(u));
      x = x2.sub(q.mul(x1));
      var y = y2.sub(q.mul(y1));

      if (!a1 && r.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r.neg();
        b1 = x;
      } else if (a1 && ++i === 2) {
        break;
      }
      prevR = r;

      v = u;
      u = r;
      x2 = x1;
      x1 = x;
      y2 = y1;
      y1 = y;
    }
    a2 = r.neg();
    b2 = x;

    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
      a2 = a0;
      b2 = b0;
    }

    // Normalize signs
    if (a1.sign) {
      a1 = a1.neg();
      b1 = b1.neg();
    }
    if (a2.sign) {
      a2 = a2.neg();
      b2 = b2.neg();
    }

    return [
      { a: a1, b: b1 },
      { a: a2, b: b2 }
    ];
  };

  ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];

    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);

    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);

    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return { k1: k1, k2: k2 };
  };

  ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new bn(x, 16);
    if (!x.red)
      x = x.toRed(this.red);

    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();

    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();

    return this.point(x, y);
  };

  ShortCurve.prototype.validate = function validate(point) {
    if (point.inf)
      return true;

    var x = point.x;
    var y = point.y;

    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
  };

  ShortCurve.prototype._endoWnafMulAdd =
      function _endoWnafMulAdd(points, coeffs) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for (var i = 0; i < points.length; i++) {
      var split = this._endoSplit(coeffs[i]);
      var p = points[i];
      var beta = p._getBeta();

      if (split.k1.sign) {
        split.k1.sign = !split.k1.sign;
        p = p.neg(true);
      }
      if (split.k2.sign) {
        split.k2.sign = !split.k2.sign;
        beta = beta.neg(true);
      }

      npoints[i * 2] = p;
      npoints[i * 2 + 1] = beta;
      ncoeffs[i * 2] = split.k1;
      ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2);

    // Clean-up references to points and coefficients
    for (var j = 0; j < i * 2; j++) {
      npoints[j] = null;
      ncoeffs[j] = null;
    }
    return res;
  };

  function Point(curve, x, y, isRed) {
    Base.BasePoint.call(this, curve, 'affine');
    if (x === null && y === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new bn(x, 16);
      this.y = new bn(y, 16);
      // Force redgomery representation when loading from JSON
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  inherits(Point, Base.BasePoint);

  ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
  };

  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
  };

  Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo)
      return;

    var pre = this.precomputed;
    if (pre && pre.beta)
      return pre.beta;

    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
      var curve = this.curve;
      var endoMul = function(p) {
        return curve.point(p.x.redMul(curve.endo.beta), p.y);
      };
      pre.beta = beta;
      beta.precomputed = {
        beta: null,
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(endoMul)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(endoMul)
        }
      };
    }
    return beta;
  };

  Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed)
      return [ this.x, this.y ];

    return [ this.x, this.y, this.precomputed && {
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1)
      },
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1)
      }
    } ];
  };

  Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === 'string')
      obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2])
      return res;

    function obj2point(obj) {
      return curve.point(obj[0], obj[1], red);
    }

    var pre = obj[2];
    res.precomputed = {
      beta: null,
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: [ res ].concat(pre.doubles.points.map(obj2point))
      },
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: [ res ].concat(pre.naf.points.map(obj2point))
      }
    };
    return res;
  };

  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) + '>';
  };

  Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };

  Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf)
      return p;

    // P + O = P
    if (p.inf)
      return this;

    // P + P = 2P
    if (this.eq(p))
      return this.dbl();

    // P + (-P) = O
    if (this.neg().eq(p))
      return this.curve.point(null, null);

    // P + Q = O
    if (this.x.cmp(p.x) === 0)
      return this.curve.point(null, null);

    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0)
      c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };

  Point.prototype.dbl = function dbl() {
    if (this.inf)
      return this;

    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
      return this.curve.point(null, null);

    var a = this.curve.a;

    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };

  Point.prototype.getX = function getX() {
    return this.x.fromRed();
  };

  Point.prototype.getY = function getY() {
    return this.y.fromRed();
  };

  Point.prototype.mul = function mul(k) {
    k = new bn(k, 16);

    if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo)
      return this.curve._endoWnafMulAdd([ this ], [ k ]);
    else
      return this.curve._wnafMul(this, k);
  };

  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [ this, p2 ];
    var coeffs = [ k1, k2 ];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };

  Point.prototype.eq = function eq(p) {
    return this === p ||
           this.inf === p.inf &&
               (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
  };

  Point.prototype.neg = function neg(_precompute) {
    if (this.inf)
      return this;

    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
      var pre = this.precomputed;
      var negate = function(p) {
        return p.neg();
      };
      res.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(negate)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(negate)
        }
      };
    }
    return res;
  };

  Point.prototype.toJ = function toJ() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);

    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };

  function JPoint(curve, x, y, z) {
    Base.BasePoint.call(this, curve, 'jacobian');
    if (x === null && y === null && z === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new bn(0);
    } else {
      this.x = new bn(x, 16);
      this.y = new bn(y, 16);
      this.z = new bn(z, 16);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);

    this.zOne = this.z === this.curve.one;
  }
  inherits(JPoint, Base.BasePoint);

  ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
  };

  JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
      return this.curve.point(null, null);

    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);

    return this.curve.point(ax, ay);
  };

  JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };

  JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity())
      return p;

    // P + O = P
    if (p.isInfinity())
      return this;

    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));

    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }

    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);

    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity())
      return p.toJ();

    // P + O = P
    if (p.isInfinity())
      return this;

    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);

    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }

    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);

    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!pow)
      return this.dbl();

    if (this.curve.zeroA || this.curve.threeA) {
      var r = this;
      for (var i = 0; i < pow; i++)
        r = r.dbl();
      return r;
    }

    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;

    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();

    // Reuse results
    var jyd = jy.redAdd(jy);
    for (var i = 0; i < pow; i++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

      var t1 = jx.redMul(jyd2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var dny = c.redMul(t2);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i + 1 < pow)
        jz4 = jz4.redMul(jyd4);

      jx = nx;
      jz = nz;
      jyd = dny;
    }

    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };

  JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;

    if (this.curve.zeroA)
      return this._zeroDbl();
    else if (this.curve.threeA)
      return this._threeDbl();
    else
      return this._dbl();
  };

  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
      //     #doubling-mdbl-2007-bl
      // 1M + 5S + 14A

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // S = 2 * ((X1 + YY)^2 - XX - YYYY)
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      // M = 3 * XX + a; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // T = M ^ 2 - 2*S
      var t = m.redSqr().redISub(s).redISub(s);

      // 8 * YYYY
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);

      // X3 = T
      nx = t;
      // Y3 = M * (S - T) - 8 * YYYY
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      // Z3 = 2*Y1
      nz = this.y.redAdd(this.y);
    } else {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
      //     #doubling-dbl-2009-l
      // 2M + 5S + 13A

      // A = X1^2
      var a = this.x.redSqr();
      // B = Y1^2
      var b = this.y.redSqr();
      // C = B^2
      var c = b.redSqr();
      // D = 2 * ((X1 + B)^2 - A - C)
      var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
      d = d.redIAdd(d);
      // E = 3 * A
      var e = a.redAdd(a).redIAdd(a);
      // F = E^2
      var f = e.redSqr();

      // 8 * C
      var c8 = c.redIAdd(c);
      c8 = c8.redIAdd(c8);
      c8 = c8.redIAdd(c8);

      // X3 = F - 2 * D
      nx = f.redISub(d).redISub(d);
      // Y3 = E * (D - X3) - 8 * C
      ny = e.redMul(d.redISub(nx)).redISub(c8);
      // Z3 = 2 * Y1 * Z1
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
      //     #doubling-mdbl-2007-bl
      // 1M + 5S + 15A

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // S = 2 * ((X1 + YY)^2 - XX - YYYY)
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      // M = 3 * XX + a
      var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      // T = M^2 - 2 * S
      var t = m.redSqr().redISub(s).redISub(s);
      // X3 = T
      nx = t;
      // Y3 = M * (S - T) - 8 * YYYY
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      // Z3 = 2 * Y1
      nz = this.y.redAdd(this.y);
    } else {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
      // 3M + 5S

      // delta = Z1^2
      var delta = this.z.redSqr();
      // gamma = Y1^2
      var gamma = this.y.redSqr();
      // beta = X1 * gamma
      var beta = this.x.redMul(gamma);
      // alpha = 3 * (X1 - delta) * (X1 + delta)
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      // X3 = alpha^2 - 8 * beta
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      // Z3 = (Y1 + Z1)^2 - gamma - delta
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;

    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();

    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();

    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);

    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);

    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.mul = function mul(k, kbase) {
    k = new bn(k, kbase);

    return this.curve._wnafMul(this, k);
  };

  JPoint.prototype.eq = function eq(p) {
    if (p.type === 'affine')
      return this.eq(p.toJ());

    if (this === p)
      return true;

    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
      return false;

    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
  };

  JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) +
        ' y: ' + this.y.toString(16, 2) +
        ' z: ' + this.z.toString(16, 2) + '>';
  };

  JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
  };


/***/ },
/* 238 */
/***/ function(module, exports) {

  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var curve = __webpack_require__(235);
  var bn = __webpack_require__(232);
  var inherits = __webpack_require__(238);
  var Base = curve.base;

  var elliptic = __webpack_require__(229);
  var utils = elliptic.utils;

  function MontCurve(conf) {
    Base.call(this, 'mont', conf);

    this.a = new bn(conf.a, 16).toRed(this.red);
    this.b = new bn(conf.b, 16).toRed(this.red);
    this.i4 = new bn(4).toRed(this.red).redInvm();
    this.two = new bn(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
  }
  inherits(MontCurve, Base);
  module.exports = MontCurve;

  MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();

    return y.redSqr().cmp(rhs) === 0;
  };

  function Point(curve, x, z) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && z === null) {
      this.x = this.curve.one;
      this.z = this.curve.zero;
    } else {
      this.x = new bn(x, 16);
      this.z = new bn(z, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
    }
  }
  inherits(Point, Base.BasePoint);

  MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils.toArray(bytes, enc), 1);
  };

  MontCurve.prototype.point = function point(x, z) {
    return new Point(this, x, z);
  };

  MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };

  Point.prototype.precompute = function precompute() {
    // No-op
  };

  Point.prototype._encode = function _encode() {
    return this.getX().toArray('be', this.curve.p.byteLength());
  };

  Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1] || curve.one);
  };

  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  };

  Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
  };

  Point.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A

    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
  };

  Point.prototype.add = function add() {
    throw new Error('Not supported on Montgomery curve');
  };

  Point.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A

    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
  };

  Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q

    for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
      bits.push(t.andln(1));

    for (var i = bits.length - 1; i >= 0; i--) {
      if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
      } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
      }
    }
    return b;
  };

  Point.prototype.mulAdd = function mulAdd() {
    throw new Error('Not supported on Montgomery curve');
  };

  Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
  };

  Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
  };

  Point.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();

    return this.x.fromRed();
  };


/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var curve = __webpack_require__(235);
  var elliptic = __webpack_require__(229);
  var bn = __webpack_require__(232);
  var inherits = __webpack_require__(238);
  var Base = curve.base;

  var assert = elliptic.utils.assert;

  function EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;

    Base.call(this, 'edwards', conf);

    this.a = new bn(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new bn(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new bn(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);

    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
  }
  inherits(EdwardsCurve, Base);
  module.exports = EdwardsCurve;

  EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA)
      return num.redNeg();
    else
      return this.a.redMul(num);
  };

  EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC)
      return num;
    else
      return this.c.redMul(num);
  };

  // Just for compatibility with Short curve
  EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
  };

  EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new bn(x, 16);
    if (!x.red)
      x = x.toRed(this.red);

    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

    var y = rhs.redMul(lhs.redInvm()).redSqrt();
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();

    return this.point(x, y);
  };

  EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new bn(y, 16);
    if (!y.red)
      y = y.toRed(this.red);

    // x^2 = (y^2 - 1) / (d y^2 + 1)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.one);
    var rhs = y2.redMul(this.d).redAdd(this.one);
    var x2 = lhs.redMul(rhs.redInvm());

    if (x2.cmp(this.zero) === 0) {
      if (odd)
        throw new Error('invalid point');
      else
        return this.point(this.zero, y);
    }

    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
      throw new Error('invalid point');

    if (x.isOdd() !== odd)
      x = x.redNeg();

    return this.point(x, y);
  };

  EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity())
      return true;

    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();

    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

    return lhs.cmp(rhs) === 0;
  };

  function Point(curve, x, y, z, t) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && y === null && z === null) {
      this.x = this.curve.zero;
      this.y = this.curve.one;
      this.z = this.curve.one;
      this.t = this.curve.zero;
      this.zOne = true;
    } else {
      this.x = new bn(x, 16);
      this.y = new bn(y, 16);
      this.z = z ? new bn(z, 16) : this.curve.one;
      this.t = t && new bn(t, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      if (this.t && !this.t.red)
        this.t = this.t.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;

      // Use extended coordinates
      if (this.curve.extended && !this.t) {
        this.t = this.x.redMul(this.y);
        if (!this.zOne)
          this.t = this.t.redMul(this.z.redInvm());
      }
    }
  }
  inherits(Point, Base.BasePoint);

  EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };

  EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point(this, x, y, z, t);
  };

  Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
  };

  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  };

  Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 &&
           this.y.cmp(this.z) === 0;
  };

  Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };

  Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S

    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();

    var nx;
    var ny;
    var nz;
    if (this.curve.twisted) {
      // E = a * C
      var e = this.curve._mulA(c);
      // F = E + D
      var f = e.redAdd(d);
      if (this.zOne) {
        // X3 = (B - C - D) * (F - 2)
        nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
        // Y3 = F * (E - D)
        ny = f.redMul(e.redSub(d));
        // Z3 = F^2 - 2 * F
        nz = f.redSqr().redSub(f).redSub(f);
      } else {
        // H = Z1^2
        var h = this.z.redSqr();
        // J = F - 2 * H
        var j = f.redSub(h).redISub(h);
        // X3 = (B-C-D)*J
        nx = b.redSub(c).redISub(d).redMul(j);
        // Y3 = F * (E - D)
        ny = f.redMul(e.redSub(d));
        // Z3 = F * J
        nz = f.redMul(j);
      }
    } else {
      // E = C + D
      var e = c.redAdd(d);
      // H = (c * Z1)^2
      var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
      // J = E - 2 * H
      var j = e.redSub(h).redSub(h);
      // X3 = c * (B - E) * J
      nx = this.curve._mulC(b.redISub(e)).redMul(j);
      // Y3 = c * E * (C - D)
      ny = this.curve._mulC(e).redMul(c.redISub(d));
      // Z3 = E * J
      nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
  };

  Point.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;

    // Double in extended coordinates
    if (this.curve.extended)
      return this._extDbl();
    else
      return this._projDbl();
  };

  Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M

    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };

  Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S

    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
      // Y3 = A * G * (D - a * C)
      ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
      // Z3 = F * G
      nz = f.redMul(g);
    } else {
      // Y3 = A * G * (D - C)
      ny = a.redMul(g).redMul(d.redSub(c));
      // Z3 = c * F * G
      nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
  };

  Point.prototype.add = function add(p) {
    if (this.isInfinity())
      return p;
    if (p.isInfinity())
      return this;

    if (this.curve.extended)
      return this._extAdd(p);
    else
      return this._projAdd(p);
  };

  Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else
      return this.curve._wnafMul(this, k);
  };

  Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2);
  };

  Point.prototype.normalize = function normalize() {
    if (this.zOne)
      return this;

    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t)
      this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
  };

  Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(),
                            this.y,
                            this.z,
                            this.t && this.t.redNeg());
  };

  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };

  Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
  };

  Point.prototype.eq = function eq(other) {
    return this === other ||
           this.getX().cmp(other.getX()) === 0 &&
           this.getY().cmp(other.getY()) === 0;
  };

  // Compatibility with BaseCurve
  Point.prototype.toP = Point.prototype.normalize;
  Point.prototype.mixedAdd = Point.prototype.add;


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var curves = exports;

  var hash = __webpack_require__(222);
  var elliptic = __webpack_require__(229);

  var assert = elliptic.utils.assert;

  function PresetCurve(options) {
    if (options.type === 'short')
      this.curve = new elliptic.curve.short(options);
    else if (options.type === 'edwards')
      this.curve = new elliptic.curve.edwards(options);
    else
      this.curve = new elliptic.curve.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;

    assert(this.g.validate(), 'Invalid curve');
    assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
  }
  curves.PresetCurve = PresetCurve;

  function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
      configurable: true,
      enumerable: true,
      get: function() {
        var curve = new PresetCurve(options);
        Object.defineProperty(curves, name, {
          configurable: true,
          enumerable: true,
          value: curve
        });
        return curve;
      }
    });
  }

  defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: hash.sha256,
    gRed: false,
    g: [
      '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
      '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
    ]
  });

  defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: hash.sha256,
    gRed: false,
    g: [
      'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
      'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
    ]
  });

  defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: hash.sha256,
    gRed: false,
    g: [
      '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
      '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
    ]
  });

  defineCurve('p384', {
    type: 'short',
    prime: null,
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'fffffffe ffffffff 00000000 00000000 ffffffff',
    a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'fffffffe ffffffff 00000000 00000000 fffffffc',
    b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
       '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
    n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
       'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
    hash: hash.sha384,
    gRed: false,
    g: [
      'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
      '5502f25d bf55296c 3a545e38 72760ab7',
      '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
      '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
    ]
  });

  defineCurve('p521', {
    type: 'short',
    prime: null,
    p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff',
    a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff fffffffc',
    b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
       '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
       '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
    n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
       'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
    hash: hash.sha512,
    gRed: false,
    g: [
      '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
      '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
      'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
      '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
      '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
      '3fad0761 353c7086 a272c240 88be9476 9fd16650'
    ]
  });

  defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '0',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: [
      '9'
    ]
  });

  defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: [
      '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

      // 4/5
      '6666666666666666666666666666666666666666666666666666666666666658'
    ]
  });

  var pre;
  try {
    pre = __webpack_require__(242);
  } catch (e) {
    pre = undefined;
  }

  defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: hash.sha256,

    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [
      {
        a: '3086d221a7d46bcde86c90e49284eb15',
        b: '-e4437ed6010e88286f547fa90abfe4c3'
      },
      {
        a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
        b: '3086d221a7d46bcde86c90e49284eb15'
      }
    ],

    gRed: false,
    g: [
      '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
      '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
      pre
    ]
  });


/***/ },
/* 242 */
/***/ function(module, exports) {

  module.exports = {
    doubles: {
      step: 4,
      points: [
        [
          'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
          'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
        ],
        [
          '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
          '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
        ],
        [
          '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
          'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
        ],
        [
          '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
          '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
        ],
        [
          '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
          '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
        ],
        [
          '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
          '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
        ],
        [
          'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
          '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
        ],
        [
          '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
          'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
        ],
        [
          'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
          '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
        ],
        [
          'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
          'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
        ],
        [
          'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
          '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
        ],
        [
          '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
          '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
        ],
        [
          '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
          '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
        ],
        [
          '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
          '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
        ],
        [
          '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
          '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
        ],
        [
          '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
          '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
        ],
        [
          '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
          '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
        ],
        [
          '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
          '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
        ],
        [
          '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
          'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
        ],
        [
          'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
          '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
        ],
        [
          'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
          '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
        ],
        [
          '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
          '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
        ],
        [
          '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
          '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
        ],
        [
          'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
          '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
        ],
        [
          '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
          'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
        ],
        [
          'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
          '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
        ],
        [
          'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
          'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
        ],
        [
          'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
          '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
        ],
        [
          'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
          'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
        ],
        [
          'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
          '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
        ],
        [
          '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
          'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
        ],
        [
          '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
          '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
        ],
        [
          'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
          '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
        ],
        [
          '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
          'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
        ],
        [
          'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
          '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
        ],
        [
          'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
          '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
        ],
        [
          'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
          'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
        ],
        [
          '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
          '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
        ],
        [
          '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
          '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
        ],
        [
          '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
          'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
        ],
        [
          '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
          '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
        ],
        [
          'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
          '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
        ],
        [
          '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
          '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
        ],
        [
          '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
          'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
        ],
        [
          '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
          '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
        ],
        [
          'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
          '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
        ],
        [
          '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
          'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
        ],
        [
          'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
          'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
        ],
        [
          'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
          '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
        ],
        [
          '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
          'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
        ],
        [
          '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
          'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
        ],
        [
          'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
          '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
        ],
        [
          'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
          '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
        ],
        [
          'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
          '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
        ],
        [
          '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
          'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
        ],
        [
          '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
          '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
        ],
        [
          'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
          'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
        ],
        [
          '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
          'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
        ],
        [
          '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
          '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
        ],
        [
          '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
          '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
        ],
        [
          'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
          'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
        ],
        [
          '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
          '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
        ],
        [
          '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
          '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
        ],
        [
          'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
          '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
        ],
        [
          'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
          'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
        ]
      ]
    },
    naf: {
      wnd: 7,
      points: [
        [
          'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
          '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
        ],
        [
          '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
          'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
        ],
        [
          '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
          '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
        ],
        [
          'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
          'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
        ],
        [
          '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
          'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
        ],
        [
          'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
          'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
        ],
        [
          'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
          '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
        ],
        [
          'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
          '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
        ],
        [
          '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
          '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
        ],
        [
          '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
          '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
        ],
        [
          '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
          '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
        ],
        [
          '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
          '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
        ],
        [
          'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
          'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
        ],
        [
          'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
          '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
        ],
        [
          '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
          'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
        ],
        [
          '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
          'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
        ],
        [
          '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
          '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
        ],
        [
          '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
          '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
        ],
        [
          '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
          '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
        ],
        [
          '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
          'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
        ],
        [
          'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
          'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
        ],
        [
          '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
          '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
        ],
        [
          '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
          '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
        ],
        [
          'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
          'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
        ],
        [
          '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
          '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
        ],
        [
          'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
          'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
        ],
        [
          'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
          'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
        ],
        [
          '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
          '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
        ],
        [
          '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
          '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
        ],
        [
          '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
          '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
        ],
        [
          'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
          '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
        ],
        [
          '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
          '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
        ],
        [
          'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
          '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
        ],
        [
          '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
          'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
        ],
        [
          '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
          'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
        ],
        [
          'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
          'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
        ],
        [
          '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
          '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
        ],
        [
          '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
          'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
        ],
        [
          'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
          'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
        ],
        [
          '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
          '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
        ],
        [
          '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
          'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
        ],
        [
          '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
          '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
        ],
        [
          '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
          'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
        ],
        [
          'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
          '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
        ],
        [
          '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
          '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
        ],
        [
          '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
          'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
        ],
        [
          '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
          'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
        ],
        [
          'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
          'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
        ],
        [
          'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
          'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
        ],
        [
          '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
          '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
        ],
        [
          '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
          '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
        ],
        [
          'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
          '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
        ],
        [
          'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
          'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
        ],
        [
          '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
          '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
        ],
        [
          '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
          '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
        ],
        [
          'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
          '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
        ],
        [
          '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
          '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
        ],
        [
          'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
          'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
        ],
        [
          '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
          'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
        ],
        [
          '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
          '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
        ],
        [
          'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
          '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
        ],
        [
          'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
          '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
        ],
        [
          '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
          '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
        ],
        [
          '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
          '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
        ],
        [
          '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
          'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
        ],
        [
          '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
          'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
        ],
        [
          '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
          '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
        ],
        [
          '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
          '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
        ],
        [
          '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
          '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
        ],
        [
          '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
          'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
        ],
        [
          'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
          'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
        ],
        [
          '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
          'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
        ],
        [
          'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
          '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
        ],
        [
          'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
          '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
        ],
        [
          'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
          '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
        ],
        [
          'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
          '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
        ],
        [
          '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
          'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
        ],
        [
          '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
          '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
        ],
        [
          '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
          'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
        ],
        [
          'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
          'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
        ],
        [
          'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
          '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
        ],
        [
          'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
          'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
        ],
        [
          'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
          '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
        ],
        [
          '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
          '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
        ],
        [
          'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
          '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
        ],
        [
          'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
          '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
        ],
        [
          '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
          '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
        ],
        [
          '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
          'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
        ],
        [
          'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
          '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
        ],
        [
          'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
          '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
        ],
        [
          'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
          '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
        ],
        [
          '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
          '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
        ],
        [
          'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
          'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
        ],
        [
          '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
          'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
        ],
        [
          'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
          'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
        ],
        [
          'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
          '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
        ],
        [
          '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
          'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
        ],
        [
          'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
          '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
        ],
        [
          'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
          '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
        ],
        [
          'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
          '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
        ],
        [
          '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
          'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
        ],
        [
          '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
          'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
        ],
        [
          'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
          '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
        ],
        [
          '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
          'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
        ],
        [
          '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
          '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
        ],
        [
          '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
          'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
        ],
        [
          'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
          'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
        ],
        [
          '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
          'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
        ],
        [
          '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
          '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
        ],
        [
          '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
          'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
        ],
        [
          '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
          '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
        ],
        [
          'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
          'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
        ],
        [
          '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
          '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
        ],
        [
          'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
          '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
        ],
        [
          '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
          '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
        ],
        [
          'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
          'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
        ],
        [
          'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
          '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
        ],
        [
          'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
          'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
        ],
        [
          '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
          'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
        ],
        [
          '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
          '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
        ],
        [
          '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
          'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
        ],
        [
          '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
          '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
        ],
        [
          '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
          '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
        ],
        [
          '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
          'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
        ],
        [
          '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
          '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
        ],
        [
          '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
          '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
        ],
        [
          '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
          '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
        ]
      ]
    }
  };


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var bn = __webpack_require__(232);
  var elliptic = __webpack_require__(229);
  var utils = elliptic.utils;
  var assert = utils.assert;

  var KeyPair = __webpack_require__(244);
  var Signature = __webpack_require__(245);

  function EC(options) {
    if (!(this instanceof EC))
      return new EC(options);

    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === 'string') {
      assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

      options = elliptic.curves[options];
    }

    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof elliptic.curves.PresetCurve)
      options = { curve: options };

    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;

    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);

    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
  }
  module.exports = EC;

  EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair(this, options);
  };

  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair.fromPrivate(this, priv, enc);
  };

  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair.fromPublic(this, pub, enc);
  };

  EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
      options = {};

    // Instantiate Hmac_DRBG
    var drbg = new elliptic.hmacDRBG({
      hash: this.hash,
      pers: options.pers,
      entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
      nonce: this.n.toArray()
    });

    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new bn(2));
    do {
      var priv = new bn(drbg.generate(bytes));
      if (priv.cmp(ns2) > 0)
        continue;

      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    } while (true);
  };

  EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0)
      msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
      return msg.sub(this.n);
    else
      return msg;
  };

  EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === 'object') {
      options = enc;
      enc = null;
    }
    if (!options)
      options = {};

    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new bn(msg, 16));

    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray();
    for (var i = bkey.length; i < bytes; i++)
      bkey.unshift(0);

    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray();
    for (var i = nonce.length; i < bytes; i++)
      nonce.unshift(0);

    // Instantiate Hmac_DRBG
    var drbg = new elliptic.hmacDRBG({
      hash: this.hash,
      entropy: bkey,
      nonce: nonce
    });

    // Number of bytes to generate
    var ns1 = this.n.sub(new bn(1));
    do {
      var k = new bn(drbg.generate(this.n.byteLength()));
      k = this._truncateToN(k, true);
      if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
        continue;

      var kp = this.g.mul(k);
      if (kp.isInfinity())
        continue;

      var kpX = kp.getX();
      var r = kpX.umod(this.n);
      if (r.cmpn(0) === 0)
        continue;

      var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
      s = s.umod(this.n);
      if (s.cmpn(0) === 0)
        continue;

      // Use complement of `s`, if it is > `n / 2`
      if (options.canonical && s.cmp(this.nh) > 0)
        s = this.n.sub(s);

      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                          (kpX.cmp(r) !== 0 ? 2 : 0);

      return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
    } while (true);
  };

  EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new bn(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new Signature(signature, 'hex');

    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
      return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
      return false;

    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);

    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  };

  EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
    assert((3 & j) === j, 'The recovery param is more than two bits');
    signature = new Signature(signature, enc);

    var n = this.n;
    var e = new bn(msg);
    var r = signature.r;
    var s = signature.s;

    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
      throw new Error('Unable to find sencond key candinate');

    // 1.1. Let x = r + jn.
    r = this.curve.pointFromX(r, isYOdd);
    var eNeg = e.neg().umod(n);

    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    var rInv = signature.r.invm(n);
    return r.mul(s).add(this.g.mul(eNeg)).mul(rInv);
  };

  EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new Signature(signature, enc);
    if (signature.recoveryParam !== null)
      return signature.recoveryParam;

    for (var i = 0; i < 4; i++) {
      var Qprime = this.recoverPubKey(e, signature, i);

      if (Qprime.eq(Q))
        return i;
    }
    throw new Error('Unable to find valid recovery factor');
  };


/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var bn = __webpack_require__(232);

  function KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;

    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv)
      this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
      this._importPublic(options.pub, options.pubEnc);
  }
  module.exports = KeyPair;

  KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair)
      return pub;

    return new KeyPair(ec, {
      pub: pub,
      pubEnc: enc
    });
  };

  KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair)
      return priv;

    return new KeyPair(ec, {
      priv: priv,
      privEnc: enc
    });
  };

  KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();

    if (pub.isInfinity())
      return { result: false, reason: 'Invalid public key' };
    if (!pub.validate())
      return { result: false, reason: 'Public key is not a point' };
    if (!pub.mul(this.ec.curve.n).isInfinity())
      return { result: false, reason: 'Public key * N != O' };

    return { result: true, reason: null };
  };

  KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === 'string') {
      enc = compact;
      compact = null;
    }

    if (!this.pub)
      this.pub = this.ec.g.mul(this.priv);

    if (!enc)
      return this.pub;

    return this.pub.encode(enc, compact);
  };

  KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex')
      return this.priv.toString(16, 2);
    else
      return this.priv;
  };

  KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new bn(key, enc || 16);

    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
  };

  KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
      this.pub = this.ec.curve.point(key.x, key.y);
      return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
  };

  // ECDH
  KeyPair.prototype.derive = function derive(pub) {
    return pub.mul(this.priv).getX();
  };

  // ECDSA
  KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
  };

  KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
  };

  KeyPair.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
           ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
  };


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var bn = __webpack_require__(232);

  var elliptic = __webpack_require__(229);
  var utils = elliptic.utils;
  var assert = utils.assert;

  function Signature(options, enc) {
    if (options instanceof Signature)
      return options;

    if (this._importDER(options, enc))
      return;

    assert(options.r && options.s, 'Signature without r or s');
    this.r = new bn(options.r, 16);
    this.s = new bn(options.s, 16);
    if (options.recoveryParam !== null)
      this.recoveryParam = options.recoveryParam;
    else
      this.recoveryParam = null;
  }
  module.exports = Signature;

  function Position() {
    this.place = 0;
  }

  function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 0x80)) {
      return initial;
    }
    var octetLen = initial & 0xf;
    var val = 0;
    for (var i = 0, off = p.place; i < octetLen; i++, off++) {
      val <<= 8;
      val |= buf[off];
    }
    p.place = off;
    return val;
  }

  function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
      i++;
    }
    if (i === 0) {
      return buf;
    }
    return buf.slice(i);
  }

  Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 0x30) {
      return false;
    }
    var len = getLength(data, p);
    if ((len + p.place) !== data.length) {
      return false;
    }
    if (data[p.place++] !== 0x02) {
      return false;
    }
    var rlen = getLength(data, p);
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 0x02) {
      return false;
    }
    var slen = getLength(data, p);
    if (data.length !== slen + p.place) {
      return false;
    }
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0 && (r[1] & 0x80)) {
      r = r.slice(1);
    }
    if (s[0] === 0 && (s[1] & 0x80)) {
      s = s.slice(1);
    }

    this.r = new bn(r);
    this.s = new bn(s);
    this.recoveryParam = null;

    return true;
  };

  function constructLength(arr, len) {
    if (len < 0x80) {
      arr.push(len);
      return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 0x80);
    while (--octets) {
      arr.push((len >>> (octets << 3)) & 0xff);
    }
    arr.push(len);
  }

  Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();

    // Pad values
    if (r[0] & 0x80)
      r = [ 0 ].concat(r);
    // Pad values
    if (s[0] & 0x80)
      s = [ 0 ].concat(s);

    r = rmPadding(r);
    s = rmPadding(s);

    while (!s[0] && !(s[1] & 0x80)) {
      s = s.slice(1);
    }
    var arr = [ 0x02 ];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [ 0x30 ];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils.encode(res, enc);
  };


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var hash = __webpack_require__(222);
  var elliptic = __webpack_require__(229);
  var utils = elliptic.utils;
  var assert = utils.assert;
  var parseBytes = utils.parseBytes;
  var KeyPair = __webpack_require__(247);
  var Signature = __webpack_require__(248);

  function EDDSA(curve) {
    assert(curve === 'ed25519', 'only tested with ed25519 so far');

    if (!(this instanceof EDDSA))
      return new EDDSA(curve);

    var curve = elliptic.curves[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);

    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = hash.sha512;
  }

  module.exports = EDDSA;

  /**
  * @param {Array|String} message - message bytes
  * @param {Array|String|KeyPair} secret - secret bytes or a keypair
  * @returns {Signature} - signature
  */
  EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
                 .mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
  };

  /**
  * @param {Array} message - message bytes
  * @param {Array|String|Signature} sig - sig bytes
  * @param {Array|String|Point|KeyPair} pub - public key
  * @returns {Boolean} - true if public key matches sig of message
  */
  EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
  };

  EDDSA.prototype.hashInt = function hashInt() {
    var hash = this.hash();
    for (var i = 0; i < arguments.length; i++)
      hash.update(arguments[i]);
    return utils.intFromLE(hash.digest()).umod(this.curve.n);
  };

  EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
  };

  EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
  };

  EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature)
      return sig;
    return new Signature(this, sig);
  };

  /**
  * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
  *
  * EDDSA defines methods for encoding and decoding points and integers. These are
  * helper convenience methods, that pass along to utility functions implied
  * parameters.
  *
  */
  EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray('le', this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
  };

  EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils.parseBytes(bytes);

    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

    var y = utils.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
  };

  EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray('le', this.encodingLength);
  };

  EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils.intFromLE(bytes);
  };

  EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
  };


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var elliptic = __webpack_require__(229);
  var utils = elliptic.utils;
  var assert = utils.assert;
  var parseBytes = utils.parseBytes;
  var cachedProperty = utils.cachedProperty;

  /**
  * @param {EDDSA} eddsa - instance
  * @param {Object} params - public/private key parameters
  *
  * @param {Array<Byte>} [params.secret] - secret seed bytes
  * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
  * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
  *
  */
  function KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes(params.secret);
    if (eddsa.isPoint(params.pub))
      this._pub = params.pub;
    else
      this._pubBytes = parseBytes(params.pub);
  }

  KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair)
      return pub;
    return new KeyPair(eddsa, { pub: pub });
  };

  KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair)
      return secret;
    return new KeyPair(eddsa, { secret: secret });
  };

  KeyPair.prototype.secret = function secret() {
    return this._secret;
  };

  cachedProperty(KeyPair, function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
  });

  cachedProperty(KeyPair, function pub() {
    if (this._pubBytes)
      return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
  });

  cachedProperty(KeyPair, function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;

    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;

    return a;
  });

  cachedProperty(KeyPair, function priv() {
    return this.eddsa.decodeInt(this.privBytes());
  });

  cachedProperty(KeyPair, function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
  });

  cachedProperty(KeyPair, function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
  });

  KeyPair.prototype.sign = function sign(message) {
    assert(this._secret, 'KeyPair can only verify');
    return this.eddsa.sign(message, this);
  };

  KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
  };

  KeyPair.prototype.getSecret = function getSecret(enc) {
    assert(this._secret, 'KeyPair is public only');
    return utils.encode(this.secret(), enc);
  };

  KeyPair.prototype.getPublic = function getPublic(enc) {
    return utils.encode(this.pubBytes(), enc);
  };

  module.exports = KeyPair;


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var bn = __webpack_require__(232);
  var elliptic = __webpack_require__(229);
  var utils = elliptic.utils;
  var assert = utils.assert;
  var cachedProperty = utils.cachedProperty;
  var parseBytes = utils.parseBytes;

  /**
  * @param {EDDSA} eddsa - eddsa instance
  * @param {Array<Bytes>|Object} sig -
  * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
  * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
  * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
  * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
  */
  function Signature(eddsa, sig) {
    this.eddsa = eddsa;

    if (typeof sig !== 'object')
      sig = parseBytes(sig);

    if (Array.isArray(sig)) {
      sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
      };
    }

    assert(sig.R && sig.S, 'Signature without R or S');

    if (eddsa.isPoint(sig.R))
      this._R = sig.R;
    if (sig.S instanceof bn)
      this._S = sig.S;

    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
  }

  cachedProperty(Signature, function S() {
    return this.eddsa.decodeInt(this.Sencoded());
  });

  cachedProperty(Signature, function R() {
    return this.eddsa.decodePoint(this.Rencoded());
  });

  cachedProperty(Signature, function Rencoded() {
    return this.eddsa.encodePoint(this.R());
  });

  cachedProperty(Signature, function Sencoded() {
    return this.eddsa.encodeInt(this.S());
  });

  Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
  };

  Signature.prototype.toHex = function toHex() {
    return utils.encode(this.toBytes(), 'hex').toUpperCase();
  };

  module.exports = Signature;


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var hashjs = __webpack_require__(250);
  var apiFactory = __webpack_require__(257);

  var NODE_PUBLIC = 28;
  var NODE_PRIVATE = 32;
  var ACCOUNT_ID = 0;
  var FAMILY_SEED = 33;
  var ED25519_SEED = [0x01, 0xE1, 0x4B];

  module.exports = apiFactory({
    sha256: function(bytes) {
      return hashjs.sha256().update(bytes).digest();
    },
    defaultAlphabet: 'ripple',
    codecMethods: {
      EdSeed: {
        expectedLength: 16,
        version: ED25519_SEED
      },
      Seed: {
        // TODO: Use a map, not a parallel array
        versionTypes: ['ed25519', 'secp256k1'],
        versions: [ED25519_SEED, FAMILY_SEED],
        expectedLength: 16
      },
      AccountID: {version: ACCOUNT_ID, expectedLength: 20},
      Address: {version: ACCOUNT_ID, expectedLength: 20},
      NodePublic: {version: NODE_PUBLIC, expectedLength: 33},
      NodePrivate: {version: NODE_PRIVATE, expectedLength: 32},
      K256Seed: {version: FAMILY_SEED, expectedLength: 16}}
  });


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

  var hash = exports;

  hash.utils = __webpack_require__(251);
  hash.common = __webpack_require__(253);
  hash.sha = __webpack_require__(254);
  hash.ripemd = __webpack_require__(255);
  hash.hmac = __webpack_require__(256);

  // Proxy hash functions to the main object
  hash.sha1 = hash.sha.sha1;
  hash.sha256 = hash.sha.sha256;
  hash.sha224 = hash.sha.sha224;
  hash.sha384 = hash.sha.sha384;
  hash.sha512 = hash.sha.sha512;
  hash.ripemd160 = hash.ripemd.ripemd160;


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

  var utils = exports;
  var inherits = __webpack_require__(252);

  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === 'string') {
      if (!enc) {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      } else if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    } else {
      for (var i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
    }
    return res;
  }
  utils.toArray = toArray;

  function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  utils.toHex = toHex;

  function htonl(w) {
    var res = (w >>> 24) |
              ((w >>> 8) & 0xff00) |
              ((w << 8) & 0xff0000) |
              ((w & 0xff) << 24);
    return res >>> 0;
  }
  utils.htonl = htonl;

  function toHex32(msg, endian) {
    var res = '';
    for (var i = 0; i < msg.length; i++) {
      var w = msg[i];
      if (endian === 'little')
        w = htonl(w);
      res += zero8(w.toString(16));
    }
    return res;
  }
  utils.toHex32 = toHex32;

  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  utils.zero2 = zero2;

  function zero8(word) {
    if (word.length === 7)
      return '0' + word;
    else if (word.length === 6)
      return '00' + word;
    else if (word.length === 5)
      return '000' + word;
    else if (word.length === 4)
      return '0000' + word;
    else if (word.length === 3)
      return '00000' + word;
    else if (word.length === 2)
      return '000000' + word;
    else if (word.length === 1)
      return '0000000' + word;
    else
      return word;
  }
  utils.zero8 = zero8;

  function join32(msg, start, end, endian) {
    var len = end - start;
    assert(len % 4 === 0);
    var res = new Array(len / 4);
    for (var i = 0, k = start; i < res.length; i++, k += 4) {
      var w;
      if (endian === 'big')
        w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
      else
        w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
      res[i] = w >>> 0;
    }
    return res;
  }
  utils.join32 = join32;

  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
      var m = msg[i];
      if (endian === 'big') {
        res[k] = m >>> 24;
        res[k + 1] = (m >>> 16) & 0xff;
        res[k + 2] = (m >>> 8) & 0xff;
        res[k + 3] = m & 0xff;
      } else {
        res[k + 3] = m >>> 24;
        res[k + 2] = (m >>> 16) & 0xff;
        res[k + 1] = (m >>> 8) & 0xff;
        res[k] = m & 0xff;
      }
    }
    return res;
  }
  utils.split32 = split32;

  function rotr32(w, b) {
    return (w >>> b) | (w << (32 - b));
  }
  utils.rotr32 = rotr32;

  function rotl32(w, b) {
    return (w << b) | (w >>> (32 - b));
  }
  utils.rotl32 = rotl32;

  function sum32(a, b) {
    return (a + b) >>> 0;
  }
  utils.sum32 = sum32;

  function sum32_3(a, b, c) {
    return (a + b + c) >>> 0;
  }
  utils.sum32_3 = sum32_3;

  function sum32_4(a, b, c, d) {
    return (a + b + c + d) >>> 0;
  }
  utils.sum32_4 = sum32_4;

  function sum32_5(a, b, c, d, e) {
    return (a + b + c + d + e) >>> 0;
  }
  utils.sum32_5 = sum32_5;

  function assert(cond, msg) {
    if (!cond)
      throw new Error(msg || 'Assertion failed');
  }
  utils.assert = assert;

  utils.inherits = inherits;

  function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];

    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  exports.sum64 = sum64;

  function sum64_hi(ah, al, bh, bl) {
    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  };
  exports.sum64_hi = sum64_hi;

  function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  };
  exports.sum64_lo = sum64_lo;

  function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;

    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  };
  exports.sum64_4_hi = sum64_4_hi;

  function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  };
  exports.sum64_4_lo = sum64_4_lo;

  function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = (lo + el) >>> 0;
    carry += lo < el ? 1 : 0;

    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  };
  exports.sum64_5_hi = sum64_5_hi;

  function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;

    return lo >>> 0;
  };
  exports.sum64_5_lo = sum64_5_lo;

  function rotr64_hi(ah, al, num) {
    var r = (al << (32 - num)) | (ah >>> num);
    return r >>> 0;
  };
  exports.rotr64_hi = rotr64_hi;

  function rotr64_lo(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  };
  exports.rotr64_lo = rotr64_lo;

  function shr64_hi(ah, al, num) {
    return ah >>> num;
  };
  exports.shr64_hi = shr64_hi;

  function shr64_lo(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  };
  exports.shr64_lo = shr64_lo;


/***/ },
/* 252 */
/***/ function(module, exports) {

  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

  var hash = __webpack_require__(250);
  var utils = hash.utils;
  var assert = utils.assert;

  function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';

    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  exports.BlockHash = BlockHash;

  BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;

    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
      msg = this.pending;

      // Process pending data in blocks
      var r = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r, msg.length);
      if (this.pending.length === 0)
        this.pending = null;

      msg = utils.join32(msg, 0, msg.length - r, this.endian);
      for (var i = 0; i < msg.length; i += this._delta32)
        this._update(msg, i, i + this._delta32);
    }

    return this;
  };

  BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert(this.pending === null);

    return this._digest(enc);
  };

  BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - ((len + this.padLength) % bytes);
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for (var i = 1; i < k; i++)
      res[i] = 0;

    // Append length
    len <<= 3;
    if (this.endian === 'big') {
      for (var t = 8; t < this.padLength; t++)
        res[i++] = 0;

      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = len & 0xff;
    } else {
      res[i++] = len & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;

      for (var t = 8; t < this.padLength; t++)
        res[i++] = 0;
    }

    return res;
  };


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

  var hash = __webpack_require__(250);
  var utils = hash.utils;
  var assert = utils.assert;

  var rotr32 = utils.rotr32;
  var rotl32 = utils.rotl32;
  var sum32 = utils.sum32;
  var sum32_4 = utils.sum32_4;
  var sum32_5 = utils.sum32_5;
  var rotr64_hi = utils.rotr64_hi;
  var rotr64_lo = utils.rotr64_lo;
  var shr64_hi = utils.shr64_hi;
  var shr64_lo = utils.shr64_lo;
  var sum64 = utils.sum64;
  var sum64_hi = utils.sum64_hi;
  var sum64_lo = utils.sum64_lo;
  var sum64_4_hi = utils.sum64_4_hi;
  var sum64_4_lo = utils.sum64_4_lo;
  var sum64_5_hi = utils.sum64_5_hi;
  var sum64_5_lo = utils.sum64_5_lo;
  var BlockHash = hash.common.BlockHash;

  var sha256_K = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
  ];

  var sha512_K = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  ];

  var sha1_K = [
    0x5A827999, 0x6ED9EBA1,
    0x8F1BBCDC, 0xCA62C1D6
  ];

  function SHA256() {
    if (!(this instanceof SHA256))
      return new SHA256();

    BlockHash.call(this);
    this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
               0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];
    this.k = sha256_K;
    this.W = new Array(64);
  }
  utils.inherits(SHA256, BlockHash);
  exports.sha256 = SHA256;

  SHA256.blockSize = 512;
  SHA256.outSize = 256;
  SHA256.hmacStrength = 192;
  SHA256.padLength = 64;

  SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i++)
      W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];

    assert(this.k.length === W.length);
    for (var i = 0; i < W.length; i++) {
      var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
      var T2 = sum32(s0_256(a), maj32(a, b, c));
      h = g;
      g = f;
      f = e;
      e = sum32(d, T1);
      d = c;
      c = b;
      b = a;
      a = sum32(T1, T2);
    }

    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
    this.h[5] = sum32(this.h[5], f);
    this.h[6] = sum32(this.h[6], g);
    this.h[7] = sum32(this.h[7], h);
  };

  SHA256.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'big');
    else
      return utils.split32(this.h, 'big');
  };

  function SHA224() {
    if (!(this instanceof SHA224))
      return new SHA224();

    SHA256.call(this);
    this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
               0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
  }
  utils.inherits(SHA224, SHA256);
  exports.sha224 = SHA224;

  SHA224.blockSize = 512;
  SHA224.outSize = 224;
  SHA224.hmacStrength = 192;
  SHA224.padLength = 64;

  SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === 'hex')
      return utils.toHex32(this.h.slice(0, 7), 'big');
    else
      return utils.split32(this.h.slice(0, 7), 'big');
  };

  function SHA512() {
    if (!(this instanceof SHA512))
      return new SHA512();

    BlockHash.call(this);
    this.h = [ 0x6a09e667, 0xf3bcc908,
               0xbb67ae85, 0x84caa73b,
               0x3c6ef372, 0xfe94f82b,
               0xa54ff53a, 0x5f1d36f1,
               0x510e527f, 0xade682d1,
               0x9b05688c, 0x2b3e6c1f,
               0x1f83d9ab, 0xfb41bd6b,
               0x5be0cd19, 0x137e2179 ];
    this.k = sha512_K;
    this.W = new Array(160);
  }
  utils.inherits(SHA512, BlockHash);
  exports.sha512 = SHA512;

  SHA512.blockSize = 1024;
  SHA512.outSize = 512;
  SHA512.hmacStrength = 192;
  SHA512.padLength = 128;

  SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;

    // 32 x 32bit words
    for (var i = 0; i < 32; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i += 2) {
      var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
      var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
      var c1_hi = W[i - 14];  // i - 7
      var c1_lo = W[i - 13];
      var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
      var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
      var c3_hi = W[i - 32];  // i - 16
      var c3_lo = W[i - 31];

      W[i] = sum64_4_hi(c0_hi, c0_lo,
                        c1_hi, c1_lo,
                        c2_hi, c2_lo,
                        c3_hi, c3_lo);
      W[i + 1] = sum64_4_lo(c0_hi, c0_lo,
                            c1_hi, c1_lo,
                            c2_hi, c2_lo,
                            c3_hi, c3_lo);
    }
  };

  SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);

    var W = this.W;

    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];

    assert(this.k.length === W.length);
    for (var i = 0; i < W.length; i += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = this.k[i];
      var c3_lo = this.k[i + 1];
      var c4_hi = W[i];
      var c4_lo = W[i + 1];

      var T1_hi = sum64_5_hi(c0_hi, c0_lo,
                             c1_hi, c1_lo,
                             c2_hi, c2_lo,
                             c3_hi, c3_lo,
                             c4_hi, c4_lo);
      var T1_lo = sum64_5_lo(c0_hi, c0_lo,
                             c1_hi, c1_lo,
                             c2_hi, c2_lo,
                             c3_hi, c3_lo,
                             c4_hi, c4_lo);

      var c0_hi = s0_512_hi(ah, al);
      var c0_lo = s0_512_lo(ah, al);
      var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
      var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

      var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

      hh = gh;
      hl = gl;

      gh = fh;
      gl = fl;

      fh = eh;
      fl = el;

      eh = sum64_hi(dh, dl, T1_hi, T1_lo);
      el = sum64_lo(dl, dl, T1_hi, T1_lo);

      dh = ch;
      dl = cl;

      ch = bh;
      cl = bl;

      bh = ah;
      bl = al;

      ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }

    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
  };

  SHA512.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'big');
    else
      return utils.split32(this.h, 'big');
  };

  function SHA384() {
    if (!(this instanceof SHA384))
      return new SHA384();

    SHA512.call(this);
    this.h = [ 0xcbbb9d5d, 0xc1059ed8,
               0x629a292a, 0x367cd507,
               0x9159015a, 0x3070dd17,
               0x152fecd8, 0xf70e5939,
               0x67332667, 0xffc00b31,
               0x8eb44a87, 0x68581511,
               0xdb0c2e0d, 0x64f98fa7,
               0x47b5481d, 0xbefa4fa4 ];
  }
  utils.inherits(SHA384, SHA512);
  exports.sha384 = SHA384;

  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;

  SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h.slice(0, 12), 'big');
    else
      return utils.split32(this.h.slice(0, 12), 'big');
  };

  function SHA1() {
    if (!(this instanceof SHA1))
      return new SHA1();

    BlockHash.call(this);
    this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,
               0x10325476, 0xc3d2e1f0 ];
    this.W = new Array(80);
  }

  utils.inherits(SHA1, BlockHash);
  exports.sha1 = SHA1;

  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;

  SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];

    for(; i < W.length; i++)
      W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];

    for (var i = 0; i < W.length; i++) {
      var s = ~~(i / 20);
      var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
      e = d;
      d = c;
      c = rotl32(b, 30);
      b = a;
      a = t;
    }

    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
  };

  SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'big');
    else
      return utils.split32(this.h, 'big');
  };

  function ch32(x, y, z) {
    return (x & y) ^ ((~x) & z);
  }

  function maj32(x, y, z) {
    return (x & y) ^ (x & z) ^ (y & z);
  }

  function p32(x, y, z) {
    return x ^ y ^ z;
  }

  function s0_256(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
  }

  function s1_256(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
  }

  function g0_256(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
  }

  function g1_256(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
  }

  function ft_1(s, x, y, z) {
    if (s === 0)
      return ch32(x, y, z);
    if (s === 1 || s === 3)
      return p32(x, y, z);
    if (s === 2)
      return maj32(x, y, z);
  }

  function ch64_hi(xh, xl, yh, yl, zh, zl) {
    var r = (xh & yh) ^ ((~xh) & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ ((~xl) & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function maj64_hi(xh, xl, yh, yl, zh, zl) {
    var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2);  // 34
    var c2_hi = rotr64_hi(xl, xh, 7);  // 39

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2);  // 34
    var c2_lo = rotr64_lo(xl, xh, 7);  // 39

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9);  // 41

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9);  // 41

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29);  // 61
    var c2_hi = shr64_hi(xh, xl, 6);

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29);  // 61
    var c2_lo = shr64_lo(xh, xl, 6);

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

  var hash = __webpack_require__(250);
  var utils = hash.utils;

  var rotl32 = utils.rotl32;
  var sum32 = utils.sum32;
  var sum32_3 = utils.sum32_3;
  var sum32_4 = utils.sum32_4;
  var BlockHash = hash.common.BlockHash;

  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();

    BlockHash.call(this);

    this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
    this.endian = 'little';
  }
  utils.inherits(RIPEMD160, BlockHash);
  exports.ripemd160 = RIPEMD160;

  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;

  RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for (var j = 0; j < 80; j++) {
      var T = sum32(
        rotl32(
          sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
          s[j]),
        E);
      A = E;
      E = D;
      D = rotl32(C, 10);
      C = B;
      B = T;
      T = sum32(
        rotl32(
          sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
          sh[j]),
        Eh);
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32(Ch, 10);
      Ch = Bh;
      Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
  };

  RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'little');
    else
      return utils.split32(this.h, 'little');
  };

  function f(j, x, y, z) {
    if (j <= 15)
      return x ^ y ^ z;
    else if (j <= 31)
      return (x & y) | ((~x) & z);
    else if (j <= 47)
      return (x | (~y)) ^ z;
    else if (j <= 63)
      return (x & z) | (y & (~z));
    else
      return x ^ (y | (~z));
  }

  function K(j) {
    if (j <= 15)
      return 0x00000000;
    else if (j <= 31)
      return 0x5a827999;
    else if (j <= 47)
      return 0x6ed9eba1;
    else if (j <= 63)
      return 0x8f1bbcdc;
    else
      return 0xa953fd4e;
  }

  function Kh(j) {
    if (j <= 15)
      return 0x50a28be6;
    else if (j <= 31)
      return 0x5c4dd124;
    else if (j <= 47)
      return 0x6d703ef3;
    else if (j <= 63)
      return 0x7a6d76e9;
    else
      return 0x00000000;
  }

  var r = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  ];

  var rh = [
    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  ];

  var s = [
    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  ];

  var sh = [
    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  ];


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

  var hmac = exports;

  var hash = __webpack_require__(250);
  var utils = hash.utils;
  var assert = utils.assert;

  function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac))
      return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;

    this._init(utils.toArray(key, enc));
  }
  module.exports = Hmac;

  Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize)
      key = new this.Hash().update(key).digest();
    assert(key.length <= this.blockSize);

    // Add padding to key
    for (var i = key.length; i < this.blockSize; i++)
      key.push(0);

    for (var i = 0; i < key.length; i++)
      key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);

    // 0x36 ^ 0x5c = 0x6a
    for (var i = 0; i < key.length; i++)
      key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
  };

  Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };

  Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var codecFactory = __webpack_require__(258);

  var ALPHABETS = {
    bitcoin: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz',
    ripple: 'rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz',
    tipple: 'RPShNAF39wBUDnEGHJKLM4pQrsT7VWXYZ2bcdeCg65jkm8ofqi1tuvaxyz',
    stellar: 'gsphnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCr65jkm8oFqi1tuvAxyz'
  };

  function addMethods(codecMethods, api) {
    function addVersion(name, opts) {
      function add(operation) {
        var encode = operation === 'encode';
        var func = api[operation + name] = function (arg, arg2) {
          var params = opts;
          if (arg2 && encode) {
            params = {
              expectedLength: opts.expectedLength,
              version: opts.versions[opts.versionTypes.indexOf(arg2)]
            };
          }
          return api[operation](arg, params);
        };
        return func;
      }
      var decode = add('decode');
      add('encode');
      api['isValid' + name] = function (arg) {
        try {
          decode(arg);
        } catch (e) {
          return false;
        }
        return true;
      };
    }
    for (var k in codecMethods) {
      addVersion(k, codecMethods[k]);
    }
    return api;
  }

  function buildCodecsMap(alphabets, Codec) {
    var codecs = {};
    for (var _name in ALPHABETS) {
      codecs[_name] = new Codec(ALPHABETS[_name]);
    }if (alphabets !== ALPHABETS) {
      for (var _name2 in alphabets) {
        codecs[_name2] = new Codec(alphabets[_name2]);
      }
    }
    return codecs;
  }

  function apiFactory(options) {
    var _options$alphabets = options.alphabets;
    var alphabets = _options$alphabets === undefined ? ALPHABETS : _options$alphabets;
    var _options$codecMethods = options.codecMethods;
    var codecMethods = _options$codecMethods === undefined ? {} : _options$codecMethods;
    var _options$defaultAlphabet = options.defaultAlphabet;
    var defaultAlphabet = _options$defaultAlphabet === undefined ? Object.keys(alphabets)[0] : _options$defaultAlphabet;

    var Codec = codecFactory(options);
    var codecs = buildCodecsMap(alphabets, Codec);

    return addMethods(codecMethods, {
      Codec: Codec,
      codecs: codecs,
      decode: function decode(string) {
        var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
        var _opts$alphabet = opts.alphabet;
        var alphabet = _opts$alphabet === undefined ? defaultAlphabet : _opts$alphabet;

        return codecs[alphabet].decode(string, opts);
      },
      encode: function encode(bytes) {
        var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
        var _opts$alphabet2 = opts.alphabet;
        var alphabet = _opts$alphabet2 === undefined ? defaultAlphabet : _opts$alphabet2;

        return codecs[alphabet].encode(bytes, opts);
      }
    });
  }

  module.exports = apiFactory;

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var baseCodec = __webpack_require__(259);

  var _require = __webpack_require__(260);

  var seqEqual = _require.seqEqual;
  var concatArgs = _require.concatArgs;
  var isSet = _require.isSet;

  /* --------------------------------- ENCODER -------------------------------- */

  function codecFactory(injected) {

    /* eslint-disable indent */
    var sha256 = injected.sha256;

    var AddressCodec = (function () {
      /* eslint-enable indent */

      function AddressCodec(alphabet) {
        _classCallCheck(this, AddressCodec);

        this.alphabet = alphabet;
        this.codec = baseCodec(alphabet);
        this.base = alphabet.length;
      }

      /* eslint-disable indent */

      _createClass(AddressCodec, [{
        key: 'encode',
        value: function encode(bytes) {
          var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
          var version = opts.version;

          return isSet(version) ? this.encodeVersioned(bytes, version, opts.expectedLength) : opts.checked ? this.encodeChecked(bytes) : this.encodeRaw(bytes);
        }
      }, {
        key: 'decode',
        value: function decode(string) {
          var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
          var version = opts.version;
          var versions = opts.versions;

          return isSet(versions) ? this.decodeMultiVersioned(string, versions, opts.expectedLength, opts.versionTypes) : isSet(version) ? this.decodeVersioned(string, version, opts.expectedLength) : opts.checked ? this.decodeChecked(string) : this.decodeRaw(string);
        }
      }, {
        key: 'encodeRaw',
        value: function encodeRaw(bytes) {
          return this.codec.encode(bytes);
        }
      }, {
        key: 'decodeRaw',
        value: function decodeRaw(string) {
          return this.codec.decode(string);
        }
      }, {
        key: 'encodeChecked',
        value: function encodeChecked(buffer) {
          var check = sha256(sha256(buffer)).slice(0, 4);
          return this.encodeRaw(concatArgs(buffer, check));
        }
      }, {
        key: 'decodeChecked',
        value: function decodeChecked(encoded) {
          var buf = this.decodeRaw(encoded);
          if (buf.length < 5) {
            throw new Error('invalid_input_size');
          }
          if (!this.verifyCheckSum(buf)) {
            throw new Error('checksum_invalid');
          }
          return buf.slice(0, -4);
        }
      }, {
        key: 'encodeVersioned',
        value: function encodeVersioned(bytes, version, expectedLength) {
          if (expectedLength && bytes.length !== expectedLength) {
            throw new Error('unexpected_payload_length');
          }
          return this.encodeChecked(concatArgs(version, bytes));
        }
      }, {
        key: 'decodeVersioned',
        value: function decodeVersioned(string, version, expectedLength) {
          return this.decodeMultiVersioned(string, [version], expectedLength).bytes;
        }

        /**
        * @param {String} encoded - base58 checksum encoded data string
        * @param {Array} possibleVersions - array of possible versions.
        *                                   Each element could be a single byte or an
        *                                   array of bytes.
        * @param {Number} [expectedLength] - of decoded bytes minus checksum
        *
        * @param {Array} [types] - parrallel array of names matching possibleVersions
        *
        * @return {Object} -
        */
      }, {
        key: 'decodeMultiVersioned',
        value: function decodeMultiVersioned(encoded, possibleVersions, expectedLength, types) {
          var withoutSum = this.decodeChecked(encoded);
          var ret = { version: null, bytes: null };

          if (possibleVersions.length > 1 && !expectedLength) {
            throw new Error('must pass expectedLengthgth > 1 possibleVersions');
          }

          var versionLenGuess = possibleVersions[0].length || 1; // Number.length
          var payloadLength = expectedLength || withoutSum.length - versionLenGuess;
          var versionBytes = withoutSum.slice(0, -payloadLength);
          var payload = withoutSum.slice(-payloadLength);

          var foundVersion = possibleVersions.some(function (version, i) {
            var asArray = Array.isArray(version) ? version : [version];
            if (seqEqual(versionBytes, asArray)) {
              ret.version = version;
              ret.bytes = payload;
              if (types) {
                ret.type = types[i];
              }
              return true;
            }
          });

          if (!foundVersion) {
            throw new Error('version_invalid');
          }
          if (expectedLength && ret.bytes.length !== expectedLength) {
            throw new Error('unexpected_payload_length');
          }

          return ret;
        }
      }, {
        key: 'verifyCheckSum',
        value: function verifyCheckSum(bytes) {
          var computed = sha256(sha256(bytes.slice(0, -4))).slice(0, 4);
          var checksum = bytes.slice(-4);
          return seqEqual(computed, checksum);
        }

        /**
        * @param {String} desiredPrefix - desired prefix when base58 encoded with
        *                                 checksum
        * @param {Number} payloadLength - number of bytes encoded not incl checksum
        * @return {Array} version
        */
      }, {
        key: 'findPrefix',
        value: function findPrefix(desiredPrefix, payloadLength) {
          if (this.base !== 58) {
            throw new Error('Only works for base58');
          }
          var totalLength = payloadLength + 4; // for checksum
          var chars = Math.log(Math.pow(256, totalLength)) / Math.log(this.base);
          // (x, x.8] -> x+1, (x.8, x+1) -> x+2
          var requiredChars = Math.ceil(chars + 0.2);
          var padding = this.alphabet[Math.floor(this.alphabet.length / 2) - 1];
          var template = desiredPrefix + new Array(requiredChars + 1).join(padding);
          var bytes = this.decodeRaw(template);
          var version = bytes.slice(0, -totalLength);
          return version;
        }
      }]);

      return AddressCodec;
    })();

    return AddressCodec;
    /* eslint-enable indent */
  }
  /* ------------------------------- END ENCODER ------------------------------ */

  module.exports = codecFactory;

/***/ },
/* 259 */
/***/ function(module, exports) {

  // base* encoding
  // Credits to https://github.com/cryptocoinjs/bs58

  module.exports = function base (ALPHABET) {
    var ALPHABET_MAP = {}
    var BASE = ALPHABET.length
    var LEADER = ALPHABET.charAt(0)

    // pre-compute lookup table
    for (var i = 0; i < ALPHABET.length; i++) {
      ALPHABET_MAP[ALPHABET.charAt(i)] = i
    }

    function encode (buffer) {
      if (buffer.length === 0) return ''

      var i, j
      var digits = [0]

      for (i = 0; i < buffer.length; i++) {
        for (j = 0; j < digits.length; j++) digits[j] <<= 8

        digits[0] += buffer[i]

        var carry = 0
        for (j = 0; j < digits.length; ++j) {
          digits[j] += carry

          carry = (digits[j] / BASE) | 0
          digits[j] %= BASE
        }

        while (carry) {
          digits.push(carry % BASE)

          carry = (carry / BASE) | 0
        }
      }

      // deal with leading zeros
      for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) {
        digits.push(0)
      }

      return digits.reverse().map(function (digit) {
        return ALPHABET[digit]
      }).join('')
    }

    function decode (string) {
      if (string.length === 0) return []

      var i, j
      var bytes = [0]

      for (i = 0; i < string.length; i++) {
        var c = string[i]
        if (!(c in ALPHABET_MAP)) throw new Error('Non-base' + BASE + ' character')

        for (j = 0; j < bytes.length; j++) bytes[j] *= BASE
        bytes[0] += ALPHABET_MAP[c]

        var carry = 0
        for (j = 0; j < bytes.length; ++j) {
          bytes[j] += carry

          carry = bytes[j] >> 8
          bytes[j] &= 0xff
        }

        while (carry) {
          bytes.push(carry & 0xff)

          carry >>= 8
        }
      }

      // deal with leading zeros
      for (i = 0; string[i] === LEADER && i < string.length - 1; i++) {
        bytes.push(0)
      }

      return bytes.reverse()
    }

    return {
      encode: encode,
      decode: decode
    }
  }


/***/ },
/* 260 */
/***/ function(module, exports) {

  'use strict';

  function seqEqual(arr1, arr2) {
    if (arr1.length !== arr2.length) {
      return false;
    }

    for (var i = 0; i < arr1.length; i++) {
      if (arr1[i] !== arr2[i]) {
        return false;
      }
    }
    return true;
  }

  function isSequence(val) {
    return val.length !== undefined;
  }

  /**
  * Concatenates all `arguments` into a single array. Each argument can be either
  * a single element or a sequence, which has a `length` property and supports
  * element retrieval via sequence[ix].
  *
  * > concatArgs(1, [2, 3], new Buffer([4,5]), new Uint8Array([6, 7]));
  *  [1,2,3,4,5,6,7]
  *
  * @return {Array} - concatenated arguments
  */
  function concatArgs() {
    var ret = [];

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    args.forEach(function (arg) {
      if (isSequence(arg)) {
        for (var j = 0; j < arg.length; j++) {
          ret.push(arg[j]);
        }
      } else {
        ret.push(arg);
      }
    });
    return ret;
  }

  function isSet(o) {
    return o !== null && o !== undefined;
  }

  module.exports = {
    seqEqual: seqEqual,
    concatArgs: concatArgs,
    isSet: isSet
  };

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var elliptic = __webpack_require__(229);
  var secp256k1 = elliptic.ec('secp256k1');
  var Sha512 = __webpack_require__(262);

  function deriveScalar(bytes, discrim) {
    var order = secp256k1.curve.n;
    for (var i = 0; i <= 0xFFFFFFFF; i++) {
      // We hash the bytes to find a 256 bit number, looping until we are sure it
      // is less than the order of the curve.
      var hasher = new Sha512().add(bytes);
      // If the optional discriminator index was passed in, update the hash.
      if (discrim !== undefined) {
        hasher.addU32(discrim);
      }
      hasher.addU32(i);
      var key = hasher.first256BN();
      if (key.cmpn(0) > 0 && key.cmp(order) < 0) {
        return key;
      }
    }
    throw new Error('impossible unicorn ;)');
  }

  /**
  * @param {Array} seed - bytes
  * @param {Object} [opts] - object
  * @param {Number} [opts.accountIndex=0] - the account number to generate
  * @param {Boolean} [opts.validator=false] - generate root key-pair,
  *                                              as used by validators.
  * @return {bn.js} - 256 bit scalar value
  *
  */
  function derivePrivateKey(seed) {
    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var root = opts.validator;
    var order = secp256k1.curve.n;

    // This private generator represents the `root` private key, and is what's
    // used by validators for signing when a keypair is generated from a seed.
    var privateGen = deriveScalar(seed);
    if (root) {
      // As returned by validation_create for a given seed
      return privateGen;
    }
    var publicGen = secp256k1.g.mul(privateGen);
    // A seed can generate many keypairs as a function of the seed and a uint32.
    // Almost everyone just uses the first account, `0`.
    var accountIndex = opts.accountIndex || 0;
    return deriveScalar(publicGen.encodeCompressed(), accountIndex).add(privateGen).mod(order);
  }

  function accountPublicFromPublicGenerator(publicGenBytes) {
    var rootPubPoint = secp256k1.curve.decodePoint(publicGenBytes);
    var scalar = deriveScalar(publicGenBytes, 0);
    var point = secp256k1.g.mul(scalar);
    var offset = rootPubPoint.add(point);
    return offset.encodeCompressed();
  }

  module.exports = {
    derivePrivateKey: derivePrivateKey,
    accountPublicFromPublicGenerator: accountPublicFromPublicGenerator
  };

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _createClass = __webpack_require__(263)['default'];

  var _classCallCheck = __webpack_require__(267)['default'];

  var hashjs = __webpack_require__(222);
  var BigNum = __webpack_require__(232);

  module.exports = (function () {
    function Sha512() {
      _classCallCheck(this, Sha512);

      this.hash = hashjs.sha512();
    }

    _createClass(Sha512, [{
      key: 'add',
      value: function add(bytes) {
        this.hash.update(bytes);
        return this;
      }
    }, {
      key: 'addU32',
      value: function addU32(i) {
        return this.add([i >>> 24 & 0xFF, i >>> 16 & 0xFF, i >>> 8 & 0xFF, i & 0xFF]);
      }
    }, {
      key: 'finish',
      value: function finish() {
        return this.hash.digest();
      }
    }, {
      key: 'first256',
      value: function first256() {
        return this.finish().slice(0, 32);
      }
    }, {
      key: 'first256BN',
      value: function first256BN() {
        return new BigNum(this.first256());
      }
    }]);

    return Sha512;
  })();

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _Object$defineProperty = __webpack_require__(264)["default"];

  exports["default"] = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;

        _Object$defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();

  exports.__esModule = true;

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(265), __esModule: true };

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

  var $ = __webpack_require__(266);
  module.exports = function defineProperty(it, key, desc){
    return $.setDesc(it, key, desc);
  };

/***/ },
/* 266 */
/***/ function(module, exports) {

  var $Object = Object;
  module.exports = {
    create:     $Object.create,
    getProto:   $Object.getPrototypeOf,
    isEnum:     {}.propertyIsEnumerable,
    getDesc:    $Object.getOwnPropertyDescriptor,
    setDesc:    $Object.defineProperty,
    setDescs:   $Object.defineProperties,
    getKeys:    $Object.keys,
    getNames:   $Object.getOwnPropertyNames,
    getSymbols: $Object.getOwnPropertySymbols,
    each:       [].forEach
  };

/***/ },
/* 267 */
/***/ function(module, exports) {

  "use strict";

  exports["default"] = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  exports.__esModule = true;

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var assert = __webpack_require__(198);
  var hashjs = __webpack_require__(222);
  var BN = __webpack_require__(232);

  function bytesToHex(a) {
    return a.map(function (byteValue) {
      var hex = byteValue.toString(16).toUpperCase();
      return hex.length > 1 ? hex : '0' + hex;
    }).join('');
  }

  function hexToBytes(a) {
    assert(a.length % 2 === 0);
    return new BN(a, 16).toArray(null, a.length / 2);
  }

  function computePublicKeyHash(publicKeyBytes) {
    var hash256 = hashjs.sha256().update(publicKeyBytes).digest();
    var hash160 = hashjs.ripemd160().update(hash256).digest();
    return hash160;
  }

  function seedFromPhrase(phrase) {
    return hashjs.sha512().update(phrase).digest().slice(0, 16);
  }

  module.exports = {
    bytesToHex: bytesToHex,
    hexToBytes: hexToBytes,
    computePublicKeyHash: computePublicKeyHash,
    seedFromPhrase: seedFromPhrase
  };

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _ = __webpack_require__(192);

  var _require = __webpack_require__(193);

  var EventEmitter = _require.EventEmitter;

  var WebSocket = __webpack_require__(270);
  var parseURL = __webpack_require__(271).parse;
  var RangeSet = __webpack_require__(276).RangeSet;

  var _require2 = __webpack_require__(277);

  var RippledError = _require2.RippledError;
  var DisconnectedError = _require2.DisconnectedError;
  var NotConnectedError = _require2.NotConnectedError;
  var TimeoutError = _require2.TimeoutError;
  var ResponseFormatError = _require2.ResponseFormatError;
  var ConnectionError = _require2.ConnectionError;

  function isStreamMessageType(type) {
    return type === 'ledgerClosed' || type === 'transaction' || type === 'path_find';
  }

  var Connection = function (_EventEmitter) {
    _inherits(Connection, _EventEmitter);

    function Connection(url) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      _classCallCheck(this, Connection);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Connection).call(this));

      _this.setMaxListeners(Infinity);
      _this._url = url;
      _this._trace = options.trace;
      if (_this._trace) {
        // for easier unit testing
        _this._console = console;
      }
      _this._proxyURL = options.proxy;
      _this._proxyAuthorization = options.proxyAuthorization;
      _this._authorization = options.authorization;
      _this._trustedCertificates = options.trustedCertificates;
      _this._key = options.key;
      _this._passphrase = options.passphrase;
      _this._certificate = options.certificate;
      _this._timeout = options.timeout || 20 * 1000;
      _this._isReady = false;
      _this._ws = null;
      _this._ledgerVersion = null;
      _this._availableLedgerVersions = new RangeSet();
      _this._nextRequestID = 1;
      return _this;
    }

    _createClass(Connection, [{
      key: '_updateLedgerVersions',
      value: function _updateLedgerVersions(data) {
        this._ledgerVersion = Number(data.ledger_index);
        if (data.validated_ledgers) {
          this._availableLedgerVersions.reset();
          this._availableLedgerVersions.parseAndAddRanges(data.validated_ledgers);
        } else {
          this._availableLedgerVersions.addValue(this._ledgerVersion);
        }
      }

      // return value is array of arguments to Connection.emit

    }, {
      key: '_parseMessage',
      value: function _parseMessage(message) {
        var data = JSON.parse(message);
        if (data.type === 'response') {
          if (!(Number.isInteger(data.id) && data.id >= 0)) {
            throw new ResponseFormatError('valid id not found in response');
          }
          return [data.id.toString(), data];
        } else if (isStreamMessageType(data.type)) {
          if (data.type === 'ledgerClosed') {
            this._updateLedgerVersions(data);
          }
          return [data.type, data];
        } else if (data.type === undefined && data.error) {
          return ['error', data.error, data.error_message, data]; // e.g. slowDown
        }
        throw new ResponseFormatError('unrecognized message type: ' + data.type);
      }
    }, {
      key: '_onMessage',
      value: function _onMessage(message) {
        var parameters = undefined;
        if (this._trace) {
          this._console.log(message);
        }
        try {
          parameters = this._parseMessage(message);
        } catch (error) {
          this.emit('error', 'badMessage', error.message, message);
          return;
        }
        // we don't want this inside the try/catch or exceptions in listener
        // will be caught
        this.emit.apply(this, parameters);
      }
    }, {
      key: 'isConnected',
      value: function isConnected() {
        return this._state === WebSocket.OPEN && this._isReady;
      }
    }, {
      key: '_onUnexpectedClose',
      value: function _onUnexpectedClose() {
        var resolve = arguments.length <= 0 || arguments[0] === undefined ? function () {} : arguments[0];
        var reject = arguments.length <= 1 || arguments[1] === undefined ? function () {} : arguments[1];

        this._ws = null;
        this._isReady = false;
        this.connect().then(resolve, reject);
      }
    }, {
      key: '_onOpen',
      value: function _onOpen() {
        var _this2 = this;

        this._ws.removeListener('close', this._onUnexpectedCloseBound);
        this._onUnexpectedCloseBound = this._onUnexpectedClose.bind(this);
        this._ws.once('close', this._onUnexpectedCloseBound);

        var request = {
          command: 'subscribe',
          streams: ['ledger']
        };
        return this.request(request).then(function (data) {
          _this2._updateLedgerVersions(data);
          _this2._isReady = true;
          _this2.emit('connected');
        });
      }
    }, {
      key: '_createWebSocket',
      value: function _createWebSocket() {
        var options = {};
        if (this._proxyURL !== undefined) {
          var parsedURL = parseURL(this._url);
          var parsedProxyURL = parseURL(this._proxyURL);
          var proxyOverrides = _.omit({
            secureEndpoint: parsedURL.protocol === 'wss:',
            secureProxy: parsedProxyURL.protocol === 'https:',
            auth: this._proxyAuthorization,
            ca: this._trustedCertificates,
            key: this._key,
            passphrase: this._passphrase,
            cert: this._certificate
          }, _.isUndefined);
          var proxyOptions = _.assign({}, parsedProxyURL, proxyOverrides);
          var HttpsProxyAgent = undefined;
          try {
            HttpsProxyAgent = __webpack_require__(279);
          } catch (error) {
            throw new Error('"proxy" option is not supported in the browser');
          }
          options.agent = new HttpsProxyAgent(proxyOptions);
        }
        if (this._authorization !== undefined) {
          var base64 = new Buffer(this._authorization).toString('base64');
          options.headers = { Authorization: 'Basic ' + base64 };
        }
        var optionsOverrides = _.omit({
          ca: this._trustedCertificates,
          key: this._key,
          passphrase: this._passphrase,
          cert: this._certificate
        }, _.isUndefined);
        var websocketOptions = _.assign({}, options, optionsOverrides);
        var websocket = new WebSocket(this._url, null, websocketOptions);
        // we will have a listener for each outstanding request,
        // so we have to raise the limit (the default is 10)
        if (typeof websocket.setMaxListeners === 'function') {
          websocket.setMaxListeners(Infinity);
        }
        return websocket;
      }
    }, {
      key: 'connect',
      value: function connect() {
        var _this3 = this;

        return new Promise(function (resolve, reject) {
          if (!_this3._url) {
            reject(new ConnectionError('Cannot connect because no server was specified'));
          }
          if (_this3._state === WebSocket.OPEN) {
            resolve();
          } else if (_this3._state === WebSocket.CONNECTING) {
            _this3._ws.once('open', resolve);
          } else {
            _this3._ws = _this3._createWebSocket();
            // when an error causes the connection to close, the close event
            // should still be emitted; the "ws" documentation says: "The close
            // event is also emitted when then underlying net.Socket closes the
            // connection (end or close)."
            _this3._ws.on('error', function (error) {
              return _this3.emit('error', 'websocket', error.messsage, error);
            });
            _this3._ws.on('message', _this3._onMessage.bind(_this3));
            // in browser close event can came before open event, so we must
            // resolve connect's promise after reconnect in that case.
            // after open event we will rebound _onUnexpectedCloseBound
            // without resolve and reject functions
            _this3._onUnexpectedCloseBound = _this3._onUnexpectedClose.bind(_this3, resolve, reject);
            _this3._ws.once('close', _this3._onUnexpectedCloseBound);
            _this3._ws.once('open', function () {
              return _this3._onOpen().then(resolve, reject);
            });
          }
        });
      }
    }, {
      key: 'disconnect',
      value: function disconnect() {
        var _this4 = this;

        return new Promise(function (resolve) {
          if (_this4._state === WebSocket.CLOSED) {
            resolve();
          } else if (_this4._state === WebSocket.CLOSING) {
            _this4._ws.once('close', resolve);
          } else {
            _this4._ws.removeListener('close', _this4._onUnexpectedCloseBound);
            _this4._ws.once('close', function () {
              _this4._ws = null;
              _this4._isReady = false;
              resolve();
            });
            _this4._ws.close();
          }
        });
      }
    }, {
      key: 'reconnect',
      value: function reconnect() {
        var _this5 = this;

        return this.disconnect().then(function () {
          return _this5.connect();
        });
      }
    }, {
      key: '_whenReady',
      value: function _whenReady(promise) {
        var _this6 = this;

        return new Promise(function (resolve, reject) {
          if (!_this6._shouldBeConnected) {
            reject(new NotConnectedError());
          } else if (_this6._state === WebSocket.OPEN && _this6._isReady) {
            promise.then(resolve, reject);
          } else {
            _this6.once('connected', function () {
              return promise.then(resolve, reject);
            });
          }
        });
      }
    }, {
      key: 'getLedgerVersion',
      value: function getLedgerVersion() {
        return this._whenReady(Promise.resolve(this._ledgerVersion));
      }
    }, {
      key: 'hasLedgerVersions',
      value: function hasLedgerVersions(lowLedgerVersion, highLedgerVersion) {
        return this._whenReady(Promise.resolve(this._availableLedgerVersions.containsRange(lowLedgerVersion, highLedgerVersion || this._ledgerVersion)));
      }
    }, {
      key: 'hasLedgerVersion',
      value: function hasLedgerVersion(ledgerVersion) {
        return this.hasLedgerVersions(ledgerVersion, ledgerVersion);
      }
    }, {
      key: '_send',
      value: function _send(message) {
        var _this7 = this;

        if (this._trace) {
          this._console.log(message);
        }
        return new Promise(function (resolve, reject) {
          _this7._ws.send(message, undefined, function (error, result) {
            if (error) {
              reject(new DisconnectedError(error.message));
            } else {
              resolve(result);
            }
          });
        });
      }
    }, {
      key: 'request',
      value: function request(_request, timeout) {
        var _this8 = this;

        return new Promise(function (resolve, reject) {
          if (!_this8._shouldBeConnected) {
            reject(new NotConnectedError());
          }

          var timer = null;
          var self = _this8;
          var id = _this8._nextRequestID;
          _this8._nextRequestID += 1;
          var eventName = id.toString();

          function onDisconnect() {
            clearTimeout(timer);
            self.removeAllListeners(eventName);
            reject(new DisconnectedError());
          }

          function cleanup() {
            clearTimeout(timer);
            self.removeAllListeners(eventName);
            if (self._ws !== null) {
              self._ws.removeListener('close', onDisconnect);
            }
          }

          function _resolve(response) {
            cleanup();
            resolve(response);
          }

          function _reject(error) {
            cleanup();
            reject(error);
          }

          _this8.once(eventName, function (response) {
            if (response.status === 'error') {
              _reject(new RippledError(response.error));
            } else if (response.status === 'success') {
              _resolve(response.result);
            } else {
              _reject(new ResponseFormatError('unrecognized status: ' + response.status));
            }
          });

          _this8._ws.once('close', onDisconnect);

          // JSON.stringify automatically removes keys with value of 'undefined'
          var message = JSON.stringify(Object.assign({}, _request, { id: id }));

          _this8._whenReady(_this8._send(message)).then(function () {
            var delay = timeout || _this8._timeout;
            timer = setTimeout(function () {
              return _reject(new TimeoutError());
            }, delay);
          }).catch(_reject);
        });
      }
    }, {
      key: '_state',
      get: function get() {
        return this._ws ? this._ws.readyState : WebSocket.CLOSED;
      }
    }, {
      key: '_shouldBeConnected',
      get: function get() {
        return this._ws !== null;
      }
    }]);

    return Connection;
  }(EventEmitter);

  module.exports = Connection;
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _require = __webpack_require__(193);

  var EventEmitter = _require.EventEmitter;

  function unsused() {}

  /**
   * Provides `EventEmitter` interface for native browser `WebSocket`,
   * same, as `ws` package provides.
   */

  var WSWrapper = function (_EventEmitter) {
    _inherits(WSWrapper, _EventEmitter);

    function WSWrapper(url) {
      var protocols = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
      var websocketOptions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      _classCallCheck(this, WSWrapper);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WSWrapper).call(this));

      unsused(protocols);
      unsused(websocketOptions);
      _this.setMaxListeners(Infinity);

      _this._ws = new WebSocket(url);

      _this._ws.onclose = function () {
        _this.emit('close');
      };

      _this._ws.onopen = function () {
        _this.emit('open');
      };

      _this._ws.onerror = function (error) {
        _this.emit('error', error);
      };

      _this._ws.onmessage = function (message) {
        _this.emit('message', message.data);
      };
      return _this;
    }

    _createClass(WSWrapper, [{
      key: 'close',
      value: function close() {
        if (this.readyState === 1) {
          this._ws.close();
        }
      }
    }, {
      key: 'send',
      value: function send(message) {
        this._ws.send(message);
      }
    }, {
      key: 'readyState',
      get: function get() {
        return this._ws.readyState;
      }
    }]);

    return WSWrapper;
  }(EventEmitter);

  WSWrapper.CONNECTING = 0;
  WSWrapper.OPEN = 1;
  WSWrapper.CLOSING = 2;
  WSWrapper.CLOSED = 3;

  module.exports = WSWrapper;

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  var punycode = __webpack_require__(272);

  exports.parse = urlParse;
  exports.resolve = urlResolve;
  exports.resolveObject = urlResolveObject;
  exports.format = urlFormat;

  exports.Url = Url;

  function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
  }

  // Reference: RFC 3986, RFC 1808, RFC 2396

  // define these here so at least they only have to be
  // compiled once on the first module load.
  var protocolPattern = /^([a-z0-9.+-]+:)/i,
      portPattern = /:[0-9]*$/,

      // RFC 2396: characters reserved for delimiting URLs.
      // We actually just auto-escape these.
      delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

      // RFC 2396: characters not allowed for various reasons.
      unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

      // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
      autoEscape = ['\''].concat(unwise),
      // Characters that are never ever allowed in a hostname.
      // Note that any invalid chars are also handled, but these
      // are the ones that are *expected* to be seen, so we fast-path
      // them.
      nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
      hostEndingChars = ['/', '?', '#'],
      hostnameMaxLen = 255,
      hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
      hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
      // protocols that can allow "unsafe" and "unwise" chars.
      unsafeProtocol = {
        'javascript': true,
        'javascript:': true
      },
      // protocols that never have a hostname.
      hostlessProtocol = {
        'javascript': true,
        'javascript:': true
      },
      // protocols that always contain a // bit.
      slashedProtocol = {
        'http': true,
        'https': true,
        'ftp': true,
        'gopher': true,
        'file': true,
        'http:': true,
        'https:': true,
        'ftp:': true,
        'gopher:': true,
        'file:': true
      },
      querystring = __webpack_require__(273);

  function urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && isObject(url) && url instanceof Url) return url;

    var u = new Url;
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
  }

  Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
    if (!isString(url)) {
      throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
    }

    var rest = url;

    // trim before proceeding.
    // This is to support parse stuff like "  http://foo.com  \n"
    rest = rest.trim();

    var proto = protocolPattern.exec(rest);
    if (proto) {
      proto = proto[0];
      var lowerProto = proto.toLowerCase();
      this.protocol = lowerProto;
      rest = rest.substr(proto.length);
    }

    // figure out if it's got a host
    // user@server is *always* interpreted as a hostname, and url
    // resolution will treat //foo/bar as host=foo,path=bar because that's
    // how the browser resolves relative URLs.
    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
      var slashes = rest.substr(0, 2) === '//';
      if (slashes && !(proto && hostlessProtocol[proto])) {
        rest = rest.substr(2);
        this.slashes = true;
      }
    }

    if (!hostlessProtocol[proto] &&
        (slashes || (proto && !slashedProtocol[proto]))) {

      // there's a hostname.
      // the first instance of /, ?, ;, or # ends the host.
      //
      // If there is an @ in the hostname, then non-host chars *are* allowed
      // to the left of the last @ sign, unless some host-ending character
      // comes *before* the @-sign.
      // URLs are obnoxious.
      //
      // ex:
      // http://a@b@c/ => user:a@b host:c
      // http://a@b?@c => user:a host:c path:/?@c

      // v0.12 TODO(isaacs): This is not quite how Chrome does things.
      // Review our test case against browsers more comprehensively.

      // find the first instance of any hostEndingChars
      var hostEnd = -1;
      for (var i = 0; i < hostEndingChars.length; i++) {
        var hec = rest.indexOf(hostEndingChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          hostEnd = hec;
      }

      // at this point, either we have an explicit point where the
      // auth portion cannot go past, or the last @ char is the decider.
      var auth, atSign;
      if (hostEnd === -1) {
        // atSign can be anywhere.
        atSign = rest.lastIndexOf('@');
      } else {
        // atSign must be in auth portion.
        // http://a@b/c@d => host:b auth:a path:/c@d
        atSign = rest.lastIndexOf('@', hostEnd);
      }

      // Now we have a portion which is definitely the auth.
      // Pull that off.
      if (atSign !== -1) {
        auth = rest.slice(0, atSign);
        rest = rest.slice(atSign + 1);
        this.auth = decodeURIComponent(auth);
      }

      // the host is the remaining to the left of the first non-host char
      hostEnd = -1;
      for (var i = 0; i < nonHostChars.length; i++) {
        var hec = rest.indexOf(nonHostChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          hostEnd = hec;
      }
      // if we still have not hit it, then the entire thing is a host.
      if (hostEnd === -1)
        hostEnd = rest.length;

      this.host = rest.slice(0, hostEnd);
      rest = rest.slice(hostEnd);

      // pull out port.
      this.parseHost();

      // we've indicated that there is a hostname,
      // so even if it's empty, it has to be present.
      this.hostname = this.hostname || '';

      // if hostname begins with [ and ends with ]
      // assume that it's an IPv6 address.
      var ipv6Hostname = this.hostname[0] === '[' &&
          this.hostname[this.hostname.length - 1] === ']';

      // validate a little.
      if (!ipv6Hostname) {
        var hostparts = this.hostname.split(/\./);
        for (var i = 0, l = hostparts.length; i < l; i++) {
          var part = hostparts[i];
          if (!part) continue;
          if (!part.match(hostnamePartPattern)) {
            var newpart = '';
            for (var j = 0, k = part.length; j < k; j++) {
              if (part.charCodeAt(j) > 127) {
                // we replace non-ASCII char with a temporary placeholder
                // we need this to make sure size of hostname is not
                // broken by replacing non-ASCII by nothing
                newpart += 'x';
              } else {
                newpart += part[j];
              }
            }
            // we test again with ASCII char only
            if (!newpart.match(hostnamePartPattern)) {
              var validParts = hostparts.slice(0, i);
              var notHost = hostparts.slice(i + 1);
              var bit = part.match(hostnamePartStart);
              if (bit) {
                validParts.push(bit[1]);
                notHost.unshift(bit[2]);
              }
              if (notHost.length) {
                rest = '/' + notHost.join('.') + rest;
              }
              this.hostname = validParts.join('.');
              break;
            }
          }
        }
      }

      if (this.hostname.length > hostnameMaxLen) {
        this.hostname = '';
      } else {
        // hostnames are always lower case.
        this.hostname = this.hostname.toLowerCase();
      }

      if (!ipv6Hostname) {
        // IDNA Support: Returns a puny coded representation of "domain".
        // It only converts the part of the domain name that
        // has non ASCII characters. I.e. it dosent matter if
        // you call it with a domain that already is in ASCII.
        var domainArray = this.hostname.split('.');
        var newOut = [];
        for (var i = 0; i < domainArray.length; ++i) {
          var s = domainArray[i];
          newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
              'xn--' + punycode.encode(s) : s);
        }
        this.hostname = newOut.join('.');
      }

      var p = this.port ? ':' + this.port : '';
      var h = this.hostname || '';
      this.host = h + p;
      this.href += this.host;

      // strip [ and ] from the hostname
      // the host field still retains them, though
      if (ipv6Hostname) {
        this.hostname = this.hostname.substr(1, this.hostname.length - 2);
        if (rest[0] !== '/') {
          rest = '/' + rest;
        }
      }
    }

    // now rest is set to the post-host stuff.
    // chop off any delim chars.
    if (!unsafeProtocol[lowerProto]) {

      // First, make 100% sure that any "autoEscape" chars get
      // escaped, even if encodeURIComponent doesn't think they
      // need to be.
      for (var i = 0, l = autoEscape.length; i < l; i++) {
        var ae = autoEscape[i];
        var esc = encodeURIComponent(ae);
        if (esc === ae) {
          esc = escape(ae);
        }
        rest = rest.split(ae).join(esc);
      }
    }


    // chop off from the tail first.
    var hash = rest.indexOf('#');
    if (hash !== -1) {
      // got a fragment string.
      this.hash = rest.substr(hash);
      rest = rest.slice(0, hash);
    }
    var qm = rest.indexOf('?');
    if (qm !== -1) {
      this.search = rest.substr(qm);
      this.query = rest.substr(qm + 1);
      if (parseQueryString) {
        this.query = querystring.parse(this.query);
      }
      rest = rest.slice(0, qm);
    } else if (parseQueryString) {
      // no query string, but parseQueryString still requested
      this.search = '';
      this.query = {};
    }
    if (rest) this.pathname = rest;
    if (slashedProtocol[lowerProto] &&
        this.hostname && !this.pathname) {
      this.pathname = '/';
    }

    //to support http.request
    if (this.pathname || this.search) {
      var p = this.pathname || '';
      var s = this.search || '';
      this.path = p + s;
    }

    // finally, reconstruct the href based on what has been validated.
    this.href = this.format();
    return this;
  };

  // format a parsed object into a url string
  function urlFormat(obj) {
    // ensure it's an object, and not a string url.
    // If it's an obj, this is a no-op.
    // this way, you can call url_format() on strings
    // to clean up potentially wonky urls.
    if (isString(obj)) obj = urlParse(obj);
    if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
    return obj.format();
  }

  Url.prototype.format = function() {
    var auth = this.auth || '';
    if (auth) {
      auth = encodeURIComponent(auth);
      auth = auth.replace(/%3A/i, ':');
      auth += '@';
    }

    var protocol = this.protocol || '',
        pathname = this.pathname || '',
        hash = this.hash || '',
        host = false,
        query = '';

    if (this.host) {
      host = auth + this.host;
    } else if (this.hostname) {
      host = auth + (this.hostname.indexOf(':') === -1 ?
          this.hostname :
          '[' + this.hostname + ']');
      if (this.port) {
        host += ':' + this.port;
      }
    }

    if (this.query &&
        isObject(this.query) &&
        Object.keys(this.query).length) {
      query = querystring.stringify(this.query);
    }

    var search = this.search || (query && ('?' + query)) || '';

    if (protocol && protocol.substr(-1) !== ':') protocol += ':';

    // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
    // unless they had them to begin with.
    if (this.slashes ||
        (!protocol || slashedProtocol[protocol]) && host !== false) {
      host = '//' + (host || '');
      if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
    } else if (!host) {
      host = '';
    }

    if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
    if (search && search.charAt(0) !== '?') search = '?' + search;

    pathname = pathname.replace(/[?#]/g, function(match) {
      return encodeURIComponent(match);
    });
    search = search.replace('#', '%23');

    return protocol + host + pathname + search + hash;
  };

  function urlResolve(source, relative) {
    return urlParse(source, false, true).resolve(relative);
  }

  Url.prototype.resolve = function(relative) {
    return this.resolveObject(urlParse(relative, false, true)).format();
  };

  function urlResolveObject(source, relative) {
    if (!source) return relative;
    return urlParse(source, false, true).resolveObject(relative);
  }

  Url.prototype.resolveObject = function(relative) {
    if (isString(relative)) {
      var rel = new Url();
      rel.parse(relative, false, true);
      relative = rel;
    }

    var result = new Url();
    Object.keys(this).forEach(function(k) {
      result[k] = this[k];
    }, this);

    // hash is always overridden, no matter what.
    // even href="" will remove it.
    result.hash = relative.hash;

    // if the relative url is empty, then there's nothing left to do here.
    if (relative.href === '') {
      result.href = result.format();
      return result;
    }

    // hrefs like //foo/bar always cut to the protocol.
    if (relative.slashes && !relative.protocol) {
      // take everything except the protocol from relative
      Object.keys(relative).forEach(function(k) {
        if (k !== 'protocol')
          result[k] = relative[k];
      });

      //urlParse appends trailing / to urls like http://www.example.com
      if (slashedProtocol[result.protocol] &&
          result.hostname && !result.pathname) {
        result.path = result.pathname = '/';
      }

      result.href = result.format();
      return result;
    }

    if (relative.protocol && relative.protocol !== result.protocol) {
      // if it's a known url protocol, then changing
      // the protocol does weird things
      // first, if it's not file:, then we MUST have a host,
      // and if there was a path
      // to begin with, then we MUST have a path.
      // if it is file:, then the host is dropped,
      // because that's known to be hostless.
      // anything else is assumed to be absolute.
      if (!slashedProtocol[relative.protocol]) {
        Object.keys(relative).forEach(function(k) {
          result[k] = relative[k];
        });
        result.href = result.format();
        return result;
      }

      result.protocol = relative.protocol;
      if (!relative.host && !hostlessProtocol[relative.protocol]) {
        var relPath = (relative.pathname || '').split('/');
        while (relPath.length && !(relative.host = relPath.shift()));
        if (!relative.host) relative.host = '';
        if (!relative.hostname) relative.hostname = '';
        if (relPath[0] !== '') relPath.unshift('');
        if (relPath.length < 2) relPath.unshift('');
        result.pathname = relPath.join('/');
      } else {
        result.pathname = relative.pathname;
      }
      result.search = relative.search;
      result.query = relative.query;
      result.host = relative.host || '';
      result.auth = relative.auth;
      result.hostname = relative.hostname || relative.host;
      result.port = relative.port;
      // to support http.request
      if (result.pathname || result.search) {
        var p = result.pathname || '';
        var s = result.search || '';
        result.path = p + s;
      }
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    }

    var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
        isRelAbs = (
            relative.host ||
            relative.pathname && relative.pathname.charAt(0) === '/'
        ),
        mustEndAbs = (isRelAbs || isSourceAbs ||
                      (result.host && relative.pathname)),
        removeAllDots = mustEndAbs,
        srcPath = result.pathname && result.pathname.split('/') || [],
        relPath = relative.pathname && relative.pathname.split('/') || [],
        psychotic = result.protocol && !slashedProtocol[result.protocol];

    // if the url is a non-slashed url, then relative
    // links like ../.. should be able
    // to crawl up to the hostname, as well.  This is strange.
    // result.protocol has already been set by now.
    // Later on, put the first path part into the host field.
    if (psychotic) {
      result.hostname = '';
      result.port = null;
      if (result.host) {
        if (srcPath[0] === '') srcPath[0] = result.host;
        else srcPath.unshift(result.host);
      }
      result.host = '';
      if (relative.protocol) {
        relative.hostname = null;
        relative.port = null;
        if (relative.host) {
          if (relPath[0] === '') relPath[0] = relative.host;
          else relPath.unshift(relative.host);
        }
        relative.host = null;
      }
      mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
    }

    if (isRelAbs) {
      // it's absolute.
      result.host = (relative.host || relative.host === '') ?
                    relative.host : result.host;
      result.hostname = (relative.hostname || relative.hostname === '') ?
                        relative.hostname : result.hostname;
      result.search = relative.search;
      result.query = relative.query;
      srcPath = relPath;
      // fall through to the dot-handling below.
    } else if (relPath.length) {
      // it's relative
      // throw away the existing file, and take the new path instead.
      if (!srcPath) srcPath = [];
      srcPath.pop();
      srcPath = srcPath.concat(relPath);
      result.search = relative.search;
      result.query = relative.query;
    } else if (!isNullOrUndefined(relative.search)) {
      // just pull out the search.
      // like href='?foo'.
      // Put this after the other two cases because it simplifies the booleans
      if (psychotic) {
        result.hostname = result.host = srcPath.shift();
        //occationaly the auth can get stuck only in host
        //this especialy happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
        var authInHost = result.host && result.host.indexOf('@') > 0 ?
                         result.host.split('@') : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }
      result.search = relative.search;
      result.query = relative.query;
      //to support http.request
      if (!isNull(result.pathname) || !isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') +
                      (result.search ? result.search : '');
      }
      result.href = result.format();
      return result;
    }

    if (!srcPath.length) {
      // no path at all.  easy.
      // we've already handled the other stuff above.
      result.pathname = null;
      //to support http.request
      if (result.search) {
        result.path = '/' + result.search;
      } else {
        result.path = null;
      }
      result.href = result.format();
      return result;
    }

    // if a url ENDs in . or .., then it must get a trailing slash.
    // however, if it ends in anything else non-slashy,
    // then it must NOT get a trailing slash.
    var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (
        (result.host || relative.host) && (last === '.' || last === '..') ||
        last === '');

    // strip single dots, resolve double dots to parent dir
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for (var i = srcPath.length; i >= 0; i--) {
      last = srcPath[i];
      if (last == '.') {
        srcPath.splice(i, 1);
      } else if (last === '..') {
        srcPath.splice(i, 1);
        up++;
      } else if (up) {
        srcPath.splice(i, 1);
        up--;
      }
    }

    // if the path is allowed to go above the root, restore leading ..s
    if (!mustEndAbs && !removeAllDots) {
      for (; up--; up) {
        srcPath.unshift('..');
      }
    }

    if (mustEndAbs && srcPath[0] !== '' &&
        (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
      srcPath.unshift('');
    }

    if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
      srcPath.push('');
    }

    var isAbsolute = srcPath[0] === '' ||
        (srcPath[0] && srcPath[0].charAt(0) === '/');

    // put the host back
    if (psychotic) {
      result.hostname = result.host = isAbsolute ? '' :
                                      srcPath.length ? srcPath.shift() : '';
      //occationaly the auth can get stuck only in host
      //this especialy happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }

    mustEndAbs = mustEndAbs || (result.host && srcPath.length);

    if (mustEndAbs && !isAbsolute) {
      srcPath.unshift('');
    }

    if (!srcPath.length) {
      result.pathname = null;
      result.path = null;
    } else {
      result.pathname = srcPath.join('/');
    }

    //to support request.http
    if (!isNull(result.pathname) || !isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  };

  Url.prototype.parseHost = function() {
    var host = this.host;
    var port = portPattern.exec(host);
    if (port) {
      port = port[0];
      if (port !== ':') {
        this.port = port.substr(1);
      }
      host = host.substr(0, host.length - port.length);
    }
    if (host) this.hostname = host;
  };

  function isString(arg) {
    return typeof arg === "string";
  }

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isNull(arg) {
    return arg === null;
  }
  function isNullOrUndefined(arg) {
    return  arg == null;
  }


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

  var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
  ;(function(root) {

    /** Detect free variables */
    var freeExports = typeof exports == 'object' && exports &&
      !exports.nodeType && exports;
    var freeModule = typeof module == 'object' && module &&
      !module.nodeType && module;
    var freeGlobal = typeof global == 'object' && global;
    if (
      freeGlobal.global === freeGlobal ||
      freeGlobal.window === freeGlobal ||
      freeGlobal.self === freeGlobal
    ) {
      root = freeGlobal;
    }

    /**
     * The `punycode` object.
     * @name punycode
     * @type Object
     */
    var punycode,

    /** Highest positive signed 32-bit float value */
    maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

    /** Bootstring parameters */
    base = 36,
    tMin = 1,
    tMax = 26,
    skew = 38,
    damp = 700,
    initialBias = 72,
    initialN = 128, // 0x80
    delimiter = '-', // '\x2D'

    /** Regular expressions */
    regexPunycode = /^xn--/,
    regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
    regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

    /** Error messages */
    errors = {
      'overflow': 'Overflow: input needs wider integers to process',
      'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
      'invalid-input': 'Invalid input'
    },

    /** Convenience shortcuts */
    baseMinusTMin = base - tMin,
    floor = Math.floor,
    stringFromCharCode = String.fromCharCode,

    /** Temporary variable */
    key;

    /*--------------------------------------------------------------------------*/

    /**
     * A generic error utility function.
     * @private
     * @param {String} type The error type.
     * @returns {Error} Throws a `RangeError` with the applicable error message.
     */
    function error(type) {
      throw RangeError(errors[type]);
    }

    /**
     * A generic `Array#map` utility function.
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} callback The function that gets called for every array
     * item.
     * @returns {Array} A new array of values returned by the callback function.
     */
    function map(array, fn) {
      var length = array.length;
      var result = [];
      while (length--) {
        result[length] = fn(array[length]);
      }
      return result;
    }

    /**
     * A simple `Array#map`-like wrapper to work with domain name strings or email
     * addresses.
     * @private
     * @param {String} domain The domain name or email address.
     * @param {Function} callback The function that gets called for every
     * character.
     * @returns {Array} A new string of characters returned by the callback
     * function.
     */
    function mapDomain(string, fn) {
      var parts = string.split('@');
      var result = '';
      if (parts.length > 1) {
        // In email addresses, only the domain name should be punycoded. Leave
        // the local part (i.e. everything up to `@`) intact.
        result = parts[0] + '@';
        string = parts[1];
      }
      // Avoid `split(regex)` for IE8 compatibility. See #17.
      string = string.replace(regexSeparators, '\x2E');
      var labels = string.split('.');
      var encoded = map(labels, fn).join('.');
      return result + encoded;
    }

    /**
     * Creates an array containing the numeric code points of each Unicode
     * character in the string. While JavaScript uses UCS-2 internally,
     * this function will convert a pair of surrogate halves (each of which
     * UCS-2 exposes as separate characters) into a single code point,
     * matching UTF-16.
     * @see `punycode.ucs2.encode`
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode.ucs2
     * @name decode
     * @param {String} string The Unicode input string (UCS-2).
     * @returns {Array} The new array of code points.
     */
    function ucs2decode(string) {
      var output = [],
          counter = 0,
          length = string.length,
          value,
          extra;
      while (counter < length) {
        value = string.charCodeAt(counter++);
        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
          // high surrogate, and there is a next character
          extra = string.charCodeAt(counter++);
          if ((extra & 0xFC00) == 0xDC00) { // low surrogate
            output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
          } else {
            // unmatched surrogate; only append this code unit, in case the next
            // code unit is the high surrogate of a surrogate pair
            output.push(value);
            counter--;
          }
        } else {
          output.push(value);
        }
      }
      return output;
    }

    /**
     * Creates a string based on an array of numeric code points.
     * @see `punycode.ucs2.decode`
     * @memberOf punycode.ucs2
     * @name encode
     * @param {Array} codePoints The array of numeric code points.
     * @returns {String} The new Unicode string (UCS-2).
     */
    function ucs2encode(array) {
      return map(array, function(value) {
        var output = '';
        if (value > 0xFFFF) {
          value -= 0x10000;
          output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
          value = 0xDC00 | value & 0x3FF;
        }
        output += stringFromCharCode(value);
        return output;
      }).join('');
    }

    /**
     * Converts a basic code point into a digit/integer.
     * @see `digitToBasic()`
     * @private
     * @param {Number} codePoint The basic numeric code point value.
     * @returns {Number} The numeric value of a basic code point (for use in
     * representing integers) in the range `0` to `base - 1`, or `base` if
     * the code point does not represent a value.
     */
    function basicToDigit(codePoint) {
      if (codePoint - 48 < 10) {
        return codePoint - 22;
      }
      if (codePoint - 65 < 26) {
        return codePoint - 65;
      }
      if (codePoint - 97 < 26) {
        return codePoint - 97;
      }
      return base;
    }

    /**
     * Converts a digit/integer into a basic code point.
     * @see `basicToDigit()`
     * @private
     * @param {Number} digit The numeric value of a basic code point.
     * @returns {Number} The basic code point whose value (when used for
     * representing integers) is `digit`, which needs to be in the range
     * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
     * used; else, the lowercase form is used. The behavior is undefined
     * if `flag` is non-zero and `digit` has no uppercase form.
     */
    function digitToBasic(digit, flag) {
      //  0..25 map to ASCII a..z or A..Z
      // 26..35 map to ASCII 0..9
      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    }

    /**
     * Bias adaptation function as per section 3.4 of RFC 3492.
     * http://tools.ietf.org/html/rfc3492#section-3.4
     * @private
     */
    function adapt(delta, numPoints, firstTime) {
      var k = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);
      for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
        delta = floor(delta / baseMinusTMin);
      }
      return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    }

    /**
     * Converts a Punycode string of ASCII-only symbols to a string of Unicode
     * symbols.
     * @memberOf punycode
     * @param {String} input The Punycode string of ASCII-only symbols.
     * @returns {String} The resulting string of Unicode symbols.
     */
    function decode(input) {
      // Don't use UCS-2
      var output = [],
          inputLength = input.length,
          out,
          i = 0,
          n = initialN,
          bias = initialBias,
          basic,
          j,
          index,
          oldi,
          w,
          k,
          digit,
          t,
          /** Cached calculation results */
          baseMinusT;

      // Handle the basic code points: let `basic` be the number of input code
      // points before the last delimiter, or `0` if there is none, then copy
      // the first basic code points to the output.

      basic = input.lastIndexOf(delimiter);
      if (basic < 0) {
        basic = 0;
      }

      for (j = 0; j < basic; ++j) {
        // if it's not a basic code point
        if (input.charCodeAt(j) >= 0x80) {
          error('not-basic');
        }
        output.push(input.charCodeAt(j));
      }

      // Main decoding loop: start just after the last delimiter if any basic code
      // points were copied; start at the beginning otherwise.

      for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

        // `index` is the index of the next character to be consumed.
        // Decode a generalized variable-length integer into `delta`,
        // which gets added to `i`. The overflow checking is easier
        // if we increase `i` as we go, then subtract off its starting
        // value at the end to obtain `delta`.
        for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

          if (index >= inputLength) {
            error('invalid-input');
          }

          digit = basicToDigit(input.charCodeAt(index++));

          if (digit >= base || digit > floor((maxInt - i) / w)) {
            error('overflow');
          }

          i += digit * w;
          t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

          if (digit < t) {
            break;
          }

          baseMinusT = base - t;
          if (w > floor(maxInt / baseMinusT)) {
            error('overflow');
          }

          w *= baseMinusT;

        }

        out = output.length + 1;
        bias = adapt(i - oldi, out, oldi == 0);

        // `i` was supposed to wrap around from `out` to `0`,
        // incrementing `n` each time, so we'll fix that now:
        if (floor(i / out) > maxInt - n) {
          error('overflow');
        }

        n += floor(i / out);
        i %= out;

        // Insert `n` at position `i` of the output
        output.splice(i++, 0, n);

      }

      return ucs2encode(output);
    }

    /**
     * Converts a string of Unicode symbols (e.g. a domain name label) to a
     * Punycode string of ASCII-only symbols.
     * @memberOf punycode
     * @param {String} input The string of Unicode symbols.
     * @returns {String} The resulting Punycode string of ASCII-only symbols.
     */
    function encode(input) {
      var n,
          delta,
          handledCPCount,
          basicLength,
          bias,
          j,
          m,
          q,
          k,
          t,
          currentValue,
          output = [],
          /** `inputLength` will hold the number of code points in `input`. */
          inputLength,
          /** Cached calculation results */
          handledCPCountPlusOne,
          baseMinusT,
          qMinusT;

      // Convert the input in UCS-2 to Unicode
      input = ucs2decode(input);

      // Cache the length
      inputLength = input.length;

      // Initialize the state
      n = initialN;
      delta = 0;
      bias = initialBias;

      // Handle the basic code points
      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];
        if (currentValue < 0x80) {
          output.push(stringFromCharCode(currentValue));
        }
      }

      handledCPCount = basicLength = output.length;

      // `handledCPCount` is the number of code points that have been handled;
      // `basicLength` is the number of basic code points.

      // Finish the basic string - if it is not empty - with a delimiter
      if (basicLength) {
        output.push(delimiter);
      }

      // Main encoding loop:
      while (handledCPCount < inputLength) {

        // All non-basic code points < n have been handled already. Find the next
        // larger one:
        for (m = maxInt, j = 0; j < inputLength; ++j) {
          currentValue = input[j];
          if (currentValue >= n && currentValue < m) {
            m = currentValue;
          }
        }

        // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
        // but guard against overflow
        handledCPCountPlusOne = handledCPCount + 1;
        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
          error('overflow');
        }

        delta += (m - n) * handledCPCountPlusOne;
        n = m;

        for (j = 0; j < inputLength; ++j) {
          currentValue = input[j];

          if (currentValue < n && ++delta > maxInt) {
            error('overflow');
          }

          if (currentValue == n) {
            // Represent delta as a generalized variable-length integer
            for (q = delta, k = base; /* no condition */; k += base) {
              t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
              if (q < t) {
                break;
              }
              qMinusT = q - t;
              baseMinusT = base - t;
              output.push(
                stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
              );
              q = floor(qMinusT / baseMinusT);
            }

            output.push(stringFromCharCode(digitToBasic(q, 0)));
            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
            delta = 0;
            ++handledCPCount;
          }
        }

        ++delta;
        ++n;

      }
      return output.join('');
    }

    /**
     * Converts a Punycode string representing a domain name or an email address
     * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
     * it doesn't matter if you call it on a string that has already been
     * converted to Unicode.
     * @memberOf punycode
     * @param {String} input The Punycoded domain name or email address to
     * convert to Unicode.
     * @returns {String} The Unicode representation of the given Punycode
     * string.
     */
    function toUnicode(input) {
      return mapDomain(input, function(string) {
        return regexPunycode.test(string)
          ? decode(string.slice(4).toLowerCase())
          : string;
      });
    }

    /**
     * Converts a Unicode string representing a domain name or an email address to
     * Punycode. Only the non-ASCII parts of the domain name will be converted,
     * i.e. it doesn't matter if you call it with a domain that's already in
     * ASCII.
     * @memberOf punycode
     * @param {String} input The domain name or email address to convert, as a
     * Unicode string.
     * @returns {String} The Punycode representation of the given domain name or
     * email address.
     */
    function toASCII(input) {
      return mapDomain(input, function(string) {
        return regexNonASCII.test(string)
          ? 'xn--' + encode(string)
          : string;
      });
    }

    /*--------------------------------------------------------------------------*/

    /** Define the public API */
    punycode = {
      /**
       * A string representing the current Punycode.js version number.
       * @memberOf punycode
       * @type String
       */
      'version': '1.3.2',
      /**
       * An object of methods to convert from JavaScript's internal character
       * representation (UCS-2) to Unicode code points, and back.
       * @see <https://mathiasbynens.be/notes/javascript-encoding>
       * @memberOf punycode
       * @type Object
       */
      'ucs2': {
        'decode': ucs2decode,
        'encode': ucs2encode
      },
      'decode': decode,
      'encode': encode,
      'toASCII': toASCII,
      'toUnicode': toUnicode
    };

    /** Expose `punycode` */
    // Some AMD build optimizers, like r.js, check for specific condition patterns
    // like the following:
    if (
      true
    ) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
        return punycode;
      }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if (freeExports && freeModule) {
      if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
        freeModule.exports = punycode;
      } else { // in Narwhal or RingoJS v0.7.0-
        for (key in punycode) {
          punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
        }
      }
    } else { // in Rhino or a web browser
      root.punycode = punycode;
    }

  }(this));

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(233)(module), (function() { return this; }())))

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  exports.decode = exports.parse = __webpack_require__(274);
  exports.encode = exports.stringify = __webpack_require__(275);


/***/ },
/* 274 */
/***/ function(module, exports) {

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  'use strict';

  // If obj.hasOwnProperty has been overridden, then calling
  // obj.hasOwnProperty(prop) will break.
  // See: https://github.com/joyent/node/issues/1707
  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  module.exports = function(qs, sep, eq, options) {
    sep = sep || '&';
    eq = eq || '=';
    var obj = {};

    if (typeof qs !== 'string' || qs.length === 0) {
      return obj;
    }

    var regexp = /\+/g;
    qs = qs.split(sep);

    var maxKeys = 1000;
    if (options && typeof options.maxKeys === 'number') {
      maxKeys = options.maxKeys;
    }

    var len = qs.length;
    // maxKeys <= 0 means that we should not limit keys count
    if (maxKeys > 0 && len > maxKeys) {
      len = maxKeys;
    }

    for (var i = 0; i < len; ++i) {
      var x = qs[i].replace(regexp, '%20'),
          idx = x.indexOf(eq),
          kstr, vstr, k, v;

      if (idx >= 0) {
        kstr = x.substr(0, idx);
        vstr = x.substr(idx + 1);
      } else {
        kstr = x;
        vstr = '';
      }

      k = decodeURIComponent(kstr);
      v = decodeURIComponent(vstr);

      if (!hasOwnProperty(obj, k)) {
        obj[k] = v;
      } else if (Array.isArray(obj[k])) {
        obj[k].push(v);
      } else {
        obj[k] = [obj[k], v];
      }
    }

    return obj;
  };


/***/ },
/* 275 */
/***/ function(module, exports) {

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  'use strict';

  var stringifyPrimitive = function(v) {
    switch (typeof v) {
      case 'string':
        return v;

      case 'boolean':
        return v ? 'true' : 'false';

      case 'number':
        return isFinite(v) ? v : '';

      default:
        return '';
    }
  };

  module.exports = function(obj, sep, eq, name) {
    sep = sep || '&';
    eq = eq || '=';
    if (obj === null) {
      obj = undefined;
    }

    if (typeof obj === 'object') {
      return Object.keys(obj).map(function(k) {
        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
        if (Array.isArray(obj[k])) {
          return obj[k].map(function(v) {
            return ks + encodeURIComponent(stringifyPrimitive(v));
          }).join(sep);
        } else {
          return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
        }
      }).join(sep);

    }

    if (!name) return '';
    return encodeURIComponent(stringifyPrimitive(name)) + eq +
           encodeURIComponent(stringifyPrimitive(obj));
  };


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var _ = __webpack_require__(192);
  var assert = __webpack_require__(198);
  var ranges = Symbol();

  function mergeIntervals(intervals) {
    var stack = [[-Infinity, -Infinity]];
    _.forEach(_.sortBy(intervals, function (x) {
      return x[0];
    }), function (interval) {
      var lastInterval = stack.pop();
      if (interval[0] <= lastInterval[1] + 1) {
        stack.push([lastInterval[0], Math.max(interval[1], lastInterval[1])]);
      } else {
        stack.push(lastInterval);
        stack.push(interval);
      }
    });
    return stack.slice(1);
  }

  var RangeSet = function () {
    function RangeSet() {
      _classCallCheck(this, RangeSet);

      this.reset();
    }

    _createClass(RangeSet, [{
      key: 'reset',
      value: function reset() {
        this[ranges] = [];
      }
    }, {
      key: 'serialize',
      value: function serialize() {
        return this[ranges].map(function (range) {
          return range[0].toString() + '-' + range[1].toString();
        }).join(',');
      }
    }, {
      key: 'addRange',
      value: function addRange(start, end) {
        assert(start <= end, 'invalid range');
        this[ranges] = mergeIntervals(this[ranges].concat([[start, end]]));
      }
    }, {
      key: 'addValue',
      value: function addValue(value) {
        this.addRange(value, value);
      }
    }, {
      key: 'parseAndAddRanges',
      value: function parseAndAddRanges(rangesString) {
        var _this = this;

        var rangeStrings = rangesString.split(',');
        _.forEach(rangeStrings, function (rangeString) {
          var range = rangeString.split('-').map(Number);
          _this.addRange(range[0], range.length === 1 ? range[0] : range[1]);
        });
      }
    }, {
      key: 'containsRange',
      value: function containsRange(start, end) {
        return _.some(this[ranges], function (range) {
          return range[0] <= start && range[1] >= end;
        });
      }
    }, {
      key: 'containsValue',
      value: function containsValue(value) {
        return this.containsRange(value, value);
      }
    }]);

    return RangeSet;
  }();

  module.exports.RangeSet = RangeSet;

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var util = __webpack_require__(199);
  var browserHacks = __webpack_require__(278);

  // this is needed because extending builtins doesn't work in babel 6.x
  function extendableBuiltin(cls) {
    function ExtendableBuiltin() {
      cls.apply(this, arguments);
    }
    ExtendableBuiltin.prototype = Object.create(cls.prototype);
    browserHacks.setPrototypeOf(ExtendableBuiltin, cls);
    return ExtendableBuiltin;
  }

  var RippleError = function (_extendableBuiltin) {
    _inherits(RippleError, _extendableBuiltin);

    function RippleError(message, data) {
      _classCallCheck(this, RippleError);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(RippleError).call(this, message));

      _this.name = browserHacks.getConstructorName(_this);
      _this.message = message;
      _this.data = data;
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, _this.constructor.name);
      }
      return _this;
    }

    _createClass(RippleError, [{
      key: 'toString',
      value: function toString() {
        var result = '[' + this.name + '(' + this.message;
        if (this.data) {
          result += ', ' + util.inspect(this.data);
        }
        result += ')]';
        return result;
      }

      /* console.log in node uses util.inspect on object, and util.inspect allows
      us to cutomize its output:
      https://nodejs.org/api/util.html#util_custom_inspect_function_on_objects */

    }, {
      key: 'inspect',
      value: function inspect() {
        return this.toString();
      }
    }]);

    return RippleError;
  }(extendableBuiltin(Error));

  var RippledError = function (_RippleError) {
    _inherits(RippledError, _RippleError);

    function RippledError() {
      _classCallCheck(this, RippledError);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(RippledError).apply(this, arguments));
    }

    return RippledError;
  }(RippleError);

  var UnexpectedError = function (_RippleError2) {
    _inherits(UnexpectedError, _RippleError2);

    function UnexpectedError() {
      _classCallCheck(this, UnexpectedError);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(UnexpectedError).apply(this, arguments));
    }

    return UnexpectedError;
  }(RippleError);

  var LedgerVersionError = function (_RippleError3) {
    _inherits(LedgerVersionError, _RippleError3);

    function LedgerVersionError() {
      _classCallCheck(this, LedgerVersionError);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(LedgerVersionError).apply(this, arguments));
    }

    return LedgerVersionError;
  }(RippleError);

  var ConnectionError = function (_RippleError4) {
    _inherits(ConnectionError, _RippleError4);

    function ConnectionError() {
      _classCallCheck(this, ConnectionError);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(ConnectionError).apply(this, arguments));
    }

    return ConnectionError;
  }(RippleError);

  var NotConnectedError = function (_ConnectionError) {
    _inherits(NotConnectedError, _ConnectionError);

    function NotConnectedError() {
      _classCallCheck(this, NotConnectedError);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(NotConnectedError).apply(this, arguments));
    }

    return NotConnectedError;
  }(ConnectionError);

  var DisconnectedError = function (_ConnectionError2) {
    _inherits(DisconnectedError, _ConnectionError2);

    function DisconnectedError() {
      _classCallCheck(this, DisconnectedError);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(DisconnectedError).apply(this, arguments));
    }

    return DisconnectedError;
  }(ConnectionError);

  var TimeoutError = function (_ConnectionError3) {
    _inherits(TimeoutError, _ConnectionError3);

    function TimeoutError() {
      _classCallCheck(this, TimeoutError);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(TimeoutError).apply(this, arguments));
    }

    return TimeoutError;
  }(ConnectionError);

  var ResponseFormatError = function (_ConnectionError4) {
    _inherits(ResponseFormatError, _ConnectionError4);

    function ResponseFormatError() {
      _classCallCheck(this, ResponseFormatError);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(ResponseFormatError).apply(this, arguments));
    }

    return ResponseFormatError;
  }(ConnectionError);

  var ValidationError = function (_RippleError5) {
    _inherits(ValidationError, _RippleError5);

    function ValidationError() {
      _classCallCheck(this, ValidationError);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(ValidationError).apply(this, arguments));
    }

    return ValidationError;
  }(RippleError);

  var NotFoundError = function (_RippleError6) {
    _inherits(NotFoundError, _RippleError6);

    function NotFoundError(message) {
      _classCallCheck(this, NotFoundError);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(NotFoundError).call(this, message || 'Not found'));
    }

    return NotFoundError;
  }(RippleError);

  var MissingLedgerHistoryError = function (_RippleError7) {
    _inherits(MissingLedgerHistoryError, _RippleError7);

    function MissingLedgerHistoryError(message) {
      _classCallCheck(this, MissingLedgerHistoryError);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(MissingLedgerHistoryError).call(this, message || 'Server is missing ledger history in the specified range'));
    }

    return MissingLedgerHistoryError;
  }(RippleError);

  var PendingLedgerVersionError = function (_RippleError8) {
    _inherits(PendingLedgerVersionError, _RippleError8);

    function PendingLedgerVersionError(message) {
      _classCallCheck(this, PendingLedgerVersionError);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(PendingLedgerVersionError).call(this, message || 'maxLedgerVersion is greater than server\'s' + ' most recent validated ledger'));
    }

    return PendingLedgerVersionError;
  }(RippleError);

  module.exports = {
    RippleError: RippleError,
    UnexpectedError: UnexpectedError,
    ConnectionError: ConnectionError,
    RippledError: RippledError,
    NotConnectedError: NotConnectedError,
    DisconnectedError: DisconnectedError,
    TimeoutError: TimeoutError,
    ResponseFormatError: ResponseFormatError,
    ValidationError: ValidationError,
    NotFoundError: NotFoundError,
    PendingLedgerVersionError: PendingLedgerVersionError,
    MissingLedgerHistoryError: MissingLedgerHistoryError,
    LedgerVersionError: LedgerVersionError
  };

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {'use strict';

  function setPrototypeOf(object, prototype) {
    // Object.setPrototypeOf not supported on Internet Explorer 9
    /* eslint-disable */
    Object.setPrototypeOf ? Object.setPrototypeOf(object, prototype) : object.__proto__ = prototype;
    /* eslint-enable */
  }

  function getConstructorName(object) {
    // hack for internet explorer
    return process.browser ? object.constructor.toString().match(/^function\s+([^(]*)/)[1] : object.constructor.name;
  }

  module.exports = {
    getConstructorName: getConstructorName,
    setPrototypeOf: setPrototypeOf
  };
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(191)))

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {
  /**
   * Module dependencies.
   */

  var net = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"net\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
  var tls = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"tls\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
  var url = __webpack_require__(271);
  var extend = __webpack_require__(280);
  var Agent = __webpack_require__(281);
  var inherits = __webpack_require__(199).inherits;
  var debug = __webpack_require__(307)('https-proxy-agent');

  /**
   * Module exports.
   */

  module.exports = HttpsProxyAgent;

  /**
   * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to the
   * specified "HTTP(s) proxy server" in order to proxy HTTPS requests.
   *
   * @api public
   */

  function HttpsProxyAgent (opts) {
    if (!(this instanceof HttpsProxyAgent)) return new HttpsProxyAgent(opts);
    if ('string' == typeof opts) opts = url.parse(opts);
    if (!opts) throw new Error('an HTTP(S) proxy server `host` and `port` must be specified!');
    debug('creating new HttpsProxyAgent instance: %o', opts);
    Agent.call(this, connect);

    var proxy = extend({}, opts);

    // if `true`, then connect to the proxy server over TLS. defaults to `false`.
    this.secureProxy = proxy.protocol ? /^https:?$/i.test(proxy.protocol) : false;

    // prefer `hostname` over `host`, and set the `port` if needed
    proxy.host = proxy.hostname || proxy.host;
    proxy.port = +proxy.port || (this.secureProxy ? 443 : 80);

    if (proxy.host && proxy.path) {
      // if both a `host` and `path` are specified then it's most likely the
      // result of a `url.parse()` call... we need to remove the `path` portion so
      // that `net.connect()` doesn't attempt to open that as a unix socket file.
      delete proxy.path;
      delete proxy.pathname;
    }

    this.proxy = proxy;
  }
  inherits(HttpsProxyAgent, Agent);

  /**
   * Called when the node-core HTTP client library is creating a new HTTP request.
   *
   * @api public
   */

  function connect (req, opts, fn) {

    var proxy = this.proxy;

    // create a socket connection to the proxy server
    var socket;
    if (this.secureProxy) {
      socket = tls.connect(proxy);
    } else {
      socket = net.connect(proxy);
    }

    // we need to buffer any HTTP traffic that happens with the proxy before we get
    // the CONNECT response, so that if the response is anything other than an "200"
    // response code, then we can re-play the "data" events on the socket once the
    // HTTP parser is hooked up...
    var buffers = [];
    var buffersLength = 0;

    function read () {
      var b = socket.read();
      if (b) ondata(b);
      else socket.once('readable', read);
    }

    function cleanup () {
      socket.removeListener('data', ondata);
      socket.removeListener('end', onend);
      socket.removeListener('error', onerror);
      socket.removeListener('close', onclose);
      socket.removeListener('readable', read);
    }

    function onclose (err) {
      debug('onclose had error %o', err);
    }

    function onend () {
      debug('onend');
    }

    function onerror (err) {
      cleanup();
      fn(err);
    }

    function ondata (b) {
      buffers.push(b);
      buffersLength += b.length;
      var buffered = Buffer.concat(buffers, buffersLength);
      var str = buffered.toString('ascii');

      if (!~str.indexOf('\r\n\r\n')) {
        // keep buffering
        debug('have not received end of HTTP headers yet...');
        if (socket.read) {
          read();
        } else {
          socket.once('data', ondata);
        }
        return;
      }

      var firstLine = str.substring(0, str.indexOf('\r\n'));
      var statusCode = +firstLine.split(' ')[1];
      debug('got proxy server response: %o', firstLine);

      if (200 == statusCode) {
        // 200 Connected status code!
        var sock = socket;

        // nullify the buffered data since we won't be needing it
        buffers = buffered = null;

        if (opts.secureEndpoint) {
          // since the proxy is connecting to an SSL server, we have
          // to upgrade this socket connection to an SSL connection
          debug('upgrading proxy-connected socket to TLS connection: %o', opts.host);
          opts.socket = socket;
          opts.servername = opts.host;
          opts.host = null;
          opts.hostname = null;
          opts.port = null;
          sock = tls.connect(opts);
        }

        cleanup();
        fn(null, sock);
      } else {
        // some other status code that's not 200... need to re-play the HTTP header
        // "data" events onto the socket once the HTTP machinery is attached so that
        // the user can parse and handle the error status code
        cleanup();

        // save a reference to the concat'd Buffer for the `onsocket` callback
        buffers = buffered;

        // need to wait for the "socket" event to re-play the "data" events
        req.once('socket', onsocket);
        fn(null, socket);
      }
    }

    function onsocket (socket) {
      // replay the "buffers" Buffer onto the `socket`, since at this point
      // the HTTP module machinery has been hooked up for the user
      if ('function' == typeof socket.ondata) {
        // node <= v0.11.3, the `ondata` function is set on the socket
        socket.ondata(buffers, 0, buffers.length);
      } else if (socket.listeners('data').length > 0) {
        // node > v0.11.3, the "data" event is listened for directly
        socket.emit('data', buffers);
      } else {
        // never?
        throw new Error('should not happen...');
      }

      // nullify the cached Buffer instance
      buffers = null;
    }

    socket.on('error', onerror);
    socket.on('close', onclose);
    socket.on('end', onend);

    if (socket.read) {
      read();
    } else {
      socket.once('data', ondata);
    }

    var hostname = opts.host + ':' + opts.port;
    var msg = 'CONNECT ' + hostname + ' HTTP/1.1\r\n';
    var auth = proxy.auth;
    if (auth) {
      msg += 'Proxy-Authorization: Basic ' + new Buffer(auth).toString('base64') + '\r\n';
    }
    msg += 'Host: ' + hostname + '\r\n' +
           'Connection: close\r\n' +
           '\r\n';
    socket.write(msg);
  };

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 280 */
/***/ function(module, exports) {

  'use strict';

  var hasOwn = Object.prototype.hasOwnProperty;
  var toStr = Object.prototype.toString;

  var isArray = function isArray(arr) {
    if (typeof Array.isArray === 'function') {
      return Array.isArray(arr);
    }

    return toStr.call(arr) === '[object Array]';
  };

  var isPlainObject = function isPlainObject(obj) {
    if (!obj || toStr.call(obj) !== '[object Object]') {
      return false;
    }

    var hasOwnConstructor = hasOwn.call(obj, 'constructor');
    var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
    // Not own constructor property must be Object
    if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
      return false;
    }

    // Own properties are enumerated firstly, so to speed up,
    // if last one is own, then all properties are own.
    var key;
    for (key in obj) {/**/}

    return typeof key === 'undefined' || hasOwn.call(obj, key);
  };

  module.exports = function extend() {
    var options, name, src, copy, copyIsArray, clone,
      target = arguments[0],
      i = 1,
      length = arguments.length,
      deep = false;

    // Handle a deep copy situation
    if (typeof target === 'boolean') {
      deep = target;
      target = arguments[1] || {};
      // skip the boolean and the target
      i = 2;
    } else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {
      target = {};
    }

    for (; i < length; ++i) {
      options = arguments[i];
      // Only deal with non-null/undefined values
      if (options != null) {
        // Extend the base object
        for (name in options) {
          src = target[name];
          copy = options[name];

          // Prevent never-ending loop
          if (target !== copy) {
            // Recurse if we're merging plain objects or arrays
            if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
              if (copyIsArray) {
                copyIsArray = false;
                clone = src && isArray(src) ? src : [];
              } else {
                clone = src && isPlainObject(src) ? src : {};
              }

              // Never move original objects, clone them
              target[name] = extend(deep, clone, copy);

            // Don't bring in undefined values
            } else if (typeof copy !== 'undefined') {
              target[name] = copy;
            }
          }
        }
      }
    }

    // Return the modified object
    return target;
  };



/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {
  /**
   * Module dependencies.
   */

  __webpack_require__(282);
  var extend = __webpack_require__(280);
  var inherits = __webpack_require__(199).inherits;
  var EventEmitter = __webpack_require__(193).EventEmitter;

  /**
   * Module exports.
   */

  module.exports = Agent;

  /**
   * Base `http.Agent` implementation.
   * No pooling/keep-alive is implemented by default.
   *
   * @param {Function} callback
   * @api public
   */

  function Agent (callback) {
    if (!(this instanceof Agent)) return new Agent(callback);
    if ('function' != typeof callback) throw new Error('Must pass a "callback function"');
    EventEmitter.call(this);
    this.callback = callback;
  }
  inherits(Agent, EventEmitter);

  /**
   * Called by node-core's "_http_client.js" module when creating
   * a new HTTP request with this Agent instance.
   *
   * @api public
   */

  Agent.prototype.addRequest = function (req, host, port, localAddress) {
    var opts;
    if ('object' == typeof host) {
      // >= v0.11.x API
      opts = extend({}, req._options, host);
    } else {
      // <= v0.10.x API
      opts = extend({}, req._options, { host: host, port: port });
      if (null != localAddress) {
        opts.localAddress = localAddress;
      }
    }

    if (opts.host && opts.path) {
      // if both a `host` and `path` are specified then it's most likely the
      // result of a `url.parse()` call... we need to remove the `path` portion so
      // that `net.connect()` doesn't attempt to open that as a unix socket file.
      delete opts.path;
    }

    // set default `port` if none was explicitly specified
    if (null == opts.port) {
      opts.port = opts.secureEndpoint ? 443 : 80;
    }

    delete opts.agent;
    delete opts.hostname;
    delete opts._defaultAgent;
    delete opts.defaultPort;
    delete opts.createConnection;

    // hint to use "Connection: close"
    // XXX: non-documented `http` module API :(
    req._last = true;
    req.shouldKeepAlive = false;

    // clean up a bit of memory since we're no longer using this
    req._options = null;

    // create the `net.Socket` instance
    var sync = true;
    this.callback(req, opts, function (err, socket) {
      function emitErr () {
        req.emit('error', err);
        // For Safety. Some additional errors might fire later on
        // and we need to make sure we don't double-fire the error event.
        req._hadError = true;
      }
      if (err) {
        if (sync) {
          // need to defer the "error" event, when sync, because by now the `req`
          // instance hasn't event been passed back to the user yet...
          process.nextTick(emitErr);
        } else {
          emitErr();
        }
      } else {
        req.onSocket(socket);
      }
    });
    sync = false;
  };

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(191)))

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {var url = __webpack_require__(271);
  var http = __webpack_require__(283);
  var https = __webpack_require__(305);
  var semver = __webpack_require__(306);
  var inherits = __webpack_require__(199).inherits;


  // we only need to patch the `http.request()` and
  // `http.ClientRequest` on older versions of Node.js
  if (semver.lt(process.version, '0.11.8')) {
    // subclass the native ClientRequest to include the
    // passed in `options` object.
    http.ClientRequest = (function (_ClientRequest) {
      function ClientRequest (options, cb) {
        this._options = options;
        _ClientRequest.call(this, options, cb);
      }
      inherits(ClientRequest, _ClientRequest);

      return ClientRequest;
    })(http.ClientRequest);


    // need to re-define the `request()` method, since on node v0.8/v0.10
    // the closure-local ClientRequest is used, rather than the monkey
    // patched version we have created here.
    http.request = (function (request) {
      return function (options, cb) {
        if (typeof options === 'string') {
          options = url.parse(options);
        }
        if (options.protocol && options.protocol !== 'http:') {
          throw new Error('Protocol:' + options.protocol + ' not supported.');
        }
        return new http.ClientRequest(options, cb);
      };
    })(http.request);
  }


  // this currently needs to be applied to all Node.js versions
  // (v0.8.x, v0.10.x, v0.12.x), in order to determine if the `req`
  // is an HTTP or HTTPS request. There is currently no PR attempting
  // to move this property upstream.
  https.request = (function (request) {
    return function (options, cb) {
      if (typeof options === 'string') {
        options = url.parse(options);
      }
      if (null == options.port) options.port = 443;
      options.secureEndpoint = true;
      return request.call(https, options, cb);
    };
  })(https.request);

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(191)))

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

  var http = module.exports;
  var EventEmitter = __webpack_require__(193).EventEmitter;
  var Request = __webpack_require__(284);
  var url = __webpack_require__(271)

  http.request = function (params, cb) {
      if (typeof params === 'string') {
          params = url.parse(params)
      }
      if (!params) params = {};
      if (!params.host && !params.port) {
          params.port = parseInt(window.location.port, 10);
      }
      if (!params.host && params.hostname) {
          params.host = params.hostname;
      }

      if (!params.protocol) {
          if (params.scheme) {
              params.protocol = params.scheme + ':';
          } else {
              params.protocol = window.location.protocol;
          }
      }

      if (!params.host) {
          params.host = window.location.hostname || window.location.host;
      }
      if (/:/.test(params.host)) {
          if (!params.port) {
              params.port = params.host.split(':')[1];
          }
          params.host = params.host.split(':')[0];
      }
      if (!params.port) params.port = params.protocol == 'https:' ? 443 : 80;

      var req = new Request(new xhrHttp, params);
      if (cb) req.on('response', cb);
      return req;
  };

  http.get = function (params, cb) {
      params.method = 'GET';
      var req = http.request(params, cb);
      req.end();
      return req;
  };

  http.Agent = function () {};
  http.Agent.defaultMaxSockets = 4;

  var xhrHttp = (function () {
      if (typeof window === 'undefined') {
          throw new Error('no window object present');
      }
      else if (window.XMLHttpRequest) {
          return window.XMLHttpRequest;
      }
      else if (window.ActiveXObject) {
          var axs = [
              'Msxml2.XMLHTTP.6.0',
              'Msxml2.XMLHTTP.3.0',
              'Microsoft.XMLHTTP'
          ];
          for (var i = 0; i < axs.length; i++) {
              try {
                  var ax = new(window.ActiveXObject)(axs[i]);
                  return function () {
                      if (ax) {
                          var ax_ = ax;
                          ax = null;
                          return ax_;
                      }
                      else {
                          return new(window.ActiveXObject)(axs[i]);
                      }
                  };
              }
              catch (e) {}
          }
          throw new Error('ajax not supported in this browser')
      }
      else {
          throw new Error('ajax not supported in this browser');
      }
  })();

  http.STATUS_CODES = {
      100 : 'Continue',
      101 : 'Switching Protocols',
      102 : 'Processing',                 // RFC 2518, obsoleted by RFC 4918
      200 : 'OK',
      201 : 'Created',
      202 : 'Accepted',
      203 : 'Non-Authoritative Information',
      204 : 'No Content',
      205 : 'Reset Content',
      206 : 'Partial Content',
      207 : 'Multi-Status',               // RFC 4918
      300 : 'Multiple Choices',
      301 : 'Moved Permanently',
      302 : 'Moved Temporarily',
      303 : 'See Other',
      304 : 'Not Modified',
      305 : 'Use Proxy',
      307 : 'Temporary Redirect',
      400 : 'Bad Request',
      401 : 'Unauthorized',
      402 : 'Payment Required',
      403 : 'Forbidden',
      404 : 'Not Found',
      405 : 'Method Not Allowed',
      406 : 'Not Acceptable',
      407 : 'Proxy Authentication Required',
      408 : 'Request Time-out',
      409 : 'Conflict',
      410 : 'Gone',
      411 : 'Length Required',
      412 : 'Precondition Failed',
      413 : 'Request Entity Too Large',
      414 : 'Request-URI Too Large',
      415 : 'Unsupported Media Type',
      416 : 'Requested Range Not Satisfiable',
      417 : 'Expectation Failed',
      418 : 'I\'m a teapot',              // RFC 2324
      422 : 'Unprocessable Entity',       // RFC 4918
      423 : 'Locked',                     // RFC 4918
      424 : 'Failed Dependency',          // RFC 4918
      425 : 'Unordered Collection',       // RFC 4918
      426 : 'Upgrade Required',           // RFC 2817
      428 : 'Precondition Required',      // RFC 6585
      429 : 'Too Many Requests',          // RFC 6585
      431 : 'Request Header Fields Too Large',// RFC 6585
      500 : 'Internal Server Error',
      501 : 'Not Implemented',
      502 : 'Bad Gateway',
      503 : 'Service Unavailable',
      504 : 'Gateway Time-out',
      505 : 'HTTP Version Not Supported',
      506 : 'Variant Also Negotiates',    // RFC 2295
      507 : 'Insufficient Storage',       // RFC 4918
      509 : 'Bandwidth Limit Exceeded',
      510 : 'Not Extended',               // RFC 2774
      511 : 'Network Authentication Required' // RFC 6585
  };

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

  var Stream = __webpack_require__(285);
  var Response = __webpack_require__(302);
  var Base64 = __webpack_require__(303);
  var inherits = __webpack_require__(304);

  var Request = module.exports = function (xhr, params) {
      var self = this;
      self.writable = true;
      self.xhr = xhr;
      self.body = [];

      self.uri = (params.protocol || 'http:') + '//'
          + params.host
          + (params.port ? ':' + params.port : '')
          + (params.path || '/')
      ;

      if (typeof params.withCredentials === 'undefined') {
          params.withCredentials = true;
      }

      try { xhr.withCredentials = params.withCredentials }
      catch (e) {}

      if (params.responseType) try { xhr.responseType = params.responseType }
      catch (e) {}

      xhr.open(
          params.method || 'GET',
          self.uri,
          true
      );

      xhr.onerror = function(event) {
          self.emit('error', new Error('Network error'));
      };

      self._headers = {};

      if (params.headers) {
          var keys = objectKeys(params.headers);
          for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (!self.isSafeRequestHeader(key)) continue;
              var value = params.headers[key];
              self.setHeader(key, value);
          }
      }

      if (params.auth) {
          //basic auth
          this.setHeader('Authorization', 'Basic ' + Base64.btoa(params.auth));
      }

      var res = new Response;
      res.on('close', function () {
          self.emit('close');
      });

      res.on('ready', function () {
          self.emit('response', res);
      });

      res.on('error', function (err) {
          self.emit('error', err);
      });

      xhr.onreadystatechange = function () {
          // Fix for IE9 bug
          // SCRIPT575: Could not complete the operation due to error c00c023f
          // It happens when a request is aborted, calling the success callback anyway with readyState === 4
          if (xhr.__aborted) return;
          res.handle(xhr);
      };
  };

  inherits(Request, Stream);

  Request.prototype.setHeader = function (key, value) {
      this._headers[key.toLowerCase()] = value
  };

  Request.prototype.getHeader = function (key) {
      return this._headers[key.toLowerCase()]
  };

  Request.prototype.removeHeader = function (key) {
      delete this._headers[key.toLowerCase()]
  };

  Request.prototype.write = function (s) {
      this.body.push(s);
  };

  Request.prototype.destroy = function (s) {
      this.xhr.__aborted = true;
      this.xhr.abort();
      this.emit('close');
  };

  Request.prototype.end = function (s) {
      if (s !== undefined) this.body.push(s);

      var keys = objectKeys(this._headers);
      for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = this._headers[key];
          if (isArray(value)) {
              for (var j = 0; j < value.length; j++) {
                  this.xhr.setRequestHeader(key, value[j]);
              }
          }
          else this.xhr.setRequestHeader(key, value)
      }

      if (this.body.length === 0) {
          this.xhr.send('');
      }
      else if (typeof this.body[0] === 'string') {
          this.xhr.send(this.body.join(''));
      }
      else if (isArray(this.body[0])) {
          var body = [];
          for (var i = 0; i < this.body.length; i++) {
              body.push.apply(body, this.body[i]);
          }
          this.xhr.send(body);
      }
      else if (/Array/.test(Object.prototype.toString.call(this.body[0]))) {
          var len = 0;
          for (var i = 0; i < this.body.length; i++) {
              len += this.body[i].length;
          }
          var body = new(this.body[0].constructor)(len);
          var k = 0;

          for (var i = 0; i < this.body.length; i++) {
              var b = this.body[i];
              for (var j = 0; j < b.length; j++) {
                  body[k++] = b[j];
              }
          }
          this.xhr.send(body);
      }
      else if (isXHR2Compatible(this.body[0])) {
          this.xhr.send(this.body[0]);
      }
      else {
          var body = '';
          for (var i = 0; i < this.body.length; i++) {
              body += this.body[i].toString();
          }
          this.xhr.send(body);
      }
  };

  // Taken from http://dxr.mozilla.org/mozilla/mozilla-central/content/base/src/nsXMLHttpRequest.cpp.html
  Request.unsafeHeaders = [
      "accept-charset",
      "accept-encoding",
      "access-control-request-headers",
      "access-control-request-method",
      "connection",
      "content-length",
      "cookie",
      "cookie2",
      "content-transfer-encoding",
      "date",
      "expect",
      "host",
      "keep-alive",
      "origin",
      "referer",
      "te",
      "trailer",
      "transfer-encoding",
      "upgrade",
      "user-agent",
      "via"
  ];

  Request.prototype.isSafeRequestHeader = function (headerName) {
      if (!headerName) return false;
      return indexOf(Request.unsafeHeaders, headerName.toLowerCase()) === -1;
  };

  var objectKeys = Object.keys || function (obj) {
      var keys = [];
      for (var key in obj) keys.push(key);
      return keys;
  };

  var isArray = Array.isArray || function (xs) {
      return Object.prototype.toString.call(xs) === '[object Array]';
  };

  var indexOf = function (xs, x) {
      if (xs.indexOf) return xs.indexOf(x);
      for (var i = 0; i < xs.length; i++) {
          if (xs[i] === x) return i;
      }
      return -1;
  };

  var isXHR2Compatible = function (obj) {
      if (typeof Blob !== 'undefined' && obj instanceof Blob) return true;
      if (typeof ArrayBuffer !== 'undefined' && obj instanceof ArrayBuffer) return true;
      if (typeof FormData !== 'undefined' && obj instanceof FormData) return true;
  };


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  module.exports = Stream;

  var EE = __webpack_require__(193).EventEmitter;
  var inherits = __webpack_require__(286);

  inherits(Stream, EE);
  Stream.Readable = __webpack_require__(287);
  Stream.Writable = __webpack_require__(298);
  Stream.Duplex = __webpack_require__(299);
  Stream.Transform = __webpack_require__(300);
  Stream.PassThrough = __webpack_require__(301);

  // Backwards-compat with node 0.4.x
  Stream.Stream = Stream;



  // old-style streams.  Note that the pipe method (the only relevant
  // part of this class) is overridden in the Readable class.

  function Stream() {
    EE.call(this);
  }

  Stream.prototype.pipe = function(dest, options) {
    var source = this;

    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }

    source.on('data', ondata);

    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }

    dest.on('drain', ondrain);

    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on('end', onend);
      source.on('close', onclose);
    }

    var didOnEnd = false;
    function onend() {
      if (didOnEnd) return;
      didOnEnd = true;

      dest.end();
    }


    function onclose() {
      if (didOnEnd) return;
      didOnEnd = true;

      if (typeof dest.destroy === 'function') dest.destroy();
    }

    // don't leave dangling pipes when there are errors.
    function onerror(er) {
      cleanup();
      if (EE.listenerCount(this, 'error') === 0) {
        throw er; // Unhandled stream error in pipe.
      }
    }

    source.on('error', onerror);
    dest.on('error', onerror);

    // remove all the event listeners that were added.
    function cleanup() {
      source.removeListener('data', ondata);
      dest.removeListener('drain', ondrain);

      source.removeListener('end', onend);
      source.removeListener('close', onclose);

      source.removeListener('error', onerror);
      dest.removeListener('error', onerror);

      source.removeListener('end', cleanup);
      source.removeListener('close', cleanup);

      dest.removeListener('close', cleanup);
    }

    source.on('end', cleanup);
    source.on('close', cleanup);

    dest.on('close', cleanup);

    dest.emit('pipe', source);

    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
  };


/***/ },
/* 286 */
/***/ function(module, exports) {

  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

  exports = module.exports = __webpack_require__(288);
  exports.Stream = __webpack_require__(285);
  exports.Readable = exports;
  exports.Writable = __webpack_require__(294);
  exports.Duplex = __webpack_require__(293);
  exports.Transform = __webpack_require__(296);
  exports.PassThrough = __webpack_require__(297);


/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  module.exports = Readable;

  /*<replacement>*/
  var isArray = __webpack_require__(289);
  /*</replacement>*/


  /*<replacement>*/
  var Buffer = __webpack_require__(204).Buffer;
  /*</replacement>*/

  Readable.ReadableState = ReadableState;

  var EE = __webpack_require__(193).EventEmitter;

  /*<replacement>*/
  if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
    return emitter.listeners(type).length;
  };
  /*</replacement>*/

  var Stream = __webpack_require__(285);

  /*<replacement>*/
  var util = __webpack_require__(290);
  util.inherits = __webpack_require__(291);
  /*</replacement>*/

  var StringDecoder;


  /*<replacement>*/
  var debug = __webpack_require__(292);
  if (debug && debug.debuglog) {
    debug = debug.debuglog('stream');
  } else {
    debug = function () {};
  }
  /*</replacement>*/


  util.inherits(Readable, Stream);

  function ReadableState(options, stream) {
    var Duplex = __webpack_require__(293);

    options = options || {};

    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    var hwm = options.highWaterMark;
    var defaultHwm = options.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

    // cast to ints.
    this.highWaterMark = ~~this.highWaterMark;

    this.buffer = [];
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;


    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex)
      this.objectMode = this.objectMode || !!options.readableObjectMode;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // when piping, we only care about 'readable' events that happen
    // after read()ing all the bytes and not getting any pushback.
    this.ranOut = false;

    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;

    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;

    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      if (!StringDecoder)
        StringDecoder = __webpack_require__(295).StringDecoder;
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }

  function Readable(options) {
    var Duplex = __webpack_require__(293);

    if (!(this instanceof Readable))
      return new Readable(options);

    this._readableState = new ReadableState(options, this);

    // legacy
    this.readable = true;

    Stream.call(this);
  }

  // Manually shove something into the read() buffer.
  // This returns true if the highWaterMark has not been hit yet,
  // similar to how Writable.write() returns true if you should
  // write() some more.
  Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;

    if (util.isString(chunk) && !state.objectMode) {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = new Buffer(chunk, encoding);
        encoding = '';
      }
    }

    return readableAddChunk(this, state, chunk, encoding, false);
  };

  // Unshift should *always* be something directly out of read()
  Readable.prototype.unshift = function(chunk) {
    var state = this._readableState;
    return readableAddChunk(this, state, chunk, '', true);
  };

  function readableAddChunk(stream, state, chunk, encoding, addToFront) {
    var er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (util.isNullOrUndefined(chunk)) {
      state.reading = false;
      if (!state.ended)
        onEofChunk(stream, state);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (state.ended && !addToFront) {
        var e = new Error('stream.push() after EOF');
        stream.emit('error', e);
      } else if (state.endEmitted && addToFront) {
        var e = new Error('stream.unshift() after end event');
        stream.emit('error', e);
      } else {
        if (state.decoder && !addToFront && !encoding)
          chunk = state.decoder.write(chunk);

        if (!addToFront)
          state.reading = false;

        // if we want the data now, just emit it.
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront)
            state.buffer.unshift(chunk);
          else
            state.buffer.push(chunk);

          if (state.needReadable)
            emitReadable(stream);
        }

        maybeReadMore(stream, state);
      }
    } else if (!addToFront) {
      state.reading = false;
    }

    return needMoreData(state);
  }



  // if it's past the high water mark, we can push in some more.
  // Also, if we have no data yet, we can stand some
  // more bytes.  This is to work around cases where hwm=0,
  // such as the repl.  Also, if the push() triggered a
  // readable event, and the user called read(largeNumber) such that
  // needReadable was set, then we ought to push more, so that another
  // 'readable' event will be triggered.
  function needMoreData(state) {
    return !state.ended &&
           (state.needReadable ||
            state.length < state.highWaterMark ||
            state.length === 0);
  }

  // backwards compatibility.
  Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder)
      StringDecoder = __webpack_require__(295).StringDecoder;
    this._readableState.decoder = new StringDecoder(enc);
    this._readableState.encoding = enc;
    return this;
  };

  // Don't raise the hwm > 128MB
  var MAX_HWM = 0x800000;
  function roundUpToNextPowerOf2(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      // Get the next highest power of 2
      n--;
      for (var p = 1; p < 32; p <<= 1) n |= n >> p;
      n++;
    }
    return n;
  }

  function howMuchToRead(n, state) {
    if (state.length === 0 && state.ended)
      return 0;

    if (state.objectMode)
      return n === 0 ? 0 : 1;

    if (isNaN(n) || util.isNull(n)) {
      // only flow one buffer at a time
      if (state.flowing && state.buffer.length)
        return state.buffer[0].length;
      else
        return state.length;
    }

    if (n <= 0)
      return 0;

    // If we're asking for more than the target buffer level,
    // then raise the water mark.  Bump up to the next highest
    // power of 2, to prevent increasing it excessively in tiny
    // amounts.
    if (n > state.highWaterMark)
      state.highWaterMark = roundUpToNextPowerOf2(n);

    // don't have that much.  return null, unless we've ended.
    if (n > state.length) {
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      } else
        return state.length;
    }

    return n;
  }

  // you can override either this method, or the async _read(n) below.
  Readable.prototype.read = function(n) {
    debug('read', n);
    var state = this._readableState;
    var nOrig = n;

    if (!util.isNumber(n) || n > 0)
      state.emittedReadable = false;

    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 &&
        state.needReadable &&
        (state.length >= state.highWaterMark || state.ended)) {
      debug('read: emitReadable', state.length, state.ended);
      if (state.length === 0 && state.ended)
        endReadable(this);
      else
        emitReadable(this);
      return null;
    }

    n = howMuchToRead(n, state);

    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
      if (state.length === 0)
        endReadable(this);
      return null;
    }

    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.

    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead);

    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
      doRead = true;
      debug('length less than watermark', doRead);
    }

    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
      doRead = false;
      debug('reading or ended', doRead);
    }

    if (doRead) {
      debug('do read');
      state.reading = true;
      state.sync = true;
      // if the length is currently zero, then we *need* a readable event.
      if (state.length === 0)
        state.needReadable = true;
      // call internal read method
      this._read(state.highWaterMark);
      state.sync = false;
    }

    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (doRead && !state.reading)
      n = howMuchToRead(nOrig, state);

    var ret;
    if (n > 0)
      ret = fromList(n, state);
    else
      ret = null;

    if (util.isNull(ret)) {
      state.needReadable = true;
      n = 0;
    }

    state.length -= n;

    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (state.length === 0 && !state.ended)
      state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended && state.length === 0)
      endReadable(this);

    if (!util.isNull(ret))
      this.emit('data', ret);

    return ret;
  };

  function chunkInvalid(state, chunk) {
    var er = null;
    if (!util.isBuffer(chunk) &&
        !util.isString(chunk) &&
        !util.isNullOrUndefined(chunk) &&
        !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    return er;
  }


  function onEofChunk(stream, state) {
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }
    state.ended = true;

    // emit 'readable' now to make sure it gets picked up.
    emitReadable(stream);
  }

  // Don't emit readable right away in sync mode, because this can trigger
  // another read() call => stack overflow.  This way, it might trigger
  // a nextTick recursion warning, but that's not so bad.
  function emitReadable(stream) {
    var state = stream._readableState;
    state.needReadable = false;
    if (!state.emittedReadable) {
      debug('emitReadable', state.flowing);
      state.emittedReadable = true;
      if (state.sync)
        process.nextTick(function() {
          emitReadable_(stream);
        });
      else
        emitReadable_(stream);
    }
  }

  function emitReadable_(stream) {
    debug('emit readable');
    stream.emit('readable');
    flow(stream);
  }


  // at this point, the user has presumably seen the 'readable' event,
  // and called read() to consume some data.  that may have triggered
  // in turn another _read(n) call, in which case reading = true if
  // it's in progress.
  // However, if we're not ended, or reading, and the length < hwm,
  // then go ahead and try to read some more preemptively.
  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      process.nextTick(function() {
        maybeReadMore_(stream, state);
      });
    }
  }

  function maybeReadMore_(stream, state) {
    var len = state.length;
    while (!state.reading && !state.flowing && !state.ended &&
           state.length < state.highWaterMark) {
      debug('maybeReadMore read 0');
      stream.read(0);
      if (len === state.length)
        // didn't get any data, stop spinning.
        break;
      else
        len = state.length;
    }
    state.readingMore = false;
  }

  // abstract method.  to be overridden in specific implementation classes.
  // call cb(er, data) where data is <= n in length.
  // for virtual (non-string, non-buffer) streams, "length" is somewhat
  // arbitrary, and perhaps not very meaningful.
  Readable.prototype._read = function(n) {
    this.emit('error', new Error('not implemented'));
  };

  Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;

    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;
      case 1:
        state.pipes = [state.pipes, dest];
        break;
      default:
        state.pipes.push(dest);
        break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

    var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
                dest !== process.stdout &&
                dest !== process.stderr;

    var endFn = doEnd ? onend : cleanup;
    if (state.endEmitted)
      process.nextTick(endFn);
    else
      src.once('end', endFn);

    dest.on('unpipe', onunpipe);
    function onunpipe(readable) {
      debug('onunpipe');
      if (readable === src) {
        cleanup();
      }
    }

    function onend() {
      debug('onend');
      dest.end();
    }

    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);

    function cleanup() {
      debug('cleanup');
      // cleanup event handlers once the pipe is broken
      dest.removeListener('close', onclose);
      dest.removeListener('finish', onfinish);
      dest.removeListener('drain', ondrain);
      dest.removeListener('error', onerror);
      dest.removeListener('unpipe', onunpipe);
      src.removeListener('end', onend);
      src.removeListener('end', cleanup);
      src.removeListener('data', ondata);

      // if the reader is waiting for a drain event from this
      // specific writer, then it would cause it to never start
      // flowing again.
      // So, if this is awaiting a drain, then we just call it now.
      // If we don't know, then assume that we are waiting for one.
      if (state.awaitDrain &&
          (!dest._writableState || dest._writableState.needDrain))
        ondrain();
    }

    src.on('data', ondata);
    function ondata(chunk) {
      debug('ondata');
      var ret = dest.write(chunk);
      if (false === ret) {
        debug('false write response, pause',
              src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        src.pause();
      }
    }

    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
      debug('onerror', er);
      unpipe();
      dest.removeListener('error', onerror);
      if (EE.listenerCount(dest, 'error') === 0)
        dest.emit('error', er);
    }
    // This is a brutally ugly hack to make sure that our error handler
    // is attached before any userland ones.  NEVER DO THIS.
    if (!dest._events || !dest._events.error)
      dest.on('error', onerror);
    else if (isArray(dest._events.error))
      dest._events.error.unshift(onerror);
    else
      dest._events.error = [onerror, dest._events.error];



    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
      dest.removeListener('finish', onfinish);
      unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
      debug('onfinish');
      dest.removeListener('close', onclose);
      unpipe();
    }
    dest.once('finish', onfinish);

    function unpipe() {
      debug('unpipe');
      src.unpipe(dest);
    }

    // tell the dest that it's being piped to
    dest.emit('pipe', src);

    // start the flow if it hasn't been started already.
    if (!state.flowing) {
      debug('pipe resume');
      src.resume();
    }

    return dest;
  };

  function pipeOnDrain(src) {
    return function() {
      var state = src._readableState;
      debug('pipeOnDrain', state.awaitDrain);
      if (state.awaitDrain)
        state.awaitDrain--;
      if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
        state.flowing = true;
        flow(src);
      }
    };
  }


  Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;

    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0)
      return this;

    // just one destination.  most common case.
    if (state.pipesCount === 1) {
      // passed in one, but it's not the right one.
      if (dest && dest !== state.pipes)
        return this;

      if (!dest)
        dest = state.pipes;

      // got a match.
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest)
        dest.emit('unpipe', this);
      return this;
    }

    // slow case. multiple pipe destinations.

    if (!dest) {
      // remove all.
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;

      for (var i = 0; i < len; i++)
        dests[i].emit('unpipe', this);
      return this;
    }

    // try to find the right one.
    var i = indexOf(state.pipes, dest);
    if (i === -1)
      return this;

    state.pipes.splice(i, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1)
      state.pipes = state.pipes[0];

    dest.emit('unpipe', this);

    return this;
  };

  // set up data events if they are asked for
  // Ensure readable listeners eventually get something
  Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);

    // If listening to data, and it has not explicitly been paused,
    // then call resume to start the flow of data on the next tick.
    if (ev === 'data' && false !== this._readableState.flowing) {
      this.resume();
    }

    if (ev === 'readable' && this.readable) {
      var state = this._readableState;
      if (!state.readableListening) {
        state.readableListening = true;
        state.emittedReadable = false;
        state.needReadable = true;
        if (!state.reading) {
          var self = this;
          process.nextTick(function() {
            debug('readable nexttick read 0');
            self.read(0);
          });
        } else if (state.length) {
          emitReadable(this, state);
        }
      }
    }

    return res;
  };
  Readable.prototype.addListener = Readable.prototype.on;

  // pause() and resume() are remnants of the legacy readable stream API
  // If the user uses them, then switch into old mode.
  Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
      debug('resume');
      state.flowing = true;
      if (!state.reading) {
        debug('resume read 0');
        this.read(0);
      }
      resume(this, state);
    }
    return this;
  };

  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      process.nextTick(function() {
        resume_(stream, state);
      });
    }
  }

  function resume_(stream, state) {
    state.resumeScheduled = false;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading)
      stream.read(0);
  }

  Readable.prototype.pause = function() {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (false !== this._readableState.flowing) {
      debug('pause');
      this._readableState.flowing = false;
      this.emit('pause');
    }
    return this;
  };

  function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    if (state.flowing) {
      do {
        var chunk = stream.read();
      } while (null !== chunk && state.flowing);
    }
  }

  // wrap an old-style stream as the async data source.
  // This is *not* part of the readable stream interface.
  // It is an ugly unfortunate mess of history.
  Readable.prototype.wrap = function(stream) {
    var state = this._readableState;
    var paused = false;

    var self = this;
    stream.on('end', function() {
      debug('wrapped end');
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length)
          self.push(chunk);
      }

      self.push(null);
    });

    stream.on('data', function(chunk) {
      debug('wrapped data');
      if (state.decoder)
        chunk = state.decoder.write(chunk);
      if (!chunk || !state.objectMode && !chunk.length)
        return;

      var ret = self.push(chunk);
      if (!ret) {
        paused = true;
        stream.pause();
      }
    });

    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for (var i in stream) {
      if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
        this[i] = function(method) { return function() {
          return stream[method].apply(stream, arguments);
        }}(i);
      }
    }

    // proxy certain important events.
    var events = ['error', 'close', 'destroy', 'pause', 'resume'];
    forEach(events, function(ev) {
      stream.on(ev, self.emit.bind(self, ev));
    });

    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    self._read = function(n) {
      debug('wrapped _read', n);
      if (paused) {
        paused = false;
        stream.resume();
      }
    };

    return self;
  };



  // exposed for testing purposes only.
  Readable._fromList = fromList;

  // Pluck off n bytes from an array of buffers.
  // Length is the combined lengths of all the buffers in the list.
  function fromList(n, state) {
    var list = state.buffer;
    var length = state.length;
    var stringMode = !!state.decoder;
    var objectMode = !!state.objectMode;
    var ret;

    // nothing in the list, definitely empty.
    if (list.length === 0)
      return null;

    if (length === 0)
      ret = null;
    else if (objectMode)
      ret = list.shift();
    else if (!n || n >= length) {
      // read it all, truncate the array.
      if (stringMode)
        ret = list.join('');
      else
        ret = Buffer.concat(list, length);
      list.length = 0;
    } else {
      // read just some of it.
      if (n < list[0].length) {
        // just take a part of the first list item.
        // slice is the same for buffers and strings.
        var buf = list[0];
        ret = buf.slice(0, n);
        list[0] = buf.slice(n);
      } else if (n === list[0].length) {
        // first list is a perfect match
        ret = list.shift();
      } else {
        // complex case.
        // we have enough to cover it, but it spans past the first buffer.
        if (stringMode)
          ret = '';
        else
          ret = new Buffer(n);

        var c = 0;
        for (var i = 0, l = list.length; i < l && c < n; i++) {
          var buf = list[0];
          var cpy = Math.min(n - c, buf.length);

          if (stringMode)
            ret += buf.slice(0, cpy);
          else
            buf.copy(ret, c, 0, cpy);

          if (cpy < buf.length)
            list[0] = buf.slice(cpy);
          else
            list.shift();

          c += cpy;
        }
      }
    }

    return ret;
  }

  function endReadable(stream) {
    var state = stream._readableState;

    // If we get here before consuming all the bytes, then that is a
    // bug in node.  Should never happen.
    if (state.length > 0)
      throw new Error('endReadable called on non-empty stream');

    if (!state.endEmitted) {
      state.ended = true;
      process.nextTick(function() {
        // Check that we didn't get one last unshift.
        if (!state.endEmitted && state.length === 0) {
          state.endEmitted = true;
          stream.readable = false;
          stream.emit('end');
        }
      });
    }
  }

  function forEach (xs, f) {
    for (var i = 0, l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }

  function indexOf (xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x) return i;
    }
    return -1;
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(191)))

/***/ },
/* 289 */
/***/ function(module, exports) {

  module.exports = Array.isArray || function (arr) {
    return Object.prototype.toString.call(arr) == '[object Array]';
  };


/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.

  function isArray(arg) {
    if (Array.isArray) {
      return Array.isArray(arg);
    }
    return objectToString(arg) === '[object Array]';
  }
  exports.isArray = isArray;

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }
  exports.isBoolean = isBoolean;

  function isNull(arg) {
    return arg === null;
  }
  exports.isNull = isNull;

  function isNullOrUndefined(arg) {
    return arg == null;
  }
  exports.isNullOrUndefined = isNullOrUndefined;

  function isNumber(arg) {
    return typeof arg === 'number';
  }
  exports.isNumber = isNumber;

  function isString(arg) {
    return typeof arg === 'string';
  }
  exports.isString = isString;

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }
  exports.isSymbol = isSymbol;

  function isUndefined(arg) {
    return arg === void 0;
  }
  exports.isUndefined = isUndefined;

  function isRegExp(re) {
    return objectToString(re) === '[object RegExp]';
  }
  exports.isRegExp = isRegExp;

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  exports.isObject = isObject;

  function isDate(d) {
    return objectToString(d) === '[object Date]';
  }
  exports.isDate = isDate;

  function isError(e) {
    return (objectToString(e) === '[object Error]' || e instanceof Error);
  }
  exports.isError = isError;

  function isFunction(arg) {
    return typeof arg === 'function';
  }
  exports.isFunction = isFunction;

  function isPrimitive(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }
  exports.isPrimitive = isPrimitive;

  exports.isBuffer = Buffer.isBuffer;

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 291 */
/***/ function(module, exports) {

  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }


/***/ },
/* 292 */
/***/ function(module, exports) {

  /* (ignored) */

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // a duplex stream is just a stream that is both readable and writable.
  // Since JS doesn't have multiple prototypal inheritance, this class
  // prototypally inherits from Readable, and then parasitically from
  // Writable.

  module.exports = Duplex;

  /*<replacement>*/
  var objectKeys = Object.keys || function (obj) {
    var keys = [];
    for (var key in obj) keys.push(key);
    return keys;
  }
  /*</replacement>*/


  /*<replacement>*/
  var util = __webpack_require__(290);
  util.inherits = __webpack_require__(291);
  /*</replacement>*/

  var Readable = __webpack_require__(288);
  var Writable = __webpack_require__(294);

  util.inherits(Duplex, Readable);

  forEach(objectKeys(Writable.prototype), function(method) {
    if (!Duplex.prototype[method])
      Duplex.prototype[method] = Writable.prototype[method];
  });

  function Duplex(options) {
    if (!(this instanceof Duplex))
      return new Duplex(options);

    Readable.call(this, options);
    Writable.call(this, options);

    if (options && options.readable === false)
      this.readable = false;

    if (options && options.writable === false)
      this.writable = false;

    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false)
      this.allowHalfOpen = false;

    this.once('end', onend);
  }

  // the no-half-open enforcer
  function onend() {
    // if we allow half-open state, or if the writable side ended,
    // then we're ok.
    if (this.allowHalfOpen || this._writableState.ended)
      return;

    // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(this.end.bind(this));
  }

  function forEach (xs, f) {
    for (var i = 0, l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(191)))

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // A bit simpler than readable streams.
  // Implement an async ._write(chunk, cb), and it'll handle all
  // the drain event emission and buffering.

  module.exports = Writable;

  /*<replacement>*/
  var Buffer = __webpack_require__(204).Buffer;
  /*</replacement>*/

  Writable.WritableState = WritableState;


  /*<replacement>*/
  var util = __webpack_require__(290);
  util.inherits = __webpack_require__(291);
  /*</replacement>*/

  var Stream = __webpack_require__(285);

  util.inherits(Writable, Stream);

  function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
  }

  function WritableState(options, stream) {
    var Duplex = __webpack_require__(293);

    options = options || {};

    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    var hwm = options.highWaterMark;
    var defaultHwm = options.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex)
      this.objectMode = this.objectMode || !!options.writableObjectMode;

    // cast to ints.
    this.highWaterMark = ~~this.highWaterMark;

    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;

    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;

    // a flag to see when we're in the middle of a write.
    this.writing = false;

    // when true all writes will be buffered until .uncork() call
    this.corked = 0;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;

    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
      onwrite(stream, er);
    };

    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;

    // the amount that is being written when _write is called.
    this.writelen = 0;

    this.buffer = [];

    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;

    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;

    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;
  }

  function Writable(options) {
    var Duplex = __webpack_require__(293);

    // Writable ctor is applied to Duplexes, though they're not
    // instanceof Writable, they're instanceof Readable.
    if (!(this instanceof Writable) && !(this instanceof Duplex))
      return new Writable(options);

    this._writableState = new WritableState(options, this);

    // legacy.
    this.writable = true;

    Stream.call(this);
  }

  // Otherwise people can pipe Writable streams, which is just wrong.
  Writable.prototype.pipe = function() {
    this.emit('error', new Error('Cannot pipe. Not readable.'));
  };


  function writeAfterEnd(stream, state, cb) {
    var er = new Error('write after end');
    // TODO: defer error events consistently everywhere, not just the cb
    stream.emit('error', er);
    process.nextTick(function() {
      cb(er);
    });
  }

  // If we get something that is not a buffer, string, null, or undefined,
  // and we're not in objectMode, then that's an error.
  // Otherwise stream chunks are all considered to be of length=1, and the
  // watermarks determine how many objects to keep in the buffer, rather than
  // how many bytes or characters.
  function validChunk(stream, state, chunk, cb) {
    var valid = true;
    if (!util.isBuffer(chunk) &&
        !util.isString(chunk) &&
        !util.isNullOrUndefined(chunk) &&
        !state.objectMode) {
      var er = new TypeError('Invalid non-string/buffer chunk');
      stream.emit('error', er);
      process.nextTick(function() {
        cb(er);
      });
      valid = false;
    }
    return valid;
  }

  Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;

    if (util.isFunction(encoding)) {
      cb = encoding;
      encoding = null;
    }

    if (util.isBuffer(chunk))
      encoding = 'buffer';
    else if (!encoding)
      encoding = state.defaultEncoding;

    if (!util.isFunction(cb))
      cb = function() {};

    if (state.ended)
      writeAfterEnd(this, state, cb);
    else if (validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, chunk, encoding, cb);
    }

    return ret;
  };

  Writable.prototype.cork = function() {
    var state = this._writableState;

    state.corked++;
  };

  Writable.prototype.uncork = function() {
    var state = this._writableState;

    if (state.corked) {
      state.corked--;

      if (!state.writing &&
          !state.corked &&
          !state.finished &&
          !state.bufferProcessing &&
          state.buffer.length)
        clearBuffer(this, state);
    }
  };

  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode &&
        state.decodeStrings !== false &&
        util.isString(chunk)) {
      chunk = new Buffer(chunk, encoding);
    }
    return chunk;
  }

  // if we're already writing something, then just put this
  // in the queue, and wait our turn.  Otherwise, call _write
  // If we return false, then we need a drain event, so set that flag.
  function writeOrBuffer(stream, state, chunk, encoding, cb) {
    chunk = decodeChunk(state, chunk, encoding);
    if (util.isBuffer(chunk))
      encoding = 'buffer';
    var len = state.objectMode ? 1 : chunk.length;

    state.length += len;

    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret)
      state.needDrain = true;

    if (state.writing || state.corked)
      state.buffer.push(new WriteReq(chunk, encoding, cb));
    else
      doWrite(stream, state, false, len, chunk, encoding, cb);

    return ret;
  }

  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (writev)
      stream._writev(chunk, state.onwrite);
    else
      stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }

  function onwriteError(stream, state, sync, er, cb) {
    if (sync)
      process.nextTick(function() {
        state.pendingcb--;
        cb(er);
      });
    else {
      state.pendingcb--;
      cb(er);
    }

    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  }

  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }

  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;

    onwriteStateUpdate(state);

    if (er)
      onwriteError(stream, state, sync, er, cb);
    else {
      // Check if we're actually ready to finish, but don't emit yet
      var finished = needFinish(stream, state);

      if (!finished &&
          !state.corked &&
          !state.bufferProcessing &&
          state.buffer.length) {
        clearBuffer(stream, state);
      }

      if (sync) {
        process.nextTick(function() {
          afterWrite(stream, state, finished, cb);
        });
      } else {
        afterWrite(stream, state, finished, cb);
      }
    }
  }

  function afterWrite(stream, state, finished, cb) {
    if (!finished)
      onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  }

  // Must force callback to be called on nextTick, so that we don't
  // emit 'drain' before the write() consumer gets the 'false' return
  // value, and has a chance to attach a 'drain' listener.
  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit('drain');
    }
  }


  // if there's something in the buffer waiting, then process it
  function clearBuffer(stream, state) {
    state.bufferProcessing = true;

    if (stream._writev && state.buffer.length > 1) {
      // Fast case, write everything using _writev()
      var cbs = [];
      for (var c = 0; c < state.buffer.length; c++)
        cbs.push(state.buffer[c].callback);

      // count the one we are adding, as well.
      // TODO(isaacs) clean this up
      state.pendingcb++;
      doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
        for (var i = 0; i < cbs.length; i++) {
          state.pendingcb--;
          cbs[i](err);
        }
      });

      // Clear buffer
      state.buffer = [];
    } else {
      // Slow case, write chunks one-by-one
      for (var c = 0; c < state.buffer.length; c++) {
        var entry = state.buffer[c];
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;

        doWrite(stream, state, false, len, chunk, encoding, cb);

        // if we didn't call the onwrite immediately, then
        // it means that we need to wait until it does.
        // also, that means that the chunk and cb are currently
        // being processed, so move the buffer counter past them.
        if (state.writing) {
          c++;
          break;
        }
      }

      if (c < state.buffer.length)
        state.buffer = state.buffer.slice(c);
      else
        state.buffer.length = 0;
    }

    state.bufferProcessing = false;
  }

  Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new Error('not implemented'));

  };

  Writable.prototype._writev = null;

  Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;

    if (util.isFunction(chunk)) {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (util.isFunction(encoding)) {
      cb = encoding;
      encoding = null;
    }

    if (!util.isNullOrUndefined(chunk))
      this.write(chunk, encoding);

    // .end() fully uncorks
    if (state.corked) {
      state.corked = 1;
      this.uncork();
    }

    // ignore unnecessary end() calls.
    if (!state.ending && !state.finished)
      endWritable(this, state, cb);
  };


  function needFinish(stream, state) {
    return (state.ending &&
            state.length === 0 &&
            !state.finished &&
            !state.writing);
  }

  function prefinish(stream, state) {
    if (!state.prefinished) {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }

  function finishMaybe(stream, state) {
    var need = needFinish(stream, state);
    if (need) {
      if (state.pendingcb === 0) {
        prefinish(stream, state);
        state.finished = true;
        stream.emit('finish');
      } else
        prefinish(stream, state);
    }
    return need;
  }

  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
      if (state.finished)
        process.nextTick(cb);
      else
        stream.once('finish', cb);
    }
    state.ended = true;
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(191)))

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  var Buffer = __webpack_require__(204).Buffer;

  var isBufferEncoding = Buffer.isEncoding
    || function(encoding) {
         switch (encoding && encoding.toLowerCase()) {
           case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
           default: return false;
         }
       }


  function assertEncoding(encoding) {
    if (encoding && !isBufferEncoding(encoding)) {
      throw new Error('Unknown encoding: ' + encoding);
    }
  }

  // StringDecoder provides an interface for efficiently splitting a series of
  // buffers into a series of JS strings without breaking apart multi-byte
  // characters. CESU-8 is handled as part of the UTF-8 encoding.
  //
  // @TODO Handling all encodings inside a single object makes it very difficult
  // to reason about this code, so it should be split up in the future.
  // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
  // points as used by CESU-8.
  var StringDecoder = exports.StringDecoder = function(encoding) {
    this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
    assertEncoding(encoding);
    switch (this.encoding) {
      case 'utf8':
        // CESU-8 represents each of Surrogate Pair by 3-bytes
        this.surrogateSize = 3;
        break;
      case 'ucs2':
      case 'utf16le':
        // UTF-16 represents each of Surrogate Pair by 2-bytes
        this.surrogateSize = 2;
        this.detectIncompleteChar = utf16DetectIncompleteChar;
        break;
      case 'base64':
        // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
        this.surrogateSize = 3;
        this.detectIncompleteChar = base64DetectIncompleteChar;
        break;
      default:
        this.write = passThroughWrite;
        return;
    }

    // Enough space to store all bytes of a single character. UTF-8 needs 4
    // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
    this.charBuffer = new Buffer(6);
    // Number of bytes received for the current incomplete multi-byte character.
    this.charReceived = 0;
    // Number of bytes expected for the current incomplete multi-byte character.
    this.charLength = 0;
  };


  // write decodes the given buffer and returns it as JS string that is
  // guaranteed to not contain any partial multi-byte characters. Any partial
  // character found at the end of the buffer is buffered up, and will be
  // returned when calling write again with the remaining bytes.
  //
  // Note: Converting a Buffer containing an orphan surrogate to a String
  // currently works, but converting a String to a Buffer (via `new Buffer`, or
  // Buffer#write) will replace incomplete surrogates with the unicode
  // replacement character. See https://codereview.chromium.org/121173009/ .
  StringDecoder.prototype.write = function(buffer) {
    var charStr = '';
    // if our last write ended with an incomplete multibyte character
    while (this.charLength) {
      // determine how many remaining bytes this buffer has to offer for this char
      var available = (buffer.length >= this.charLength - this.charReceived) ?
          this.charLength - this.charReceived :
          buffer.length;

      // add the new bytes to the char buffer
      buffer.copy(this.charBuffer, this.charReceived, 0, available);
      this.charReceived += available;

      if (this.charReceived < this.charLength) {
        // still not enough chars in this buffer? wait for more ...
        return '';
      }

      // remove bytes belonging to the current character from the buffer
      buffer = buffer.slice(available, buffer.length);

      // get the character that was split
      charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

      // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
      var charCode = charStr.charCodeAt(charStr.length - 1);
      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        this.charLength += this.surrogateSize;
        charStr = '';
        continue;
      }
      this.charReceived = this.charLength = 0;

      // if there are no more bytes in this buffer, just emit our char
      if (buffer.length === 0) {
        return charStr;
      }
      break;
    }

    // determine and set charLength / charReceived
    this.detectIncompleteChar(buffer);

    var end = buffer.length;
    if (this.charLength) {
      // buffer the incomplete character bytes we got
      buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
      end -= this.charReceived;
    }

    charStr += buffer.toString(this.encoding, 0, end);

    var end = charStr.length - 1;
    var charCode = charStr.charCodeAt(end);
    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      var size = this.surrogateSize;
      this.charLength += size;
      this.charReceived += size;
      this.charBuffer.copy(this.charBuffer, size, 0, size);
      buffer.copy(this.charBuffer, 0, 0, size);
      return charStr.substring(0, end);
    }

    // or just emit the charStr
    return charStr;
  };

  // detectIncompleteChar determines if there is an incomplete UTF-8 character at
  // the end of the given buffer. If so, it sets this.charLength to the byte
  // length that character, and sets this.charReceived to the number of bytes
  // that are available for this character.
  StringDecoder.prototype.detectIncompleteChar = function(buffer) {
    // determine how many bytes we have to check at the end of this buffer
    var i = (buffer.length >= 3) ? 3 : buffer.length;

    // Figure out if one of the last i bytes of our buffer announces an
    // incomplete char.
    for (; i > 0; i--) {
      var c = buffer[buffer.length - i];

      // See http://en.wikipedia.org/wiki/UTF-8#Description

      // 110XXXXX
      if (i == 1 && c >> 5 == 0x06) {
        this.charLength = 2;
        break;
      }

      // 1110XXXX
      if (i <= 2 && c >> 4 == 0x0E) {
        this.charLength = 3;
        break;
      }

      // 11110XXX
      if (i <= 3 && c >> 3 == 0x1E) {
        this.charLength = 4;
        break;
      }
    }
    this.charReceived = i;
  };

  StringDecoder.prototype.end = function(buffer) {
    var res = '';
    if (buffer && buffer.length)
      res = this.write(buffer);

    if (this.charReceived) {
      var cr = this.charReceived;
      var buf = this.charBuffer;
      var enc = this.encoding;
      res += buf.slice(0, cr).toString(enc);
    }

    return res;
  };

  function passThroughWrite(buffer) {
    return buffer.toString(this.encoding);
  }

  function utf16DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 2;
    this.charLength = this.charReceived ? 2 : 0;
  }

  function base64DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 3;
    this.charLength = this.charReceived ? 3 : 0;
  }


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.


  // a transform stream is a readable/writable stream where you do
  // something with the data.  Sometimes it's called a "filter",
  // but that's not a great name for it, since that implies a thing where
  // some bits pass through, and others are simply ignored.  (That would
  // be a valid example of a transform, of course.)
  //
  // While the output is causally related to the input, it's not a
  // necessarily symmetric or synchronous transformation.  For example,
  // a zlib stream might take multiple plain-text writes(), and then
  // emit a single compressed chunk some time in the future.
  //
  // Here's how this works:
  //
  // The Transform stream has all the aspects of the readable and writable
  // stream classes.  When you write(chunk), that calls _write(chunk,cb)
  // internally, and returns false if there's a lot of pending writes
  // buffered up.  When you call read(), that calls _read(n) until
  // there's enough pending readable data buffered up.
  //
  // In a transform stream, the written data is placed in a buffer.  When
  // _read(n) is called, it transforms the queued up data, calling the
  // buffered _write cb's as it consumes chunks.  If consuming a single
  // written chunk would result in multiple output chunks, then the first
  // outputted bit calls the readcb, and subsequent chunks just go into
  // the read buffer, and will cause it to emit 'readable' if necessary.
  //
  // This way, back-pressure is actually determined by the reading side,
  // since _read has to be called to start processing a new chunk.  However,
  // a pathological inflate type of transform can cause excessive buffering
  // here.  For example, imagine a stream where every byte of input is
  // interpreted as an integer from 0-255, and then results in that many
  // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
  // 1kb of data being output.  In this case, you could write a very small
  // amount of input, and end up with a very large amount of output.  In
  // such a pathological inflating mechanism, there'd be no way to tell
  // the system to stop doing the transform.  A single 4MB write could
  // cause the system to run out of memory.
  //
  // However, even in such a pathological case, only a single written chunk
  // would be consumed, and then the rest would wait (un-transformed) until
  // the results of the previous transformed chunk were consumed.

  module.exports = Transform;

  var Duplex = __webpack_require__(293);

  /*<replacement>*/
  var util = __webpack_require__(290);
  util.inherits = __webpack_require__(291);
  /*</replacement>*/

  util.inherits(Transform, Duplex);


  function TransformState(options, stream) {
    this.afterTransform = function(er, data) {
      return afterTransform(stream, er, data);
    };

    this.needTransform = false;
    this.transforming = false;
    this.writecb = null;
    this.writechunk = null;
  }

  function afterTransform(stream, er, data) {
    var ts = stream._transformState;
    ts.transforming = false;

    var cb = ts.writecb;

    if (!cb)
      return stream.emit('error', new Error('no writecb in Transform class'));

    ts.writechunk = null;
    ts.writecb = null;

    if (!util.isNullOrUndefined(data))
      stream.push(data);

    if (cb)
      cb(er);

    var rs = stream._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      stream._read(rs.highWaterMark);
    }
  }


  function Transform(options) {
    if (!(this instanceof Transform))
      return new Transform(options);

    Duplex.call(this, options);

    this._transformState = new TransformState(options, this);

    // when the writable side finishes, then flush out anything remaining.
    var stream = this;

    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;

    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;

    this.once('prefinish', function() {
      if (util.isFunction(this._flush))
        this._flush(function(er) {
          done(stream, er);
        });
      else
        done(stream);
    });
  }

  Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  };

  // This is the part where you do stuff!
  // override this function in implementation classes.
  // 'chunk' is an input chunk.
  //
  // Call `push(newChunk)` to pass along transformed output
  // to the readable side.  You may call 'push' zero or more times.
  //
  // Call `cb(err)` when you are done with this chunk.  If you pass
  // an error, then that'll put the hurt on the whole operation.  If you
  // never call cb(), then you'll never get another chunk.
  Transform.prototype._transform = function(chunk, encoding, cb) {
    throw new Error('not implemented');
  };

  Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform ||
          rs.needReadable ||
          rs.length < rs.highWaterMark)
        this._read(rs.highWaterMark);
    }
  };

  // Doesn't matter what the args are here.
  // _transform does all the work.
  // That we got here means that the readable side wants more data.
  Transform.prototype._read = function(n) {
    var ts = this._transformState;

    if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      // mark that we need a transform, so that any data that comes in
      // will get processed, now that we've asked for it.
      ts.needTransform = true;
    }
  };


  function done(stream, er) {
    if (er)
      return stream.emit('error', er);

    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    var ws = stream._writableState;
    var ts = stream._transformState;

    if (ws.length)
      throw new Error('calling transform done when ws.length != 0');

    if (ts.transforming)
      throw new Error('calling transform done when still transforming');

    return stream.push(null);
  }


/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // a passthrough stream.
  // basically just the most minimal sort of Transform stream.
  // Every written chunk gets output as-is.

  module.exports = PassThrough;

  var Transform = __webpack_require__(296);

  /*<replacement>*/
  var util = __webpack_require__(290);
  util.inherits = __webpack_require__(291);
  /*</replacement>*/

  util.inherits(PassThrough, Transform);

  function PassThrough(options) {
    if (!(this instanceof PassThrough))
      return new PassThrough(options);

    Transform.call(this, options);
  }

  PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
  };


/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(294)


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(293)


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(296)


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(297)


/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

  var Stream = __webpack_require__(285);
  var util = __webpack_require__(199);

  var Response = module.exports = function (res) {
      this.offset = 0;
      this.readable = true;
  };

  util.inherits(Response, Stream);

  var capable = {
      streaming : true,
      status2 : true
  };

  function parseHeaders (res) {
      var lines = res.getAllResponseHeaders().split(/\r?\n/);
      var headers = {};
      for (var i = 0; i < lines.length; i++) {
          var line = lines[i];
          if (line === '') continue;

          var m = line.match(/^([^:]+):\s*(.*)/);
          if (m) {
              var key = m[1].toLowerCase(), value = m[2];

              if (headers[key] !== undefined) {

                  if (isArray(headers[key])) {
                      headers[key].push(value);
                  }
                  else {
                      headers[key] = [ headers[key], value ];
                  }
              }
              else {
                  headers[key] = value;
              }
          }
          else {
              headers[line] = true;
          }
      }
      return headers;
  }

  Response.prototype.getResponse = function (xhr) {
      var respType = String(xhr.responseType).toLowerCase();
      if (respType === 'blob') return xhr.responseBlob || xhr.response;
      if (respType === 'arraybuffer') return xhr.response;
      return xhr.responseText;
  }

  Response.prototype.getHeader = function (key) {
      return this.headers[key.toLowerCase()];
  };

  Response.prototype.handle = function (res) {
      if (res.readyState === 2 && capable.status2) {
          try {
              this.statusCode = res.status;
              this.headers = parseHeaders(res);
          }
          catch (err) {
              capable.status2 = false;
          }

          if (capable.status2) {
              this.emit('ready');
          }
      }
      else if (capable.streaming && res.readyState === 3) {
          try {
              if (!this.statusCode) {
                  this.statusCode = res.status;
                  this.headers = parseHeaders(res);
                  this.emit('ready');
              }
          }
          catch (err) {}

          try {
              this._emitData(res);
          }
          catch (err) {
              capable.streaming = false;
          }
      }
      else if (res.readyState === 4) {
          if (!this.statusCode) {
              this.statusCode = res.status;
              this.emit('ready');
          }
          this._emitData(res);

          if (res.error) {
              this.emit('error', this.getResponse(res));
          }
          else this.emit('end');

          this.emit('close');
      }
  };

  Response.prototype._emitData = function (res) {
      var respBody = this.getResponse(res);
      if (respBody.toString().match(/ArrayBuffer/)) {
          this.emit('data', new Uint8Array(respBody, this.offset));
          this.offset = respBody.byteLength;
          return;
      }
      if (respBody.length > this.offset) {
          this.emit('data', respBody.slice(this.offset));
          this.offset = respBody.length;
      }
  };

  var isArray = Array.isArray || function (xs) {
      return Object.prototype.toString.call(xs) === '[object Array]';
  };


/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

  ;(function () {

    var object =  true ? exports : this; // #8: web workers
    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

    function InvalidCharacterError(message) {
      this.message = message;
    }
    InvalidCharacterError.prototype = new Error;
    InvalidCharacterError.prototype.name = 'InvalidCharacterError';

    // encoder
    // [https://gist.github.com/999166] by [https://github.com/nignag]
    object.btoa || (
    object.btoa = function (input) {
      for (
        // initialize result and counter
        var block, charCode, idx = 0, map = chars, output = '';
        // if the next input index does not exist:
        //   change the mapping table to "="
        //   check if d has no fractional digits
        input.charAt(idx | 0) || (map = '=', idx % 1);
        // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
        output += map.charAt(63 & block >> 8 - idx % 1 * 8)
      ) {
        charCode = input.charCodeAt(idx += 3/4);
        if (charCode > 0xFF) {
          throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
        }
        block = block << 8 | charCode;
      }
      return output;
    });

    // decoder
    // [https://gist.github.com/1020396] by [https://github.com/atk]
    object.atob || (
    object.atob = function (input) {
      input = input.replace(/=+$/, '');
      if (input.length % 4 == 1) {
        throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
      }
      for (
        // initialize result and counters
        var bc = 0, bs, buffer, idx = 0, output = '';
        // get next character
        buffer = input.charAt(idx++);
        // character found in table? initialize bit storage and add its ascii value;
        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
          // and if not first of each 4 characters,
          // convert the first 8 bits to one ascii character
          bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
      ) {
        // try to find character in table (0-63, not found => -1)
        buffer = chars.indexOf(buffer);
      }
      return output;
    });

  }());


/***/ },
/* 304 */
/***/ function(module, exports) {

  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }


/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

  var http = __webpack_require__(283);

  var https = module.exports;

  for (var key in http) {
      if (http.hasOwnProperty(key)) https[key] = http[key];
  };

  https.request = function (params, cb) {
      if (!params) params = {};
      params.scheme = 'https';
      return http.request.call(this, params, cb);
  }


/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = SemVer;

  // The debug function is excluded entirely from the minified version.
  /* nomin */ var debug;
  /* nomin */ if (typeof process === 'object' &&
      /* nomin */ process.env &&
      /* nomin */ process.env.NODE_DEBUG &&
      /* nomin */ /\bsemver\b/i.test(process.env.NODE_DEBUG))
    /* nomin */ debug = function() {
      /* nomin */ var args = Array.prototype.slice.call(arguments, 0);
      /* nomin */ args.unshift('SEMVER');
      /* nomin */ console.log.apply(console, args);
      /* nomin */ };
  /* nomin */ else
    /* nomin */ debug = function() {};

  // Note: this is the semver.org version of the spec that it implements
  // Not necessarily the package version of this code.
  exports.SEMVER_SPEC_VERSION = '2.0.0';

  var MAX_LENGTH = 256;
  var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

  // The actual regexps go on exports.re
  var re = exports.re = [];
  var src = exports.src = [];
  var R = 0;

  // The following Regular Expressions can be used for tokenizing,
  // validating, and parsing SemVer version strings.

  // ## Numeric Identifier
  // A single `0`, or a non-zero digit followed by zero or more digits.

  var NUMERICIDENTIFIER = R++;
  src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
  var NUMERICIDENTIFIERLOOSE = R++;
  src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';


  // ## Non-numeric Identifier
  // Zero or more digits, followed by a letter or hyphen, and then zero or
  // more letters, digits, or hyphens.

  var NONNUMERICIDENTIFIER = R++;
  src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';


  // ## Main Version
  // Three dot-separated numeric identifiers.

  var MAINVERSION = R++;
  src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                     '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                     '(' + src[NUMERICIDENTIFIER] + ')';

  var MAINVERSIONLOOSE = R++;
  src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                          '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                          '(' + src[NUMERICIDENTIFIERLOOSE] + ')';

  // ## Pre-release Version Identifier
  // A numeric identifier, or a non-numeric identifier.

  var PRERELEASEIDENTIFIER = R++;
  src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
                              '|' + src[NONNUMERICIDENTIFIER] + ')';

  var PRERELEASEIDENTIFIERLOOSE = R++;
  src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
                                   '|' + src[NONNUMERICIDENTIFIER] + ')';


  // ## Pre-release Version
  // Hyphen, followed by one or more dot-separated pre-release version
  // identifiers.

  var PRERELEASE = R++;
  src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
                    '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';

  var PRERELEASELOOSE = R++;
  src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
                         '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';

  // ## Build Metadata Identifier
  // Any combination of digits, letters, or hyphens.

  var BUILDIDENTIFIER = R++;
  src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';

  // ## Build Metadata
  // Plus sign, followed by one or more period-separated build metadata
  // identifiers.

  var BUILD = R++;
  src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
               '(?:\\.' + src[BUILDIDENTIFIER] + ')*))';


  // ## Full Version String
  // A main version, followed optionally by a pre-release version and
  // build metadata.

  // Note that the only major, minor, patch, and pre-release sections of
  // the version string are capturing groups.  The build metadata is not a
  // capturing group, because it should not ever be used in version
  // comparison.

  var FULL = R++;
  var FULLPLAIN = 'v?' + src[MAINVERSION] +
                  src[PRERELEASE] + '?' +
                  src[BUILD] + '?';

  src[FULL] = '^' + FULLPLAIN + '$';

  // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
  // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
  // common in the npm registry.
  var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
                   src[PRERELEASELOOSE] + '?' +
                   src[BUILD] + '?';

  var LOOSE = R++;
  src[LOOSE] = '^' + LOOSEPLAIN + '$';

  var GTLT = R++;
  src[GTLT] = '((?:<|>)?=?)';

  // Something like "2.*" or "1.2.x".
  // Note that "x.x" is a valid xRange identifer, meaning "any version"
  // Only the first item is strictly required.
  var XRANGEIDENTIFIERLOOSE = R++;
  src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
  var XRANGEIDENTIFIER = R++;
  src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';

  var XRANGEPLAIN = R++;
  src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
                     '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                     '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                     '(?:' + src[PRERELEASE] + ')?' +
                     src[BUILD] + '?' +
                     ')?)?';

  var XRANGEPLAINLOOSE = R++;
  src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                          '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                          '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                          '(?:' + src[PRERELEASELOOSE] + ')?' +
                          src[BUILD] + '?' +
                          ')?)?';

  var XRANGE = R++;
  src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
  var XRANGELOOSE = R++;
  src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$';

  // Tilde ranges.
  // Meaning is "reasonably at or greater than"
  var LONETILDE = R++;
  src[LONETILDE] = '(?:~>?)';

  var TILDETRIM = R++;
  src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
  re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
  var tildeTrimReplace = '$1~';

  var TILDE = R++;
  src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
  var TILDELOOSE = R++;
  src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';

  // Caret ranges.
  // Meaning is "at least and backwards compatible with"
  var LONECARET = R++;
  src[LONECARET] = '(?:\\^)';

  var CARETTRIM = R++;
  src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
  re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
  var caretTrimReplace = '$1^';

  var CARET = R++;
  src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
  var CARETLOOSE = R++;
  src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';

  // A simple gt/lt/eq thing, or just "" to indicate "any version"
  var COMPARATORLOOSE = R++;
  src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
  var COMPARATOR = R++;
  src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$';


  // An expression to strip any whitespace between the gtlt and the thing
  // it modifies, so that `> 1.2.3` ==> `>1.2.3`
  var COMPARATORTRIM = R++;
  src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
                        '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';

  // this one has to use the /g flag
  re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
  var comparatorTrimReplace = '$1$2$3';


  // Something like `1.2.3 - 1.2.4`
  // Note that these all use the loose form, because they'll be
  // checked against either the strict or loose comparator form
  // later.
  var HYPHENRANGE = R++;
  src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
                     '\\s+-\\s+' +
                     '(' + src[XRANGEPLAIN] + ')' +
                     '\\s*$';

  var HYPHENRANGELOOSE = R++;
  src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
                          '\\s+-\\s+' +
                          '(' + src[XRANGEPLAINLOOSE] + ')' +
                          '\\s*$';

  // Star ranges basically just allow anything at all.
  var STAR = R++;
  src[STAR] = '(<|>)?=?\\s*\\*';

  // Compile to actual regexp objects.
  // All are flag-free, unless they were created above with a flag.
  for (var i = 0; i < R; i++) {
    debug(i, src[i]);
    if (!re[i])
      re[i] = new RegExp(src[i]);
  }

  exports.parse = parse;
  function parse(version, loose) {
    if (version instanceof SemVer)
      return version;

    if (typeof version !== 'string')
      return null;

    if (version.length > MAX_LENGTH)
      return null;

    var r = loose ? re[LOOSE] : re[FULL];
    if (!r.test(version))
      return null;

    try {
      return new SemVer(version, loose);
    } catch (er) {
      return null;
    }
  }

  exports.valid = valid;
  function valid(version, loose) {
    var v = parse(version, loose);
    return v ? v.version : null;
  }


  exports.clean = clean;
  function clean(version, loose) {
    var s = parse(version.trim().replace(/^[=v]+/, ''), loose);
    return s ? s.version : null;
  }

  exports.SemVer = SemVer;

  function SemVer(version, loose) {
    if (version instanceof SemVer) {
      if (version.loose === loose)
        return version;
      else
        version = version.version;
    } else if (typeof version !== 'string') {
      throw new TypeError('Invalid Version: ' + version);
    }

    if (version.length > MAX_LENGTH)
      throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')

    if (!(this instanceof SemVer))
      return new SemVer(version, loose);

    debug('SemVer', version, loose);
    this.loose = loose;
    var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);

    if (!m)
      throw new TypeError('Invalid Version: ' + version);

    this.raw = version;

    // these are actually numbers
    this.major = +m[1];
    this.minor = +m[2];
    this.patch = +m[3];

    if (this.major > MAX_SAFE_INTEGER || this.major < 0)
      throw new TypeError('Invalid major version')

    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
      throw new TypeError('Invalid minor version')

    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
      throw new TypeError('Invalid patch version')

    // numberify any prerelease numeric ids
    if (!m[4])
      this.prerelease = [];
    else
      this.prerelease = m[4].split('.').map(function(id) {
        if (/^[0-9]+$/.test(id)) {
          var num = +id
          if (num >= 0 && num < MAX_SAFE_INTEGER)
            return num
        }
        return id;
      });

    this.build = m[5] ? m[5].split('.') : [];
    this.format();
  }

  SemVer.prototype.format = function() {
    this.version = this.major + '.' + this.minor + '.' + this.patch;
    if (this.prerelease.length)
      this.version += '-' + this.prerelease.join('.');
    return this.version;
  };

  SemVer.prototype.inspect = function() {
    return '<SemVer "' + this + '">';
  };

  SemVer.prototype.toString = function() {
    return this.version;
  };

  SemVer.prototype.compare = function(other) {
    debug('SemVer.compare', this.version, this.loose, other);
    if (!(other instanceof SemVer))
      other = new SemVer(other, this.loose);

    return this.compareMain(other) || this.comparePre(other);
  };

  SemVer.prototype.compareMain = function(other) {
    if (!(other instanceof SemVer))
      other = new SemVer(other, this.loose);

    return compareIdentifiers(this.major, other.major) ||
           compareIdentifiers(this.minor, other.minor) ||
           compareIdentifiers(this.patch, other.patch);
  };

  SemVer.prototype.comparePre = function(other) {
    if (!(other instanceof SemVer))
      other = new SemVer(other, this.loose);

    // NOT having a prerelease is > having one
    if (this.prerelease.length && !other.prerelease.length)
      return -1;
    else if (!this.prerelease.length && other.prerelease.length)
      return 1;
    else if (!this.prerelease.length && !other.prerelease.length)
      return 0;

    var i = 0;
    do {
      var a = this.prerelease[i];
      var b = other.prerelease[i];
      debug('prerelease compare', i, a, b);
      if (a === undefined && b === undefined)
        return 0;
      else if (b === undefined)
        return 1;
      else if (a === undefined)
        return -1;
      else if (a === b)
        continue;
      else
        return compareIdentifiers(a, b);
    } while (++i);
  };

  // preminor will bump the version up to the next minor release, and immediately
  // down to pre-release. premajor and prepatch work the same way.
  SemVer.prototype.inc = function(release, identifier) {
    switch (release) {
      case 'premajor':
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor = 0;
        this.major++;
        this.inc('pre', identifier);
        break;
      case 'preminor':
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor++;
        this.inc('pre', identifier);
        break;
      case 'prepatch':
        // If this is already a prerelease, it will bump to the next version
        // drop any prereleases that might already exist, since they are not
        // relevant at this point.
        this.prerelease.length = 0;
        this.inc('patch', identifier);
        this.inc('pre', identifier);
        break;
      // If the input is a non-prerelease version, this acts the same as
      // prepatch.
      case 'prerelease':
        if (this.prerelease.length === 0)
          this.inc('patch', identifier);
        this.inc('pre', identifier);
        break;

      case 'major':
        // If this is a pre-major version, bump up to the same major version.
        // Otherwise increment major.
        // 1.0.0-5 bumps to 1.0.0
        // 1.1.0 bumps to 2.0.0
        if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)
          this.major++;
        this.minor = 0;
        this.patch = 0;
        this.prerelease = [];
        break;
      case 'minor':
        // If this is a pre-minor version, bump up to the same minor version.
        // Otherwise increment minor.
        // 1.2.0-5 bumps to 1.2.0
        // 1.2.1 bumps to 1.3.0
        if (this.patch !== 0 || this.prerelease.length === 0)
          this.minor++;
        this.patch = 0;
        this.prerelease = [];
        break;
      case 'patch':
        // If this is not a pre-release version, it will increment the patch.
        // If it is a pre-release it will bump up to the same patch version.
        // 1.2.0-5 patches to 1.2.0
        // 1.2.0 patches to 1.2.1
        if (this.prerelease.length === 0)
          this.patch++;
        this.prerelease = [];
        break;
      // This probably shouldn't be used publicly.
      // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
      case 'pre':
        if (this.prerelease.length === 0)
          this.prerelease = [0];
        else {
          var i = this.prerelease.length;
          while (--i >= 0) {
            if (typeof this.prerelease[i] === 'number') {
              this.prerelease[i]++;
              i = -2;
            }
          }
          if (i === -1) // didn't increment anything
            this.prerelease.push(0);
        }
        if (identifier) {
          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
          if (this.prerelease[0] === identifier) {
            if (isNaN(this.prerelease[1]))
              this.prerelease = [identifier, 0];
          } else
            this.prerelease = [identifier, 0];
        }
        break;

      default:
        throw new Error('invalid increment argument: ' + release);
    }
    this.format();
    this.raw = this.version;
    return this;
  };

  exports.inc = inc;
  function inc(version, release, loose, identifier) {
    if (typeof(loose) === 'string') {
      identifier = loose;
      loose = undefined;
    }

    try {
      return new SemVer(version, loose).inc(release, identifier).version;
    } catch (er) {
      return null;
    }
  }

  exports.diff = diff;
  function diff(version1, version2) {
    if (eq(version1, version2)) {
      return null;
    } else {
      var v1 = parse(version1);
      var v2 = parse(version2);
      if (v1.prerelease.length || v2.prerelease.length) {
        for (var key in v1) {
          if (key === 'major' || key === 'minor' || key === 'patch') {
            if (v1[key] !== v2[key]) {
              return 'pre'+key;
            }
          }
        }
        return 'prerelease';
      }
      for (var key in v1) {
        if (key === 'major' || key === 'minor' || key === 'patch') {
          if (v1[key] !== v2[key]) {
            return key;
          }
        }
      }
    }
  }

  exports.compareIdentifiers = compareIdentifiers;

  var numeric = /^[0-9]+$/;
  function compareIdentifiers(a, b) {
    var anum = numeric.test(a);
    var bnum = numeric.test(b);

    if (anum && bnum) {
      a = +a;
      b = +b;
    }

    return (anum && !bnum) ? -1 :
           (bnum && !anum) ? 1 :
           a < b ? -1 :
           a > b ? 1 :
           0;
  }

  exports.rcompareIdentifiers = rcompareIdentifiers;
  function rcompareIdentifiers(a, b) {
    return compareIdentifiers(b, a);
  }

  exports.major = major;
  function major(a, loose) {
    return new SemVer(a, loose).major;
  }

  exports.minor = minor;
  function minor(a, loose) {
    return new SemVer(a, loose).minor;
  }

  exports.patch = patch;
  function patch(a, loose) {
    return new SemVer(a, loose).patch;
  }

  exports.compare = compare;
  function compare(a, b, loose) {
    return new SemVer(a, loose).compare(b);
  }

  exports.compareLoose = compareLoose;
  function compareLoose(a, b) {
    return compare(a, b, true);
  }

  exports.rcompare = rcompare;
  function rcompare(a, b, loose) {
    return compare(b, a, loose);
  }

  exports.sort = sort;
  function sort(list, loose) {
    return list.sort(function(a, b) {
      return exports.compare(a, b, loose);
    });
  }

  exports.rsort = rsort;
  function rsort(list, loose) {
    return list.sort(function(a, b) {
      return exports.rcompare(a, b, loose);
    });
  }

  exports.gt = gt;
  function gt(a, b, loose) {
    return compare(a, b, loose) > 0;
  }

  exports.lt = lt;
  function lt(a, b, loose) {
    return compare(a, b, loose) < 0;
  }

  exports.eq = eq;
  function eq(a, b, loose) {
    return compare(a, b, loose) === 0;
  }

  exports.neq = neq;
  function neq(a, b, loose) {
    return compare(a, b, loose) !== 0;
  }

  exports.gte = gte;
  function gte(a, b, loose) {
    return compare(a, b, loose) >= 0;
  }

  exports.lte = lte;
  function lte(a, b, loose) {
    return compare(a, b, loose) <= 0;
  }

  exports.cmp = cmp;
  function cmp(a, op, b, loose) {
    var ret;
    switch (op) {
      case '===':
        if (typeof a === 'object') a = a.version;
        if (typeof b === 'object') b = b.version;
        ret = a === b;
        break;
      case '!==':
        if (typeof a === 'object') a = a.version;
        if (typeof b === 'object') b = b.version;
        ret = a !== b;
        break;
      case '': case '=': case '==': ret = eq(a, b, loose); break;
      case '!=': ret = neq(a, b, loose); break;
      case '>': ret = gt(a, b, loose); break;
      case '>=': ret = gte(a, b, loose); break;
      case '<': ret = lt(a, b, loose); break;
      case '<=': ret = lte(a, b, loose); break;
      default: throw new TypeError('Invalid operator: ' + op);
    }
    return ret;
  }

  exports.Comparator = Comparator;
  function Comparator(comp, loose) {
    if (comp instanceof Comparator) {
      if (comp.loose === loose)
        return comp;
      else
        comp = comp.value;
    }

    if (!(this instanceof Comparator))
      return new Comparator(comp, loose);

    debug('comparator', comp, loose);
    this.loose = loose;
    this.parse(comp);

    if (this.semver === ANY)
      this.value = '';
    else
      this.value = this.operator + this.semver.version;

    debug('comp', this);
  }

  var ANY = {};
  Comparator.prototype.parse = function(comp) {
    var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
    var m = comp.match(r);

    if (!m)
      throw new TypeError('Invalid comparator: ' + comp);

    this.operator = m[1];
    if (this.operator === '=')
      this.operator = '';

    // if it literally is just '>' or '' then allow anything.
    if (!m[2])
      this.semver = ANY;
    else
      this.semver = new SemVer(m[2], this.loose);
  };

  Comparator.prototype.inspect = function() {
    return '<SemVer Comparator "' + this + '">';
  };

  Comparator.prototype.toString = function() {
    return this.value;
  };

  Comparator.prototype.test = function(version) {
    debug('Comparator.test', version, this.loose);

    if (this.semver === ANY)
      return true;

    if (typeof version === 'string')
      version = new SemVer(version, this.loose);

    return cmp(version, this.operator, this.semver, this.loose);
  };


  exports.Range = Range;
  function Range(range, loose) {
    if ((range instanceof Range) && range.loose === loose)
      return range;

    if (!(this instanceof Range))
      return new Range(range, loose);

    this.loose = loose;

    // First, split based on boolean or ||
    this.raw = range;
    this.set = range.split(/\s*\|\|\s*/).map(function(range) {
      return this.parseRange(range.trim());
    }, this).filter(function(c) {
      // throw out any that are not relevant for whatever reason
      return c.length;
    });

    if (!this.set.length) {
      throw new TypeError('Invalid SemVer Range: ' + range);
    }

    this.format();
  }

  Range.prototype.inspect = function() {
    return '<SemVer Range "' + this.range + '">';
  };

  Range.prototype.format = function() {
    this.range = this.set.map(function(comps) {
      return comps.join(' ').trim();
    }).join('||').trim();
    return this.range;
  };

  Range.prototype.toString = function() {
    return this.range;
  };

  Range.prototype.parseRange = function(range) {
    var loose = this.loose;
    range = range.trim();
    debug('range', range, loose);
    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
    var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
    range = range.replace(hr, hyphenReplace);
    debug('hyphen replace', range);
    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
    range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
    debug('comparator trim', range, re[COMPARATORTRIM]);

    // `~ 1.2.3` => `~1.2.3`
    range = range.replace(re[TILDETRIM], tildeTrimReplace);

    // `^ 1.2.3` => `^1.2.3`
    range = range.replace(re[CARETTRIM], caretTrimReplace);

    // normalize spaces
    range = range.split(/\s+/).join(' ');

    // At this point, the range is completely trimmed and
    // ready to be split into comparators.

    var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
    var set = range.split(' ').map(function(comp) {
      return parseComparator(comp, loose);
    }).join(' ').split(/\s+/);
    if (this.loose) {
      // in loose mode, throw out any that are not valid comparators
      set = set.filter(function(comp) {
        return !!comp.match(compRe);
      });
    }
    set = set.map(function(comp) {
      return new Comparator(comp, loose);
    });

    return set;
  };

  // Mostly just for testing and legacy API reasons
  exports.toComparators = toComparators;
  function toComparators(range, loose) {
    return new Range(range, loose).set.map(function(comp) {
      return comp.map(function(c) {
        return c.value;
      }).join(' ').trim().split(' ');
    });
  }

  // comprised of xranges, tildes, stars, and gtlt's at this point.
  // already replaced the hyphen ranges
  // turn into a set of JUST comparators.
  function parseComparator(comp, loose) {
    debug('comp', comp);
    comp = replaceCarets(comp, loose);
    debug('caret', comp);
    comp = replaceTildes(comp, loose);
    debug('tildes', comp);
    comp = replaceXRanges(comp, loose);
    debug('xrange', comp);
    comp = replaceStars(comp, loose);
    debug('stars', comp);
    return comp;
  }

  function isX(id) {
    return !id || id.toLowerCase() === 'x' || id === '*';
  }

  // ~, ~> --> * (any, kinda silly)
  // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
  // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
  // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
  // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
  // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
  function replaceTildes(comp, loose) {
    return comp.trim().split(/\s+/).map(function(comp) {
      return replaceTilde(comp, loose);
    }).join(' ');
  }

  function replaceTilde(comp, loose) {
    var r = loose ? re[TILDELOOSE] : re[TILDE];
    return comp.replace(r, function(_, M, m, p, pr) {
      debug('tilde', comp, _, M, m, p, pr);
      var ret;

      if (isX(M))
        ret = '';
      else if (isX(m))
        ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
      else if (isX(p))
        // ~1.2 == >=1.2.0- <1.3.0-
        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
      else if (pr) {
        debug('replaceTilde pr', pr);
        if (pr.charAt(0) !== '-')
          pr = '-' + pr;
        ret = '>=' + M + '.' + m + '.' + p + pr +
              ' <' + M + '.' + (+m + 1) + '.0';
      } else
        // ~1.2.3 == >=1.2.3 <1.3.0
        ret = '>=' + M + '.' + m + '.' + p +
              ' <' + M + '.' + (+m + 1) + '.0';

      debug('tilde return', ret);
      return ret;
    });
  }

  // ^ --> * (any, kinda silly)
  // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
  // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
  // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
  // ^1.2.3 --> >=1.2.3 <2.0.0
  // ^1.2.0 --> >=1.2.0 <2.0.0
  function replaceCarets(comp, loose) {
    return comp.trim().split(/\s+/).map(function(comp) {
      return replaceCaret(comp, loose);
    }).join(' ');
  }

  function replaceCaret(comp, loose) {
    debug('caret', comp, loose);
    var r = loose ? re[CARETLOOSE] : re[CARET];
    return comp.replace(r, function(_, M, m, p, pr) {
      debug('caret', comp, _, M, m, p, pr);
      var ret;

      if (isX(M))
        ret = '';
      else if (isX(m))
        ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
      else if (isX(p)) {
        if (M === '0')
          ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
        else
          ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
      } else if (pr) {
        debug('replaceCaret pr', pr);
        if (pr.charAt(0) !== '-')
          pr = '-' + pr;
        if (M === '0') {
          if (m === '0')
            ret = '>=' + M + '.' + m + '.' + p + pr +
                  ' <' + M + '.' + m + '.' + (+p + 1);
          else
            ret = '>=' + M + '.' + m + '.' + p + pr +
                  ' <' + M + '.' + (+m + 1) + '.0';
        } else
          ret = '>=' + M + '.' + m + '.' + p + pr +
                ' <' + (+M + 1) + '.0.0';
      } else {
        debug('no pr');
        if (M === '0') {
          if (m === '0')
            ret = '>=' + M + '.' + m + '.' + p +
                  ' <' + M + '.' + m + '.' + (+p + 1);
          else
            ret = '>=' + M + '.' + m + '.' + p +
                  ' <' + M + '.' + (+m + 1) + '.0';
        } else
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + (+M + 1) + '.0.0';
      }

      debug('caret return', ret);
      return ret;
    });
  }

  function replaceXRanges(comp, loose) {
    debug('replaceXRanges', comp, loose);
    return comp.split(/\s+/).map(function(comp) {
      return replaceXRange(comp, loose);
    }).join(' ');
  }

  function replaceXRange(comp, loose) {
    comp = comp.trim();
    var r = loose ? re[XRANGELOOSE] : re[XRANGE];
    return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
      debug('xRange', comp, ret, gtlt, M, m, p, pr);
      var xM = isX(M);
      var xm = xM || isX(m);
      var xp = xm || isX(p);
      var anyX = xp;

      if (gtlt === '=' && anyX)
        gtlt = '';

      if (xM) {
        if (gtlt === '>' || gtlt === '<') {
          // nothing is allowed
          ret = '<0.0.0';
        } else {
          // nothing is forbidden
          ret = '*';
        }
      } else if (gtlt && anyX) {
        // replace X with 0
        if (xm)
          m = 0;
        if (xp)
          p = 0;

        if (gtlt === '>') {
          // >1 => >=2.0.0
          // >1.2 => >=1.3.0
          // >1.2.3 => >= 1.2.4
          gtlt = '>=';
          if (xm) {
            M = +M + 1;
            m = 0;
            p = 0;
          } else if (xp) {
            m = +m + 1;
            p = 0;
          }
        } else if (gtlt === '<=') {
          // <=0.7.x is actually <0.8.0, since any 0.7.x should
          // pass.  Similarly, <=7.x is actually <8.0.0, etc.
          gtlt = '<'
          if (xm)
            M = +M + 1
          else
            m = +m + 1
        }

        ret = gtlt + M + '.' + m + '.' + p;
      } else if (xm) {
        ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
      } else if (xp) {
        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
      }

      debug('xRange return', ret);

      return ret;
    });
  }

  // Because * is AND-ed with everything else in the comparator,
  // and '' means "any version", just remove the *s entirely.
  function replaceStars(comp, loose) {
    debug('replaceStars', comp, loose);
    // Looseness is ignored here.  star is always as loose as it gets!
    return comp.trim().replace(re[STAR], '');
  }

  // This function is passed to string.replace(re[HYPHENRANGE])
  // M, m, patch, prerelease, build
  // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
  // 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
  // 1.2 - 3.4 => >=1.2.0 <3.5.0
  function hyphenReplace($0,
                         from, fM, fm, fp, fpr, fb,
                         to, tM, tm, tp, tpr, tb) {

    if (isX(fM))
      from = '';
    else if (isX(fm))
      from = '>=' + fM + '.0.0';
    else if (isX(fp))
      from = '>=' + fM + '.' + fm + '.0';
    else
      from = '>=' + from;

    if (isX(tM))
      to = '';
    else if (isX(tm))
      to = '<' + (+tM + 1) + '.0.0';
    else if (isX(tp))
      to = '<' + tM + '.' + (+tm + 1) + '.0';
    else if (tpr)
      to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
    else
      to = '<=' + to;

    return (from + ' ' + to).trim();
  }


  // if ANY of the sets match ALL of its comparators, then pass
  Range.prototype.test = function(version) {
    if (!version)
      return false;

    if (typeof version === 'string')
      version = new SemVer(version, this.loose);

    for (var i = 0; i < this.set.length; i++) {
      if (testSet(this.set[i], version))
        return true;
    }
    return false;
  };

  function testSet(set, version) {
    for (var i = 0; i < set.length; i++) {
      if (!set[i].test(version))
        return false;
    }

    if (version.prerelease.length) {
      // Find the set of versions that are allowed to have prereleases
      // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
      // That should allow `1.2.3-pr.2` to pass.
      // However, `1.2.4-alpha.notready` should NOT be allowed,
      // even though it's within the range set by the comparators.
      for (var i = 0; i < set.length; i++) {
        debug(set[i].semver);
        if (set[i].semver === ANY)
          continue;

        if (set[i].semver.prerelease.length > 0) {
          var allowed = set[i].semver;
          if (allowed.major === version.major &&
              allowed.minor === version.minor &&
              allowed.patch === version.patch)
            return true;
        }
      }

      // Version has a -pre, but it's not one of the ones we like.
      return false;
    }

    return true;
  }

  exports.satisfies = satisfies;
  function satisfies(version, range, loose) {
    try {
      range = new Range(range, loose);
    } catch (er) {
      return false;
    }
    return range.test(version);
  }

  exports.maxSatisfying = maxSatisfying;
  function maxSatisfying(versions, range, loose) {
    return versions.filter(function(version) {
      return satisfies(version, range, loose);
    }).sort(function(a, b) {
      return rcompare(a, b, loose);
    })[0] || null;
  }

  exports.validRange = validRange;
  function validRange(range, loose) {
    try {
      // Return '*' instead of '' so that truthiness works.
      // This will throw if it's invalid anyway
      return new Range(range, loose).range || '*';
    } catch (er) {
      return null;
    }
  }

  // Determine if version is less than all the versions possible in the range
  exports.ltr = ltr;
  function ltr(version, range, loose) {
    return outside(version, range, '<', loose);
  }

  // Determine if version is greater than all the versions possible in the range.
  exports.gtr = gtr;
  function gtr(version, range, loose) {
    return outside(version, range, '>', loose);
  }

  exports.outside = outside;
  function outside(version, range, hilo, loose) {
    version = new SemVer(version, loose);
    range = new Range(range, loose);

    var gtfn, ltefn, ltfn, comp, ecomp;
    switch (hilo) {
      case '>':
        gtfn = gt;
        ltefn = lte;
        ltfn = lt;
        comp = '>';
        ecomp = '>=';
        break;
      case '<':
        gtfn = lt;
        ltefn = gte;
        ltfn = gt;
        comp = '<';
        ecomp = '<=';
        break;
      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"');
    }

    // If it satisifes the range it is not outside
    if (satisfies(version, range, loose)) {
      return false;
    }

    // From now on, variable terms are as if we're in "gtr" mode.
    // but note that everything is flipped for the "ltr" function.

    for (var i = 0; i < range.set.length; ++i) {
      var comparators = range.set[i];

      var high = null;
      var low = null;

      comparators.forEach(function(comparator) {
        if (comparator.semver === ANY) {
          comparator = new Comparator('>=0.0.0')
        }
        high = high || comparator;
        low = low || comparator;
        if (gtfn(comparator.semver, high.semver, loose)) {
          high = comparator;
        } else if (ltfn(comparator.semver, low.semver, loose)) {
          low = comparator;
        }
      });

      // If the edge version comparator has a operator then our version
      // isn't outside it
      if (high.operator === comp || high.operator === ecomp) {
        return false;
      }

      // If the lowest version comparator has an operator and our version
      // is less than it then it isn't higher than the range
      if ((!low.operator || low.operator === comp) &&
          ltefn(version, low.semver)) {
        return false;
      } else if (low.operator === ecomp && ltfn(version, low.semver)) {
        return false;
      }
    }
    return true;
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(191)))

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {


  /**
   * This is the web browser implementation of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = __webpack_require__(308);
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = 'undefined' != typeof chrome
                 && 'undefined' != typeof chrome.storage
                    ? chrome.storage.local
                    : localstorage();

  /**
   * Colors.
   */

  exports.colors = [
    'lightseagreen',
    'forestgreen',
    'goldenrod',
    'dodgerblue',
    'darkorchid',
    'crimson'
  ];

  /**
   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   * and the Firebug extension (any Firefox version) are known
   * to support "%c" CSS customizations.
   *
   * TODO: add a `localStorage` variable to explicitly enable/disable colors
   */

  function useColors() {
    // is webkit? http://stackoverflow.com/a/16459606/376773
    return ('WebkitAppearance' in document.documentElement.style) ||
      // is firebug? http://stackoverflow.com/a/398120/376773
      (window.console && (console.firebug || (console.exception && console.table))) ||
      // is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
  }

  /**
   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
   */

  exports.formatters.j = function(v) {
    return JSON.stringify(v);
  };


  /**
   * Colorize log arguments if enabled.
   *
   * @api public
   */

  function formatArgs() {
    var args = arguments;
    var useColors = this.useColors;

    args[0] = (useColors ? '%c' : '')
      + this.namespace
      + (useColors ? ' %c' : ' ')
      + args[0]
      + (useColors ? '%c ' : ' ')
      + '+' + exports.humanize(this.diff);

    if (!useColors) return args;

    var c = 'color: ' + this.color;
    args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

    // the final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-z%]/g, function(match) {
      if ('%%' === match) return;
      index++;
      if ('%c' === match) {
        // we only are interested in the *last* %c
        // (the user may have provided their own)
        lastC = index;
      }
    });

    args.splice(lastC, 0, c);
    return args;
  }

  /**
   * Invokes `console.log()` when available.
   * No-op when `console.log` is not a "function".
   *
   * @api public
   */

  function log() {
    // this hackery is required for IE8/9, where
    // the `console.log` function doesn't have 'apply'
    return 'object' === typeof console
      && console.log
      && Function.prototype.apply.call(console.log, console, arguments);
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */

  function save(namespaces) {
    try {
      if (null == namespaces) {
        exports.storage.removeItem('debug');
      } else {
        exports.storage.debug = namespaces;
      }
    } catch(e) {}
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
    var r;
    try {
      r = exports.storage.debug;
    } catch(e) {}
    return r;
  }

  /**
   * Enable namespaces listed in `localStorage.debug` initially.
   */

  exports.enable(load());

  /**
   * Localstorage attempts to return the localstorage.
   *
   * This is necessary because safari throws
   * when a user disables cookies/localstorage
   * and you attempt to access it.
   *
   * @return {LocalStorage}
   * @api private
   */

  function localstorage(){
    try {
      return window.localStorage;
    } catch (e) {}
  }


/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {


  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   *
   * Expose `debug()` as the module.
   */

  exports = module.exports = debug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = __webpack_require__(309);

  /**
   * The currently active debug mode names, and names to skip.
   */

  exports.names = [];
  exports.skips = [];

  /**
   * Map of special "%n" handling functions, for the debug "format" argument.
   *
   * Valid key names are a single, lowercased letter, i.e. "n".
   */

  exports.formatters = {};

  /**
   * Previously assigned color.
   */

  var prevColor = 0;

  /**
   * Previous log timestamp.
   */

  var prevTime;

  /**
   * Select a color.
   *
   * @return {Number}
   * @api private
   */

  function selectColor() {
    return exports.colors[prevColor++ % exports.colors.length];
  }

  /**
   * Create a debugger with the given `namespace`.
   *
   * @param {String} namespace
   * @return {Function}
   * @api public
   */

  function debug(namespace) {

    // define the `disabled` version
    function disabled() {
    }
    disabled.enabled = false;

    // define the `enabled` version
    function enabled() {

      var self = enabled;

      // set `diff` timestamp
      var curr = +new Date();
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;

      // add the `color` if not set
      if (null == self.useColors) self.useColors = exports.useColors();
      if (null == self.color && self.useColors) self.color = selectColor();

      var args = Array.prototype.slice.call(arguments);

      args[0] = exports.coerce(args[0]);

      if ('string' !== typeof args[0]) {
        // anything else let's inspect with %o
        args = ['%o'].concat(args);
      }

      // apply any `formatters` transformations
      var index = 0;
      args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
        // if we encounter an escaped % then don't increase the array index
        if (match === '%%') return match;
        index++;
        var formatter = exports.formatters[format];
        if ('function' === typeof formatter) {
          var val = args[index];
          match = formatter.call(self, val);

          // now we need to remove `args[index]` since it's inlined in the `format`
          args.splice(index, 1);
          index--;
        }
        return match;
      });

      if ('function' === typeof exports.formatArgs) {
        args = exports.formatArgs.apply(self, args);
      }
      var logFn = enabled.log || exports.log || console.log.bind(console);
      logFn.apply(self, args);
    }
    enabled.enabled = true;

    var fn = exports.enabled(namespace) ? enabled : disabled;

    fn.namespace = namespace;

    return fn;
  }

  /**
   * Enables a debug mode by namespaces. This can include modes
   * separated by a colon and wildcards.
   *
   * @param {String} namespaces
   * @api public
   */

  function enable(namespaces) {
    exports.save(namespaces);

    var split = (namespaces || '').split(/[\s,]+/);
    var len = split.length;

    for (var i = 0; i < len; i++) {
      if (!split[i]) continue; // ignore empty strings
      namespaces = split[i].replace(/\*/g, '.*?');
      if (namespaces[0] === '-') {
        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        exports.names.push(new RegExp('^' + namespaces + '$'));
      }
    }
  }

  /**
   * Disable debug output.
   *
   * @api public
   */

  function disable() {
    exports.enable('');
  }

  /**
   * Returns true if the given mode name is enabled, false otherwise.
   *
   * @param {String} name
   * @return {Boolean}
   * @api public
   */

  function enabled(name) {
    var i, len;
    for (i = 0, len = exports.skips.length; i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports.names.length; i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Coerce `val`.
   *
   * @param {Mixed} val
   * @return {Mixed}
   * @api private
   */

  function coerce(val) {
    if (val instanceof Error) return val.stack || val.message;
    return val;
  }


/***/ },
/* 309 */
/***/ function(module, exports) {

  /**
   * Helpers.
   */

  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y = d * 365.25;

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} options
   * @return {String|Number}
   * @api public
   */

  module.exports = function(val, options){
    options = options || {};
    if ('string' == typeof val) return parse(val);
    return options.long
      ? long(val)
      : short(val);
  };

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse(str) {
    str = '' + str;
    if (str.length > 10000) return;
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
    if (!match) return;
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y;
      case 'days':
      case 'day':
      case 'd':
        return n * d;
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h;
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m;
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s;
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function short(ms) {
    if (ms >= d) return Math.round(ms / d) + 'd';
    if (ms >= h) return Math.round(ms / h) + 'h';
    if (ms >= m) return Math.round(ms / m) + 'm';
    if (ms >= s) return Math.round(ms / s) + 's';
    return ms + 'ms';
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function long(ms) {
    return plural(ms, d, 'day')
      || plural(ms, h, 'hour')
      || plural(ms, m, 'minute')
      || plural(ms, s, 'second')
      || ms + ' ms';
  }

  /**
   * Pluralization helper.
   */

  function plural(ms, n, name) {
    if (ms < n) return;
    if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
    return Math.ceil(ms / n) + ' ' + name + 's';
  }


/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var flagIndices = __webpack_require__(311).txFlagIndices.AccountSet;

  var accountRootFlags = {
    PasswordSpent: 0x00010000, // password set fee is spent
    RequireDestTag: 0x00020000, // require a DestinationTag for payments
    RequireAuth: 0x00040000, // require a authorization to hold IOUs
    DisallowXRP: 0x00080000, // disallow sending XRP
    DisableMaster: 0x00100000, // force regular key
    NoFreeze: 0x00200000, // permanently disallowed freezing trustlines
    GlobalFreeze: 0x00400000, // trustlines globally frozen
    DefaultRipple: 0x00800000
  };

  var AccountFlags = {
    passwordSpent: accountRootFlags.PasswordSpent,
    requireDestinationTag: accountRootFlags.RequireDestTag,
    requireAuthorization: accountRootFlags.RequireAuth,
    disallowIncomingXRP: accountRootFlags.DisallowXRP,
    disableMasterKey: accountRootFlags.DisableMaster,
    noFreeze: accountRootFlags.NoFreeze,
    globalFreeze: accountRootFlags.GlobalFreeze,
    defaultRipple: accountRootFlags.DefaultRipple
  };

  var AccountFlagIndices = {
    requireDestinationTag: flagIndices.asfRequireDest,
    requireAuthorization: flagIndices.asfRequireAuth,
    disallowIncomingXRP: flagIndices.asfDisallowXRP,
    disableMasterKey: flagIndices.asfDisableMaster,
    enableTransactionIDTracking: flagIndices.asfAccountTxnID,
    noFreeze: flagIndices.asfNoFreeze,
    globalFreeze: flagIndices.asfGlobalFreeze,
    defaultRipple: flagIndices.asfDefaultRipple
  };

  var AccountFields = {
    EmailHash: { name: 'emailHash', encoding: 'hex',
      length: 32, defaults: '0' },
    MessageKey: { name: 'messageKey' },
    Domain: { name: 'domain', encoding: 'hex' },
    TransferRate: { name: 'transferRate', defaults: 0, shift: 9 }
  };

  module.exports = {
    AccountFields: AccountFields,
    AccountFlagIndices: AccountFlagIndices,
    AccountFlags: AccountFlags
  };

/***/ },
/* 311 */
/***/ function(module, exports) {

  'use strict';

  var txFlags = {
    // Universal flags can apply to any transaction type
    Universal: {
      FullyCanonicalSig: 0x80000000
    },

    AccountSet: {
      RequireDestTag: 0x00010000,
      OptionalDestTag: 0x00020000,
      RequireAuth: 0x00040000,
      OptionalAuth: 0x00080000,
      DisallowXRP: 0x00100000,
      AllowXRP: 0x00200000
    },

    TrustSet: {
      SetAuth: 0x00010000,
      NoRipple: 0x00020000,
      SetNoRipple: 0x00020000,
      ClearNoRipple: 0x00040000,
      SetFreeze: 0x00100000,
      ClearFreeze: 0x00200000
    },

    OfferCreate: {
      Passive: 0x00010000,
      ImmediateOrCancel: 0x00020000,
      FillOrKill: 0x00040000,
      Sell: 0x00080000
    },

    Payment: {
      NoRippleDirect: 0x00010000,
      PartialPayment: 0x00020000,
      LimitQuality: 0x00040000
    }
  };

  // The following are integer (as opposed to bit) flags
  // that can be set for particular transactions in the
  // SetFlag or ClearFlag field
  var txFlagIndices = {
    AccountSet: {
      asfRequireDest: 1,
      asfRequireAuth: 2,
      asfDisallowXRP: 3,
      asfDisableMaster: 4,
      asfAccountTxnID: 5,
      asfNoFreeze: 6,
      asfGlobalFreeze: 7,
      asfDefaultRipple: 8
    }
  };

  module.exports = {
    txFlags: txFlags,
    txFlagIndices: txFlagIndices
  };

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var ValidationError = __webpack_require__(277).ValidationError;
  var schemaValidate = __webpack_require__(313).schemaValidate;

  function error(text) {
    return new ValidationError(text);
  }

  function validateLedgerRange(options) {
    if (!_.isUndefined(options) && !_.isUndefined(options.minLedgerVersion) && !_.isUndefined(options.maxLedgerVersion)) {
      if (Number(options.minLedgerVersion) > Number(options.maxLedgerVersion)) {
        throw error('minLedgerVersion must not be greater than maxLedgerVersion');
      }
    }
  }

  function validateOptions(schema, instance) {
    schemaValidate(schema, instance);
    validateLedgerRange(instance.options);
  }

  module.exports = {
    getPaths: _.partial(schemaValidate, 'getPathsParameters'),
    getTransactions: _.partial(validateOptions, 'getTransactionsParameters'),
    getSettings: _.partial(validateOptions, 'getSettingsParameters'),
    getAccountInfo: _.partial(validateOptions, 'getAccountInfoParameters'),
    getTrustlines: _.partial(validateOptions, 'getTrustlinesParameters'),
    getBalances: _.partial(validateOptions, 'getBalancesParameters'),
    getBalanceSheet: _.partial(validateOptions, 'getBalanceSheetParameters'),
    getOrders: _.partial(validateOptions, 'getOrdersParameters'),
    getOrderbook: _.partial(validateOptions, 'getOrderbookParameters'),
    getTransaction: _.partial(validateOptions, 'getTransactionParameters'),
    getLedger: _.partial(validateOptions, 'getLedgerParameters'),
    preparePayment: _.partial(schemaValidate, 'preparePaymentParameters'),
    prepareOrder: _.partial(schemaValidate, 'prepareOrderParameters'),
    prepareOrderCancellation: _.partial(schemaValidate, 'prepareOrderCancellationParameters'),
    prepareTrustline: _.partial(schemaValidate, 'prepareTrustlineParameters'),
    prepareSettings: _.partial(schemaValidate, 'prepareSettingsParameters'),
    prepareSuspendedPaymentCreation: _.partial(schemaValidate, 'prepareSuspendedPaymentCreationParameters'),
    prepareSuspendedPaymentCancellation: _.partial(schemaValidate, 'prepareSuspendedPaymentCancellationParameters'),
    prepareSuspendedPaymentExecution: _.partial(schemaValidate, 'prepareSuspendedPaymentExecutionParameters'),
    sign: _.partial(schemaValidate, 'signParameters'),
    combine: _.partial(schemaValidate, 'combineParameters'),
    submit: _.partial(schemaValidate, 'submitParameters'),
    computeLedgerHash: _.partial(schemaValidate, 'computeLedgerHashParameters'),
    generateAddress: _.partial(schemaValidate, 'generateAddressParameters'),
    apiOptions: _.partial(schemaValidate, 'api-options'),
    instructions: _.partial(schemaValidate, 'instructions')
  };

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

  // flow is disabled for this file until support for requiring json is added:
  // https://github.com/facebook/flow/issues/167
  'use strict';

  var _ = __webpack_require__(192);
  var assert = __webpack_require__(198);
  var Ajv = __webpack_require__(314);
  var ValidationError = __webpack_require__(277).ValidationError;

  var _require = __webpack_require__(249);

  var isValidAddress = _require.isValidAddress;

  var _require2 = __webpack_require__(195);

  var isValidSecret = _require2.isValidSecret;

  function loadSchemas() {
    // listed explicitly for webpack (instead of scanning schemas directory)
    var schemas = [__webpack_require__(352), __webpack_require__(353), __webpack_require__(354), __webpack_require__(355), __webpack_require__(356), __webpack_require__(357), __webpack_require__(358), __webpack_require__(359), __webpack_require__(360), __webpack_require__(361), __webpack_require__(362), __webpack_require__(363), __webpack_require__(364), __webpack_require__(365), __webpack_require__(366), __webpack_require__(367), __webpack_require__(368), __webpack_require__(369), __webpack_require__(370), __webpack_require__(371), __webpack_require__(372), __webpack_require__(373), __webpack_require__(374), __webpack_require__(375), __webpack_require__(376), __webpack_require__(377), __webpack_require__(378), __webpack_require__(379), __webpack_require__(380), __webpack_require__(381), __webpack_require__(382), __webpack_require__(383), __webpack_require__(384), __webpack_require__(385), __webpack_require__(386), __webpack_require__(387), __webpack_require__(388), __webpack_require__(389), __webpack_require__(390), __webpack_require__(391), __webpack_require__(392), __webpack_require__(393), __webpack_require__(394), __webpack_require__(395), __webpack_require__(396), __webpack_require__(397), __webpack_require__(398), __webpack_require__(399), __webpack_require__(400), __webpack_require__(401), __webpack_require__(402), __webpack_require__(403), __webpack_require__(404), __webpack_require__(405), __webpack_require__(406), __webpack_require__(407), __webpack_require__(408), __webpack_require__(409), __webpack_require__(410), __webpack_require__(411), __webpack_require__(412), __webpack_require__(413), __webpack_require__(414), __webpack_require__(415), __webpack_require__(416), __webpack_require__(417), __webpack_require__(418), __webpack_require__(419), __webpack_require__(420), __webpack_require__(421), __webpack_require__(422), __webpack_require__(423), __webpack_require__(424), __webpack_require__(425), __webpack_require__(426), __webpack_require__(427), __webpack_require__(428), __webpack_require__(429), __webpack_require__(430), __webpack_require__(431), __webpack_require__(432), __webpack_require__(433), __webpack_require__(434), __webpack_require__(435), __webpack_require__(436)];
    var titles = _.map(schemas, function (schema) {
      return schema.title;
    });
    var duplicates = _.keys(_.pick(_.countBy(titles), function (count) {
      return count > 1;
    }));
    assert(duplicates.length === 0, 'Duplicate schemas for: ' + duplicates);
    var ajv = new Ajv();
    _.forEach(schemas, function (schema) {
      return ajv.addSchema(schema, schema.title);
    });
    ajv.addFormat('address', isValidAddress);
    ajv.addFormat('secret', isValidSecret);
    return ajv;
  }

  var ajv = loadSchemas();

  function schemaValidate(schemaName, object) {
    var isValid = ajv.validate(schemaName, object);
    if (!isValid) {
      throw new ValidationError(ajv.errorsText());
    }
  }

  module.exports = {
    schemaValidate: schemaValidate,
    isValidSecret: isValidSecret
  };

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var compileSchema = __webpack_require__(315)
      , resolve = __webpack_require__(316)
      , Cache = __webpack_require__(349)
      , SchemaObject = __webpack_require__(323)
      , stableStringify = __webpack_require__(319)
      , formats = __webpack_require__(350);

  module.exports = Ajv;

  var META_SCHEMA_ID = 'http://json-schema.org/draft-04/schema';
  var SCHEMA_URI_FORMAT = /^(?:(?:[a-z][a-z0-9+-.]*:)?\/\/)?[^\s]*$/i;
  function SCHEMA_URI_FORMAT_FUNC(str) {
      return SCHEMA_URI_FORMAT.test(str);
  }

  /**
   * Creates validator instance.
   * Usage: `Ajv(opts)`
   * @param {Object} opts optional options
   * @return {Object} ajv instance
   */
  function Ajv(opts) {
      if (!(this instanceof Ajv)) return new Ajv(opts);
      var self = this;

      this.opts = opts || {};
      this._schemas = {};
      this._refs = {};
      this._formats = formats(this.opts.format);
      this._cache = this.opts.cache || new Cache;
      this._loadingSchemas = {};

      // this is done on purpose, so that methods are bound to the instance
      // (without using bind) so that they can be used without the instance
      this.validate = validate;
      this.compile = compile;
      this.compileAsync = compileAsync;
      this.addSchema = addSchema;
      this.addMetaSchema = addMetaSchema;
      this.validateSchema = validateSchema;
      this.getSchema = getSchema;
      this.removeSchema = removeSchema;
      this.addFormat = addFormat;
      this.errorsText = errorsText;

      this._compile = _compile;

      addInitialSchemas();
      if (this.opts.formats) addInitialFormats();


      /**
       * Validate data using schema
       * Schema will be compiled and cached (using serialized JSON as key. [json-stable-stringify](https://github.com/substack/json-stable-stringify) is used to serialize.
       * @param  {String|Object} schemaKeyRef key, ref or schema object
       * @param  {Any} data to be validated
       * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).
       */
      function validate(schemaKeyRef, data) {
          var v;
          if (typeof schemaKeyRef == 'string') {
              v = getSchema(schemaKeyRef);
              if (!v) throw new Error('no schema with key or ref "' + schemaKeyRef + '"');
          } else {
              var schemaObj = _addSchema(schemaKeyRef);
              v = schemaObj.validate || _compile(schemaObj);
          }

          var valid = v(data);
          self.errors = v.errors;
          return valid;
      }


      /**
       * Create validating function for passed schema.
       * @param  {String|Object} schema
       * @return {Function} validating function
       */
      function compile(schema) {
          var schemaObj = _addSchema(schema);
          return schemaObj.validate || _compile(schemaObj);
      }


      /**
       * Create validating function for passed schema with asynchronous loading of missing schemas.
       * `loadSchema` option should be a function that accepts schema uri and node-style callback.
       * @param  {String|Object} schema
       * @param  {Function} callback node-style callback, it is always called with 2 parameters: error (or null) and validating function.
       */
      function compileAsync(schema, callback) {
          var schemaObj;
          try {
              schemaObj = _addSchema(schema);
          } catch(e) {
              setTimeout(function() { callback(e); });
              return;
          }
          if (schemaObj.validate)
              setTimeout(function() { callback(null, schemaObj.validate); });
          else {
              if (typeof self.opts.loadSchema != 'function')
                  throw new Error('options.loadSchema should be a function');
              _compileAsync(schema, callback, true);
          }
      }


      function _compileAsync(schema, callback, firstCall) {
          var validate;
          try { validate = compile(schema); }
          catch(e) {
              if (e.missingSchema) loadMissingSchema(e);
              else deferCallback(e);
              return;
          }
          deferCallback(null, validate);

          function loadMissingSchema(e) {
              var ref = e.missingSchema;
              if (self._refs[ref] || self._schemas[ref])
                  return callback(new Error('Schema ' + ref + ' is loaded but' + e.missingRef + 'cannot be resolved'));
              var _callbacks = self._loadingSchemas[ref];
              if (_callbacks) {
                  if (typeof _callbacks == 'function')
                      self._loadingSchemas[ref] = [_callbacks, schemaLoaded];
                  else
                      _callbacks[_callbacks.length] = schemaLoaded;
              } else {
                  self._loadingSchemas[ref] = schemaLoaded;
                  self.opts.loadSchema(ref, function (err, sch) {
                      var _callbacks = self._loadingSchemas[ref];
                      delete self._loadingSchemas[ref];
                      if (typeof _callbacks == 'function')
                          _callbacks(err, sch);
                      else
                          for (var i=0; i<_callbacks.length; i++)
                              _callbacks[i](err, sch);
                  });
              }

              function schemaLoaded(err, sch) {
                  if (err) callback(err);
                  else {
                      if (!(self._refs[ref] || self._schemas[ref])) {
                          try {
                              addSchema(sch, ref);
                          } catch(e) {
                              callback(e);
                              return;
                          }
                      }
                      _compileAsync(schema, callback);
                  }
              }
          }

          function deferCallback(err, validate) {
              if (firstCall) setTimeout(function() { callback(err, validate); });
              else callback(err, validate);
          }
      }


      /**
       * Adds schema to the instance.
       * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` will be ignored.
       * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
       */
      function addSchema(schema, key, _skipValidation, _meta) {
          if (Array.isArray(schema)){
              for (var i=0; i<schema.length; i++) addSchema(schema[i]);
              return;
          }
          // can key/id have # inside?
          key = resolve.normalizeId(key || schema.id);
          checkUnique(key);
          var schemaObj = self._schemas[key] = _addSchema(schema, _skipValidation);
          schemaObj.meta = _meta;
      }


      /**
       * Add schema that will be used to validate other schemas
       * removeAdditional option is alway set to false
       * @param {Object} schema
       * @param {String} key optional schema key
       */
      function addMetaSchema(schema, key, _skipValidation) {
          addSchema(schema, key, _skipValidation, true);
      }


      /**
       * Validate schema
       * @param  {Object} schema schema to validate
       * @return {Boolean}
       */
      function validateSchema(schema) {
          var $schema = schema.$schema || META_SCHEMA_ID;
          var currentUriFormat = self._formats.uri;
          self._formats.uri = typeof currentUriFormat == 'function'
                              ? SCHEMA_URI_FORMAT_FUNC
                              : SCHEMA_URI_FORMAT;
          var valid = validate($schema, schema);
          self._formats.uri = currentUriFormat;
          return valid;
      }


      /**
       * Get compiled schema from the instance by `key` or `ref`.
       * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).
       * @return {Function} schema validating function (with property `schema`).
       */
      function getSchema(keyRef) {
          var schemaObj = _getSchemaObj(keyRef);
          switch (typeof schemaObj) {
              case 'object': return schemaObj.validate || _compile(schemaObj);
              case 'string': return getSchema(schemaObj);
          }
      }


      function _getSchemaObj(keyRef) {
          keyRef = resolve.normalizeId(keyRef);
          return self._schemas[keyRef] || self._refs[keyRef];
      }


      /**
       * Remove cached schema
       * Even if schema is referenced by other schemas it still can be removed as other schemas have local references
       * @param  {String|Object} schemaKeyRef key, ref or schema object
       */
      function removeSchema(schemaKeyRef) {
          switch (typeof schemaKeyRef) {
              case 'string':
                  var schemaObj = _getSchemaObj(schemaKeyRef);
                  self._cache.del(schemaObj.jsonStr);
                  delete self._schemas[schemaKeyRef];
                  delete self._refs[schemaKeyRef];
                  break;
              case 'object':
                  var jsonStr = stableStringify(schemaKeyRef);
                  self._cache.del(jsonStr);
                  var id = schemaKeyRef.id;
                  if (id) {
                      id = resolve.normalizeId(id);
                      delete self._refs[id];
                  }
          }
      }


      function _addSchema(schema, skipValidation) {
          if (typeof schema != 'object') throw new Error('schema should be object');
          var jsonStr = stableStringify(schema);
          var cached = self._cache.get(jsonStr);
          if (cached) return cached;

          var id = resolve.normalizeId(schema.id);
          if (id) checkUnique(id);

          var ok = skipValidation || self.opts.validateSchema === false
                   || validateSchema(schema);
          if (!ok) {
              var message = 'schema is invalid:' + errorsText();
              if (self.opts.validateSchema == 'log') console.error(message);
              else throw new Error(message);
          }

          var localRefs = resolve.ids.call(self, schema);

          var schemaObj = new SchemaObject({
              id: id,
              schema: schema,
              localRefs: localRefs,
              jsonStr: jsonStr,
          });

          if (id[0] != '#') self._refs[id] = schemaObj;
          self._cache.put(jsonStr, schemaObj);

          return schemaObj;
      }


      function _compile(schemaObj, root) {
          if (schemaObj.compiling) {
              schemaObj.validate = callValidate;
              callValidate.schema = schemaObj.schema;
              callValidate.errors = null;
              callValidate.root = root ? root : callValidate;
              return callValidate;
          }
          schemaObj.compiling = true;

          var currentRA = self.opts.removeAdditional;
          if (currentRA && schemaObj.meta) self.opts.removeAdditional = false;
          var v;
          try { v = compileSchema.call(self, schemaObj.schema, root, schemaObj.localRefs); }
          finally {
              schemaObj.compiling = false;
              if (currentRA) self.opts.removeAdditional = currentRA;
          }

          schemaObj.validate = v;
          schemaObj.refs = v.refs;
          schemaObj.refVal = v.refVal;
          schemaObj.root = v.root;
          return v;


          function callValidate() {
              var v = schemaObj.validate;
              var result = v.apply(null, arguments);
              callValidate.errors = v.errors;
              return result;
          }
      }


      function errorsText(errors, opts) {
          errors = errors || self.errors;
          if (!errors) return 'No errors';
          opts = opts || {};
          var separator = opts.separator || ', ';
          var dataVar = opts.dataVar || 'data';

          var text = errors.reduce(function(txt, e) {
              return e ? txt + dataVar + e.dataPath + ' ' + e.message + separator : txt;
          }, '');
          return text.slice(0, -separator.length);
      }


      function addFormat(name, format) {
          if (typeof format == 'string') format = new RegExp(format);
          self._formats[name] = format;
      }


      function addInitialSchemas() {
          if (self.opts.meta !== false) {
              var metaSchema = __webpack_require__(351);
              addMetaSchema(metaSchema, META_SCHEMA_ID, true);
              self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;
          }

          var optsSchemas = self.opts.schemas;
          if (!optsSchemas) return;
          if (Array.isArray(optsSchemas)) addSchema(optsSchemas);
          else for (var key in optsSchemas) addSchema(optsSchemas[key], key);
      }


      function addInitialFormats() {
          for (var name in self.opts.formats) {
              var format = self.opts.formats[name];
              addFormat(name, format);
          }
      }


      function checkUnique(id) {
          if (self._schemas[id] || self._refs[id])
              throw new Error('schema with key or id "' + id + '" already exists');
      }
  }


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var resolve = __webpack_require__(316)
    , util = __webpack_require__(318)
    , equal = __webpack_require__(317);

  try { var beautify = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"js-beautify\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).js_beautify; } catch(e) {}

  var RULES = __webpack_require__(324)
    , validateGenerator = __webpack_require__(348);

  module.exports = compile;


  function compile(schema, root, localRefs, baseId) {
    /* jshint validthis: true, evil: true */
    var self = this
      , refVal = [ undefined ]
      , refs = {}
      , patterns = []
      , patternsHash = {};

    root = root || { schema: schema, refVal: refVal, refs: refs };

    var formats = this._formats;

    return localCompile(schema, root, localRefs, baseId);


    function localCompile(_schema, _root, localRefs, baseId) {
      var isRoot = !_root || (_root && _root.schema == _schema);
      if (_root.schema != root.schema)
        return compile.call(self, _schema, _root, localRefs, baseId);

      var validateCode = validateGenerator({
        isTop: true,
        schema: _schema,
        isRoot: isRoot,
        baseId: baseId,
        root: _root,
        schemaPath: '',
        errorPath: '""',
        RULES: RULES,
        validate: validateGenerator,
        util: util,
        resolve: resolve,
        resolveRef: resolveRef,
        usePattern: usePattern,
        opts: self.opts,
        formats: formats
      });

      validateCode = refsCode(refVal) + patternsCode(patterns) + validateCode;

      if (self.opts.beautify) {
        var opts = self.opts.beautify === true ? { indent_size: 2 } : self.opts.beautify;
        if (beautify) validateCode = beautify(validateCode, opts);
        else console.error('"npm install js-beautify" to use beautify option');
      }
      // console.log('\n\n\n *** \n', validateCode);
      var validate;
      // try {
        eval(validateCode);
        refVal[0] = validate;
      // } catch(e) {
      //   console.log('Error compiling schema, function code:', validateCode);
      //   throw e;
      // }

      validate.schema = _schema;
      validate.errors = null;
      validate.refs = refs;
      validate.refVal = refVal;
      validate.root = isRoot ? validate : _root;

      return validate;
    }

    function resolveRef(baseId, ref, isRoot) {
      ref = resolve.url(baseId, ref);
      var refIndex = refs[ref];
      var _refVal, refCode;
      if (refIndex !== undefined) {
        _refVal = refVal[refIndex];
        refCode = 'refVal[' + refIndex + ']';
        return resolvedRef(_refVal, refCode);
      }
      if (!isRoot) {
        var rootRefId = root.refs[ref];
        if (rootRefId !== undefined) {
          _refVal = root.refVal[rootRefId];
          refCode = addLocalRef(ref, _refVal);
          return resolvedRef(_refVal, refCode);
        }
      }

      refCode = addLocalRef(ref);
      var v = resolve.call(self, localCompile, root, ref);
      if (!v) {
        var localSchema = localRefs && localRefs[ref];
        if (localSchema) {
          v = resolve.inlineRef(localSchema, self.opts.inlineRefs)
              ? localSchema
              : compile.call(self, localSchema, root, localRefs, baseId);
        }
      }

      if (v) {
        replaceLocalRef(ref, v);
        return resolvedRef(v, refCode);
      }
    }

    function addLocalRef(ref, v) {
      var refId = refVal.length;
      refVal[refId] = v;
      refs[ref] = refId;
      return 'refVal' + refId;
    }

    function replaceLocalRef(ref, v) {
      var refId = refs[ref];
      refVal[refId] = v;
    }

    function resolvedRef(schema, code) {
      return typeof schema == 'object'
              ? { schema: schema, code: code }
              : code;
    }

    function usePattern(regexStr) {
      var index = patternsHash[regexStr];
      if (index === undefined) {
        index = patternsHash[regexStr] = patterns.length;
        patterns[index] = regexStr;
      }
      return 'pattern' + index;
    }
  }


  function patternsCode(patterns) {
    return _arrCode(patterns, patternCode);
  }


  function patternCode(i, patterns) {
    return 'var pattern' + i + ' = new RegExp(' + util.toQuotedString(patterns[i]) + ');';
  }


  function refsCode(refVal) {
    return _arrCode(refVal, refCode);
  }


  function refCode(i, refVal) {
    return refVal[i] ? 'var refVal' + i + ' = refVal[' + i + '];' : '';
  }


  function _arrCode(arr, statement) {
    if (!arr.length) return '';
    var code = '';
    for (var i=0; i<arr.length; i++)
      code += statement(i, arr);
    return code;
  }


  /**
   * Functions below are used inside compiled validations function
   */

  var ucs2length = util.ucs2length;


/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var url = __webpack_require__(271)
    , equal = __webpack_require__(317)
    , util = __webpack_require__(318)
    , SchemaObject = __webpack_require__(323);

  module.exports = resolve;

  resolve.normalizeId = normalizeId;
  resolve.fullPath = getFullPath;
  resolve.url = resolveUrl;
  resolve.ids = resolveIds;
  resolve.inlineRef = inlineRef;

  function resolve(compile, root, ref) {
    /* jshint validthis: true */
    var refVal = this._refs[ref];
    if (typeof refVal == 'string') {
      if (this._refs[refVal]) refVal = this._refs[refVal];
      else return resolve.call(this, compile, root, refVal);
    }

    refVal = refVal || this._schemas[ref];
    if (refVal instanceof SchemaObject)
      return inlineRef(refVal.schema, this.opts.inlineRefs)
              ? refVal.schema
              : refVal.validate || this._compile(refVal);

    var res = _resolve.call(this, root, ref);
    var schema, v, baseId;
    if (res) {
      schema = res.schema;
      root = res.root;
      baseId = res.baseId;
    }

    if (schema instanceof SchemaObject)
      v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);
    else if (schema)
      v = inlineRef(schema, this.opts.inlineRefs)
          ? schema
          : compile.call(this, schema, root, undefined, baseId);

    return v;
  }


  function _resolve(root, ref) {
    /* jshint validthis: true */
    var p = url.parse(ref, false, true)
      , refPath = _getFullPath(p)
      , baseId = getFullPath(root.schema.id);
    if (refPath !== baseId) {
      var id = normalizeId(refPath);
      var refVal = this._refs[id];
      if (typeof refVal == 'string') {
        return resolveRecursive.call(this, root, refVal, p);
      } else if (refVal instanceof SchemaObject) {
        if (!refVal.validate) this._compile(refVal);
        root = refVal;
      } else {
        refVal = this._schemas[id];
        if (refVal instanceof SchemaObject) {
          if (!refVal.validate) this._compile(refVal);
          if (id == normalizeId(ref))
            return { schema: refVal, root: root, baseId: baseId };
          root = refVal;
        }
      }
      if (!root.schema) return;
      baseId = getFullPath(root.schema.id);
    }
    return getJsonPointer.call(this, p, baseId, root.schema, root);
  }


  function resolveRecursive(root, ref, parsedRef) {
    /* jshint validthis: true */
    var res = _resolve.call(this, root, ref);
    if (res) {
      var schema = res.schema;
      var baseId = res.baseId;
      root = res.root;
      if (schema.id) baseId = resolveUrl(baseId, schema.id);
      return getJsonPointer.call(this, parsedRef, baseId, schema, root);
    }
  }


  var PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum']);
  function getJsonPointer(parsedRef, baseId, schema, root) {
    /* jshint validthis: true */
    parsedRef.hash = parsedRef.hash || '';
    if (parsedRef.hash.slice(0,2) != '#/') return;
    var parts = parsedRef.hash.split('/');

    for (var i = 1; i < parts.length; i++) {
      var part = parts[i];
      if (part) {
        part = unescapeFragment(part);
        schema = schema[part];
        if (!schema) break;
        if (schema.id && !PREVENT_SCOPE_CHANGE[part]) baseId = resolveUrl(baseId, schema.id);
        if (schema.$ref) {
          var $ref = resolveUrl(baseId, schema.$ref);
          var res = _resolve.call(this, root, $ref);
          if (res) {
            schema = res.schema;
            root = res.root;
            baseId = res.baseId;
          }
        }
      }
    }
    if (schema && schema != root.schema)
      return { schema: schema, root: root, baseId: baseId };
  }


  var SIMPLE_INLINED = util.toHash([
    'type', 'format', 'pattern',
    'maxLength', 'minLength',
    'maxProperties', 'minProperties',
    'maxItems', 'minItems',
    'maximum', 'minimum',
    'uniqueItems', 'multipleOf',
    'required', 'enum'
  ]);
  function inlineRef(schema, limit) {
    if (limit === undefined) return checkNoRef(schema);
    else if (limit) return countKeys(schema) <= limit;
  }


  function checkNoRef(schema) {
    var item;
    if (Array.isArray(schema)) {
      for (var i=0; i<schema.length; i++) {
        item = schema[i];
        if (typeof item == 'object' && !checkNoRef(item)) return false;
      }
    } else {
      for (var key in schema) {
        if (key == '$ref') return false;
        else {
          item = schema[key];
          if (typeof item == 'object' && !checkNoRef(item)) return false;
        }
      }
    }
    return true;
  }


  function countKeys(schema) {
    var count = 0, item;
    if (Array.isArray(schema)) {
      for (var i=0; i<schema.length; i++) {
        item = schema[i];
        if (typeof item == 'object') count += countKeys(item);
        if (count == Infinity) return Infinity;
      }
    } else {
      for (var key in schema) {
        if (key == '$ref') return Infinity;
        if (SIMPLE_INLINED[key]) count++;
        else {
          item = schema[key];
          if (typeof item == 'object') count += countKeys(item) + 1;
          if (count == Infinity) return Infinity;
        }
      }
    }
    return count;
  }


  function unescapeFragment(str) {
    return decodeURIComponent(str)
            .replace(/~1/g, '/')
            .replace(/~0/g, '~');
  }


  function escapeFragment(str) {
    str = str.replace(/~/g, '~0').replace(/\//g, '~1');
    return encodeURIComponent(str);
  }


  function getFullPath(id, normalize) {
    if (normalize !== false) id = normalizeId(id);
    var p = url.parse(id, false, true);
    return _getFullPath(p);
  }


  function _getFullPath(p) {
    return (p.protocol||'') + (p.protocol?'//':'') + (p.host||'') + (p.path||'')  + '#';
  }


  var TRAILING_SLASH_HASH = /#\/?$/;
  function normalizeId(id) {
      return id ? id.replace(TRAILING_SLASH_HASH, '') : '';
  }


  function resolveUrl(baseId, id) {
    id = normalizeId(id);
    return url.resolve(baseId, id);
  }


  function resolveIds(schema) {
    /* jshint validthis: true */
    var id = normalizeId(schema.id);
    var localRefs = {};
    _resolveIds.call(this, schema, getFullPath(id, false), id);
    return localRefs;

    function _resolveIds(schema, fullPath, baseId) {
      /* jshint validthis: true */
      if (Array.isArray(schema))
        for (var i=0; i<schema.length; i++)
          _resolveIds.call(this, schema[i], fullPath+'/'+i, baseId);
      else if (schema && typeof schema == 'object') {
        if (typeof schema.id == 'string') {
          var id = baseId = baseId
                            ? url.resolve(baseId, schema.id)
                            : normalizeId(schema.id);

          var refVal = this._refs[id];
          if (typeof refVal == 'string') refVal = this._refs[refVal];
          if (refVal && refVal.schema) {
            if (!equal(schema, refVal.schema))
              throw new Error('id "' + id + '" resolves to more than one schema');
          } else if (id != normalizeId(fullPath)) {
            if (id[0] == '#') {
              if (localRefs[id] && !equal(schema, localRefs[id]))
                throw new Error('id "' + id + '" resolves to more than one schema');
              localRefs[id] = schema;
            } else
              this._refs[id] = fullPath;
          }
        }
        for (var key in schema)
          _resolveIds.call(this, schema[key], fullPath+'/'+escapeFragment(key), baseId);
      }
    }
  }


/***/ },
/* 317 */
/***/ function(module, exports) {

  'use strict';

  module.exports = function equal(a, b) {
    if (a === b) return true;

    var arrA = Array.isArray(a)
      , arrB = Array.isArray(b)
      , i;

    if (arrA && arrB) {
      if (a.length != b.length) return false;
      for (i = 0; i < a.length; i++)
        if (!equal(a[i], b[i])) return false;
      return true;
    }

    if (arrA != arrB) return false;

    if (a && b && typeof a === 'object' && typeof b === 'object') {
      var keys = Object.keys(a);

      if (keys.length !== Object.keys(b).length) return false;

      for (i = 0; i < keys.length; i++)
        if (b[keys[i]] === undefined) return false;

      for (i = 0; i < keys.length; i++)
        if(!equal(a[keys[i]], b[keys[i]])) return false;

      return true;
    }

    return false;
  };


/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';


  module.exports = {
    copy: copy,
    checkDataType: checkDataType,
    checkDataTypes: checkDataTypes,
    toHash: toHash,
    getProperty: getProperty,
    escapeQuotes: escapeQuotes,
    ucs2length: ucs2length,
    varOccurences: varOccurences,
    varReplace: varReplace,
    cleanUpCode: cleanUpCode,
    cleanUpVarErrors: cleanUpVarErrors,
    schemaHasRules: schemaHasRules,
    stableStringify: __webpack_require__(319),
    toQuotedString: toQuotedString,
    getPathExpr: getPathExpr,
    getPath: getPath
  };


  function copy(o, to) {
    to = to || {};
    for (var key in o) to[key] = o[key];
    return to;
  }


  function checkDataType(dataType, data, negate) {
    var EQUAL = negate ? ' !== ' : ' === '
      , AND = negate ? ' || ' : ' && '
      , OK = negate ? '!' : ''
      , NOT = negate ? '' : '!';
    switch (dataType) {
      case 'null': return data + EQUAL + 'null';
      case 'array': return OK + 'Array.isArray(' + data + ')';
      case 'object': return '(' + OK + data + AND +
                            'typeof ' + data + EQUAL + '"object"' + AND +
                            NOT + 'Array.isArray(' + data + '))';
      case 'integer': return '(typeof ' + data + EQUAL + '"number"' + AND +
                             NOT + '(' + data + ' % 1))';
      default: return 'typeof ' + data + EQUAL + '"' + dataType + '"';
    }
  }


  function checkDataTypes(dataTypes, data) {
    switch (dataTypes.length) {
      case 1: return checkDataType(dataTypes[0], data, true);
      default:
        var code = '';
        var types = toHash(dataTypes);
        if (types.array && types.object) {
          code = types.null ? '(': '(!' + data + ' || ';
          code += 'typeof ' + data + ' !== "object")';
          delete types.null;
          delete types.array;
          delete types.object;
        }
        if (types.number) delete types.integer;
        for (var t in types)
          code += (code ? ' && ' : '' ) + checkDataType(t, data, true);

        return code;
    }
  }


  function toHash(arr) {
    var hash = {};
    for (var i=0; i<arr.length; i++) hash[arr[i]] = true;
    return hash;
  }


  var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
  var SINGLE_QUOTE = /'|\\/g;
  function getProperty(key) {
    return IDENTIFIER.test(key)
            ? '.' + key
            : "['" + key.replace(SINGLE_QUOTE, '\\$&') + "']";
  }


  function escapeQuotes(str) {
    return str.replace(SINGLE_QUOTE, '\\$&');
  }


  // https://mathiasbynens.be/notes/javascript-encoding
  // https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
  function ucs2length(str) {
    var length = 0
      , len = str.length
      , pos = 0
      , value;
    while (pos < len) {
      length++;
      value = str.charCodeAt(pos++);
      if (value >= 0xD800 && value <= 0xDBFF && pos < len) {
        // high surrogate, and there is a next character
        value = str.charCodeAt(pos);
        if ((value & 0xFC00) == 0xDC00) pos++; // low surrogate
      }
    }
    return length;
  }


  function varOccurences(str, dataVar) {
    dataVar += '[^0-9]';
    var matches = str.match(new RegExp(dataVar, 'g'));
    return matches ? matches.length : 0;
  }


  function varReplace(str, dataVar, expr) {
    dataVar += '([^0-9])';
    return str.replace(new RegExp(dataVar, 'g'), expr + '$1');
  }


  var EMPTY_ELSE = /else\s*{\s*}/g
    , EMPTY_IF_NO_ELSE = /if\s*\([^)]+\)\s*\{\s*\}(?!\s*else)/g
    , EMPTY_IF_WITH_ELSE = /if\s*\(([^)]+)\)\s*\{\s*\}\s*else(?!\s*if)/g;
  function cleanUpCode(out) {
    return out.replace(EMPTY_ELSE, '')
              .replace(EMPTY_IF_NO_ELSE, '')
              .replace(EMPTY_IF_WITH_ELSE, 'if (!($1))');
  }


  var ERRORS_REGEXP = /[^v\.]errors/g
    , REMOVE_ERRORS = /var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g
    , RETURN_VALID = 'return errors === 0;'
    , RETURN_TRUE = 'validate.errors = null; return true;';

  function cleanUpVarErrors(out) {
    var matches = out.match(ERRORS_REGEXP);
    if (matches && matches.length === 2)
      return out.replace(REMOVE_ERRORS, '')
                .replace(RETURN_VALID, RETURN_TRUE);
    else
      return out;
  }


  function schemaHasRules(schema, rules) {
    for (var key in schema) if (rules[key]) return true;
  }


  function toQuotedString (str) {
    return '\'' + escapeQuotes(str) + '\'';
  }


  function getPathExpr (currentPath, expr, jsonPointers, isNumber) {
    var path = jsonPointers
                ? '\'/\' + ' + expr + (isNumber ? '' : '.replace(/~/g, \'~0\').replace(/\\//g, \'~1\')')
                : (isNumber ? '\'[\' + ' + expr + ' + \']\'' : '\'[\\\'\' + ' + expr + ' + \'\\\']\'');
    return joinPaths(currentPath, path);
  }


  function getPath (currentPath, prop, jsonPointers) {
    var path = jsonPointers
                ? toQuotedString('/' + prop.replace(/~/g, '~0').replace(/\//g, '~1'))
                : toQuotedString(getProperty(prop));
    return joinPaths(currentPath, path);
  }


  function joinPaths (a, b) {
    if (a == '""') return b;
    return (a + ' + ' + b).replace(/' \+ '/g, '');
  }


/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

  var json = typeof JSON !== 'undefined' ? JSON : __webpack_require__(320);

  module.exports = function (obj, opts) {
      if (!opts) opts = {};
      if (typeof opts === 'function') opts = { cmp: opts };
      var space = opts.space || '';
      if (typeof space === 'number') space = Array(space+1).join(' ');
      var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;
      var replacer = opts.replacer || function(key, value) { return value; };

      var cmp = opts.cmp && (function (f) {
          return function (node) {
              return function (a, b) {
                  var aobj = { key: a, value: node[a] };
                  var bobj = { key: b, value: node[b] };
                  return f(aobj, bobj);
              };
          };
      })(opts.cmp);

      var seen = [];
      return (function stringify (parent, key, node, level) {
          var indent = space ? ('\n' + new Array(level + 1).join(space)) : '';
          var colonSeparator = space ? ': ' : ':';

          if (node && node.toJSON && typeof node.toJSON === 'function') {
              node = node.toJSON();
          }

          node = replacer.call(parent, key, node);

          if (node === undefined) {
              return;
          }
          if (typeof node !== 'object' || node === null) {
              return json.stringify(node);
          }
          if (isArray(node)) {
              var out = [];
              for (var i = 0; i < node.length; i++) {
                  var item = stringify(node, i, node[i], level+1) || json.stringify(null);
                  out.push(indent + space + item);
              }
              return '[' + out.join(',') + indent + ']';
          }
          else {
              if (seen.indexOf(node) !== -1) {
                  if (cycles) return json.stringify('__cycle__');
                  throw new TypeError('Converting circular structure to JSON');
              }
              else seen.push(node);

              var keys = objectKeys(node).sort(cmp && cmp(node));
              var out = [];
              for (var i = 0; i < keys.length; i++) {
                  var key = keys[i];
                  var value = stringify(node, key, node[key], level+1);

                  if(!value) continue;

                  var keyValue = json.stringify(key)
                      + colonSeparator
                      + value;
                  ;
                  out.push(indent + space + keyValue);
              }
              return '{' + out.join(',') + indent + '}';
          }
      })({ '': obj }, '', obj, 0);
  };

  var isArray = Array.isArray || function (x) {
      return {}.toString.call(x) === '[object Array]';
  };

  var objectKeys = Object.keys || function (obj) {
      var has = Object.prototype.hasOwnProperty || function () { return true };
      var keys = [];
      for (var key in obj) {
          if (has.call(obj, key)) keys.push(key);
      }
      return keys;
  };


/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

  exports.parse = __webpack_require__(321);
  exports.stringify = __webpack_require__(322);


/***/ },
/* 321 */
/***/ function(module, exports) {

  var at, // The index of the current character
      ch, // The current character
      escapee = {
          '"':  '"',
          '\\': '\\',
          '/':  '/',
          b:    '\b',
          f:    '\f',
          n:    '\n',
          r:    '\r',
          t:    '\t'
      },
      text,

      error = function (m) {
          // Call error when something is wrong.
          throw {
              name:    'SyntaxError',
              message: m,
              at:      at,
              text:    text
          };
      },

      next = function (c) {
          // If a c parameter is provided, verify that it matches the current character.
          if (c && c !== ch) {
              error("Expected '" + c + "' instead of '" + ch + "'");
          }

          // Get the next character. When there are no more characters,
          // return the empty string.

          ch = text.charAt(at);
          at += 1;
          return ch;
      },

      number = function () {
          // Parse a number value.
          var number,
              string = '';

          if (ch === '-') {
              string = '-';
              next('-');
          }
          while (ch >= '0' && ch <= '9') {
              string += ch;
              next();
          }
          if (ch === '.') {
              string += '.';
              while (next() && ch >= '0' && ch <= '9') {
                  string += ch;
              }
          }
          if (ch === 'e' || ch === 'E') {
              string += ch;
              next();
              if (ch === '-' || ch === '+') {
                  string += ch;
                  next();
              }
              while (ch >= '0' && ch <= '9') {
                  string += ch;
                  next();
              }
          }
          number = +string;
          if (!isFinite(number)) {
              error("Bad number");
          } else {
              return number;
          }
      },

      string = function () {
          // Parse a string value.
          var hex,
              i,
              string = '',
              uffff;

          // When parsing for string values, we must look for " and \ characters.
          if (ch === '"') {
              while (next()) {
                  if (ch === '"') {
                      next();
                      return string;
                  } else if (ch === '\\') {
                      next();
                      if (ch === 'u') {
                          uffff = 0;
                          for (i = 0; i < 4; i += 1) {
                              hex = parseInt(next(), 16);
                              if (!isFinite(hex)) {
                                  break;
                              }
                              uffff = uffff * 16 + hex;
                          }
                          string += String.fromCharCode(uffff);
                      } else if (typeof escapee[ch] === 'string') {
                          string += escapee[ch];
                      } else {
                          break;
                      }
                  } else {
                      string += ch;
                  }
              }
          }
          error("Bad string");
      },

      white = function () {

  // Skip whitespace.

          while (ch && ch <= ' ') {
              next();
          }
      },

      word = function () {

  // true, false, or null.

          switch (ch) {
          case 't':
              next('t');
              next('r');
              next('u');
              next('e');
              return true;
          case 'f':
              next('f');
              next('a');
              next('l');
              next('s');
              next('e');
              return false;
          case 'n':
              next('n');
              next('u');
              next('l');
              next('l');
              return null;
          }
          error("Unexpected '" + ch + "'");
      },

      value,  // Place holder for the value function.

      array = function () {

  // Parse an array value.

          var array = [];

          if (ch === '[') {
              next('[');
              white();
              if (ch === ']') {
                  next(']');
                  return array;   // empty array
              }
              while (ch) {
                  array.push(value());
                  white();
                  if (ch === ']') {
                      next(']');
                      return array;
                  }
                  next(',');
                  white();
              }
          }
          error("Bad array");
      },

      object = function () {

  // Parse an object value.

          var key,
              object = {};

          if (ch === '{') {
              next('{');
              white();
              if (ch === '}') {
                  next('}');
                  return object;   // empty object
              }
              while (ch) {
                  key = string();
                  white();
                  next(':');
                  if (Object.hasOwnProperty.call(object, key)) {
                      error('Duplicate key "' + key + '"');
                  }
                  object[key] = value();
                  white();
                  if (ch === '}') {
                      next('}');
                      return object;
                  }
                  next(',');
                  white();
              }
          }
          error("Bad object");
      };

  value = function () {

  // Parse a JSON value. It could be an object, an array, a string, a number,
  // or a word.

      white();
      switch (ch) {
      case '{':
          return object();
      case '[':
          return array();
      case '"':
          return string();
      case '-':
          return number();
      default:
          return ch >= '0' && ch <= '9' ? number() : word();
      }
  };

  // Return the json_parse function. It will have access to all of the above
  // functions and variables.

  module.exports = function (source, reviver) {
      var result;

      text = source;
      at = 0;
      ch = ' ';
      result = value();
      white();
      if (ch) {
          error("Syntax error");
      }

      // If there is a reviver function, we recursively walk the new structure,
      // passing each name/value pair to the reviver function for possible
      // transformation, starting with a temporary root object that holds the result
      // in an empty key. If there is not a reviver function, we simply return the
      // result.

      return typeof reviver === 'function' ? (function walk(holder, key) {
          var k, v, value = holder[key];
          if (value && typeof value === 'object') {
              for (k in value) {
                  if (Object.prototype.hasOwnProperty.call(value, k)) {
                      v = walk(value, k);
                      if (v !== undefined) {
                          value[k] = v;
                      } else {
                          delete value[k];
                      }
                  }
              }
          }
          return reviver.call(holder, key, value);
      }({'': result}, '')) : result;
  };


/***/ },
/* 322 */
/***/ function(module, exports) {

  var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
      escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
      gap,
      indent,
      meta = {    // table of character substitutions
          '\b': '\\b',
          '\t': '\\t',
          '\n': '\\n',
          '\f': '\\f',
          '\r': '\\r',
          '"' : '\\"',
          '\\': '\\\\'
      },
      rep;

  function quote(string) {
      // If the string contains no control characters, no quote characters, and no
      // backslash characters, then we can safely slap some quotes around it.
      // Otherwise we must also replace the offending characters with safe escape
      // sequences.

      escapable.lastIndex = 0;
      return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
          var c = meta[a];
          return typeof c === 'string' ? c :
              '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
      }) + '"' : '"' + string + '"';
  }

  function str(key, holder) {
      // Produce a string from holder[key].
      var i,          // The loop counter.
          k,          // The member key.
          v,          // The member value.
          length,
          mind = gap,
          partial,
          value = holder[key];

      // If the value has a toJSON method, call it to obtain a replacement value.
      if (value && typeof value === 'object' &&
              typeof value.toJSON === 'function') {
          value = value.toJSON(key);
      }

      // If we were called with a replacer function, then call the replacer to
      // obtain a replacement value.
      if (typeof rep === 'function') {
          value = rep.call(holder, key, value);
      }

      // What happens next depends on the value's type.
      switch (typeof value) {
          case 'string':
              return quote(value);

          case 'number':
              // JSON numbers must be finite. Encode non-finite numbers as null.
              return isFinite(value) ? String(value) : 'null';

          case 'boolean':
          case 'null':
              // If the value is a boolean or null, convert it to a string. Note:
              // typeof null does not produce 'null'. The case is included here in
              // the remote chance that this gets fixed someday.
              return String(value);

          case 'object':
              if (!value) return 'null';
              gap += indent;
              partial = [];

              // Array.isArray
              if (Object.prototype.toString.apply(value) === '[object Array]') {
                  length = value.length;
                  for (i = 0; i < length; i += 1) {
                      partial[i] = str(i, value) || 'null';
                  }

                  // Join all of the elements together, separated with commas, and
                  // wrap them in brackets.
                  v = partial.length === 0 ? '[]' : gap ?
                      '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
                      '[' + partial.join(',') + ']';
                  gap = mind;
                  return v;
              }

              // If the replacer is an array, use it to select the members to be
              // stringified.
              if (rep && typeof rep === 'object') {
                  length = rep.length;
                  for (i = 0; i < length; i += 1) {
                      k = rep[i];
                      if (typeof k === 'string') {
                          v = str(k, value);
                          if (v) {
                              partial.push(quote(k) + (gap ? ': ' : ':') + v);
                          }
                      }
                  }
              }
              else {
                  // Otherwise, iterate through all of the keys in the object.
                  for (k in value) {
                      if (Object.prototype.hasOwnProperty.call(value, k)) {
                          v = str(k, value);
                          if (v) {
                              partial.push(quote(k) + (gap ? ': ' : ':') + v);
                          }
                      }
                  }
              }

          // Join all of the member texts together, separated with commas,
          // and wrap them in braces.

          v = partial.length === 0 ? '{}' : gap ?
              '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
              '{' + partial.join(',') + '}';
          gap = mind;
          return v;
      }
  }

  module.exports = function (value, replacer, space) {
      var i;
      gap = '';
      indent = '';

      // If the space parameter is a number, make an indent string containing that
      // many spaces.
      if (typeof space === 'number') {
          for (i = 0; i < space; i += 1) {
              indent += ' ';
          }
      }
      // If the space parameter is a string, it will be used as the indent string.
      else if (typeof space === 'string') {
          indent = space;
      }

      // If there is a replacer, it must be a function or an array.
      // Otherwise, throw an error.
      rep = replacer;
      if (replacer && typeof replacer !== 'function'
      && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
          throw new Error('JSON.stringify');
      }

      // Make a fake root object containing our value under the key of ''.
      // Return the result of stringifying the value.
      return str('', {'': value});
  };


/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var util = __webpack_require__(318);

  module.exports = SchemaObject;

  function SchemaObject(obj) {
      util.copy(obj, this);
  }


/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var ruleModules = __webpack_require__(325)
    , util = __webpack_require__(318);

  var RULES = module.exports = [
    { type: 'number',
      rules: [ 'maximum', 'minimum', 'multipleOf'] },
    { type: 'string',
      rules: [ 'maxLength', 'minLength', 'pattern', 'format' ] },
    { type: 'array',
      rules: [ 'maxItems', 'minItems', 'uniqueItems', 'items' ] },
    { type: 'object',
      rules: [ 'maxProperties', 'minProperties', 'required', 'dependencies', 'properties' ] },
    { rules: [ '$ref', 'enum', 'not', 'anyOf', 'oneOf', 'allOf' ] }
  ];

  RULES.all = [ 'type', 'additionalProperties', 'patternProperties' ];


  RULES.forEach(function (group) {
    group.rules = group.rules.map(function (keyword) {
      RULES.all.push(keyword);
      return {
        keyword: keyword,
        code: ruleModules[keyword]
      };
    });
  });

  RULES.all = util.toHash(RULES.all);


/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  //all requires must be explicit because browserify won't work with dynamic requires
  module.exports = {
    '$ref': __webpack_require__(326),
    anyOf: __webpack_require__(327),
    format: __webpack_require__(328),
    maxLength: __webpack_require__(329),
    minItems: __webpack_require__(330),
    minimum: __webpack_require__(331),
    oneOf: __webpack_require__(332),
    required: __webpack_require__(333),
    dependencies: __webpack_require__(334),
    items: __webpack_require__(335),
    maxProperties: __webpack_require__(336),
    minLength: __webpack_require__(337),
    multipleOf: __webpack_require__(338),
    pattern: __webpack_require__(339),
    uniqueItems: __webpack_require__(340),
    allOf: __webpack_require__(341),
    enum: __webpack_require__(342),
    maxItems: __webpack_require__(343),
    maximum: __webpack_require__(344),
    minProperties: __webpack_require__(345),
    not: __webpack_require__(346),
    properties: __webpack_require__(347),
    validate: __webpack_require__(348)
  };


/***/ },
/* 326 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_ref(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['$ref'],
      $schemaPath = it.schemaPath + '.' + '$ref',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    if ($schema == '#' || $schema == '#/') {
      if (it.isRoot) {
        out += '  if (! ' + ('validate') + '(' + ($data) + ', (dataPath || \'\')';
        if (it.errorPath != '""') {
          out += ' + ' + (it.errorPath);
        }
        out += ') ) { if (vErrors === null) vErrors = ' + ('validate') + '.errors; else vErrors = vErrors.concat(' + ('validate') + '.errors); errors = vErrors.length; } ';
        if ($breakOnError) {
          out += ' else { ';
        }
      } else {
        out += '  if (! ' + ('root.refVal[0]') + '(' + ($data) + ', (dataPath || \'\')';
        if (it.errorPath != '""') {
          out += ' + ' + (it.errorPath);
        }
        out += ') ) { if (vErrors === null) vErrors = ' + ('root.refVal[0]') + '.errors; else vErrors = vErrors.concat(' + ('root.refVal[0]') + '.errors); errors = vErrors.length; } ';
        if ($breakOnError) {
          out += ' else { ';
        }
      }
    } else {
      var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);
      if ($refVal === undefined) {
        var $message = 'can\'t resolve reference ' + $schema + ' from id ' + it.baseId;
        if (it.opts.missingRefs == 'fail') {
          console.log($message);
          if (!it.compositeRule && $breakOnError) {
            out += ' validate.errors = [ { keyword: \'' + ('$ref') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
            if (it.opts.messages !== false) {
              out += ' , message: \'can\\\'t resolve reference ' + (it.util.escapeQuotes($schema)) + '\' ';
            }
            if (it.opts.verbose || it.opts.i18n) {
              out += ' , schema: ' + (it.util.toQuotedString($schema)) + ' ';
            }
            if (it.opts.verbose) {
              out += ' , data: ' + ($data) + ' ';
            }
            if (it.opts.i18n) {
              out += ', params: { escaped: \'' + (it.util.escapeQuotes($schema)) + '\' }';
            }
            out += ' }]; return false; ';
          } else {
            out += '  var err =   { keyword: \'' + ('$ref') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
            if (it.opts.messages !== false) {
              out += ' , message: \'can\\\'t resolve reference ' + (it.util.escapeQuotes($schema)) + '\' ';
            }
            if (it.opts.verbose || it.opts.i18n) {
              out += ' , schema: ' + (it.util.toQuotedString($schema)) + ' ';
            }
            if (it.opts.verbose) {
              out += ' , data: ' + ($data) + ' ';
            }
            if (it.opts.i18n) {
              out += ', params: { escaped: \'' + (it.util.escapeQuotes($schema)) + '\' }';
            }
            out += ' }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
          if ($breakOnError) {
            out += ' if (false) { ';
          }
        } else if (it.opts.missingRefs == 'ignore') {
          console.log($message);
          if ($breakOnError) {
            out += ' if (true) { ';
          }
        } else {
          var $error = new Error($message);
          $error.missingRef = it.resolve.url(it.baseId, $schema);
          $error.missingSchema = it.resolve.normalizeId(it.resolve.fullPath($error.missingRef));
          throw $error;
        }
      } else if (typeof $refVal == 'string') {
        out += '  if (! ' + ($refVal) + '(' + ($data) + ', (dataPath || \'\')';
        if (it.errorPath != '""') {
          out += ' + ' + (it.errorPath);
        }
        out += ') ) { if (vErrors === null) vErrors = ' + ($refVal) + '.errors; else vErrors = vErrors.concat(' + ($refVal) + '.errors); errors = vErrors.length; } ';
        if ($breakOnError) {
          out += ' else { ';
        }
      } else {
        var $it = it.util.copy(it),
          $closingBraces = '';
        $it.level++;
        $it.schema = $refVal.schema;
        $it.schemaPath = '';
        var $code = it.validate($it);
        if (/validate\.schema/.test($code)) {
          out += ' var rootSchema' + ($it.level) + ' = validate.schema; validate.schema = ' + ($refVal.code) + '; ' + ($code) + ' validate.schema = rootSchema' + ($it.level) + '; ';
        } else {
          out += ' ' + ($code) + ' ';
        }
        if ($breakOnError) {
          out += ' if (valid' + ($it.level) + ') { ';
        }
      }
    }
    return out;
  }


/***/ },
/* 327 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_anyOf(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['anyOf'],
      $schemaPath = it.schemaPath + '.' + 'anyOf',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    var $it = it.util.copy(it),
      $closingBraces = '';
    $it.level++;
    var $noEmptySchema = $schema.every(function($sch) {
      return it.util.schemaHasRules($sch, it.RULES.all);
    });
    if ($noEmptySchema) {
      out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = false;  ';
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      var arr1 = $schema;
      if (arr1) {
        var $sch, $i = -1,
          l1 = arr1.length - 1;
        while ($i < l1) {
          $sch = arr1[$i += 1];
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + '[' + $i + ']';
          out += ' ' + (it.validate($it)) + ' ' + ($valid) + ' = ' + ($valid) + ' || valid' + ($it.level) + '; if (!' + ($valid) + ') { ';
          $closingBraces += '}';
        }
      }
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += ' ' + ($closingBraces) + ' if (!' + ($valid) + ') {  var err =   { keyword: \'' + ('anyOf') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should match some schema in anyOf\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else { errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
      if (it.opts.allErrors) {
        out += ' } ';
      }
      out = it.util.cleanUpCode(out);
    } else {
      if ($breakOnError) {
        out += ' if (true) { ';
      }
    }
    return out;
  }


/***/ },
/* 328 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_format(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['format'],
      $schemaPath = it.schemaPath + '.' + 'format',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    var $format = it.formats[$schema];
    if (it.opts.format !== false && $format) {
      out += ' if (!   ';
      if (typeof $format == 'function') {
        out += ' formats' + (it.util.getProperty($schema)) + ' (' + ($data) + ') ';
      } else {
        out += ' formats' + (it.util.getProperty($schema)) + ' .test(' + ($data) + ') ';
      }
      out += ') {  ';
      if (!it.compositeRule && $breakOnError) {
        out += ' validate.errors = [ { keyword: \'' + ('format') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should match format ' + (it.util.escapeQuotes($schema)) + '\' ';
        }
        if (it.opts.verbose || it.opts.i18n) {
          out += ' , schema: ' + (it.util.toQuotedString($schema)) + ' ';
        }
        if (it.opts.verbose) {
          out += ' , data: ' + ($data) + ' ';
        }
        if (it.opts.i18n) {
          out += ', params: { escaped: \'' + (it.util.escapeQuotes($schema)) + '\' }';
        }
        out += ' }]; return false; ';
      } else {
        out += '  var err =   { keyword: \'' + ('format') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should match format ' + (it.util.escapeQuotes($schema)) + '\' ';
        }
        if (it.opts.verbose || it.opts.i18n) {
          out += ' , schema: ' + (it.util.toQuotedString($schema)) + ' ';
        }
        if (it.opts.verbose) {
          out += ' , data: ' + ($data) + ' ';
        }
        if (it.opts.i18n) {
          out += ', params: { escaped: \'' + (it.util.escapeQuotes($schema)) + '\' }';
        }
        out += ' }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' } ';
      if ($breakOnError) {
        out += ' else { ';
      }
    } else {
      if ($breakOnError) {
        out += ' if (true) { ';
      }
    }
    return out;
  }


/***/ },
/* 329 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_maxLength(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['maxLength'],
      $schemaPath = it.schemaPath + '.' + 'maxLength',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    out += 'if ( ';
    if (it.opts.unicode === false) {
      out += ' ' + ($data) + '.length ';
    } else {
      out += ' ucs2length(' + ($data) + ') ';
    }
    out += ' > ' + ($schema) + ') {  ';
    if (!it.compositeRule && $breakOnError) {
      out += ' validate.errors = [ { keyword: \'' + ('maxLength') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT be longer than ' + ($schema) + ' characters\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + ($schema) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }]; return false; ';
    } else {
      out += '  var err =   { keyword: \'' + ('maxLength') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT be longer than ' + ($schema) + ' characters\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + ($schema) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  }


/***/ },
/* 330 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_minItems(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['minItems'],
      $schemaPath = it.schemaPath + '.' + 'minItems',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    out += 'if (' + ($data) + '.length < ' + ($schema) + ') {  ';
    if (!it.compositeRule && $breakOnError) {
      out += ' validate.errors = [ { keyword: \'' + ('minItems') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT have less than ' + ($schema) + ' items\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + ($schema) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }]; return false; ';
    } else {
      out += '  var err =   { keyword: \'' + ('minItems') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT have less than ' + ($schema) + ' items\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + ($schema) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  }


/***/ },
/* 331 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_minimum(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['minimum'],
      $schemaPath = it.schemaPath + '.' + 'minimum',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    var $exclusive = it.schema.exclusiveMinimum === true,
      $op = $exclusive ? '>' : '>=',
      $notOp = $exclusive ? '<=' : '<';
    out += 'if (' + ($data) + ' ' + ($notOp) + ' ' + ($schema) + ') {  ';
    if (!it.compositeRule && $breakOnError) {
      out += ' validate.errors = [ { keyword: \'' + ('minimum') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should be ' + ($op) + ' ' + ($schema) + '\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + ($schema) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      if (it.opts.i18n) {
        out += ', params: { condition: \'' + ($op) + ' ' + ($schema) + '\' }';
      }
      out += ' }]; return false; ';
    } else {
      out += '  var err =   { keyword: \'' + ('minimum') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should be ' + ($op) + ' ' + ($schema) + '\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + ($schema) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      if (it.opts.i18n) {
        out += ', params: { condition: \'' + ($op) + ' ' + ($schema) + '\' }';
      }
      out += ' }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  }


/***/ },
/* 332 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_oneOf(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['oneOf'],
      $schemaPath = it.schemaPath + '.' + 'oneOf',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    var $it = it.util.copy(it),
      $closingBraces = '';
    $it.level++;
    out += 'var ' + ($errs) + ' = errors;var prevValid' + ($lvl) + ' = false;var ' + ($valid) + ' = false; ';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var arr1 = $schema;
    if (arr1) {
      var $sch, $i = -1,
        l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[$i += 1];
        if (it.util.schemaHasRules($sch, it.RULES.all)) {
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + '[' + $i + ']';
          out += ' ' + (it.validate($it)) + ' ';
        } else {
          out += ' var valid' + ($it.level) + ' = true; ';
        }
        if ($i) {
          out += ' if (valid' + ($it.level) + ' && prevValid' + ($lvl) + ') ' + ($valid) + ' = false; else { ';
          $closingBraces += '}';
        }
        out += ' if (valid' + ($it.level) + ') ' + ($valid) + ' = prevValid' + ($lvl) + ' = true;';
      }
    }
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += '' + ($closingBraces) + 'if (!' + ($valid) + ') {  ';
    if (!it.compositeRule && $breakOnError) {
      out += ' validate.errors = [ { keyword: \'' + ('oneOf') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should match exactly one schema in oneOf\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }]; return false; ';
    } else {
      out += '  var err =   { keyword: \'' + ('oneOf') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should match exactly one schema in oneOf\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} else { errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }';
    if (it.opts.allErrors) {
      out += ' } ';
    }
    return out;
  }


/***/ },
/* 333 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_required(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['required'],
      $schemaPath = it.schemaPath + '.' + 'required',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    if (it.schema.properties && Object.keys(it.schema.properties).length) {
      var $required = [];
      var arr1 = $schema;
      if (arr1) {
        var $property, i1 = -1,
          l1 = arr1.length - 1;
        while (i1 < l1) {
          $property = arr1[i1 += 1];
          var $propertySch = it.schema.properties[$property];
          if (!($propertySch && it.util.schemaHasRules($propertySch, it.RULES.all))) {
            $required[$required.length] = $property;
          }
        }
      }
    } else {
      var $required = $schema;
    }
    if ($required.length) {
      var $currentErrorPath = it.errorPath;
      if ($breakOnError) {
        out += ' var missing' + ($lvl) + '; ';
        if ($required.length <= 20) {
          out += ' if ( ';
          var arr2 = $required;
          if (arr2) {
            var $property, $i = -1,
              l2 = arr2.length - 1;
            while ($i < l2) {
              $property = arr2[$i += 1];
              if ($i) {
                out += ' || ';
              }
              var $prop = it.util.getProperty($property);
              out += ' ( ' + ($data) + ($prop) + ' === undefined && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $property : $prop)) + ') ) ';
            }
          }
          out += ') { ';
          var $propertyPath = 'missing' + $lvl,
            $missingProperty = '\' + ' + $propertyPath + ' + \'';
          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
          if (!it.compositeRule && $breakOnError) {
            out += ' validate.errors = [ { keyword: \'' + ('required') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
            if (it.opts.messages !== false) {
              out += ' , message: \'is a required property\' ';
            }
            if (it.opts.verbose || it.opts.i18n) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' ';
            }
            if (it.opts.verbose) {
              out += ' , data: ' + ($data) + ' ';
            }
            if (it.opts.i18n) {
              out += ', params: { missingProperty: \'' + ($missingProperty) + '\' }';
            }
            out += ' }]; return false; ';
          } else {
            out += '  var err =   { keyword: \'' + ('required') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
            if (it.opts.messages !== false) {
              out += ' , message: \'is a required property\' ';
            }
            if (it.opts.verbose || it.opts.i18n) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' ';
            }
            if (it.opts.verbose) {
              out += ' , data: ' + ($data) + ' ';
            }
            if (it.opts.i18n) {
              out += ', params: { missingProperty: \'' + ($missingProperty) + '\' }';
            }
            out += ' }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
          out += ' } else { ';
        } else {
          out += '  var schema' + ($lvl) + ' = validate.schema' + ($schemaPath) + '; ';
          var $i = 'i' + $lvl,
            $propertyPath = 'schema' + $lvl + '[' + $i + ']',
            $missingProperty = '\' + "\'" + ' + $propertyPath + ' + "\'" + \'';
          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
          out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < schema' + ($lvl) + '.length; ' + ($i) + '++) { var ' + ($valid) + ' = ' + ($data) + '[schema' + ($lvl) + '[' + ($i) + ']] !== undefined; if (!' + ($valid) + ') break; }  if (!' + ($valid) + ') {  ';
          if (!it.compositeRule && $breakOnError) {
            out += ' validate.errors = [ { keyword: \'' + ('required') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
            if (it.opts.messages !== false) {
              out += ' , message: \'is a required property\' ';
            }
            if (it.opts.verbose || it.opts.i18n) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' ';
            }
            if (it.opts.verbose) {
              out += ' , data: ' + ($data) + ' ';
            }
            if (it.opts.i18n) {
              out += ', params: { missingProperty: \'' + ($missingProperty) + '\' }';
            }
            out += ' }]; return false; ';
          } else {
            out += '  var err =   { keyword: \'' + ('required') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
            if (it.opts.messages !== false) {
              out += ' , message: \'is a required property\' ';
            }
            if (it.opts.verbose || it.opts.i18n) {
              out += ' , schema: validate.schema' + ($schemaPath) + ' ';
            }
            if (it.opts.verbose) {
              out += ' , data: ' + ($data) + ' ';
            }
            if (it.opts.i18n) {
              out += ', params: { missingProperty: \'' + ($missingProperty) + '\' }';
            }
            out += ' }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
          out += ' } else { ';
        }
      } else {
        if ($required.length <= 20) {
          var arr3 = $required;
          if (arr3) {
            var $property, $i = -1,
              l3 = arr3.length - 1;
            while ($i < l3) {
              $property = arr3[$i += 1];
              var $prop = it.util.getProperty($property),
                $missingProperty = it.util.escapeQuotes($prop);
              it.errorPath = it.util.getPath($currentErrorPath, $property, it.opts.jsonPointers);
              out += ' if (' + ($data) + ($prop) + ' === undefined) {  var err =   { keyword: \'' + ('required') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
              if (it.opts.messages !== false) {
                out += ' , message: \'is a required property\' ';
              }
              if (it.opts.verbose || it.opts.i18n) {
                out += ' , schema: validate.schema' + ($schemaPath) + ' ';
              }
              if (it.opts.verbose) {
                out += ' , data: ' + ($data) + ' ';
              }
              if (it.opts.i18n) {
                out += ', params: { missingProperty: \'' + ($missingProperty) + '\' }';
              }
              out += ' }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
            }
          }
        } else {
          out += '  var schema' + ($lvl) + ' = validate.schema' + ($schemaPath) + '; ';
          var $i = 'i' + $lvl,
            $propertyPath = 'schema' + $lvl + '[' + $i + ']',
            $missingProperty = '\' + "\'" + ' + $propertyPath + ' + "\'" + \'';
          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
          out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < schema' + ($lvl) + '.length; ' + ($i) + '++) { if (' + ($data) + '[schema' + ($lvl) + '[' + ($i) + ']] === undefined) {  var err =   { keyword: \'' + ('required') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
          if (it.opts.messages !== false) {
            out += ' , message: \'is a required property\' ';
          }
          if (it.opts.verbose || it.opts.i18n) {
            out += ' , schema: validate.schema' + ($schemaPath) + ' ';
          }
          if (it.opts.verbose) {
            out += ' , data: ' + ($data) + ' ';
          }
          if (it.opts.i18n) {
            out += ', params: { missingProperty: \'' + ($missingProperty) + '\' }';
          }
          out += ' }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';
        }
      }
      it.errorPath = $currentErrorPath;
    } else if ($breakOnError) {
      out += ' if (true) {';
    }
    return out;
  }


/***/ },
/* 334 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_dependencies(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['dependencies'],
      $schemaPath = it.schemaPath + '.' + 'dependencies',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    var $it = it.util.copy(it),
      $closingBraces = '';
    $it.level++;
    var $schemaDeps = {},
      $propertyDeps = {};
    for ($property in $schema) {
      var $sch = $schema[$property];
      var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
      $deps[$property] = $sch;
    }
    out += 'var ' + ($errs) + ' = errors;';
    for (var $property in $propertyDeps) {
      out += ' if (' + ($data) + (it.util.getProperty($property)) + ' !== undefined) { ';
      $deps = $propertyDeps[$property];
      out += ' if ( ';
      var arr1 = $deps;
      if (arr1) {
        var $dep, $i = -1,
          l1 = arr1.length - 1;
        while ($i < l1) {
          $dep = arr1[$i += 1];
          if ($i) {
            out += ' || ';
          }
          out += ' ' + ($data) + (it.util.getProperty($dep)) + ' === undefined ';
        }
      }
      out += ') {  ';
      if (!it.compositeRule && $breakOnError) {
        out += ' validate.errors = [ { keyword: \'' + ('dependencies') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should have ';
          if ($deps.length == 1) {
            out += 'property ' + (it.util.escapeQuotes($deps[0]));
          } else {
            out += 'properties ' + (it.util.escapeQuotes($deps.join(", ")));
          }
          out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\' ';
        }
        if (it.opts.verbose || it.opts.i18n) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' ';
        }
        if (it.opts.verbose) {
          out += ' , data: ' + ($data) + ' ';
        }
        if (it.opts.i18n) {
          out += ', params: { n: ' + ($deps.length) + ', deps: \'';
          if ($deps.length == 1) {
            out += '' + (it.util.escapeQuotes($deps[0]));
          } else {
            out += '' + (it.util.escapeQuotes($deps.join(", ")));
          }
          out += '\', property: \'' + (it.util.escapeQuotes($property)) + '\' }';
        }
        out += ' }]; return false; ';
      } else {
        out += '  var err =   { keyword: \'' + ('dependencies') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should have ';
          if ($deps.length == 1) {
            out += 'property ' + (it.util.escapeQuotes($deps[0]));
          } else {
            out += 'properties ' + (it.util.escapeQuotes($deps.join(", ")));
          }
          out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\' ';
        }
        if (it.opts.verbose || it.opts.i18n) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' ';
        }
        if (it.opts.verbose) {
          out += ' , data: ' + ($data) + ' ';
        }
        if (it.opts.i18n) {
          out += ', params: { n: ' + ($deps.length) + ', deps: \'';
          if ($deps.length == 1) {
            out += '' + (it.util.escapeQuotes($deps[0]));
          } else {
            out += '' + (it.util.escapeQuotes($deps.join(", ")));
          }
          out += '\', property: \'' + (it.util.escapeQuotes($property)) + '\' }';
        }
        out += ' }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' }   ';
      if ($breakOnError) {
        $closingBraces += '}';
        out += ' else { ';
      }
      out += ' }';
    }
    for (var $property in $schemaDeps) {
      var $sch = $schemaDeps[$property];
      if (it.util.schemaHasRules($sch, it.RULES.all)) {
        out += ' valid' + ($it.level) + ' = true; if (' + ($data) + '[\'' + ($property) + '\'] !== undefined) { ';
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + it.util.getProperty($property);
        out += ' ' + (it.validate($it)) + ' }  ';
        if ($breakOnError) {
          out += ' if (valid' + ($it.level) + ') { ';
          $closingBraces += '}';
        }
      }
    }
    if ($breakOnError) {
      out += '   ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
    }
    out = it.util.cleanUpCode(out);
    return out;
  }


/***/ },
/* 335 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_items(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['items'],
      $schemaPath = it.schemaPath + '.' + 'items',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    var $it = it.util.copy(it),
      $closingBraces = '';
    $it.level++;
    var $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt;
    out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
    if (Array.isArray($schema)) {
      var $additionalItems = it.schema.additionalItems;
      if ($additionalItems === false) {
        out += ' ' + ($valid) + ' = ' + ($data) + '.length <= ' + ($schema.length) + ';  if (!' + ($valid) + ') {  ';
        if (!it.compositeRule && $breakOnError) {
          out += ' validate.errors = [ { keyword: \'' + ('additionalItems') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
          if (it.opts.messages !== false) {
            out += ' , message: \'should NOT have more than ' + ($schema.length) + ' items\' ';
          }
          if (it.opts.verbose || it.opts.i18n) {
            out += ' , schema: false ';
          }
          if (it.opts.verbose) {
            out += ' , data: ' + ($data) + ' ';
          }
          out += '  }]; return false; ';
        } else {
          out += '  var err =   { keyword: \'' + ('additionalItems') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
          if (it.opts.messages !== false) {
            out += ' , message: \'should NOT have more than ' + ($schema.length) + ' items\' ';
          }
          if (it.opts.verbose || it.opts.i18n) {
            out += ' , schema: false ';
          }
          if (it.opts.verbose) {
            out += ' , data: ' + ($data) + ' ';
          }
          out += '  }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' }  ';
        if ($breakOnError) {
          $closingBraces += '}';
          out += ' else { ';
        }
      }
      var arr1 = $schema;
      if (arr1) {
        var $sch, $i = -1,
          l1 = arr1.length - 1;
        while ($i < l1) {
          $sch = arr1[$i += 1];
          if (it.util.schemaHasRules($sch, it.RULES.all)) {
            out += ' valid' + ($it.level) + ' = true; if (' + ($data) + '.length > ' + ($i) + ') { ';
            $it.schema = $sch;
            $it.schemaPath = $schemaPath + '[' + $i + ']';
            $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
            var $passData = $data + '[' + $i + ']';
            var $code = it.validate($it);
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
            } else {
              out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
            }
            out += ' }  ';
            if ($breakOnError) {
              out += ' if (valid' + ($it.level) + ') { ';
              $closingBraces += '}';
            }
          }
        }
      }
      if (typeof $additionalItems == 'object' && it.util.schemaHasRules($additionalItems, it.RULES.all)) {
        $it.schema = $additionalItems;
        $it.schemaPath = it.schemaPath + '.additionalItems';
        out += ' valid' + ($it.level) + ' = true; if (' + ($data) + '.length > ' + ($schema.length) + ') {  for (var i' + ($lvl) + ' = ' + ($schema.length) + '; i' + ($lvl) + ' < ' + ($data) + '.length; i' + ($lvl) + '++) { ';
        $it.errorPath = it.util.getPathExpr(it.errorPath, 'i' + $lvl, it.opts.jsonPointers, true);
        var $passData = $data + '[i' + $lvl + ']';
        var $code = it.validate($it);
        if (it.util.varOccurences($code, $nextData) < 2) {
          out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
        } else {
          out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
        }
        if ($breakOnError) {
          out += ' if (!valid' + ($it.level) + ') break; ';
        }
        out += ' } }  ';
        if ($breakOnError) {
          out += ' if (valid' + ($it.level) + ') { ';
          $closingBraces += '}';
        }
      }
    } else if (it.util.schemaHasRules($schema, it.RULES.all)) {
      $it.schema = $schema;
      $it.schemaPath = $schemaPath;
      out += '  for (var i' + ($lvl) + ' = ' + (0) + '; i' + ($lvl) + ' < ' + ($data) + '.length; i' + ($lvl) + '++) { ';
      $it.errorPath = it.util.getPathExpr(it.errorPath, 'i' + $lvl, it.opts.jsonPointers, true);
      var $passData = $data + '[i' + $lvl + ']';
      var $code = it.validate($it);
      if (it.util.varOccurences($code, $nextData) < 2) {
        out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
      } else {
        out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
      }
      if ($breakOnError) {
        out += ' if (!valid' + ($it.level) + ') break; ';
      }
      out += ' }  ';
      if ($breakOnError) {
        out += ' if (valid' + ($it.level) + ') { ';
        $closingBraces += '}';
      }
    }
    if ($breakOnError) {
      out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
    }
    out = it.util.cleanUpCode(out);
    return out;
  }


/***/ },
/* 336 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_maxProperties(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['maxProperties'],
      $schemaPath = it.schemaPath + '.' + 'maxProperties',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    out += 'if (Object.keys(' + ($data) + ').length > ' + ($schema) + ') {  ';
    if (!it.compositeRule && $breakOnError) {
      out += ' validate.errors = [ { keyword: \'' + ('maxProperties') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT have more than ' + ($schema) + ' properties\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + ($schema) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }]; return false; ';
    } else {
      out += '  var err =   { keyword: \'' + ('maxProperties') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT have more than ' + ($schema) + ' properties\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + ($schema) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  }


/***/ },
/* 337 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_minLength(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['minLength'],
      $schemaPath = it.schemaPath + '.' + 'minLength',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    out += 'if ( ';
    if (it.opts.unicode === false) {
      out += ' ' + ($data) + '.length ';
    } else {
      out += ' ucs2length(' + ($data) + ') ';
    }
    out += ' < ' + ($schema) + ') {  ';
    if (!it.compositeRule && $breakOnError) {
      out += ' validate.errors = [ { keyword: \'' + ('minLength') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT be shorter than ' + ($schema) + ' characters\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + ($schema) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }]; return false; ';
    } else {
      out += '  var err =   { keyword: \'' + ('minLength') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT be shorter than ' + ($schema) + ' characters\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + ($schema) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  }


/***/ },
/* 338 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_multipleOf(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['multipleOf'],
      $schemaPath = it.schemaPath + '.' + 'multipleOf',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    out += 'var division' + ($lvl) + ' = ' + ($data) + ' / ' + ($schema) + ';if (' + ($data) + ' / ' + ($schema) + ' !== parseInt(division' + ($lvl) + ')) {  ';
    if (!it.compositeRule && $breakOnError) {
      out += ' validate.errors = [ { keyword: \'' + ('multipleOf') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should be multiple of ' + ($schema) + '\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + ($schema) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }]; return false; ';
    } else {
      out += '  var err =   { keyword: \'' + ('multipleOf') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should be multiple of ' + ($schema) + '\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + ($schema) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  }


/***/ },
/* 339 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_pattern(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['pattern'],
      $schemaPath = it.schemaPath + '.' + 'pattern',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    new RegExp($schema);
    out += 'if (! ' + (it.usePattern($schema)) + '.test(' + ($data) + ') ) {  ';
    if (!it.compositeRule && $breakOnError) {
      out += ' validate.errors = [ { keyword: \'' + ('pattern') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should match pattern "' + (it.util.escapeQuotes($schema)) + '"\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + (it.util.toQuotedString($schema)) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      if (it.opts.i18n) {
        out += ', params: { escaped: \'' + (it.util.escapeQuotes($schema)) + '\' }';
      }
      out += ' }]; return false; ';
    } else {
      out += '  var err =   { keyword: \'' + ('pattern') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should match pattern "' + (it.util.escapeQuotes($schema)) + '"\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + (it.util.toQuotedString($schema)) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      if (it.opts.i18n) {
        out += ', params: { escaped: \'' + (it.util.escapeQuotes($schema)) + '\' }';
      }
      out += ' }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  }


/***/ },
/* 340 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_uniqueItems(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['uniqueItems'],
      $schemaPath = it.schemaPath + '.' + 'uniqueItems',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    if ($schema && it.opts.uniqueItems !== false) {
      out += ' var ' + ($valid) + ' = true; if (' + ($data) + '.length > 1) { var i = ' + ($data) + '.length, j; outer: for (;i--;) { for (j = i; j--;) { if (equal(' + ($data) + '[i], ' + ($data) + '[j])) { ' + ($valid) + ' = false; break outer; } } } } if (!' + ($valid) + ') {  ';
      if (!it.compositeRule && $breakOnError) {
        out += ' validate.errors = [ { keyword: \'' + ('uniqueItems') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should NOT have duplicate items (items ## \' + j + \' and \' + i + \' are identical)\' ';
        }
        if (it.opts.verbose || it.opts.i18n) {
          out += ' , schema: ' + ($schema) + ' ';
        }
        if (it.opts.verbose) {
          out += ' , data: ' + ($data) + ' ';
        }
        if (it.opts.i18n) {
          out += ', params: { i: i, j: j }';
        }
        out += ' }]; return false; ';
      } else {
        out += '  var err =   { keyword: \'' + ('uniqueItems') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should NOT have duplicate items (items ## \' + j + \' and \' + i + \' are identical)\' ';
        }
        if (it.opts.verbose || it.opts.i18n) {
          out += ' , schema: ' + ($schema) + ' ';
        }
        if (it.opts.verbose) {
          out += ' , data: ' + ($data) + ' ';
        }
        if (it.opts.i18n) {
          out += ', params: { i: i, j: j }';
        }
        out += ' }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' } ';
      if ($breakOnError) {
        out += ' else { ';
      }
    } else {
      if ($breakOnError) {
        out += ' if (true) { ';
      }
    }
    return out;
  }


/***/ },
/* 341 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_allOf(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['allOf'],
      $schemaPath = it.schemaPath + '.' + 'allOf',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    var $it = it.util.copy(it),
      $closingBraces = '';
    $it.level++;
    var arr1 = $schema;
    if (arr1) {
      var $sch, $i = -1,
        l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[$i += 1];
        if (it.util.schemaHasRules($sch, it.RULES.all)) {
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + '[' + $i + ']';
          out += ' ' + (it.validate($it)) + ' ';
          if ($breakOnError) {
            out += ' if (valid' + ($it.level) + ') { ';
            $closingBraces += '}';
          }
        }
      }
    }
    if ($breakOnError) {
      out += ' ' + ($closingBraces.slice(0, -1));
    }
    out = it.util.cleanUpCode(out);
    return out;
  }


/***/ },
/* 342 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_enum(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['enum'],
      $schemaPath = it.schemaPath + '.' + 'enum',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    var $i = 'i' + $lvl;
    out += 'var enumSchema' + ($lvl) + ' = validate.schema' + ($schemaPath) + ' , ' + ($valid) + ' = false;for (var ' + ($i) + '=0; ' + ($i) + '<enumSchema' + ($lvl) + '.length; ' + ($i) + '++) if (equal(' + ($data) + ', enumSchema' + ($lvl) + '[' + ($i) + '])) { ' + ($valid) + ' = true; break; } if (!' + ($valid) + ') {  ';
    if (!it.compositeRule && $breakOnError) {
      out += ' validate.errors = [ { keyword: \'' + ('enum') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should be equal to one of values\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }]; return false; ';
    } else {
      out += '  var err =   { keyword: \'' + ('enum') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should be equal to one of values\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' }';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  }


/***/ },
/* 343 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_maxItems(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['maxItems'],
      $schemaPath = it.schemaPath + '.' + 'maxItems',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    out += 'if (' + ($data) + '.length > ' + ($schema) + ') {  ';
    if (!it.compositeRule && $breakOnError) {
      out += ' validate.errors = [ { keyword: \'' + ('maxItems') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT have more than ' + ($schema) + ' items\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + ($schema) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }]; return false; ';
    } else {
      out += '  var err =   { keyword: \'' + ('maxItems') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT have more than ' + ($schema) + ' items\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + ($schema) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  }


/***/ },
/* 344 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_maximum(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['maximum'],
      $schemaPath = it.schemaPath + '.' + 'maximum',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    var $exclusive = it.schema.exclusiveMaximum === true,
      $op = $exclusive ? '<' : '<=',
      $notOp = $exclusive ? '>=' : '>';
    out += 'if (' + ($data) + ' ' + ($notOp) + ' ' + ($schema) + ') {  ';
    if (!it.compositeRule && $breakOnError) {
      out += ' validate.errors = [ { keyword: \'' + ('maximum') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should be ' + ($op) + ' ' + ($schema) + '\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + ($schema) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      if (it.opts.i18n) {
        out += ', params: { condition: \'' + ($op) + ' ' + ($schema) + '\' }';
      }
      out += ' }]; return false; ';
    } else {
      out += '  var err =   { keyword: \'' + ('maximum') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should be ' + ($op) + ' ' + ($schema) + '\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + ($schema) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      if (it.opts.i18n) {
        out += ', params: { condition: \'' + ($op) + ' ' + ($schema) + '\' }';
      }
      out += ' }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  }


/***/ },
/* 345 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_minProperties(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['minProperties'],
      $schemaPath = it.schemaPath + '.' + 'minProperties',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    out += 'if (Object.keys(' + ($data) + ').length < ' + ($schema) + ') {  ';
    if (!it.compositeRule && $breakOnError) {
      out += ' validate.errors = [ { keyword: \'' + ('minProperties') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT have less than ' + ($schema) + ' properties\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + ($schema) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }]; return false; ';
    } else {
      out += '  var err =   { keyword: \'' + ('minProperties') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT have less than ' + ($schema) + ' properties\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: ' + ($schema) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += '} ';
    if ($breakOnError) {
      out += ' else { ';
    }
    return out;
  }


/***/ },
/* 346 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_not(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['not'],
      $schemaPath = it.schemaPath + '.' + 'not',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    var $it = it.util.copy(it),
      $closingBraces = '';
    $it.level++;
    if (it.util.schemaHasRules($schema, it.RULES.all)) {
      $it.schema = $schema;
      $it.schemaPath = $schemaPath;
      out += ' var ' + ($errs) + ' = errors;  ';
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      out += ' ' + (it.validate($it)) + '  ';
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += ' if (valid' + ($it.level) + ') {  ';
      if (!it.compositeRule && $breakOnError) {
        out += ' validate.errors = [ { keyword: \'' + ('not') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should NOT be valid\' ';
        }
        if (it.opts.verbose || it.opts.i18n) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' ';
        }
        if (it.opts.verbose) {
          out += ' , data: ' + ($data) + ' ';
        }
        out += '  }]; return false; ';
      } else {
        out += '  var err =   { keyword: \'' + ('not') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should NOT be valid\' ';
        }
        if (it.opts.verbose || it.opts.i18n) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' ';
        }
        if (it.opts.verbose) {
          out += ' , data: ' + ($data) + ' ';
        }
        out += '  }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' } else { errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
      if (it.opts.allErrors) {
        out += ' } ';
      }
    } else {
      out += '  var err =   { keyword: \'' + ('not') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT be valid\' ';
      }
      if (it.opts.verbose || it.opts.i18n) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' ';
      }
      if (it.opts.verbose) {
        out += ' , data: ' + ($data) + ' ';
      }
      out += '  }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      if ($breakOnError) {
        out += ' if (false) { ';
      }
    }
    return out;
  }


/***/ },
/* 347 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_properties(it) {
    var out = ' ';
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $schema = it.schema['properties'],
      $schemaPath = it.schemaPath + '.' + 'properties',
      $breakOnError = !it.opts.allErrors;
    var $data = 'data' + ($dataLvl || ''),
      $valid = 'valid' + $lvl,
      $errs = 'errs' + $lvl;
    var $it = it.util.copy(it),
      $closingBraces = '';
    $it.level++;
    var $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt;
    var $schemaKeys = Object.keys($schema || {}),
      $pProperties = it.schema.patternProperties || {},
      $pPropertyKeys = Object.keys($pProperties),
      $aProperties = it.schema.additionalProperties,
      $someProperties = $schemaKeys.length || $pPropertyKeys.length,
      $noAdditional = $aProperties === false,
      $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,
      $removeAdditional = it.opts.removeAdditional,
      $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,
      $requiredProperties = it.util.toHash(it.schema.required || []);
    out += 'var ' + ($errs) + ' = errors;var valid' + ($it.level) + ' = true;';
    if ($checkAdditional) {
      out += ' for (var key' + ($lvl) + ' in ' + ($data) + ') { ';
      if ($someProperties) {
        out += ' var isAdditional' + ($lvl) + ' = !(false ';
        if ($schemaKeys.length) {
          if ($schemaKeys.length > 5) {
            out += ' || validate.schema' + ($schemaPath) + '[key' + ($lvl) + '] ';
          } else {
            var arr1 = $schemaKeys;
            if (arr1) {
              var $propertyKey, i1 = -1,
                l1 = arr1.length - 1;
              while (i1 < l1) {
                $propertyKey = arr1[i1 += 1];
                out += ' || key' + ($lvl) + ' == ' + (it.util.toQuotedString($propertyKey)) + ' ';
              }
            }
          }
        }
        if ($pPropertyKeys.length) {
          var arr2 = $pPropertyKeys;
          if (arr2) {
            var $pProperty, $i = -1,
              l2 = arr2.length - 1;
            while ($i < l2) {
              $pProperty = arr2[$i += 1];
              out += ' || ' + (it.usePattern($pProperty)) + '.test(key' + ($lvl) + ') ';
            }
          }
        }
        out += ' ); if (isAdditional' + ($lvl) + ') { ';
      }
      if ($removeAdditional == 'all') {
        out += ' delete ' + ($data) + '[key' + ($lvl) + ']; ';
      } else {
        var $currentErrorPath = it.errorPath;
        it.errorPath = it.util.getPathExpr(it.errorPath, 'key' + $lvl, it.opts.jsonPointers);
        if ($noAdditional) {
          if ($removeAdditional) {
            out += ' delete ' + ($data) + '[key' + ($lvl) + ']; ';
          } else {
            out += ' valid' + ($it.level) + ' = false;  ';
            if (!it.compositeRule && $breakOnError) {
              out += ' validate.errors = [ { keyword: \'' + ('additionalProperties') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
              if (it.opts.messages !== false) {
                out += ' , message: \'should NOT have additional properties\' ';
              }
              if (it.opts.verbose || it.opts.i18n) {
                out += ' , schema: false ';
              }
              if (it.opts.verbose) {
                out += ' , data: ' + ($data) + ' ';
              }
              out += '  }]; return false; ';
            } else {
              out += '  var err =   { keyword: \'' + ('additionalProperties') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
              if (it.opts.messages !== false) {
                out += ' , message: \'should NOT have additional properties\' ';
              }
              if (it.opts.verbose || it.opts.i18n) {
                out += ' , schema: false ';
              }
              if (it.opts.verbose) {
                out += ' , data: ' + ($data) + ' ';
              }
              out += '  }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
            if ($breakOnError) {
              out += ' break; ';
            }
          }
        } else if ($additionalIsSchema) {
          if ($removeAdditional == 'failing') {
            out += ' var ' + ($errs) + ' = errors;  ';
            var $wasComposite = it.compositeRule;
            it.compositeRule = $it.compositeRule = true;
            $it.schema = $aProperties;
            $it.schemaPath = it.schemaPath + '.additionalProperties';
            $it.errorPath = it.errorPath;
            var $passData = $data + '[key' + $lvl + ']';
            var $code = it.validate($it);
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
            } else {
              out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
            }
            out += ' if (!valid' + ($it.level) + ') { errors = ' + ($errs) + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + ($data) + '[key' + ($lvl) + ']; }  ';
            it.compositeRule = $it.compositeRule = $wasComposite;
          } else {
            $it.schema = $aProperties;
            $it.schemaPath = it.schemaPath + '.additionalProperties';
            $it.errorPath = it.errorPath;
            var $passData = $data + '[key' + $lvl + ']';
            var $code = it.validate($it);
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
            } else {
              out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
            }
            if ($breakOnError) {
              out += ' if (!valid' + ($it.level) + ') break; ';
            }
          }
        }
        it.errorPath = $currentErrorPath;
      }
      if ($someProperties) {
        out += ' } ';
      }
      out += ' }  ';
      if ($breakOnError) {
        out += ' if (valid' + ($it.level) + ') { ';
        $closingBraces += '}';
      }
    }
    if ($schemaKeys.length) {
      var arr3 = $schemaKeys;
      if (arr3) {
        var $propertyKey, i3 = -1,
          l3 = arr3.length - 1;
        while (i3 < l3) {
          $propertyKey = arr3[i3 += 1];
          var $sch = $schema[$propertyKey];
          if (it.util.schemaHasRules($sch, it.RULES.all)) {
            $it.schema = $sch;
            var $prop = it.util.getProperty($propertyKey),
              $passData = $data + $prop;
            $it.schemaPath = $schemaPath + $prop;
            $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
            var $code = it.validate($it);
            if (it.util.varOccurences($code, $nextData) < 2) {
              $code = it.util.varReplace($code, $nextData, $passData);
              var $useData = $passData;
            } else {
              var $useData = $nextData;
              out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ';
            }
            if ($requiredProperties[$propertyKey]) {
              out += ' if (' + ($useData) + ' === undefined) { valid' + ($it.level) + ' = false; ';
              var $currentErrorPath = it.errorPath,
                $missingProperty = it.util.escapeQuotes($propertyKey);
              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
              if (!it.compositeRule && $breakOnError) {
                out += ' validate.errors = [ { keyword: \'' + ('required') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'is a required property\' ';
                }
                if (it.opts.verbose || it.opts.i18n) {
                  out += ' , schema: validate.schema' + ($schemaPath) + ' ';
                }
                if (it.opts.verbose) {
                  out += ' , data: ' + ($data) + ' ';
                }
                if (it.opts.i18n) {
                  out += ', params: { missingProperty: \'' + ($missingProperty) + '\' }';
                }
                out += ' }]; return false; ';
              } else {
                out += '  var err =   { keyword: \'' + ('required') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'is a required property\' ';
                }
                if (it.opts.verbose || it.opts.i18n) {
                  out += ' , schema: validate.schema' + ($schemaPath) + ' ';
                }
                if (it.opts.verbose) {
                  out += ' , data: ' + ($data) + ' ';
                }
                if (it.opts.i18n) {
                  out += ', params: { missingProperty: \'' + ($missingProperty) + '\' }';
                }
                out += ' }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              it.errorPath = $currentErrorPath;
              out += ' } else { ';
            } else {
              if ($breakOnError) {
                out += ' if (' + ($useData) + ' === undefined) { valid' + ($it.level) + ' = true; } else { ';
              } else {
                out += ' if (' + ($useData) + ' !== undefined) { ';
              }
            }
            out += ' ' + ($code) + ' } ';
          }
          if ($breakOnError) {
            out += ' if (valid' + ($it.level) + ') { ';
            $closingBraces += '}';
          }
        }
      }
    }
    var arr4 = $pPropertyKeys;
    if (arr4) {
      var $pProperty, i4 = -1,
        l4 = arr4.length - 1;
      while (i4 < l4) {
        $pProperty = arr4[i4 += 1];
        var $sch = $pProperties[$pProperty];
        if (it.util.schemaHasRules($sch, it.RULES.all)) {
          $it.schema = $sch;
          $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);
          out += ' for (var key' + ($lvl) + ' in ' + ($data) + ') { if (' + (it.usePattern($pProperty)) + '.test(key' + ($lvl) + ')) { ';
          $it.errorPath = it.util.getPathExpr(it.errorPath, 'key' + $lvl, it.opts.jsonPointers);
          var $passData = $data + '[key' + $lvl + ']';
          var $code = it.validate($it);
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
          } else {
            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
          }
          if ($breakOnError) {
            out += ' if (!valid' + ($it.level) + ') break; ';
          }
          out += ' } ';
          if ($breakOnError) {
            out += ' else valid' + ($it.level) + ' = true; ';
          }
          out += ' }  ';
          if ($breakOnError) {
            out += ' if (valid' + ($it.level) + ') { ';
            $closingBraces += '}';
          }
        }
      }
    }
    if ($breakOnError) {
      out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
    }
    out = it.util.cleanUpCode(out);
    return out;
  }


/***/ },
/* 348 */
/***/ function(module, exports) {

  'use strict';
  module.exports = function generate_validate(it) {
    var out = '';
    if (it.isTop) {
      var $top = it.isTop,
        $lvl = it.level = 0,
        $dataLvl = it.dataLevel = 0,
        $data = 'data';
      it.rootId = it.resolve.fullPath(it.root.schema.id);
      it.baseId = it.baseId || it.rootId;
      delete it.isTop;
      out += ' validate = function (data, dataPath) { \'use strict\'; var vErrors = null; ';
      out += ' var errors = 0;     ';
    } else {
      var $lvl = it.level,
        $dataLvl = it.dataLevel,
        $data = 'data' + ($dataLvl || '');
      if (it.schema.id) it.baseId = it.resolve.url(it.baseId, it.schema.id);
      out += ' var errs_' + ($lvl) + ' = errors;';
    }
    var $valid = 'valid' + $lvl,
      $breakOnError = !it.opts.allErrors,
      $closingBraces1 = '',
      $closingBraces2 = '';
    var $typeSchema = it.schema.type;
    var arr1 = it.RULES;
    if (arr1) {
      var $rulesGroup, i1 = -1,
        l1 = arr1.length - 1;
      while (i1 < l1) {
        $rulesGroup = arr1[i1 += 1];
        if ($shouldUseGroup($rulesGroup)) {
          if ($rulesGroup.type) {
            out += ' if (' + (it.util.checkDataType($rulesGroup.type, $data)) + ') { ';
          }
          var arr2 = $rulesGroup.rules;
          if (arr2) {
            var $rule, i2 = -1,
              l2 = arr2.length - 1;
            while (i2 < l2) {
              $rule = arr2[i2 += 1];
              if ($shouldUseRule($rule)) {
                out += ' ' + ($rule.code(it)) + ' ';
                if ($breakOnError) {
                  $closingBraces1 += '}';
                }
              }
            }
          }
          if ($breakOnError) {
            out += ' ' + ($closingBraces1) + ' ';
            $closingBraces1 = '';
          }
          if ($rulesGroup.type) {
            out += ' } ';
            if ($typeSchema && $typeSchema === $rulesGroup.type) {
              var $typeChecked = true;
              out += ' else {  ';
              if (!it.compositeRule && $breakOnError) {
                out += ' validate.errors = [ { keyword: \'' + ('type') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'should be ';
                  if ($isArray) {
                    out += '' + ($typeSchema.join(","));
                  } else {
                    out += '' + ($typeSchema);
                  }
                  out += '\' ';
                }
                if (it.opts.verbose || it.opts.i18n) {
                  out += ' , schema: ';
                  if ($isArray) {
                    out += '[\'' + ($typeSchema.join("','")) + '\']';
                  } else {
                    out += '\'' + ($typeSchema) + '\'';
                  }
                }
                if (it.opts.verbose) {
                  out += ' , data: ' + ($data) + ' ';
                }
                if (it.opts.i18n) {
                  out += ', params: { type: \'';
                  if ($isArray) {
                    out += '' + ($typeSchema.join(","));
                  } else {
                    out += '' + ($typeSchema);
                  }
                  out += '\' }';
                }
                out += ' }]; return false; ';
              } else {
                out += '  var err =   { keyword: \'' + ('type') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'should be ';
                  if ($isArray) {
                    out += '' + ($typeSchema.join(","));
                  } else {
                    out += '' + ($typeSchema);
                  }
                  out += '\' ';
                }
                if (it.opts.verbose || it.opts.i18n) {
                  out += ' , schema: ';
                  if ($isArray) {
                    out += '[\'' + ($typeSchema.join("','")) + '\']';
                  } else {
                    out += '\'' + ($typeSchema) + '\'';
                  }
                }
                if (it.opts.verbose) {
                  out += ' , data: ' + ($data) + ' ';
                }
                if (it.opts.i18n) {
                  out += ', params: { type: \'';
                  if ($isArray) {
                    out += '' + ($typeSchema.join(","));
                  } else {
                    out += '' + ($typeSchema);
                  }
                  out += '\' }';
                }
                out += ' }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              out += ' } ';
            }
          }
          if ($breakOnError) {
            out += ' if (errors === ';
            if ($top) {
              out += '0';
            } else {
              out += 'errs_' + ($lvl);
            }
            out += ') { ';
            $closingBraces2 += '}';
          }
        }
      }
    }
    if ($typeSchema && !$typeChecked) {
      var $schemaPath = it.schemaPath + '.type',
        $isArray = Array.isArray($typeSchema),
        $method = $isArray ? 'checkDataTypes' : 'checkDataType';
      out += ' if (' + (it.util[$method]($typeSchema, $data, true)) + ') {  ';
      if (!it.compositeRule && $breakOnError) {
        out += ' validate.errors = [ { keyword: \'' + ('type') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should be ';
          if ($isArray) {
            out += '' + ($typeSchema.join(","));
          } else {
            out += '' + ($typeSchema);
          }
          out += '\' ';
        }
        if (it.opts.verbose || it.opts.i18n) {
          out += ' , schema: ';
          if ($isArray) {
            out += '[\'' + ($typeSchema.join("','")) + '\']';
          } else {
            out += '\'' + ($typeSchema) + '\'';
          }
        }
        if (it.opts.verbose) {
          out += ' , data: ' + ($data) + ' ';
        }
        if (it.opts.i18n) {
          out += ', params: { type: \'';
          if ($isArray) {
            out += '' + ($typeSchema.join(","));
          } else {
            out += '' + ($typeSchema);
          }
          out += '\' }';
        }
        out += ' }]; return false; ';
      } else {
        out += '  var err =   { keyword: \'' + ('type') + '\', dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should be ';
          if ($isArray) {
            out += '' + ($typeSchema.join(","));
          } else {
            out += '' + ($typeSchema);
          }
          out += '\' ';
        }
        if (it.opts.verbose || it.opts.i18n) {
          out += ' , schema: ';
          if ($isArray) {
            out += '[\'' + ($typeSchema.join("','")) + '\']';
          } else {
            out += '\'' + ($typeSchema) + '\'';
          }
        }
        if (it.opts.verbose) {
          out += ' , data: ' + ($data) + ' ';
        }
        if (it.opts.i18n) {
          out += ', params: { type: \'';
          if ($isArray) {
            out += '' + ($typeSchema.join(","));
          } else {
            out += '' + ($typeSchema);
          }
          out += '\' }';
        }
        out += ' }; if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' }';
    }
    if ($breakOnError) {
      out += ' ' + ($closingBraces2) + ' ';
    }
    if ($top) {
      out += ' validate.errors = vErrors; ';
      out += ' return errors === 0;       ';
      out += ' }';
    } else {
      out += ' var ' + ($valid) + ' = errors === errs_' + ($lvl) + ';';
    }
    out = it.util.cleanUpCode(out);
    if ($top && $breakOnError) {
      out = it.util.cleanUpVarErrors(out);
    }

    function $shouldUseGroup($rulesGroup) {
      for (var i = 0; i < $rulesGroup.rules.length; i++)
        if ($shouldUseRule($rulesGroup.rules[i])) return true;
    }

    function $shouldUseRule($rule) {
      return it.schema[$rule.keyword] !== undefined || ($rule.keyword == 'properties' && (it.schema.additionalProperties === false || typeof it.schema.additionalProperties == 'object' || (it.schema.patternProperties && Object.keys(it.schema.patternProperties).length)));
    }
    return out;
  }


/***/ },
/* 349 */
/***/ function(module, exports) {

  'use strict';


  var Cache = module.exports = function Cache() {
      this._cache = {};
  };


  Cache.prototype.put = function Cache_put(key, value) {
      this._cache[key] = value;
  };


  Cache.prototype.get = function Cache_get(key) {
      return this._cache[key];
  };


  Cache.prototype.del = function Cache_del(key) {
      delete this._cache[key];
  };


/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var util = __webpack_require__(318);

  var DATE = /^\d\d\d\d-(\d\d)-(\d\d)$/;
  var DAYS = [0,31,29,31,30,31,30,31,31,30,31,30,31];
  var TIME = /^(\d\d):(\d\d):(\d\d)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)$/;
  var HOSTNAME = /^[a-z](?:(?:[-0-9a-z]{0,61})?[0-9a-z])?(\.[a-z](?:(?:[-0-9a-z]{0,61})?[0-9a-z])?)*$/i;
  var URI = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@\/?]|%[0-9a-f]{2})*)?(?:\#(?:[a-z0-9\-._~!$&'()*+,;=:@\/?]|%[0-9a-f]{2})*)?$/i;


  module.exports = formats;

  function formats(mode) {
    mode = mode == 'full' ? 'full' : 'fast';
    return util.copy(formats[mode]);
  }


  formats.fast = {
    // date: http://tools.ietf.org/html/rfc3339#section-5.6
    date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
    // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
    'date-time': /^\d\d\d\d-[0-1]\d-[0-3]\d[t ][0-2]\d:[0-5]\d:[0-5]\d(?:\.\d+)?(?:z|[+-]\d\d:\d\d)$/i,
    // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
    uri: /^(?:[a-z][a-z0-9+-.]*)?(?:\:|\/)\/?[^\s]*$/i,
    // email (sources from jsen validator):
    // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
    // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
    email: /^[a-z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
    hostname: HOSTNAME,
    // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
    ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
    // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
    ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
    regex: regex
  };


  formats.full = {
    date: date,
    'date-time': date_time,
    uri: uri,
    email: /^[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&''*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
    hostname: hostname,
    ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
    ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
    regex: regex
  };


  function date(str) {
    // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
    var matches = str.match(DATE);
    if (!matches) return false;

    var month = +matches[1];
    var day = +matches[2];
    return month >= 1 && month <= 12 && day >= 1 && day <= DAYS[month];
  }


  function date_time(str) {
    // http://tools.ietf.org/html/rfc3339#section-5.6
    var dateTime = str.toLowerCase().split('t');
    if (!date(dateTime[0])) return false;

    var matches = dateTime[1].match(TIME);
    if (!matches) return false;

    var hour = matches[1];
    var minute = matches[2];
    var second = matches[3];
    return hour <= 23 && minute <= 59 && second <= 59;
  }


  function hostname(str) {
    // http://tools.ietf.org/html/rfc1034#section-3.5
    return str.length <= 255 && HOSTNAME.test(str);
  }


  var NOT_URI_FRAGMENT = /\/|\:/;
  function uri(str) {
    // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
    return NOT_URI_FRAGMENT.test(str) && URI.test(str);
  }


  function regex(str) {
    try {
      new RegExp(str);
      return true;
    } catch(e) {
      return false;
    }
  }


/***/ },
/* 351 */
/***/ function(module, exports) {

  module.exports = {
    "id": "http://json-schema.org/draft-04/schema#",
    "$schema": "http://json-schema.org/draft-04/schema#",
    "description": "Core schema meta-schema",
    "definitions": {
      "schemaArray": {
        "type": "array",
        "minItems": 1,
        "items": {
          "$ref": "#"
        }
      },
      "positiveInteger": {
        "type": "integer",
        "minimum": 0
      },
      "positiveIntegerDefault0": {
        "allOf": [
          {
            "$ref": "#/definitions/positiveInteger"
          },
          {
            "default": 0
          }
        ]
      },
      "simpleTypes": {
        "enum": [
          "array",
          "boolean",
          "integer",
          "null",
          "number",
          "object",
          "string"
        ]
      },
      "stringArray": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "uniqueItems": true
      }
    },
    "type": "object",
    "properties": {
      "id": {
        "type": "string",
        "format": "uri"
      },
      "$schema": {
        "type": "string",
        "format": "uri"
      },
      "title": {
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "default": {},
      "multipleOf": {
        "type": "number",
        "minimum": 0,
        "exclusiveMinimum": true
      },
      "maximum": {
        "type": "number"
      },
      "exclusiveMaximum": {
        "type": "boolean",
        "default": false
      },
      "minimum": {
        "type": "number"
      },
      "exclusiveMinimum": {
        "type": "boolean",
        "default": false
      },
      "maxLength": {
        "$ref": "#/definitions/positiveInteger"
      },
      "minLength": {
        "$ref": "#/definitions/positiveIntegerDefault0"
      },
      "pattern": {
        "type": "string",
        "format": "regex"
      },
      "additionalItems": {
        "anyOf": [
          {
            "type": "boolean"
          },
          {
            "$ref": "#"
          }
        ],
        "default": {}
      },
      "items": {
        "anyOf": [
          {
            "$ref": "#"
          },
          {
            "$ref": "#/definitions/schemaArray"
          }
        ],
        "default": {}
      },
      "maxItems": {
        "$ref": "#/definitions/positiveInteger"
      },
      "minItems": {
        "$ref": "#/definitions/positiveIntegerDefault0"
      },
      "uniqueItems": {
        "type": "boolean",
        "default": false
      },
      "maxProperties": {
        "$ref": "#/definitions/positiveInteger"
      },
      "minProperties": {
        "$ref": "#/definitions/positiveIntegerDefault0"
      },
      "required": {
        "$ref": "#/definitions/stringArray"
      },
      "additionalProperties": {
        "anyOf": [
          {
            "type": "boolean"
          },
          {
            "$ref": "#"
          }
        ],
        "default": {}
      },
      "definitions": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#"
        },
        "default": {}
      },
      "properties": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#"
        },
        "default": {}
      },
      "patternProperties": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#"
        },
        "default": {}
      },
      "dependencies": {
        "type": "object",
        "additionalProperties": {
          "anyOf": [
            {
              "$ref": "#"
            },
            {
              "$ref": "#/definitions/stringArray"
            }
          ]
        }
      },
      "enum": {
        "type": "array",
        "minItems": 1,
        "uniqueItems": true
      },
      "type": {
        "anyOf": [
          {
            "$ref": "#/definitions/simpleTypes"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/simpleTypes"
            },
            "minItems": 1,
            "uniqueItems": true
          }
        ]
      },
      "allOf": {
        "$ref": "#/definitions/schemaArray"
      },
      "anyOf": {
        "$ref": "#/definitions/schemaArray"
      },
      "oneOf": {
        "$ref": "#/definitions/schemaArray"
      },
      "not": {
        "$ref": "#"
      }
    },
    "dependencies": {
      "exclusiveMaximum": [
        "maximum"
      ],
      "exclusiveMinimum": [
        "minimum"
      ]
    },
    "default": {}
  };

/***/ },
/* 352 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "tx",
    "link": "https://ripple.com/build/transactions/",
    "description": "An object in rippled txJSON format",
    "type": "object",
    "properties": {
      "Account": {
        "$ref": "address"
      }
    },
    "required": [
      "Account"
    ]
  };

/***/ },
/* 353 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "transactionType",
    "link": "transaction-types",
    "description": "The type of the tranasction.",
    "type": "string",
    "enum": [
      "payment",
      "order",
      "orderCancellation",
      "trustline",
      "settings",
      "suspendedPaymentCreation",
      "suspendedPaymentCancellation",
      "suspendedPaymentExecution"
    ]
  };

/***/ },
/* 354 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "hash128",
    "description": "The hexadecimal representation of a 128-bit hash",
    "type": "string",
    "pattern": "^[A-F0-9]{32}$"
  };

/***/ },
/* 355 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "hash256",
    "description": "The hexadecimal representation of a 256-bit hash",
    "type": "string",
    "pattern": "^[A-F0-9]{64}$"
  };

/***/ },
/* 356 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "sequence",
    "link": "account-sequence-number",
    "description": "An account transaction sequence number",
    "type": "integer",
    "minimum": 1
  };

/***/ },
/* 357 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "issue",
    "description": "A currency-counterparty pair, or just currency if it's XRP",
    "allOf": [
      {
        "$ref": "amountbase"
      },
      {
        "not": {
          "required": [
            "value"
          ]
        }
      }
    ]
  };

/***/ },
/* 358 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "ledgerVersion",
    "description": "A ledger version number",
    "type": "integer",
    "minimum": 1
  };

/***/ },
/* 359 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "maxAdjustment",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "The address to send from."
      },
      "maxAmount": {
        "$ref": "laxAmount",
        "description": "The maximum amount to send. (This field is exclusive with source.amount)"
      },
      "tag": {
        "$ref": "tag"
      }
    },
    "required": [
      "address",
      "maxAmount"
    ],
    "additionalProperties": false
  };

/***/ },
/* 360 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "memo",
    "description": "Memo objects represent arbitrary data that can be included in a transaction",
    "type": "object",
    "properties": {
      "type": {
        "pattern": "^[A-Za-z0-9\\-._~:/?#[\\]@!$&'()*+,;=%]*$",
        "description": "Conventionally, a unique relation (according to [RFC 5988](http://tools.ietf.org/html/rfc5988#section-4)) that defines the format of this memo. Only characters allowed in URLs are permitted."
      },
      "format": {
        "pattern": "^[A-Za-z0-9\\-._~:/?#[\\]@!$&'()*+,;=%]*$",
        "description": "Conventionally containing information on how the memo is encoded, for example as a [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml). Only characters allowed in URLs are permitted."
      },
      "data": {
        "type": "string",
        "description": "Arbitrary string, conventionally containing the content of the memo."
      }
    },
    "additionalProperties": false,
    "anyOf": [
      {
        "required": [
          "data"
        ]
      },
      {
        "required": [
          "type"
        ]
      }
    ]
  };

/***/ },
/* 361 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "memos",
    "link": "transaction-memos",
    "description": "Array of memos to attach to the transaction.",
    "type": "array",
    "items": {
      "$ref": "memo"
    }
  };

/***/ },
/* 362 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "uint32",
    "description": "A 32-bit unsigned integer",
    "type": "integer",
    "minimum": 0,
    "maximum": 4294967295
  };

/***/ },
/* 363 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "value",
    "link": "value",
    "description": "A string representation of a non-negative floating point number",
    "type": "string",
    "pattern": "^[0-9]*[.]?[0-9]+([eE][-+]?[0-9]+)?$"
  };

/***/ },
/* 364 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "sourceAdjustment",
    "type": "object",
    "oneOf": [
      {
        "$ref": "sourceExactAdjustment"
      },
      {
        "$ref": "maxAdjustment"
      }
    ]
  };

/***/ },
/* 365 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "destinationAdjustment",
    "type": "object",
    "oneOf": [
      {
        "$ref": "destinationExactAdjustment"
      },
      {
        "$ref": "minAdjustment"
      }
    ]
  };

/***/ },
/* 366 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "tag",
    "description": "An arbitrary unsigned 32-bit integer that identifies a reason for payment or a non-Ripple account.",
    "type": "integer",
    "$ref": "uint32"
  };

/***/ },
/* 367 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "laxAmount",
    "description": "Amount where counterparty is optional",
    "link": "amount",
    "type": "object",
    "properties": {
      "currency": {
        "$ref": "currency"
      },
      "counterparty": {
        "$ref": "address"
      },
      "value": {
        "$ref": "value"
      }
    },
    "required": [
      "currency",
      "value"
    ],
    "additionalProperties": false
  };

/***/ },
/* 368 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "laxLaxAmount",
    "description": "Amount where counterparty and value are optional",
    "link": "amount",
    "type": "object",
    "properties": {
      "currency": {
        "$ref": "currency"
      },
      "counterparty": {
        "$ref": "address"
      },
      "value": {
        "$ref": "value"
      }
    },
    "required": [
      "currency"
    ],
    "additionalProperties": false
  };

/***/ },
/* 369 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "minAdjustment",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "The address to send to."
      },
      "minAmount": {
        "$ref": "laxAmount",
        "description": "The minimum amount to be delivered. (This field is exclusive with destination.amount)"
      },
      "tag": {
        "$ref": "tag"
      }
    },
    "required": [
      "address",
      "minAmount"
    ],
    "additionalProperties": false
  };

/***/ },
/* 370 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "sourceExactAdjustment",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "The address to send from."
      },
      "amount": {
        "$ref": "laxAmount",
        "description": "An exact amount to send. If the counterparty is not specified, amounts with any counterparty may be used. (This field is exclusive with source.maxAmount)"
      },
      "tag": {
        "$ref": "tag"
      }
    },
    "required": [
      "address",
      "amount"
    ],
    "additionalProperties": false
  };

/***/ },
/* 371 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "destinationExactAdjustment",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "The address to receive at."
      },
      "amount": {
        "$ref": "laxAmount",
        "description": "An exact amount to deliver to the recipient. If the counterparty is not specified, amounts with any counterparty may be used. (This field is exclusive with destination.minAmount)."
      },
      "tag": {
        "$ref": "tag"
      }
    },
    "required": [
      "address",
      "amount"
    ],
    "additionalProperties": false
  };

/***/ },
/* 372 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "id",
    "link": "transaction-id",
    "description": "A hash of a transaction used to identify the transaction, represented in hexadecimal.",
    "type": "string",
    "pattern": "^[A-F0-9]{64}$"
  };

/***/ },
/* 373 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "address",
    "description": "A Ripple account address",
    "type": "string",
    "format": "address",
    "link": "ripple-address",
    "pattern": "^r[1-9A-HJ-NP-Za-km-z]{25,34}$"
  };

/***/ },
/* 374 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "adjustment",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address"
      },
      "amount": {
        "$ref": "amount"
      },
      "tag": {
        "$ref": "tag"
      }
    },
    "required": [
      "address",
      "amount"
    ],
    "additionalProperties": false
  };

/***/ },
/* 375 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "quality",
    "description": "Ratio for incoming/outgoing transit fees.",
    "type": "number",
    "minimum": 1e-9,
    "maximum": 4.294967295
  };

/***/ },
/* 376 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "amount",
    "link": "amount",
    "description": "An Amount on the Ripple Protocol, used also for XRP in the ripple-rest API",
    "allOf": [
      {
        "$ref": "amountbase"
      },
      {
        "required": [
          "value"
        ]
      }
    ]
  };

/***/ },
/* 377 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "amountbase",
    "description": "Base class for amount and issue",
    "type": "object",
    "properties": {
      "value": {
        "description": "The quantity of the currency, denoted as a string to retain floating point precision",
        "$ref": "value"
      },
      "currency": {
        "description": "The three-character code or hexadecimal string used to denote currencies",
        "$ref": "currency"
      },
      "counterparty": {
        "description": "The Ripple address of the account that owes or is owed the funds (omitted if `currency` is \"XRP\")",
        "$ref": "address"
      }
    },
    "additionalProperties": false,
    "required": [
      "currency"
    ],
    "oneOf": [
      {
        "properties": {
          "currency": {
            "not": {
              "enum": [
                "XRP"
              ]
            }
          }
        },
        "required": [
          "counterparty"
        ]
      },
      {
        "properties": {
          "currency": {
            "enum": [
              "XRP"
            ]
          }
        },
        "not": {
          "required": [
            "counterparty"
          ]
        }
      }
    ]
  };

/***/ },
/* 378 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "balance",
    "description": "Balance amount",
    "link": "amount",
    "type": "object",
    "properties": {
      "value": {
        "description": "The balance on the trustline",
        "$ref": "signedValue"
      },
      "currency": {
        "description": "The three-character code or hexadecimal string used to denote currencies",
        "$ref": "currency"
      },
      "counterparty": {
        "description": "The Ripple address of the account that owes or is owed the funds.",
        "$ref": "address"
      }
    },
    "additionalProperties": false,
    "required": [
      "currency",
      "value"
    ],
    "oneOf": [
      {
        "properties": {
          "currency": {
            "not": {
              "enum": [
                "XRP"
              ]
            }
          }
        },
        "required": [
          "counterparty"
        ]
      },
      {
        "properties": {
          "currency": {
            "enum": [
              "XRP"
            ]
          }
        },
        "not": {
          "required": [
            "counterparty"
          ]
        }
      }
    ]
  };

/***/ },
/* 379 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "blob",
    "description": "An uppercase hexadecimal string representation of a transaction",
    "type": "string",
    "minLength": 1,
    "pattern": "^[0-9A-F]*$"
  };

/***/ },
/* 380 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "currency",
    "description": "The three-character code or hexadecimal string used to denote currencies",
    "type": "string",
    "link": "currency",
    "pattern": "^([a-zA-Z0-9<>(){}[\\]|?!@#$%^&*]{3}|[A-F0-9]{40})$"
  };

/***/ },
/* 381 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "signedValue",
    "description": "A string representation of a floating point number",
    "type": "string",
    "link": "value",
    "pattern": "^[-]?[0-9]*[.]?[0-9]+([eE][-+]?[0-9]+)?$"
  };

/***/ },
/* 382 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "orderbook",
    "type": "object",
    "properties": {
      "base": {
        "$ref": "issue"
      },
      "counter": {
        "$ref": "issue"
      }
    },
    "required": [
      "base",
      "counter"
    ],
    "additionalProperties": false
  };

/***/ },
/* 383 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "instructions",
    "link": "transaction-instructions",
    "description": "Instructions for executing the transaction",
    "type": "object",
    "properties": {
      "sequence": {
        "description": "The initiating account's sequence number for this transaction.",
        "$ref": "sequence"
      },
      "fee": {
        "description": "An exact fee to pay for the transaction. See [Transaction Fees](#transaction-fees) for more information.",
        "$ref": "value"
      },
      "maxFee": {
        "description": "The maximum fee to pay for the transaction. See [Transaction Fees](#transaction-fees) for more information.",
        "$ref": "value"
      },
      "maxLedgerVersion": {
        "description": "The highest ledger version that the transaction can be included in. If this option and `maxLedgerVersionOffset` are both omitted, the `maxLedgerVersion` option will default to 3 greater than the current validated ledger version (equivalent to `maxLedgerVersionOffset=3`). Use `null` to not set a maximum ledger version.",
        "oneOf": [
          {
            "$ref": "ledgerVersion"
          },
          {
            "type": "null"
          }
        ]
      },
      "maxLedgerVersionOffset": {
        "description": "Offset from current validated legder version to highest ledger version that the transaction can be included in.",
        "type": "integer",
        "minimum": 0
      },
      "signersCount": {
        "description": "Number of signers that will be signing this transaction.",
        "type": "integer",
        "minimum": 1
      }
    },
    "additionalProperties": false,
    "not": {
      "anyOf": [
        {
          "description": "fee and maxFee are mutually exclusive",
          "required": [
            "fee",
            "maxFee"
          ]
        },
        {
          "description": "maxLedgerVersion and maxLedgerVersionOffset are mutually exclusive",
          "required": [
            "maxLedgerVersion",
            "maxLedgerVersionOffset"
          ]
        }
      ]
    }
  };

/***/ },
/* 384 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "settingsPlusMemos",
    "type": "object",
    "properties": {
      "passwordSpent": {
        "type": "boolean",
        "description": "Indicates that the account has used its free SetRegularKey transaction."
      },
      "requireDestinationTag": {
        "type": "boolean",
        "description": "Requires incoming payments to specify a destination tag."
      },
      "requireAuthorization": {
        "type": "boolean",
        "description": "If set, this account must individually approve other users in order for those users to hold this account’s issuances."
      },
      "disallowIncomingXRP": {
        "type": "boolean",
        "description": "Indicates that client applications should not send XRP to this account. Not enforced by rippled."
      },
      "disableMasterKey": {
        "type": "boolean",
        "description": "Disallows use of the master key to sign transactions for this account."
      },
      "enableTransactionIDTracking": {
        "type": "boolean",
        "description": "Track the ID of this account’s most recent transaction."
      },
      "noFreeze": {
        "type": "boolean",
        "description": "Permanently give up the ability to freeze individual trust lines. This flag can never be disabled after being enabled."
      },
      "globalFreeze": {
        "type": "boolean",
        "description": "Freeze all assets issued by this account."
      },
      "defaultRipple": {
        "type": "boolean",
        "description": "Enable [rippling](https://ripple.com/knowledge_center/understanding-the-noripple-flag/) on this account’s trust lines by default. (New in [rippled 0.27.3](https://github.com/ripple/rippled/releases/tag/0.27.3))"
      },
      "emailHash": {
        "description": "Hash of an email address to be used for generating an avatar image. Conventionally, clients use Gravatar to display this image. Use `null` to clear.",
        "oneOf": [
          {
            "type": "null"
          },
          {
            "$ref": "hash128"
          }
        ]
      },
      "messageKey": {
        "type": "string",
        "description": "Public key for sending encrypted messages to this account. Conventionally, it should be a secp256k1 key, the same encryption that is used by the rest of Ripple."
      },
      "domain": {
        "type": "string",
        "description": " The domain that owns this account, as a hexadecimal string representing the ASCII for the domain in lowercase."
      },
      "transferRate": {
        "description": " The fee to charge when users transfer this account’s issuances, represented as billionths of a unit. Use `null` to set no fee.",
        "oneOf": [
          {
            "type": "null"
          },
          {
            "type": "number",
            "minimum": 1,
            "maximum": 4.294967295
          }
        ]
      },
      "regularKey": {
        "oneOf": [
          {
            "$ref": "address"
          },
          {
            "type": "null"
          }
        ],
        "description": "The public key of a new keypair, to use as the regular key to this account, as a base-58-encoded string in the same format as an account address. Use `null` to remove the regular key."
      },
      "signers": {
        "type": "object",
        "description": "Settings that determine what sets of accounts can be used to sign a transaction on behalf of this account using multisigning.",
        "properties": {
          "threshold": {
            "$ref": "uint32",
            "description": "A target number for the signer weights. A multi-signature from this list is valid only if the sum weights of the signatures provided is equal or greater than this value. To delete the signers setting, use the value `0`."
          },
          "weights": {
            "type": "array",
            "description": "Weights of signatures for each signer.",
            "items": {
              "type": "object",
              "description": "An association of an address and a weight.",
              "properties": {
                "address": {
                  "$ref": "address"
                },
                "weight": {
                  "$ref": "uint32",
                  "description": "The weight that the signature of this account counts as towards the threshold."
                }
              },
              "required": [
                "address",
                "weight"
              ],
              "additionalProperties": false
            },
            "minItems": 1,
            "maxItems": 8
          }
        }
      },
      "memos": {
        "$ref": "memos"
      }
    },
    "additionalProperties": false
  };

/***/ },
/* 385 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "settings",
    "link": "settings",
    "$ref": "settingsPlusMemos",
    "oneOf": [
      {
        "required": [
          "memos"
        ],
        "minProperties": 2,
        "maxProperties": 2
      },
      {
        "not": {
          "required": [
            "memos"
          ]
        },
        "minProperties": 1,
        "maxProperties": 1
      }
    ]
  };

/***/ },
/* 386 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "payment",
    "link": "payment",
    "type": "object",
    "properties": {
      "source": {
        "$ref": "sourceAdjustment",
        "description": "The source of the funds to be sent."
      },
      "destination": {
        "$ref": "destinationAdjustment",
        "description": "The destination of the funds to be sent."
      },
      "paths": {
        "type": "string",
        "description": "The paths of trustlines and orders to use in executing the payment."
      },
      "memos": {
        "$ref": "memos"
      },
      "invoiceID": {
        "description": "A 256-bit hash that can be used to identify a particular payment.",
        "$ref": "hash256"
      },
      "allowPartialPayment": {
        "description": "A boolean that, if set to true, indicates that this payment should go through even if the whole amount cannot be delivered because of a lack of liquidity or funds in the source account account",
        "type": "boolean"
      },
      "noDirectRipple": {
        "description": "A boolean that can be set to true if paths are specified and the sender would like the Ripple Network to disregard any direct paths from the source account to the destination account. This may be used to take advantage of an arbitrage opportunity or by gateways wishing to issue balances from a hot wallet to a user who has mistakenly set a trustline directly to the hot wallet",
        "type": "boolean"
      },
      "limitQuality": {
        "description": "Only take paths where all the conversions have an input:output ratio that is equal or better than the ratio of destination.amount:source.maxAmount.",
        "type": "boolean"
      }
    },
    "required": [
      "source",
      "destination"
    ],
    "additionalProperties": false
  };

/***/ },
/* 387 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "suspendedPaymentCancellation",
    "link": "suspended-payment-cancellation",
    "type": "object",
    "properties": {
      "memos": {
        "$ref": "memos"
      },
      "owner": {
        "$ref": "address",
        "description": "The address of the owner of the suspended payment to cancel."
      },
      "suspensionSequence": {
        "$ref": "sequence",
        "description": "The [account sequence number](#account-sequence-number) of the [Suspended Payment Creation](#suspended-payment-creation) transaction for the suspended payment to cancel."
      }
    },
    "required": [
      "owner",
      "suspensionSequence"
    ],
    "additionalProperties": false
  };

/***/ },
/* 388 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "orderCancellation",
    "link": "order-cancellation",
    "type": "object",
    "properties": {
      "orderSequence": {
        "$ref": "sequence",
        "description": "The [account sequence number](#account-sequence-number) of the order to cancel."
      },
      "memos": {
        "$ref": "memos"
      }
    },
    "required": [
      "orderSequence"
    ],
    "additionalProperties": false
  };

/***/ },
/* 389 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "order",
    "link": "order",
    "type": "object",
    "properties": {
      "direction": {
        "type": "string",
        "enum": [
          "buy",
          "sell"
        ],
        "description": "Equal to \"buy\" for buy orders and \"sell\" for sell orders."
      },
      "quantity": {
        "$ref": "amount",
        "description": "The amount of currency to buy or sell."
      },
      "totalPrice": {
        "$ref": "amount",
        "description": "The total price to be paid for the `quantity` to be bought or sold."
      },
      "immediateOrCancel": {
        "type": "boolean",
        "description": "Treat the offer as an [Immediate or Cancel order](http://en.wikipedia.org/wiki/Immediate_or_cancel). If enabled, the offer will never become a ledger node: it only attempts to match existing offers in the ledger."
      },
      "fillOrKill": {
        "type": "boolean",
        "description": "Treat the offer as a [Fill or Kill order](http://en.wikipedia.org/wiki/Fill_or_kill). Only attempt to match existing offers in the ledger, and only do so if the entire quantity can be exchanged."
      },
      "passive": {
        "description": "If enabled, the offer will not consume offers that exactly match it, and instead becomes an Offer node in the ledger. It will still consume offers that cross it.",
        "type": "boolean"
      },
      "expirationTime": {
        "type": "string",
        "format": "date-time",
        "description": "Time after which the offer is no longer active, as an [ISO 8601 date-time](https://en.wikipedia.org/wiki/ISO_8601)."
      },
      "memos": {
        "$ref": "memos"
      }
    },
    "required": [
      "direction",
      "quantity",
      "totalPrice"
    ],
    "additionalProperties": false,
    "not": {
      "description": "immediateOrCancel and fillOrKill are mutually exclusive",
      "required": [
        "immediateOrCancel",
        "fillOrKill"
      ]
    }
  };

/***/ },
/* 390 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "suspendedPaymentExecution",
    "link": "suspended-payment-execution",
    "type": "object",
    "properties": {
      "memos": {
        "$ref": "memos"
      },
      "owner": {
        "$ref": "address",
        "description": "The address of the owner of the suspended payment to execute."
      },
      "suspensionSequence": {
        "$ref": "sequence",
        "description": "The [account sequence number](#account-sequence-number) of the [Suspended Payment Creation](#suspended-payment-creation) transaction for the suspended payment to execute."
      },
      "method": {
        "type": "integer",
        "minimum": 0,
        "maximum": 255,
        "description": "The method for verifying the proof; only method `1` is supported."
      },
      "digest": {
        "$ref": "hash256",
        "description": "The original `digest` from the suspended payment creation transaction. This is sha256 hash of `proof` string. It is replicated here so that the relatively expensive hashing operation can be delegated to a server without ledger history and the server with ledger history only has to do a quick comparison of the old digest with the new digest."
      },
      "proof": {
        "type": "string",
        "description": "A value that produces the digest when hashed. It must be 32 charaters long and contain only 8-bit characters.",
        "pattern": "^[\\x00-\\xFF]{32}$"
      }
    },
    "required": [
      "owner",
      "suspensionSequence"
    ],
    "additionalProperties": false
  };

/***/ },
/* 391 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "suspendedPaymentCreation",
    "link": "suspended-payment-creation",
    "type": "object",
    "properties": {
      "source": {
        "$ref": "maxAdjustment",
        "description": "Fields pertaining to the source of the payment."
      },
      "destination": {
        "$ref": "destinationExactAdjustment",
        "description": "Fields pertaining to the destination of the payment."
      },
      "memos": {
        "$ref": "memos"
      },
      "digest": {
        "$ref": "hash256",
        "description": "If present, proof is required upon execution."
      },
      "allowCancelAfter": {
        "type": "string",
        "format": "date-time",
        "description": "If present, the suspended payment may be cancelled after this time."
      },
      "allowExecuteAfter": {
        "type": "string",
        "format": "date-time",
        "description": "If present, the suspended payment can not be executed before this time."
      }
    },
    "required": [
      "source",
      "destination"
    ],
    "additionalProperties": false
  };

/***/ },
/* 392 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "trustline",
    "link": "trustline",
    "type": "object",
    "properties": {
      "currency": {
        "$ref": "currency",
        "description": "The currency this trustline applies to."
      },
      "counterparty": {
        "$ref": "address",
        "description": "The address of the account this trustline extends trust to."
      },
      "limit": {
        "$ref": "value",
        "description": "The maximum amount that the owner of the trustline can be owed through the trustline."
      },
      "qualityIn": {
        "$ref": "quality",
        "description": "Incoming balances on this trustline are valued at this ratio."
      },
      "qualityOut": {
        "$ref": "quality",
        "description": "Outgoing balances on this trustline are valued at this ratio."
      },
      "ripplingDisabled": {
        "type": "boolean",
        "description": "If true, payments cannot ripple through this trustline."
      },
      "authorized": {
        "type": "boolean",
        "description": "If true, authorize the counterparty to hold issuances from this account."
      },
      "frozen": {
        "type": "boolean",
        "description": "If true, the trustline is frozen, which means that funds can only be sent to the owner."
      },
      "memos": {
        "$ref": "memos"
      }
    },
    "required": [
      "currency",
      "counterparty",
      "limit"
    ],
    "additionalProperties": false
  };

/***/ },
/* 393 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "sign",
    "type": "object",
    "properties": {
      "signedTransaction": {
        "type": "string",
        "pattern": "^[A-F0-9]+$",
        "description": "The signed transaction represented as an uppercase hexadecimal string."
      },
      "id": {
        "$ref": "id",
        "description": "The [Transaction ID](#transaction-id) of the signed transaction."
      }
    },
    "required": [
      "signedTransaction",
      "id"
    ],
    "additionalProperties": false
  };

/***/ },
/* 394 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "submit",
    "type": "object",
    "properties": {
      "resultCode": {
        "type": "string",
        "description": "The result code returned by rippled. [List of tranasction responses](http://pages.lightthenight.org/gba/SanFran15/ripple)"
      },
      "resultMessage": {
        "type": "string",
        "description": "Human-readable explanation of the status of the transaction."
      }
    },
    "required": [
      "resultCode",
      "resultMessage"
    ],
    "additionalProperties": false
  };

/***/ },
/* 395 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getAccountInfo",
    "type": "object",
    "properties": {
      "sequence": {
        "$ref": "sequence",
        "description": "The next (smallest unused) sequence number for this account."
      },
      "xrpBalance": {
        "$ref": "value",
        "description": "The XRP balance owned by the account."
      },
      "ownerCount": {
        "type": "integer",
        "minimum": 0,
        "description": "Number of other ledger entries (specifically, trust lines and offers) attributed to this account. This is used to calculate the total reserve required to use the account."
      },
      "previousInitiatedTransactionID": {
        "$ref": "hash256",
        "description": "Hash value representing the most recent transaction that was initiated by this account."
      },
      "previousAffectingTransactionID": {
        "$ref": "hash256",
        "description": "Hash value representing the most recent transaction that affected this account node directly. **Note:** This does not include changes to the account’s trust lines and offers."
      },
      "previousAffectingTransactionLedgerVersion": {
        "$ref": "ledgerVersion",
        "description": "The ledger version that the transaction identified by the `previousAffectingTransactionID` was validated in."
      }
    },
    "required": [
      "sequence",
      "xrpBalance",
      "ownerCount",
      "previousAffectingTransactionID",
      "previousAffectingTransactionLedgerVersion"
    ],
    "additionalProperties": false
  };

/***/ },
/* 396 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getBalances",
    "type": "array",
    "items": {
      "$ref": "balance"
    }
  };

/***/ },
/* 397 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getBalanceSheet",
    "description": "getBalanceSheet response",
    "type": "object",
    "properties": {
      "balances": {
        "type": "array",
        "items": {
          "$ref": "amount"
        },
        "description": "Amounts issued to the hotwallet accounts from the request. The keys are hot wallet addresses and the values are arrays of currency amounts they hold. The issuer (omitted from the currency amounts) is the account from the request."
      },
      "assets": {
        "type": "array",
        "items": {
          "$ref": "amount"
        },
        "description": "Total amounts held that are issued by others. For the recommended gateway configuration, there should be none."
      },
      "obligations": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "currency",
            "value"
          ],
          "additionalProperties": false,
          "properties": {
            "currency": {
              "$ref": "currency"
            },
            "value": {
              "$ref": "value"
            }
          },
          "description": "An amount that is owed."
        },
        "description": "Total amounts issued to accounts that are not hot wallets, as a map of currencies to the total value issued."
      }
    },
    "additionalProperties": false
  };

/***/ },
/* 398 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getLedger",
    "type": "object",
    "properties": {
      "stateHash": {
        "$ref": "hash256",
        "description": "Hash of all state information in this ledger."
      },
      "closeTime": {
        "type": "string",
        "format": "date-time",
        "description": "The time at which this ledger was closed."
      },
      "closeTimeResolution": {
        "type": "integer",
        "minimum": 1,
        "description": "Approximate number of seconds between closing one ledger version and closing the next one."
      },
      "closeFlags": {
        "type": "integer",
        "minimum": 0,
        "description": "A bit-map of flags relating to the closing of this ledger. Currently, the ledger has only one flag defined for `closeFlags`: **sLCF_NoConsensusTime** (value 1). If this flag is enabled, it means that validators were in conflict regarding the correct close time for the ledger, but built otherwise the same ledger, so they declared consensus while \"agreeing to disagree\" on the close time. In this case, the consensus ledger contains a `closeTime` value that is 1 second after that of the previous ledger. (In this case, there is no official close time, but the actual real-world close time is probably 3-6 seconds later than the specified `closeTime`.)"
      },
      "ledgerHash": {
        "$ref": "hash256",
        "description": "Unique identifying hash of the entire ledger."
      },
      "ledgerVersion": {
        "$ref": "ledgerVersion",
        "description": "The ledger version of this ledger."
      },
      "parentLedgerHash": {
        "$ref": "hash256",
        "description": "Unique identifying hash of the ledger that came immediately before this one."
      },
      "parentCloseTime": {
        "type": "string",
        "format": "date-time",
        "description": "The time at which the previous ledger was closed."
      },
      "totalDrops": {
        "$ref": "value",
        "description": "Total number of drops (1/1,000,000th of an XRP) in the network, as a quoted integer. (This decreases as transaction fees cause XRP to be destroyed.)"
      },
      "transactionHash": {
        "$ref": "hash256",
        "description": "Hash of the transaction information included in this ledger."
      },
      "transactions": {
        "description": "Array of all transactions that were validated in this ledger. Transactions are represented in the same format as the return value of [getTransaction](#gettransaction).",
        "type": "array",
        "items": {
          "$ref": "getTransaction",
          "description": "A transaction in the same format as the return value of [getTransaction](#gettransaction)."
        }
      },
      "rawTransactions": {
        "type": "string",
        "description": "A JSON string containing rippled format transaction JSON for all transactions that were validated in this ledger."
      },
      "transactionHashes": {
        "description": "An array of hashes of all transactions that were validated in this ledger.",
        "type": "array",
        "items": {
          "$ref": "id"
        }
      },
      "rawState": {
        "type": "string",
        "description": "A JSON string containing all state data for this ledger in rippled JSON format."
      },
      "stateHashes": {
        "description": "An array of hashes of all state data in this ledger.",
        "type": "array",
        "items": {
          "$ref": "hash256"
        }
      }
    },
    "required": [
      "stateHash",
      "closeTime",
      "closeTimeResolution",
      "closeFlags",
      "ledgerHash",
      "ledgerVersion",
      "parentLedgerHash",
      "parentCloseTime",
      "totalDrops",
      "transactionHash"
    ],
    "additionalProperties": false
  };

/***/ },
/* 399 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getOrderbook",
    "type": "object",
    "properties": {
      "bids": {
        "$ref": "orderbookOrders",
        "description": "The buy orders in the order book."
      },
      "asks": {
        "$ref": "orderbookOrders",
        "description": "The sell orders in the order book."
      }
    },
    "required": [
      "bids",
      "asks"
    ],
    "additionalProperties": false
  };

/***/ },
/* 400 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getOrders",
    "type": "array",
    "items": {
      "type": "object",
      "properties": {
        "specification": {
          "$ref": "order",
          "description": "An order specification that would create an order equivalent to the current state of this order."
        },
        "properties": {
          "description": "Properties of the order not in the specification.",
          "type": "object",
          "properties": {
            "maker": {
              "$ref": "address",
              "description": "The address of the account that submitted the order."
            },
            "sequence": {
              "$ref": "sequence",
              "description": "The account sequence number of the transaction that created this order."
            },
            "makerExchangeRate": {
              "$ref": "value",
              "description": "The exchange rate from the point of view of the account that submitted the order (also known as \"quality\")."
            }
          },
          "required": [
            "maker",
            "sequence",
            "makerExchangeRate"
          ],
          "addtionalProperties": false
        }
      },
      "required": [
        "specification",
        "properties"
      ],
      "additionalProperties": false
    }
  };

/***/ },
/* 401 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "orderChange",
    "type": "object",
    "description": "A change to an order.",
    "properties": {
      "direction": {
        "type": "string",
        "enum": [
          "buy",
          "sell"
        ],
        "description": "Equal to \"buy\" for buy orders and \"sell\" for sell orders."
      },
      "quantity": {
        "$ref": "amount",
        "description": "The amount to be bought or sold by the maker."
      },
      "totalPrice": {
        "$ref": "amount",
        "description": "The total amount to be paid or received by the taker."
      },
      "makerExchangeRate": {
        "$ref": "value",
        "description": "The exchange rate between the `quantity` currency and the `totalPrice` currency from the point of view of the maker."
      },
      "sequence": {
        "$ref": "sequence",
        "description": "The order sequence number, used to identify the order for cancellation"
      },
      "status": {
        "enum": [
          "created",
          "filled",
          "partially-filled",
          "cancelled"
        ],
        "description": "The status of the order. One of \"created\", \"filled\", \"partially-filled\", \"cancelled\"."
      },
      "expirationTime": {
        "type": "string",
        "format": "date-time",
        "description": "The time after which the order expires, if any."
      }
    },
    "required": [
      "direction",
      "quantity",
      "totalPrice",
      "sequence",
      "status"
    ],
    "additionalProperties": false
  };

/***/ },
/* 402 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "prepare",
    "description": "Result of prepare function",
    "type": "object",
    "properties": {
      "txJSON": {
        "type": "string",
        "description": "The prepared transaction in rippled JSON format."
      },
      "instructions": {
        "description": "The instructions for how to execute the transaction after adding automatic defaults.",
        "type": "object",
        "properties": {
          "fee": {
            "$ref": "value",
            "description": "An exact fee to pay for the transaction. See [Transaction Fees](#transaction-fees) for more information."
          },
          "sequence": {
            "$ref": "sequence",
            "description": "The initiating account's sequence number for this transaction."
          },
          "maxLedgerVersion": {
            "oneOf": [
              {
                "$ref": "ledgerVersion"
              },
              {
                "type": "null"
              }
            ],
            "description": "The highest ledger version that the transaction can be included in. Set to `null` if there is no maximum."
          }
        },
        "additionalProperties": false,
        "required": [
          "fee",
          "sequence",
          "maxLedgerVersion"
        ]
      }
    },
    "additionalProperties": false,
    "required": [
      "txJSON",
      "instructions"
    ]
  };

/***/ },
/* 403 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "ledgerEvent",
    "description": "A ledger event message",
    "type": "object",
    "properties": {
      "baseFeeXRP": {
        "$ref": "value",
        "description": "Base fee, in XRP."
      },
      "ledgerHash": {
        "$ref": "hash256",
        "description": "Unique hash of the ledger that was closed, as hex."
      },
      "ledgerVersion": {
        "$ref": "ledgerVersion",
        "description": "Ledger version of the ledger that closed."
      },
      "ledgerTimestamp": {
        "type": "string",
        "format": "date-time",
        "description": "The time at which this ledger closed."
      },
      "reserveBaseXRP": {
        "$ref": "value",
        "description": "The minimum reserve, in XRP, that is required for an account."
      },
      "reserveIncrementXRP": {
        "$ref": "value",
        "description": "The increase in account reserve that is added for each item the account owns, such as offers or trust lines."
      },
      "transactionCount": {
        "type": "integer",
        "minimum": 0,
        "description": "Number of new transactions included in this ledger."
      },
      "validatedLedgerVersions": {
        "type": "string",
        "description": "Range of ledgers that the server has available. This may be discontiguous."
      }
    },
    "addtionalProperties": false,
    "required": [
      "baseFeeXRP",
      "ledgerHash",
      "ledgerTimestamp",
      "reserveBaseXRP",
      "reserveIncrementXRP",
      "transactionCount",
      "ledgerVersion",
      "validatedLedgerVersions"
    ]
  };

/***/ },
/* 404 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getPaths",
    "type": "array",
    "items": {
      "type": "object",
      "properties": {
        "source": {
          "$ref": "sourceAdjustment",
          "description": "Properties of the source of the payment."
        },
        "destination": {
          "$ref": "destinationAdjustment",
          "description": "Properties of the destination of the payment."
        },
        "paths": {
          "type": "string",
          "description": "The paths of trustlines and orders to use in executing the payment."
        }
      },
      "required": [
        "source",
        "destination",
        "paths"
      ],
      "additionalProperties": false
    }
  };

/***/ },
/* 405 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getServerInfo",
    "type": "object",
    "properties": {
      "buildVersion": {
        "type": "string",
        "description": "The version number of the running rippled version."
      },
      "completeLedgers": {
        "type": "string",
        "pattern": "[0-9,-]+",
        "description": "Range expression indicating the sequence numbers of the ledger versions the local rippled has in its database. It is possible to be a disjoint sequence, e.g. “2500-5000,32570-7695432”."
      },
      "hostID": {
        "type": "string",
        "description": "On an admin request, returns the hostname of the server running the rippled instance; otherwise, returns a unique four letter word."
      },
      "ioLatencyMs": {
        "type": "number",
        "description": "Amount of time spent waiting for I/O operations to be performed, in milliseconds. If this number is not very, very low, then the rippled server is probably having serious load issues."
      },
      "load": {
        "type": "object",
        "description": "*(Admin only)* Detailed information about the current load state of the server.",
        "properties": {
          "jobTypes": {
            "type": "array",
            "description": "*(Admin only)* Information about the rate of different types of jobs being performed by the server and how much time it spends on each.",
            "items": {
              "type": "object"
            }
          },
          "threads": {
            "type": "number",
            "description": "*(Admin only)* The number of threads in the server’s main job pool, performing various Ripple Network operations."
          }
        },
        "required": [
          "jobTypes",
          "threads"
        ]
      },
      "lastClose": {
        "type": "object",
        "description": "Information about the last time the server closed a ledger.",
        "properties": {
          "convergeTimeS": {
            "type": "number",
            "description": "The time it took to reach a consensus for the last ledger closing, in seconds."
          },
          "proposers": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of trusted validators participating in the ledger closing."
          }
        },
        "required": [
          "convergeTimeS",
          "proposers"
        ]
      },
      "loadFactor": {
        "type": "number",
        "description": "The load factor the server is currently enforcing, as a multiplier on the base transaction fee. The load factor is determined by the highest of the individual server’s load factor, cluster’s load factor, and the overall network’s load factor."
      },
      "peers": {
        "type": "integer",
        "minimum": 0,
        "description": "How many other rippled servers the node is currently connected to."
      },
      "pubkeyNode": {
        "type": "string",
        "description": "Public key used to verify this node for internal communications; this key is automatically generated by the server the first time it starts up. (If deleted, the node can just create a new pair of keys.)"
      },
      "pubkeyValidator": {
        "type": "string",
        "description": "*(Admin only)* Public key used by this node to sign ledger validations."
      },
      "serverState": {
        "type": "string",
        "description": "A string indicating to what extent the server is participating in the network. See [Possible Server States](https://ripple.com/build/rippled-apis/#possible-server-states) for more details.",
        "enum": [
          "disconnected",
          "connected",
          "syncing",
          "tracking",
          "full",
          "validating",
          "proposing"
        ]
      },
      "validatedLedger": {
        "type": "object",
        "description": "Information about the fully-validated ledger with the highest sequence number (the most recent).",
        "properties": {
          "age": {
            "type": "integer",
            "minimum": 0,
            "description": "The time since the ledger was closed, in seconds."
          },
          "baseFeeXRP": {
            "$ref": "value",
            "description": "Base fee, in XRP. This may be represented in scientific notation such as 1e-05 for 0.00005."
          },
          "hash": {
            "$ref": "hash256",
            "description": "Unique hash for the ledger, as an uppercase hexadecimal string."
          },
          "reserveBaseXRP": {
            "$ref": "value",
            "description": "Minimum amount of XRP necessary for every account to keep in reserve."
          },
          "reserveIncrementXRP": {
            "$ref": "value",
            "description": "Amount of XRP added to the account reserve for each object an account is responsible for in the ledger."
          },
          "ledgerVersion": {
            "type": "integer",
            "minimum": 0,
            "description": "Identifying sequence number of this ledger version."
          }
        },
        "additionalProperties": false,
        "required": [
          "age",
          "baseFeeXRP",
          "hash",
          "reserveBaseXRP",
          "reserveIncrementXRP",
          "ledgerVersion"
        ]
      },
      "validationQuorum": {
        "type": "number",
        "description": "Minimum number of trusted validations required in order to validate a ledger version. Some circumstances may cause the server to require more validations."
      }
    },
    "required": [
      "buildVersion",
      "completeLedgers",
      "hostID",
      "ioLatencyMs",
      "lastClose",
      "loadFactor",
      "peers",
      "pubkeyNode",
      "serverState",
      "validatedLedger",
      "validationQuorum"
    ],
    "additionalProperties": false
  };

/***/ },
/* 406 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getSettings",
    "$ref": "settingsPlusMemos",
    "not": {
      "required": [
        "memos"
      ]
    }
  };

/***/ },
/* 407 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "orderbookOrders",
    "type": "array",
    "items": {
      "description": "An order in the order book.",
      "type": "object",
      "properties": {
        "specification": {
          "$ref": "order",
          "description": "An order specification that would create an order equivalent to the current state of this order."
        },
        "properties": {
          "description": "Properties of the order not in the specification.",
          "type": "object",
          "properties": {
            "maker": {
              "$ref": "address",
              "description": "The address of the account that submitted the order."
            },
            "sequence": {
              "$ref": "sequence",
              "description": "The account sequence number of the transaction that created this order."
            },
            "makerExchangeRate": {
              "$ref": "value",
              "description": "The exchange rate from the point of view of the account that submitted the order (also known as \"quality\")."
            }
          },
          "required": [
            "maker",
            "sequence",
            "makerExchangeRate"
          ],
          "addtionalProperties": false
        },
        "state": {
          "description": "The state of the order.",
          "type": "object",
          "properties": {
            "fundedAmount": {
              "$ref": "amount",
              "description": "How much of the amount the maker would have to pay that the maker currently holds."
            },
            "priceOfFundedAmount": {
              "$ref": "amount",
              "description": "How much the `fundedAmount` would convert to through the exchange rate of this order."
            }
          },
          "required": [
            "fundedAmount",
            "priceOfFundedAmount"
          ],
          "additionalProperties": false
        }
      },
      "required": [
        "specification",
        "properties"
      ],
      "additionalProperties": false
    }
  };

/***/ },
/* 408 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "outcome",
    "type": "object",
    "description": "The outcome of the transaction (what effects it had).",
    "properties": {
      "result": {
        "type": "string",
        "description": "Result code returned by rippled. See [Transaction Results](https://ripple.com/build/transactions/#full-transaction-response-list) for a complete list."
      },
      "timestamp": {
        "type": "string",
        "format": "date-time",
        "description": "The timestamp when the transaction was validated. (May be missing when requesting transactions in binary mode.)"
      },
      "fee": {
        "$ref": "value",
        "description": "The XRP fee that was charged for the transaction."
      },
      "balanceChanges": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "description": "Key is the ripple address; value is an array of signed amounts representing changes of balances for that address.",
          "items": {
            "$ref": "balance"
          }
        }
      },
      "orderbookChanges": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "description": "Key is the maker's ripple address; value is an array of changes",
          "items": {
            "$ref": "orderChange"
          }
        }
      },
      "ledgerVersion": {
        "$ref": "ledgerVersion",
        "description": "The ledger version that the transaction was validated in."
      },
      "indexInLedger": {
        "type": "integer",
        "minimum": 0,
        "description": "The ordering index of the transaction in the ledger."
      }
    },
    "required": [
      "result",
      "fee",
      "balanceChanges",
      "orderbookChanges",
      "ledgerVersion",
      "indexInLedger"
    ],
    "additionalProperties": false
  };

/***/ },
/* 409 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getTransaction",
    "link": "gettransaction",
    "properties": {
      "type": {
        "$ref": "transactionType"
      },
      "specification": {
        "description": "A specification that would produce the same outcome as this transaction. The structure of the specification depends on the value of the `type` field (see [Transaction Types](#transaction-types) for details). *Note:* This is **not** necessarily the same as the original specification."
      },
      "outcome": {
        "$ref": "outcome",
        "description": "The outcome of the transaction (what effects it had)."
      },
      "id": {
        "$ref": "id",
        "description": "A hash of the transaction that can be used to identify it."
      },
      "address": {
        "$ref": "address",
        "description": "The address of the account that initiated the transaction."
      },
      "sequence": {
        "$ref": "sequence",
        "description": "The account sequence number of the transaction for the account that initiated it."
      }
    },
    "required": [
      "id",
      "address",
      "sequence",
      "type",
      "specification",
      "outcome"
    ],
    "additionalProperties": false,
    "oneOf": [
      {
        "properties": {
          "type": {
            "enum": [
              "payment"
            ]
          },
          "specification": {
            "$ref": "payment"
          }
        }
      },
      {
        "properties": {
          "type": {
            "enum": [
              "order"
            ]
          },
          "specification": {
            "$ref": "order"
          }
        }
      },
      {
        "properties": {
          "type": {
            "enum": [
              "orderCancellation"
            ]
          },
          "specification": {
            "$ref": "orderCancellation"
          }
        }
      },
      {
        "properties": {
          "type": {
            "enum": [
              "trustline"
            ]
          },
          "specification": {
            "$ref": "trustline"
          }
        }
      },
      {
        "properties": {
          "type": {
            "enum": [
              "settings"
            ]
          },
          "specification": {
            "$ref": "getSettings"
          }
        }
      },
      {
        "properties": {
          "type": {
            "enum": [
              "suspendedPaymentCreation"
            ]
          },
          "specification": {
            "$ref": "suspendedPaymentCreation"
          }
        }
      },
      {
        "properties": {
          "type": {
            "enum": [
              "suspendedPaymentCancellation"
            ]
          },
          "specification": {
            "$ref": "suspendedPaymentCancellation"
          }
        }
      },
      {
        "properties": {
          "type": {
            "enum": [
              "suspendedPaymentExecution"
            ]
          },
          "specification": {
            "$ref": "suspendedPaymentExecution"
          }
        }
      }
    ]
  };

/***/ },
/* 410 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getTransactions",
    "type": "array",
    "items": {
      "$ref": "getTransaction"
    }
  };

/***/ },
/* 411 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getTrustlines",
    "type": "array",
    "items": {
      "properties": {
        "specification": {
          "$ref": "trustline",
          "description": "A trustline specification that would produce this trustline in its current state."
        },
        "counterparty": {
          "properties": {
            "limit": {
              "$ref": "value",
              "description": "The maximum amount that the counterparty can be owed through the trustline."
            },
            "ripplingDisabled": {
              "type": "boolean",
              "description": "If true, payments cannot ripple through this trustline."
            },
            "frozen": {
              "type": "boolean",
              "description": "If true, the trustline is frozen, which means that funds can only be sent to the counterparty."
            },
            "authorized": {
              "type": "boolean",
              "description": "If true, the counterparty authorizes this party to hold issuances from the counterparty."
            }
          },
          "description": "Properties of the trustline from the perspective of the counterparty.",
          "required": [
            "limit"
          ],
          "additionalProperties": false
        },
        "state": {
          "properties": {
            "balance": {
              "$ref": "signedValue",
              "description": "The balance on the trustline, representing which party owes the other and by how much."
            }
          },
          "description": "Properties of the trustline regarding it's current state that are not part of the specification.",
          "required": [
            "balance"
          ],
          "additionalProperties": false
        }
      },
      "required": [
        "specification",
        "counterparty",
        "state"
      ],
      "additionalProperties": false
    }
  };

/***/ },
/* 412 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getBalancesParameters",
    "description": "Parameters for getBalances",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "The address of the account to get balances for."
      },
      "options": {
        "description": "Options to filter and determine which balances to return.",
        "properties": {
          "counterparty": {
            "$ref": "address",
            "description": "Only return balances with this counterparty."
          },
          "currency": {
            "$ref": "currency",
            "description": "Only return balances for this currency."
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "description": "Return at most this many balances."
          },
          "ledgerVersion": {
            "$ref": "ledgerVersion",
            "description": "Return balances as they were in this historical ledger version."
          }
        },
        "additionalProperties": false
      }
    },
    "additionalProperties": false,
    "required": [
      "address"
    ]
  };

/***/ },
/* 413 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getBalanceSheetParameters",
    "description": "Parameters for getBalanceSheet",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "The Ripple address of the account to get the balance sheet of."
      },
      "options": {
        "properties": {
          "excludeAddresses": {
            "type": "array",
            "items": {
              "$ref": "address"
            },
            "uniqueItems": true,
            "description": "Addresses to exclude from the balance totals."
          },
          "ledgerVersion": {
            "$ref": "ledgerVersion",
            "description": "Get the balance sheet as of this historical ledger version."
          }
        },
        "description": "Options to determine how the balances will be calculated.",
        "additionalProperties": false
      }
    },
    "additionalProperties": false,
    "required": [
      "address"
    ]
  };

/***/ },
/* 414 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getLedgerParameters",
    "description": "Parameters for getLedger",
    "type": "object",
    "properties": {
      "options": {
        "description": "Options affecting what ledger and how much data to return.",
        "properties": {
          "ledgerVersion": {
            "$ref": "ledgerVersion",
            "description": "Get ledger data for this historical ledger version."
          },
          "includeAllData": {
            "type": "boolean",
            "description": "Include full transactions and/or state information if `includeTransactions` and/or `includeState` is set."
          },
          "includeTransactions": {
            "type": "boolean",
            "description": "Return an array of hashes for each transaction or an array of all transactions that were validated in this ledger version, depending on whether `includeAllData` is set."
          },
          "includeState": {
            "type": "boolean",
            "description": "Return an array of hashes for all state data or an array of all state data in this ledger version, depending on whether `includeAllData` is set."
          }
        },
        "additionalProperties": false
      }
    },
    "additionalProperties": false
  };

/***/ },
/* 415 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getOrdersParameters",
    "description": "Parameters for getOrders",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "The Ripple address of the account to get open orders for."
      },
      "options": {
        "description": "Options that determine what orders will be returned.",
        "properties": {
          "limit": {
            "type": "integer",
            "minimum": 1,
            "description": "At most this many orders will be returned."
          },
          "ledgerVersion": {
            "$ref": "ledgerVersion",
            "description": "Return orders as of this historical ledger version."
          }
        },
        "additionalProperties": false
      }
    },
    "required": [
      "address"
    ],
    "additionalProperties": false
  };

/***/ },
/* 416 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getOrderbookParameters",
    "description": "Parameters for getOrderbook",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "Address of an account to use as point-of-view. (This affects which unfunded offers are returned.)"
      },
      "orderbook": {
        "$ref": "orderbook",
        "description": "The order book to get."
      },
      "options": {
        "description": "Options to determine what to return.",
        "properties": {
          "limit": {
            "type": "integer",
            "minimum": 1,
            "description": "Return at most this many orders from the order book."
          },
          "ledgerVersion": {
            "$ref": "ledgerVersion",
            "description": "Return the order book as of this historical ledger version."
          }
        },
        "additionalProperties": false
      }
    },
    "required": [
      "address",
      "orderbook"
    ],
    "additionalProperties": false
  };

/***/ },
/* 417 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getPathsParameters",
    "type": "object",
    "properties": {
      "pathfind": {
        "description": "Specification of a pathfind request.",
        "properties": {
          "source": {
            "description": "Properties of the source of funds.",
            "type": "object",
            "properties": {
              "address": {
                "$ref": "address",
                "description": "The Ripple address of the account where funds will come from."
              },
              "amount": {
                "$ref": "laxAmount",
                "description": "The amount of funds to send."
              },
              "currencies": {
                "description": "An array of currencies (with optional counterparty) that may be used in the payment paths.",
                "type": "array",
                "items": {
                  "description": "A currency with optional counterparty.",
                  "type": "object",
                  "properties": {
                    "currency": {
                      "$ref": "currency"
                    },
                    "counterparty": {
                      "$ref": "address",
                      "description": "The counterparty for the currency; if omitted any counterparty may be used."
                    }
                  },
                  "required": [
                    "currency"
                  ],
                  "additionalProperties": false
                },
                "uniqueItems": true
              }
            },
            "not": {
              "required": [
                "amount",
                "currencies"
              ]
            },
            "additionalProperties": false,
            "required": [
              "address"
            ]
          },
          "destination": {
            "description": "Properties of the destination of funds.",
            "type": "object",
            "properties": {
              "address": {
                "$ref": "address",
                "description": "The address to send to."
              },
              "amount": {
                "$ref": "laxLaxAmount",
                "description": "The amount to be received by the receiver (`value` may be ommitted if a source amount is specified)."
              }
            },
            "required": [
              "address",
              "amount"
            ],
            "additionalProperties": false
          }
        },
        "required": [
          "source",
          "destination"
        ],
        "additionalProperties": false
      }
    },
    "additionalProperties": false,
    "required": [
      "pathfind"
    ]
  };

/***/ },
/* 418 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "api-options",
    "type": "object",
    "properties": {
      "trace": {
        "type": "boolean",
        "description": "If true, log rippled requests and responses to stdout."
      },
      "feeCushion": {
        "type": "number",
        "minimum": 1,
        "description": "Factor to multiply estimated fee by to provide a cushion in case the required fee rises during submission of a transaction. Defaults to `1.2`."
      },
      "server": {
        "type": "string",
        "description": "URI for rippled websocket port to connect to. Must start with `wss://` or `ws://`.",
        "format": "uri",
        "pattern": "^wss?://"
      },
      "proxy": {
        "format": "uri",
        "description": "URI for HTTP/HTTPS proxy to use to connect to the rippled server."
      },
      "timeout": {
        "type": "integer",
        "description": "Timeout in milliseconds before considering a request to have failed.",
        "minimum": 1
      },
      "proxyAuthorization": {
        "type": "string",
        "description": "Username and password for HTTP basic authentication to the proxy in the format **username:password**."
      },
      "authorization": {
        "type": "string",
        "description": "Username and password for HTTP basic authentication to the rippled server in the format **username:password**."
      },
      "trustedCertificates": {
        "type": "array",
        "description": "Array of PEM-formatted SSL certificates to trust when connecting to a proxy. This is useful if you want to use a self-signed certificate on the proxy server. Note: Each element must contain a single certificate; concatenated certificates are not valid.",
        "items": {
          "type": "string",
          "description": "A PEM-formatted SSL certificate to trust when connecting to a proxy."
        }
      },
      "key": {
        "type": "string",
        "description": "A string containing the private key of the client in PEM format. (Can be an array of keys)."
      },
      "passphrase": {
        "type": "string",
        "description": "The passphrase for the private key of the client."
      },
      "certificate": {
        "type": "string",
        "description": "A string containing the certificate key of the client in PEM format. (Can be an array of certificates)."
      }
    },
    "additionalProperties": false
  };

/***/ },
/* 419 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getSettingsParameters",
    "description": "Parameters for getSettings",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "The address of the account to get the settings of."
      },
      "options": {
        "description": "Options that affect what to return.",
        "properties": {
          "ledgerVersion": {
            "$ref": "ledgerVersion",
            "description": "Get the settings as of this historical ledger version."
          }
        },
        "additionalProperties": false
      }
    },
    "required": [
      "address"
    ],
    "additionalProperties": false
  };

/***/ },
/* 420 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getAccountInfoParameters",
    "description": "Parameters for getAccountInfo",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "The address of the account to get the account info of."
      },
      "options": {
        "description": "Options that affect what to return.",
        "properties": {
          "ledgerVersion": {
            "$ref": "ledgerVersion",
            "description": "Get the account info as of this historical ledger version."
          }
        },
        "additionalProperties": false
      }
    },
    "required": [
      "address"
    ],
    "additionalProperties": false
  };

/***/ },
/* 421 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getTransactionParameters",
    "description": "Parameters for getTransaction",
    "type": "object",
    "properties": {
      "id": {
        "$ref": "id"
      },
      "options": {
        "description": "Options to limit the ledger versions to search.",
        "properties": {
          "minLedgerVersion": {
            "$ref": "ledgerVersion",
            "description": "The lowest ledger version to search."
          },
          "maxLedgerVersion": {
            "$ref": "ledgerVersion",
            "description": "The highest ledger version to search"
          }
        },
        "additionalProperties": false
      }
    },
    "additionalProperties": false,
    "required": [
      "id"
    ]
  };

/***/ },
/* 422 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getTransactionsParameters",
    "description": "Parameters for getTransactions",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "The address of the account to get transactions for."
      },
      "options": {
        "description": "Options to filter the resulting transactions.",
        "properties": {
          "start": {
            "$ref": "hash256",
            "description": "If specified, this transaction will be the first transaction in the result."
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "description": "If specified, return at most this many transactions."
          },
          "minLedgerVersion": {
            "$ref": "ledgerVersion",
            "description": "Return only transactions in this ledger verion or higher."
          },
          "maxLedgerVersion": {
            "$ref": "ledgerVersion",
            "description": "Return only transactions in this ledger version or lower."
          },
          "earliestFirst": {
            "type": "boolean",
            "description": "If true, sort transactions so that the earliest ones come first. By default, the newest transactions will come first."
          },
          "excludeFailures": {
            "type": "boolean",
            "description": "If true, the result will omit transactions that did not succeed."
          },
          "initiated": {
            "type": "boolean",
            "description": "If true, return only transactions initiated by the account specified by `address`. If false, return only transactions not initiated by the account specified by `address`."
          },
          "counterparty": {
            "$ref": "address",
            "description": "If provided, only return transactions with this account as a counterparty to the transaction."
          },
          "types": {
            "type": "array",
            "items": {
              "$ref": "transactionType"
            },
            "description": "Only return transactions of the specified [Transaction Types](#transaction-types)."
          },
          "binary": {
            "type": "boolean",
            "description": "If true, the transactions will be sent from the server in a condensed binary format rather than JSON."
          }
        },
        "additionalProperties": false,
        "not": {
          "anyOf": [
            {
              "required": [
                "start",
                "minLedgerVersion"
              ]
            },
            {
              "required": [
                "start",
                "maxLedgerVersion"
              ]
            }
          ]
        }
      }
    },
    "additionalProperties": false,
    "required": [
      "address"
    ]
  };

/***/ },
/* 423 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "getTrustlinesParameters",
    "description": "Parameters for getTrustlines",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "The address of the account to get trustlines for."
      },
      "options": {
        "description": "Options to filter and determine which trustlines to return.",
        "properties": {
          "counterparty": {
            "$ref": "address",
            "description": "Only return trustlines with this counterparty."
          },
          "currency": {
            "$ref": "currency",
            "description": "Only return trustlines for this currency."
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "description": "Return at most this many trustlines."
          },
          "ledgerVersion": {
            "$ref": "ledgerVersion",
            "description": "Return trustlines as they were in this historical ledger version."
          }
        },
        "additionalProperties": false
      }
    },
    "additionalProperties": false,
    "required": [
      "address"
    ]
  };

/***/ },
/* 424 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "preparePaymentParameters",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "The address of the account that is creating the transaction."
      },
      "payment": {
        "$ref": "payment",
        "description": "The specification of the payment to prepare."
      },
      "instructions": {
        "$ref": "instructions"
      }
    },
    "additionalProperties": false,
    "required": [
      "address",
      "payment"
    ]
  };

/***/ },
/* 425 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "prepareOrderParameters",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "The address of the account that is creating the transaction."
      },
      "order": {
        "$ref": "order",
        "description": "The specification of the order to prepare."
      },
      "instructions": {
        "$ref": "instructions"
      }
    },
    "additionalProperties": false,
    "required": [
      "address",
      "order"
    ]
  };

/***/ },
/* 426 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "prepareTrustlineParameters",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "The address of the account that is creating the transaction."
      },
      "trustline": {
        "$ref": "trustline",
        "description": "The specification of the trustline to prepare."
      },
      "instructions": {
        "$ref": "instructions"
      }
    },
    "additionalProperties": false,
    "required": [
      "address",
      "trustline"
    ]
  };

/***/ },
/* 427 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "prepareOrderCancellationParameters",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "The address of the account that is creating the transaction."
      },
      "orderCancellation": {
        "$ref": "orderCancellation",
        "description": "The specification of the order cancellation to prepare."
      },
      "instructions": {
        "$ref": "instructions"
      }
    },
    "additionalProperties": false,
    "required": [
      "address",
      "orderCancellation"
    ]
  };

/***/ },
/* 428 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "prepareSettingsParameters",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "The address of the account that is creating the transaction."
      },
      "settings": {
        "$ref": "settings",
        "description": "The specification of the settings to prepare."
      },
      "instructions": {
        "$ref": "instructions"
      }
    },
    "additionalProperties": false,
    "required": [
      "address",
      "settings"
    ]
  };

/***/ },
/* 429 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "prepareSuspendedPaymentCreationParameters",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "The address of the account that is creating the transaction."
      },
      "suspendedPaymentCreation": {
        "$ref": "suspendedPaymentCreation",
        "description": "The specification of the suspended payment creation to prepare."
      },
      "instructions": {
        "$ref": "instructions"
      }
    },
    "additionalProperties": false,
    "required": [
      "address",
      "suspendedPaymentCreation"
    ]
  };

/***/ },
/* 430 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "prepareSuspendedPaymentCancellationParameters",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "The address of the account that is creating the transaction."
      },
      "suspendedPaymentCancellation": {
        "$ref": "suspendedPaymentCancellation",
        "description": "The specification of the suspended payment cancellation to prepare."
      },
      "instructions": {
        "$ref": "instructions"
      }
    },
    "additionalProperties": false,
    "required": [
      "address",
      "suspendedPaymentCancellation"
    ]
  };

/***/ },
/* 431 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "prepareSuspendedPaymentExecutionParameters",
    "type": "object",
    "properties": {
      "address": {
        "$ref": "address",
        "description": "The address of the account that is creating the transaction."
      },
      "suspendedPaymentExecution": {
        "$ref": "suspendedPaymentExecution",
        "description": "The specification of the suspended payment execution to prepare."
      },
      "instructions": {
        "$ref": "instructions"
      }
    },
    "additionalProperties": false,
    "required": [
      "address",
      "suspendedPaymentExecution"
    ]
  };

/***/ },
/* 432 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "computeLedgerHashParameters",
    "type": "object",
    "properties": {
      "ledger": {
        "$ref": "getLedger",
        "description": "The ledger header to hash."
      }
    },
    "additionalProperties": false,
    "required": [
      "ledger"
    ]
  };

/***/ },
/* 433 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "signParameters",
    "type": "object",
    "properties": {
      "txJSON": {
        "type": "string",
        "description": "Transaction represented as a JSON string in rippled format."
      },
      "secret": {
        "type": "string",
        "format": "secret",
        "description": "The secret of the account that is initiating the transaction."
      },
      "options": {
        "type": "object",
        "description": "Options that control the type of signature that will be generated.",
        "properties": {
          "signAs": {
            "$ref": "address",
            "description": "The account that the signature should count for in multisigning."
          }
        },
        "additionalProperties": false
      }
    },
    "additionalProperties": false,
    "required": [
      "txJSON",
      "secret"
    ]
  };

/***/ },
/* 434 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "submitParameters",
    "type": "object",
    "properties": {
      "signedTransaction": {
        "$ref": "blob",
        "description": "A signed transaction as returned by [sign](#sign)."
      }
    },
    "additionalProperties": false,
    "required": [
      "signedTransaction"
    ]
  };

/***/ },
/* 435 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "generateAddressParameters",
    "type": "object",
    "properties": {
      "options": {
        "type": "object",
        "description": "Options to control how the address and secret are generated.",
        "properties": {
          "entropy": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255
            },
            "description": "The entropy to use to generate the seed."
          },
          "algorithm": {
            "type": "string",
            "enum": [
              "ecdsa-secp256k1",
              "ed25519"
            ],
            "description": "The digital signature algorithm to generate an address for. Can be `ecdsa-secp256k1` (default) or `ed25519`."
          }
        },
        "additionalProperties": false
      }
    },
    "additionalProperties": false
  };

/***/ },
/* 436 */
/***/ function(module, exports) {

  module.exports = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "combineParameters",
    "type": "object",
    "properties": {
      "signedTransactions": {
        "type": "array",
        "description": "An array of signed transactions (from the output of [sign](#sign)) to combine.",
        "items": {
          "type": "string",
          "pattern": "^[A-F0-9]+$",
          "description": "A single-signed transaction represented as an uppercase hexadecimal string (from the output of [sign](#sign))"
        },
        "minLength": 1
      }
    },
    "additionalProperties": false,
    "required": [
      "signedTransactions"
    ]
  };

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _ = __webpack_require__(192);

  var _require = __webpack_require__(195);

  var convertKeysFromSnakeCaseToCamelCase = _require.convertKeysFromSnakeCaseToCamelCase;

  function renameKeys(object, mapping) {
    _.forEach(mapping, function (to, from) {
      object[to] = object[from];
      delete object[from];
    });
  }

  function getServerInfo(connection) {
    return connection.request({ command: 'server_info' }).then(function (response) {
      var info = convertKeysFromSnakeCaseToCamelCase(response.info);
      renameKeys(info, { hostid: 'hostID' });
      renameKeys(info.validatedLedger, {
        baseFeeXrp: 'baseFeeXRP',
        reserveBaseXrp: 'reserveBaseXRP',
        reserveIncXrp: 'reserveIncrementXRP',
        seq: 'ledgerVersion'
      });
      info.validatedLedger.baseFeeXRP = info.validatedLedger.baseFeeXRP.toString();
      info.validatedLedger.reserveBaseXRP = info.validatedLedger.reserveBaseXRP.toString();
      info.validatedLedger.reserveIncrementXRP = info.validatedLedger.reserveIncrementXRP.toString();
      return info;
    });
  }

  function computeFeeFromServerInfo(cushion, serverInfo) {
    return (Number(serverInfo.validatedLedger.baseFeeXRP) * Number(serverInfo.loadFactor) * cushion).toString();
  }

  function getFee(connection, cushion) {
    return getServerInfo(connection).then(_.partial(computeFeeFromServerInfo, cushion));
  }

  module.exports = {
    getServerInfo: getServerInfo,
    getFee: getFee
  };

/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var common = __webpack_require__(194);

  function isConnected() {
    return this.connection.isConnected();
  }

  function getLedgerVersion() {
    return this.connection.getLedgerVersion();
  }

  function connect() {
    return this.connection.connect();
  }

  function disconnect() {
    return this.connection.disconnect();
  }

  function getServerInfo() {
    return common.serverInfo.getServerInfo(this.connection);
  }

  function getFee() {
    var cushion = this._feeCushion || 1.2;
    return common.serverInfo.getFee(this.connection, cushion);
  }

  function formatLedgerClose(ledgerClose) {
    return {
      baseFeeXRP: common.dropsToXrp(ledgerClose.fee_base),
      ledgerHash: ledgerClose.ledger_hash,
      ledgerVersion: ledgerClose.ledger_index,
      ledgerTimestamp: common.rippleTimeToISO8601(ledgerClose.ledger_time),
      reserveBaseXRP: common.dropsToXrp(ledgerClose.reserve_base),
      reserveIncrementXRP: common.dropsToXrp(ledgerClose.reserve_inc),
      transactionCount: ledgerClose.txn_count,
      validatedLedgerVersions: ledgerClose.validated_ledgers
    };
  }

  module.exports = {
    connect: connect,
    disconnect: disconnect,
    isConnected: isConnected,
    getServerInfo: getServerInfo,
    getFee: getFee,
    getLedgerVersion: getLedgerVersion,
    formatLedgerClose: formatLedgerClose
  };

/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var utils = __webpack_require__(440);
  var parseTransaction = __webpack_require__(441);
  var _utils$common = utils.common;
  var validate = _utils$common.validate;
  var errors = _utils$common.errors;

  function attachTransactionDate(connection, tx) {
    if (tx.date) {
      return Promise.resolve(tx);
    }

    if (!tx.ledger_index) {
      return new Promise(function () {
        throw new errors.NotFoundError('ledger_index not found in tx');
      });
    }

    var request = {
      command: 'ledger',
      ledger_index: tx.ledger_index
    };

    return connection.request(request).then(function (data) {
      if (typeof data.ledger.close_time === 'number') {
        return _.assign({ date: data.ledger.close_time }, tx);
      }
      throw new errors.UnexpectedError('Ledger missing close_time');
    }).catch(function (error) {
      if (error instanceof errors.UnexpectedError) {
        throw error;
      }
      throw new errors.NotFoundError('Transaction ledger not found');
    });
  }

  function isTransactionInRange(tx, options) {
    return (!options.minLedgerVersion || tx.ledger_index >= options.minLedgerVersion) && (!options.maxLedgerVersion || tx.ledger_index <= options.maxLedgerVersion);
  }

  function convertError(connection, options, error) {
    var _error = error.message === 'txnNotFound' ? new errors.NotFoundError('Transaction not found') : error;
    if (_error instanceof errors.NotFoundError) {
      return utils.hasCompleteLedgerRange(connection, options.minLedgerVersion, options.maxLedgerVersion).then(function (hasCompleteLedgerRange) {
        if (!hasCompleteLedgerRange) {
          return utils.isPendingLedgerVersion(connection, options.maxLedgerVersion).then(function (isPendingLedgerVersion) {
            return isPendingLedgerVersion ? new errors.PendingLedgerVersionError() : new errors.MissingLedgerHistoryError();
          });
        }
        return _error;
      });
    }
    return Promise.resolve(_error);
  }

  function formatResponse(options, tx) {
    if (tx.validated !== true || !isTransactionInRange(tx, options)) {
      throw new errors.NotFoundError('Transaction not found');
    }
    return parseTransaction(tx);
  }

  function getTransaction(id) {
    var _this = this;

    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    validate.getTransaction({ id: id, options: options });

    var request = {
      command: 'tx',
      transaction: id,
      binary: false
    };

    return utils.ensureLedgerVersion.call(this, options).then(function (_options) {
      return _this.connection.request(request).then(function (tx) {
        return attachTransactionDate(_this.connection, tx);
      }).then(_.partial(formatResponse, _options)).catch(function (error) {
        return convertError(_this.connection, _options, error).then(function (_error) {
          throw _error;
        });
      });
    });
  }

  module.exports = getTransaction;

/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var assert = __webpack_require__(198);
  var common = __webpack_require__(194);
  var dropsToXrp = common.dropsToXrp;

  function clamp(value, min, max) {
    assert(min <= max, 'Illegal clamp bounds');
    return Math.min(Math.max(value, min), max);
  }

  function getXRPBalance(connection, address, ledgerVersion) {
    var request = {
      command: 'account_info',
      account: address,
      ledger_index: ledgerVersion
    };
    return connection.request(request).then(function (data) {
      return dropsToXrp(data.account_data.Balance);
    });
  }

  // If the marker is omitted from a response, you have reached the end
  function getRecursiveRecur(getter, marker, limit) {
    return getter(marker, limit).then(function (data) {
      var remaining = limit - data.results.length;
      if (remaining > 0 && data.marker !== undefined) {
        return getRecursiveRecur(getter, data.marker, remaining).then(function (results) {
          return data.results.concat(results);
        });
      }
      return data.results.slice(0, limit);
    });
  }

  function getRecursive(getter, limit) {
    return getRecursiveRecur(getter, undefined, limit || Infinity);
  }

  function renameCounterpartyToIssuer(amount) {
    if (amount === undefined) {
      return undefined;
    }
    var issuer = amount.counterparty === undefined ? amount.issuer !== undefined ? amount.issuer : undefined : amount.counterparty;
    var withIssuer = _.assign({}, amount, { issuer: issuer });
    return _.omit(withIssuer, 'counterparty');
  }

  function renameCounterpartyToIssuerInOrder(order) {
    var taker_gets = renameCounterpartyToIssuer(order.taker_gets);
    var taker_pays = renameCounterpartyToIssuer(order.taker_pays);
    var changes = { taker_gets: taker_gets, taker_pays: taker_pays };
    return _.assign({}, order, _.omit(changes, _.isUndefined));
  }

  function signum(num) {
    return num === 0 ? 0 : num > 0 ? 1 : -1;
  }

  /**
   *  Order two rippled transactions based on their ledger_index.
   *  If two transactions took place in the same ledger, sort
   *  them based on TransactionIndex
   *  See: https://ripple.com/build/transactions/
   *
   *  @param {Object} first
   *  @param {Object} second
   *  @returns {Number} [-1, 0, 1]
   */

  function compareTransactions(first, second) {
    if (!first.outcome || !second.outcome) {
      return 0;
    }
    if (first.outcome.ledgerVersion === second.outcome.ledgerVersion) {
      return signum(first.outcome.indexInLedger - second.outcome.indexInLedger);
    }
    return first.outcome.ledgerVersion < second.outcome.ledgerVersion ? -1 : 1;
  }

  function hasCompleteLedgerRange(connection, minLedgerVersion, maxLedgerVersion) {
    var firstLedgerVersion = 32570; // earlier versions have been lost
    return connection.hasLedgerVersions(minLedgerVersion || firstLedgerVersion, maxLedgerVersion);
  }

  function isPendingLedgerVersion(connection, maxLedgerVersion) {
    return connection.getLedgerVersion().then(function (ledgerVersion) {
      return ledgerVersion < (maxLedgerVersion || 0);
    });
  }

  function ensureLedgerVersion(options) {
    if (Boolean(options) && options.ledgerVersion !== undefined && options.ledgerVersion !== null) {
      return Promise.resolve(options);
    }
    return this.getLedgerVersion().then(function (ledgerVersion) {
      return _.assign({}, options, { ledgerVersion: ledgerVersion });
    });
  }

  module.exports = {
    getXRPBalance: getXRPBalance,
    ensureLedgerVersion: ensureLedgerVersion,
    compareTransactions: compareTransactions,
    renameCounterpartyToIssuerInOrder: renameCounterpartyToIssuerInOrder,
    getRecursive: getRecursive,
    hasCompleteLedgerRange: hasCompleteLedgerRange,
    isPendingLedgerVersion: isPendingLedgerVersion,
    clamp: clamp,
    common: common
  };

/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var assert = __webpack_require__(198);
  var utils = __webpack_require__(442);
  var parsePayment = __webpack_require__(448);
  var parseTrustline = __webpack_require__(450);
  var parseOrder = __webpack_require__(451);
  var parseOrderCancellation = __webpack_require__(452);
  var parseSettings = __webpack_require__(453);
  var parseSuspendedPaymentCreation = __webpack_require__(455);
  var parseSuspendedPaymentExecution = __webpack_require__(456);
  var parseSuspendedPaymentCancellation = __webpack_require__(457);

  function parseTransactionType(type) {
    var mapping = {
      Payment: 'payment',
      TrustSet: 'trustline',
      OfferCreate: 'order',
      OfferCancel: 'orderCancellation',
      AccountSet: 'settings',
      SetRegularKey: 'settings',
      SuspendedPaymentCreate: 'suspendedPaymentCreation',
      SuspendedPaymentFinish: 'suspendedPaymentExecution',
      SuspendedPaymentCancel: 'suspendedPaymentCancellation',
      SignerListSet: 'settings'
    };
    return mapping[type] || null;
  }

  function parseTransaction(tx) {
    var type = parseTransactionType(tx.TransactionType);
    var mapping = {
      'payment': parsePayment,
      'trustline': parseTrustline,
      'order': parseOrder,
      'orderCancellation': parseOrderCancellation,
      'settings': parseSettings,
      'suspendedPaymentCreation': parseSuspendedPaymentCreation,
      'suspendedPaymentExecution': parseSuspendedPaymentExecution,
      'suspendedPaymentCancellation': parseSuspendedPaymentCancellation
    };
    var parser = mapping[type];
    assert(parser !== undefined, 'Unrecognized transaction type');
    var specification = parser(tx);
    var outcome = utils.parseOutcome(tx);
    return utils.removeUndefined({
      type: type,
      address: tx.Account,
      sequence: tx.Sequence,
      id: tx.hash,
      specification: utils.removeUndefined(specification),
      outcome: outcome ? utils.removeUndefined(outcome) : undefined
    });
  }

  module.exports = parseTransaction;

/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {
  'use strict';

  var _ = __webpack_require__(192);
  var transactionParser = __webpack_require__(443);
  var utils = __webpack_require__(440);
  var BigNumber = __webpack_require__(196);

  function adjustQualityForXRP(quality, takerGetsCurrency, takerPaysCurrency) {
    // quality = takerPays.value/takerGets.value
    // using drops (1e-6 XRP) for XRP values
    var numeratorShift = takerPaysCurrency === 'XRP' ? -6 : 0;
    var denominatorShift = takerGetsCurrency === 'XRP' ? -6 : 0;
    var shift = numeratorShift - denominatorShift;
    return shift === 0 ? quality : new BigNumber(quality).shift(shift).toString();
  }

  function parseQuality(quality) {
    if (typeof quality === 'number') {
      return new BigNumber(quality).shift(-9).toNumber();
    }
    return undefined;
  }

  function parseTimestamp(rippleTime) {
    return rippleTime ? utils.common.rippleTimeToISO8601(rippleTime) : undefined;
  }

  function removeEmptyCounterparty(amount) {
    if (amount.counterparty === '') {
      delete amount.counterparty;
    }
  }

  function removeEmptyCounterpartyInBalanceChanges(balanceChanges) {
    _.forEach(balanceChanges, function (changes) {
      _.forEach(changes, removeEmptyCounterparty);
    });
  }

  function removeEmptyCounterpartyInOrderbookChanges(orderbookChanges) {
    _.forEach(orderbookChanges, function (changes) {
      _.forEach(changes, function (change) {
        _.forEach(change, removeEmptyCounterparty);
      });
    });
  }

  function parseOutcome(tx) {
    var metadata = tx.meta || tx.metaData;
    if (!metadata) {
      return undefined;
    }
    var balanceChanges = transactionParser.parseBalanceChanges(metadata);
    var orderbookChanges = transactionParser.parseOrderbookChanges(metadata);
    removeEmptyCounterpartyInBalanceChanges(balanceChanges);
    removeEmptyCounterpartyInOrderbookChanges(orderbookChanges);

    return {
      result: tx.meta.TransactionResult,
      timestamp: parseTimestamp(tx.date),
      fee: utils.common.dropsToXrp(tx.Fee),
      balanceChanges: balanceChanges,
      orderbookChanges: orderbookChanges,
      ledgerVersion: tx.ledger_index,
      indexInLedger: tx.meta.TransactionIndex
    };
  }

  function hexToString(hex) {
    return hex ? new Buffer(hex, 'hex').toString('utf-8') : undefined;
  }

  function parseMemos(tx) {
    if (!Array.isArray(tx.Memos) || tx.Memos.length === 0) {
      return undefined;
    }
    return tx.Memos.map(function (m) {
      return utils.common.removeUndefined({
        type: m.Memo.parsed_memo_type || hexToString(m.Memo.MemoType),
        format: m.Memo.parsed_memo_format || hexToString(m.Memo.MemoFormat),
        data: m.Memo.parsed_memo_data || hexToString(m.Memo.MemoData)
      });
    });
  }

  module.exports = {
    parseQuality: parseQuality,
    parseOutcome: parseOutcome,
    parseMemos: parseMemos,
    hexToString: hexToString,
    parseTimestamp: parseTimestamp,
    adjustQualityForXRP: adjustQualityForXRP,
    dropsToXrp: utils.common.dropsToXrp,
    constants: utils.common.constants,
    txFlags: utils.common.txFlags,
    removeUndefined: utils.common.removeUndefined,
    rippleTimeToISO8601: utils.common.rippleTimeToISO8601
  };
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

  module.exports.parseBalanceChanges = __webpack_require__(444).parseBalanceChanges;
  module.exports.parseOrderbookChanges = __webpack_require__(446).parseOrderbookChanges;
  module.exports.getAffectedAccounts = __webpack_require__(445).getAffectedAccounts;


/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

  var _ = __webpack_require__(192);
  var BigNumber = __webpack_require__(196);
  var normalizeNodes = __webpack_require__(445).normalizeNodes;
  var dropsToXRP = __webpack_require__(445).dropsToXRP;

  function parseBalance(balance) {
    return new BigNumber(balance.value || balance);
  }

  function computeBalanceChange(node) {
    if (node.newFields.Balance) {
      return parseBalance(node.newFields.Balance)
    } else if(node.previousFields.Balance && node.finalFields.Balance) {
      return parseBalance(node.finalFields.Balance).minus(
        parseBalance(node.previousFields.Balance));
    } else {
      return new BigNumber(0);
    }
  }

  function parseXRPBalanceChange(node) {
    var balanceChange = computeBalanceChange(node);

    if(balanceChange.isZero()) {
      return null;
    }

    return {
      address: node.finalFields.Account || node.newFields.Account,
      balance_change: {
        counterparty: '',
        currency: 'XRP',
        value: dropsToXRP(balanceChange).toString()
      }
    };
  }

  function flipBalanceChange(change) {
    var negatedBalance = (new BigNumber(change.balance_change.value)).negated();
    return {
      address: change.balance_change.counterparty,
      balance_change: {
        counterparty: change.address,
        currency: change.balance_change.currency,
        value: negatedBalance.toString()
      }
    };
  }

  function parseTrustlineBalanceChanges(node) {
    var balanceChange = computeBalanceChange(node);

    if(balanceChange.isZero()) {
      return null;
    }

    /*
     * A trustline can be created with a non-zero starting balance
     * If an offer is placed to acquire an asset with no existing trustline,
     * the trustline can be created when the ofer is taken.
     */
    var fields = _.isEmpty(node.newFields) ? node.finalFields : node.newFields;

    // the balance is always from low node's perspective
    var change = {
      address: fields.LowLimit.issuer,
      balance_change: {
        counterparty: fields.HighLimit.issuer,
        currency: fields.Balance.currency,
        value: balanceChange.toString()
      }
    };
    return [change, flipBalanceChange(change)];
  }

  function groupByAddress(balanceChanges) {
    var grouped = _.groupBy(balanceChanges, function(change) {
      return change.address;
    });
    return _.mapValues(grouped, function(group) {
      return _.map(group, function(change) {
        return change.balance_change;
      });
    });
  }

  /**
   * Computes the complete list of every balance that changed in the ledger
   * as a result of the given transaction.
   */
  function parseBalanceChanges(metadata) {
    var balanceChanges = normalizeNodes(metadata).map(function(node) {
      if (node.entryType === 'AccountRoot') {
        return [parseXRPBalanceChange(node)];
      } else if (node.entryType === 'RippleState') {
        return parseTrustlineBalanceChanges(node);
      } else {
        return [ ];
      }
    });
    return groupByAddress(_.compact(_.flatten(balanceChanges)));
  }


  module.exports.parseBalanceChanges = parseBalanceChanges;


/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var _ = __webpack_require__(192);
  var BigNumber = __webpack_require__(196);

  // drops is a bignumber.js BigNumber
  function dropsToXRP(drops) {
    return drops.dividedBy(1000000);
  }

  function normalizeNode(affectedNode) {
    var diffType = Object.keys(affectedNode)[0];
    var node = affectedNode[diffType];
    return {
      diffType: diffType,
      entryType: node.LedgerEntryType,
      ledgerIndex: node.LedgerIndex,
      newFields: node.NewFields || {},
      finalFields: node.FinalFields || {},
      previousFields: node.PreviousFields || {}
    };
  }

  function normalizeNodes(metadata) {
    if (!metadata.AffectedNodes) {
      return [];
    }
    return metadata.AffectedNodes.map(normalizeNode);
  }

  function parseCurrencyAmount(currencyAmount) {
    if (currencyAmount === undefined) {
      return undefined;
    }
    if (typeof currencyAmount === 'string') {
      return {
        currency: 'XRP',
        value: dropsToXRP(new BigNumber(currencyAmount)).toString()
      };
    }

    return {
      currency: currencyAmount.currency,
      counterparty: currencyAmount.issuer,
      value: currencyAmount.value
    };
  }

  function isAccountField(fieldName) {
    var fieldNames = ['Account', 'Owner', 'Destination', 'Issuer', 'Target'];
    return _.includes(fieldNames, fieldName);
  }

  function isAmountFieldAffectingIssuer(fieldName) {
    var fieldNames = ['LowLimit', 'HighLimit', 'TakerPays', 'TakerGets'];
    return _.includes(fieldNames, fieldName);
  }

  function getAffectedAccounts(metadata) {
    var accounts = [];
    _.forEach(normalizeNodes(metadata), function(node) {
      var fields = node.diffType === 'CreatedNode' ?
        node.newFields : node.finalFields;
      _.forEach(fields, function(fieldValue, fieldName) {
        if (isAccountField(fieldName)) {
          accounts.push(fieldValue);
        } else if (isAmountFieldAffectingIssuer(fieldName) && fieldValue.issuer) {
          accounts.push(fieldValue.issuer);
        }
      });
    });
    return _.uniq(accounts);
  }

  module.exports = {
    dropsToXRP: dropsToXRP,
    normalizeNodes: normalizeNodes,
    parseCurrencyAmount: parseCurrencyAmount,
    getAffectedAccounts: getAffectedAccounts
  };


/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var _ = __webpack_require__(192);
  var utils = __webpack_require__(445);
  var GlobalBigNumber = __webpack_require__(196);
  var BigNumber = GlobalBigNumber.another({DECIMAL_PLACES: 40});
  var parseQuality = __webpack_require__(447);

  var lsfSell = 0x00020000;   // see "lsfSell" flag in rippled source code

  function removeUndefined(obj) {
    return _.omit(obj, _.isUndefined);
  }

  function convertOrderChange(order) {
    var takerGets = order.taker_gets;
    var takerPays = order.taker_pays;
    var direction = order.sell ? 'sell' : 'buy';
    var quantity = (direction === 'buy') ? takerPays : takerGets;
    var totalPrice = (direction === 'buy') ? takerGets : takerPays;
    return removeUndefined({
      direction: direction,
      quantity: quantity,
      totalPrice: totalPrice,
      sequence: order.sequence,
      status: order.status,
      makerExchangeRate: order.quality,
      expirationTime: order.expiration
    });
  }

  function rippleToUnixTimestamp(rpepoch) {
    return (rpepoch + 0x386D4380) * 1000;
  }

  function getExpirationTime(node) {
    var expirationTime = node.finalFields.Expiration || node.newFields.Expiration;
    if (expirationTime === undefined) {
      return undefined;
    }
    return (new Date(rippleToUnixTimestamp(expirationTime))).toISOString();
  }

  function getQuality(node) {
    var takerGets = node.finalFields.TakerGets || node.newFields.TakerGets;
    var takerPays = node.finalFields.TakerPays || node.newFields.TakerPays;
    var takerGetsCurrency = takerGets.currency || 'XRP';
    var takerPaysCurrency = takerPays.currency || 'XRP';
    var bookDirectory = node.finalFields.BookDirectory
      || node.newFields.BookDirectory;
    var qualityHex = bookDirectory.substring(bookDirectory.length - 16);
    return parseQuality(qualityHex, takerGetsCurrency, takerPaysCurrency);
  }

  function parseOrderStatus(node) {
    if (node.diffType === 'CreatedNode') {
      // "submitted" is more conventional, but could be confusing in the
      // context of Ripple
      return 'created';
    }

    if (node.diffType === 'ModifiedNode') {
      return 'partially-filled';
    }

    if (node.diffType === 'DeletedNode') {
      // A filled order has previous fields
      if (node.previousFields.hasOwnProperty('TakerPays')) {
        return 'filled';
      }

      // A cancelled order has no previous fields
      // google search for "cancelled order" shows 5x more results than
      // "canceled order", even though both spellings are correct
      return 'cancelled';
    }
  }

  function calculateDelta(finalAmount, previousAmount) {
    if (previousAmount) {
      var finalValue = new BigNumber(finalAmount.value);
      var previousValue = new BigNumber(previousAmount.value);
      return finalValue.minus(previousValue).abs().toString();
    }
    return '0';
  }

  function parseChangeAmount(node, type) {
    var status = parseOrderStatus(node);

    if (status === 'cancelled') {
      // Canceled orders do not have PreviousFields; FinalFields
      // have positive values
      return utils.parseCurrencyAmount(node.finalFields[type]);
    } else if (status === 'created') {
      return utils.parseCurrencyAmount(node.newFields[type]);
    }
    var finalAmount = utils.parseCurrencyAmount(node.finalFields[type]);
    var previousAmount = utils.parseCurrencyAmount(node.previousFields[type]);
    var value = calculateDelta(finalAmount, previousAmount);
    return _.assign({}, finalAmount, {value: value});
  }

  function parseOrderChange(node) {
    var orderChange = convertOrderChange({
      taker_pays: parseChangeAmount(node, 'TakerPays'),
      taker_gets: parseChangeAmount(node, 'TakerGets'),
      sell: (node.finalFields.Flags & lsfSell) !== 0,
      sequence: node.finalFields.Sequence || node.newFields.Sequence,
      status: parseOrderStatus(node),
      quality: getQuality(node),
      expiration: getExpirationTime(node)
    });

    Object.defineProperty(orderChange, 'account', {
      value: node.finalFields.Account || node.newFields.Account
    });

    return orderChange;
  }

  function groupByAddress(orderChanges) {
    return _.groupBy(orderChanges, function(change) {
      return change.account;
    });
  }

  /**
   * Computes the complete list of every Offer that changed in the ledger
   * as a result of the given transaction.
   * Returns changes grouped by Ripple account.
   *
   *  @param {Object} metadata - Transaction metadata as return by ripple-lib
   *  @returns {Object} - Orderbook changes grouped by Ripple account
   *
   */
  exports.parseOrderbookChanges = function parseOrderbookChanges(metadata) {
    var nodes = utils.normalizeNodes(metadata);

    var orderChanges = _.map(_.filter(nodes, function(node) {
      return node.entryType === 'Offer';
    }), parseOrderChange);

    return groupByAddress(orderChanges);
  };


/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var assert = __webpack_require__(198);
  var BigNumber = __webpack_require__(196);

  /*
  The quality, as stored in the last 64 bits of a directory index, is stored as
  the quotient of TakerPays/TakerGets. It uses drops (1e-6 XRP) for XRP values.
  */

  function adjustQualityForXRP(quality, takerGetsCurrency, takerPaysCurrency) {
    var numeratorShift = (takerPaysCurrency === 'XRP' ? -6 : 0);
    var denominatorShift = (takerGetsCurrency === 'XRP' ? -6 : 0);
    var shift = numeratorShift - denominatorShift;
    return shift === 0 ? (new BigNumber(quality)).toString() :
      (new BigNumber(quality)).shift(shift).toString();
  }

  function parseQuality(qualityHex, takerGetsCurrency, takerPaysCurrency) {
    assert(qualityHex.length === 16);
    var mantissa = new BigNumber(qualityHex.substring(2), 16);
    var offset = parseInt(qualityHex.substring(0, 2), 16) - 100;
    var quality = mantissa.toString() + 'e' + offset.toString();
    return adjustQualityForXRP(quality, takerGetsCurrency, takerPaysCurrency);
  }

  module.exports = parseQuality;


/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var assert = __webpack_require__(198);
  var utils = __webpack_require__(442);
  var parseAmount = __webpack_require__(449);
  var txFlags = utils.txFlags;

  function isPartialPayment(tx) {
    return (tx.Flags & txFlags.Payment.PartialPayment) !== 0;
  }

  function isNoDirectRipple(tx) {
    return (tx.Flags & txFlags.Payment.NoRippleDirect) !== 0;
  }

  function isQualityLimited(tx) {
    return (tx.Flags & txFlags.Payment.LimitQuality) !== 0;
  }

  function removeGenericCounterparty(amount, address) {
    return amount.counterparty === address ? _.omit(amount, 'counterparty') : amount;
  }

  function parsePayment(tx) {
    assert(tx.TransactionType === 'Payment');

    var source = {
      address: tx.Account,
      maxAmount: removeGenericCounterparty(parseAmount(tx.SendMax || tx.Amount), tx.Account),
      tag: tx.SourceTag
    };

    var destination = {
      address: tx.Destination,
      amount: removeGenericCounterparty(parseAmount(tx.Amount), tx.Destination),
      tag: tx.DestinationTag
    };

    return utils.removeUndefined({
      source: utils.removeUndefined(source),
      destination: utils.removeUndefined(destination),
      memos: utils.parseMemos(tx),
      invoiceID: tx.InvoiceID,
      paths: tx.Paths ? JSON.stringify(tx.Paths) : undefined,
      allowPartialPayment: isPartialPayment(tx) || undefined,
      noDirectRipple: isNoDirectRipple(tx) || undefined,
      limitQuality: isQualityLimited(tx) || undefined
    });
  }

  module.exports = parsePayment;

/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var utils = __webpack_require__(442);

  function parseAmount(amount) {
    if (typeof amount === 'string') {
      return {
        currency: 'XRP',
        value: utils.dropsToXrp(amount)
      };
    }
    return {
      currency: amount.currency,
      value: amount.value,
      counterparty: amount.issuer
    };
  }

  module.exports = parseAmount;

/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var assert = __webpack_require__(198);
  var utils = __webpack_require__(442);
  var flags = utils.txFlags.TrustSet;

  function parseFlag(flagsValue, trueValue, falseValue) {
    if (flagsValue & trueValue) {
      return true;
    }
    if (flagsValue & falseValue) {
      return false;
    }
    return undefined;
  }

  function parseTrustline(tx) {
    assert(tx.TransactionType === 'TrustSet');

    return utils.removeUndefined({
      limit: tx.LimitAmount.value,
      currency: tx.LimitAmount.currency,
      counterparty: tx.LimitAmount.issuer,
      qualityIn: utils.parseQuality(tx.QualityIn),
      qualityOut: utils.parseQuality(tx.QualityOut),
      ripplingDisabled: parseFlag(tx.Flags, flags.SetNoRipple, flags.ClearNoRipple),
      frozen: parseFlag(tx.Flags, flags.SetFreeze, flags.ClearFreeze),
      authorized: parseFlag(tx.Flags, flags.SetAuth, 0)
    });
  }

  module.exports = parseTrustline;

/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var assert = __webpack_require__(198);
  var utils = __webpack_require__(442);
  var parseAmount = __webpack_require__(449);
  var flags = utils.txFlags.OfferCreate;

  function parseOrder(tx) {
    assert(tx.TransactionType === 'OfferCreate');

    var direction = (tx.Flags & flags.Sell) === 0 ? 'buy' : 'sell';
    var takerGetsAmount = parseAmount(tx.TakerGets);
    var takerPaysAmount = parseAmount(tx.TakerPays);
    var quantity = direction === 'buy' ? takerPaysAmount : takerGetsAmount;
    var totalPrice = direction === 'buy' ? takerGetsAmount : takerPaysAmount;

    return utils.removeUndefined({
      direction: direction,
      quantity: quantity,
      totalPrice: totalPrice,
      passive: (tx.Flags & flags.Passive) !== 0 || undefined,
      immediateOrCancel: (tx.Flags & flags.ImmediateOrCancel) !== 0 || undefined,
      fillOrKill: (tx.Flags & flags.FillOrKill) !== 0 || undefined,
      expirationTime: utils.parseTimestamp(tx.Expiration)
    });
  }

  module.exports = parseOrder;

/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var assert = __webpack_require__(198);

  function parseOrderCancellation(tx) {
    assert(tx.TransactionType === 'OfferCancel');
    return {
      orderSequence: tx.OfferSequence
    };
  }

  module.exports = parseOrderCancellation;

/***/ },
/* 453 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var assert = __webpack_require__(198);
  var AccountFlags = __webpack_require__(442).constants.AccountFlags;
  var parseFields = __webpack_require__(454);

  function getAccountRootModifiedNode(tx) {
    var modifiedNodes = tx.meta.AffectedNodes.filter(function (node) {
      return node.ModifiedNode.LedgerEntryType === 'AccountRoot';
    });
    assert(modifiedNodes.length === 1);
    return modifiedNodes[0].ModifiedNode;
  }

  function parseFlags(tx) {
    var settings = {};
    if (tx.TransactionType !== 'AccountSet') {
      return settings;
    }

    var node = getAccountRootModifiedNode(tx);
    var oldFlags = _.get(node.PreviousFields, 'Flags');
    var newFlags = _.get(node.FinalFields, 'Flags');

    if (oldFlags !== undefined && newFlags !== undefined) {
      (function () {
        var changedFlags = oldFlags ^ newFlags;
        var setFlags = newFlags & changedFlags;
        var clearedFlags = oldFlags & changedFlags;
        _.forEach(AccountFlags, function (flagValue, flagName) {
          if (setFlags & flagValue) {
            settings[flagName] = true;
          } else if (clearedFlags & flagValue) {
            settings[flagName] = false;
          }
        });
      })();
    }

    // enableTransactionIDTracking requires a special case because it
    // does not affect the Flags field; instead it adds/removes a field called
    // "AccountTxnID" to/from the account root.

    var oldField = _.get(node.PreviousFields, 'AccountTxnID');
    var newField = _.get(node.FinalFields, 'AccountTxnID');
    if (newField && !oldField) {
      settings.enableTransactionIDTracking = true;
    } else if (oldField && !newField) {
      settings.enableTransactionIDTracking = false;
    }

    return settings;
  }

  function parseSettings(tx) {
    var txType = tx.TransactionType;
    assert(txType === 'AccountSet' || txType === 'SetRegularKey' || txType === 'SignerListSet');

    return _.assign({}, parseFlags(tx), parseFields(tx));
  }

  module.exports = parseSettings;

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {
  'use strict';

  var _ = __webpack_require__(192);
  var BigNumber = __webpack_require__(196);
  var AccountFields = __webpack_require__(442).constants.AccountFields;

  function parseField(info, value) {
    if (info.encoding === 'hex' && !info.length) {
      // e.g. "domain"
      return new Buffer(value, 'hex').toString('ascii');
    }
    if (info.shift) {
      return new BigNumber(value).shift(-info.shift).toNumber();
    }
    return value;
  }

  function parseFields(data) {
    var settings = {};
    for (var fieldName in AccountFields) {
      var fieldValue = data[fieldName];
      if (fieldValue !== undefined) {
        var info = AccountFields[fieldName];
        settings[info.name] = parseField(info, fieldValue);
      }
    }

    if (data.RegularKey) {
      settings.regularKey = data.RegularKey;
    }

    // TODO: this isn't implemented in rippled yet, may have to change this later
    if (data.SignerQuorum || data.SignerEntries) {
      settings.signers = {};
      if (data.SignerQuorum) {
        settings.signers.threshold = data.SignerQuorum;
      }
      if (data.SignerEntries) {
        settings.signers.weights = _.map(data.SignerEntries, function (entry) {
          return {
            address: entry.SignerEntry.Account,
            weight: entry.SignerEntry.SignerWeight
          };
        });
      }
    }
    return settings;
  }

  module.exports = parseFields;
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var assert = __webpack_require__(198);
  var utils = __webpack_require__(442);
  var parseAmount = __webpack_require__(449);

  function removeGenericCounterparty(amount, address) {
    return amount.counterparty === address ? _.omit(amount, 'counterparty') : amount;
  }

  function parseSuspendedPaymentCreation(tx) {
    assert(tx.TransactionType === 'SuspendedPaymentCreate');

    var source = {
      address: tx.Account,
      maxAmount: removeGenericCounterparty(parseAmount(tx.SendMax || tx.Amount), tx.Account),
      tag: tx.SourceTag
    };

    var destination = {
      address: tx.Destination,
      amount: removeGenericCounterparty(parseAmount(tx.Amount), tx.Destination),
      tag: tx.DestinationTag
    };

    return utils.removeUndefined({
      source: utils.removeUndefined(source),
      destination: utils.removeUndefined(destination),
      memos: utils.parseMemos(tx),
      digest: tx.Digest,
      allowCancelAfter: utils.parseTimestamp(tx.CancelAfter),
      allowExecuteAfter: utils.parseTimestamp(tx.FinishAfter)
    });
  }

  module.exports = parseSuspendedPaymentCreation;

/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var assert = __webpack_require__(198);
  var utils = __webpack_require__(442);

  function parseSuspendedPaymentExecution(tx) {
    assert(tx.TransactionType === 'SuspendedPaymentFinish');

    return utils.removeUndefined({
      memos: utils.parseMemos(tx),
      owner: tx.Owner,
      suspensionSequence: tx.OfferSequence,
      method: tx.Method,
      digest: tx.Digest,
      proof: tx.Proof ? utils.hexToString(tx.Proof) : undefined
    });
  }

  module.exports = parseSuspendedPaymentExecution;

/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var assert = __webpack_require__(198);
  var utils = __webpack_require__(442);

  function parseSuspendedPaymentCancellation(tx) {
    assert(tx.TransactionType === 'SuspendedPaymentCancel');

    return utils.removeUndefined({
      memos: utils.parseMemos(tx),
      owner: tx.Owner,
      suspensionSequence: tx.OfferSequence
    });
  }

  module.exports = parseSuspendedPaymentCancellation;

/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {


  /* eslint-disable max-params */
  'use strict';

  var _ = __webpack_require__(192);
  var binary = __webpack_require__(459);

  var _require = __webpack_require__(565);

  var computeTransactionHash = _require.computeTransactionHash;

  var utils = __webpack_require__(440);
  var parseTransaction = __webpack_require__(441);
  var getTransaction = __webpack_require__(439);
  var validate = utils.common.validate;

  function parseBinaryTransaction(transaction) {
    var tx = binary.decode(transaction.tx_blob);
    tx.hash = computeTransactionHash(tx);
    tx.ledger_index = transaction.ledger_index;
    return {
      tx: tx,
      meta: binary.decode(transaction.meta),
      validated: transaction.validated
    };
  }

  function parseAccountTxTransaction(tx) {
    var _tx = tx.tx_blob ? parseBinaryTransaction(tx) : tx;
    // rippled uses a different response format for 'account_tx' than 'tx'
    return parseTransaction(_.assign({}, _tx.tx, { meta: _tx.meta, validated: _tx.validated }));
  }

  function counterpartyFilter(filters, tx) {
    if (tx.address === filters.counterparty || tx.specification && (tx.specification.destination && tx.specification.destination.address === filters.counterparty || tx.specification.counterparty === filters.counterparty)) {
      return true;
    }
    return false;
  }

  function transactionFilter(address, filters, tx) {
    if (filters.excludeFailures && tx.outcome.result !== 'tesSUCCESS') {
      return false;
    }
    if (filters.types && !_.includes(filters.types, tx.type)) {
      return false;
    }
    if (filters.initiated === true && tx.address !== address) {
      return false;
    }
    if (filters.initiated === false && tx.address === address) {
      return false;
    }
    if (filters.counterparty && !counterpartyFilter(filters, tx)) {
      return false;
    }
    return true;
  }

  function orderFilter(options, tx) {
    return !options.startTx || (options.earliestFirst ? utils.compareTransactions(tx, options.startTx) > 0 : utils.compareTransactions(tx, options.startTx) < 0);
  }

  function formatPartialResponse(address, options, data) {
    return {
      marker: data.marker,
      results: data.transactions.filter(function (tx) {
        return tx.validated;
      }).map(parseAccountTxTransaction).filter(_.partial(transactionFilter, address, options)).filter(_.partial(orderFilter, options))
    };
  }

  function getAccountTx(connection, address, options, marker, limit) {
    var request = {
      command: 'account_tx',
      account: address,
      // -1 is equivalent to earliest available validated ledger
      ledger_index_min: options.minLedgerVersion || -1,
      // -1 is equivalent to most recent available validated ledger
      ledger_index_max: options.maxLedgerVersion || -1,
      forward: options.earliestFirst,
      binary: options.binary,
      limit: utils.clamp(limit, 10, 400),
      marker: marker
    };

    return connection.request(request).then(function (response) {
      return formatPartialResponse(address, options, response);
    });
  }

  function checkForLedgerGaps(connection, options, transactions) {
    var minLedgerVersion = options.minLedgerVersion;
    var maxLedgerVersion = options.maxLedgerVersion;

    // if we reached the limit on number of transactions, then we can shrink
    // the required ledger range to only guarantee that there are no gaps in
    // the range of ledgers spanned by those transactions

    if (options.limit && transactions.length === options.limit) {
      if (options.earliestFirst) {
        maxLedgerVersion = _.last(transactions).outcome.ledgerVersion;
      } else {
        minLedgerVersion = _.last(transactions).outcome.ledgerVersion;
      }
    }

    return utils.hasCompleteLedgerRange(connection, minLedgerVersion, maxLedgerVersion).then(function (hasCompleteLedgerRange) {
      if (!hasCompleteLedgerRange) {
        throw new utils.common.errors.MissingLedgerHistoryError();
      }
    });
  }

  function formatResponse(connection, options, transactions) {
    var compare = options.earliestFirst ? utils.compareTransactions : _.rearg(utils.compareTransactions, 1, 0);
    var sortedTransactions = transactions.sort(compare);
    return checkForLedgerGaps(connection, options, sortedTransactions).then(function () {
      return sortedTransactions;
    });
  }

  function getTransactionsInternal(connection, address, options) {
    var getter = _.partial(getAccountTx, connection, address, options);
    var format = _.partial(formatResponse, connection, options);
    return utils.getRecursive(getter, options.limit).then(format);
  }

  function getTransactions(address) {
    var _this = this;

    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    validate.getTransactions({ address: address, options: options });

    var defaults = { maxLedgerVersion: -1 };
    if (options.start) {
      return getTransaction.call(this, options.start).then(function (tx) {
        var ledgerVersion = tx.outcome.ledgerVersion;
        var bound = options.earliestFirst ? { minLedgerVersion: ledgerVersion } : { maxLedgerVersion: ledgerVersion };
        var newOptions = _.assign({}, defaults, options, { startTx: tx }, bound);
        return getTransactionsInternal(_this.connection, address, newOptions);
      });
    }
    var newOptions = _.assign({}, defaults, options);
    return getTransactionsInternal(this.connection, address, newOptions);
  }

  module.exports = getTransactions;

/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var assert = __webpack_require__(198);
  var coreTypes = __webpack_require__(460);
  var quality = coreTypes.quality;
  var _coreTypes$binary = coreTypes.binary;
  var bytesToHex = _coreTypes$binary.bytesToHex;
  var signingData = _coreTypes$binary.signingData;
  var multiSigningData = _coreTypes$binary.multiSigningData;
  var binaryToJSON = _coreTypes$binary.binaryToJSON;
  var serializeObject = _coreTypes$binary.serializeObject;

  function decode(binary) {
    assert(typeof binary === 'string', 'binary must be a hex string');
    return binaryToJSON(binary);
  }

  function encode(json) {
    assert(typeof json === 'object');
    return bytesToHex(serializeObject(json));
  }

  function encodeForSigning(json) {
    assert(typeof json === 'object');
    return bytesToHex(signingData(json));
  }

  function encodeForMultisigning(json, signer) {
    assert(typeof json === 'object');
    assert.equal(json.SigningPubKey, '');
    return bytesToHex(multiSigningData(json, signer));
  }

  function encodeQuality(value) {
    assert(typeof value === 'string');
    return bytesToHex(quality.encode(value));
  }

  function decodeQuality(value) {
    assert(typeof value === 'string');
    return quality.decode(value).toString();
  }

  module.exports = {
    decode: decode,
    encode: encode,
    encodeForSigning: encodeForSigning,
    encodeForMultisigning: encodeForMultisigning,
    encodeQuality: encodeQuality,
    decodeQuality: decodeQuality
  };

/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _ = __webpack_require__(192);
  var enums = __webpack_require__(461);
  var Field = enums.Field;

  var types = __webpack_require__(513);
  var binary = __webpack_require__(544);

  var _require = __webpack_require__(561);

  var ShaMap = _require.ShaMap;

  var ledgerHashes = __webpack_require__(562);
  var hashes = __webpack_require__(547);
  var quality = __webpack_require__(563);
  var signing = __webpack_require__(564);

  var _require2 = __webpack_require__(545);

  var HashPrefix = _require2.HashPrefix;

  module.exports = _.assign({
    hashes: _.assign({}, hashes, ledgerHashes),
    binary: binary,
    enums: enums,
    signing: signing,
    quality: quality,
    Field: Field,
    HashPrefix: HashPrefix,
    ShaMap: ShaMap
  }, types);

/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _slicedToArray = __webpack_require__(462)['default'];

  var assert = __webpack_require__(198);
  var _ = __webpack_require__(192);

  var _require = __webpack_require__(504);

  var parseBytes = _require.parseBytes;
  var serializeUIntN = _require.serializeUIntN;

  var makeClass = __webpack_require__(505);
  var enums = __webpack_require__(512);

  function transformWith(func, obj) {
    return _.transform(obj, func);
  }

  function biMap(obj, valueKey) {
    return _.transform(obj, function (result, value, key) {
      result[key] = value;
      result[value[valueKey]] = value;
    });
  }

  var EnumType = makeClass({
    EnumType: function EnumType(definition) {
      _.assign(this, definition);
      // At minimum
      assert(this.bytes instanceof Uint8Array);
      assert(typeof this.ordinal === 'number');
      assert(typeof this.name === 'string');
    },
    toString: function toString() {
      return this.name;
    },
    toJSON: function toJSON() {
      return this.name;
    },
    toBytesSink: function toBytesSink(sink) {
      sink.put(this.bytes);
    },
    statics: {
      ordinalByteWidth: 1,
      fromParser: function fromParser(parser) {
        return this.from(parser.readUIntN(this.ordinalByteWidth));
      },
      from: function from(val) {
        var ret = val instanceof this ? val : this[val];
        if (!ret) {
          throw new Error(val + ' is not a valid name or ordinal for ' + this.enumName);
        }
        return ret;
      },
      valuesByName: function valuesByName() {
        var _this = this;

        return _.transform(this.initVals, function (result, ordinal, name) {
          var bytes = serializeUIntN(ordinal, _this.ordinalByteWidth);
          var type = new _this({ name: name, ordinal: ordinal, bytes: bytes });
          result[name] = type;
        });
      },
      init: function init() {
        var mapped = this.valuesByName();
        _.assign(this, biMap(mapped, 'ordinal'));
        this.values = _.values(mapped);
        return this;
      }
    }
  });

  function makeEnum(name, definition) {
    return makeClass({
      inherits: EnumType,
      statics: _.assign(definition, { enumName: name })
    });
  }

  function makeEnums(to, definition, name) {
    to[name] = makeEnum(name, definition);
  }

  var Enums = transformWith(makeEnums, {
    Type: {
      initVals: enums.TYPES
    },
    LedgerEntryType: {
      initVals: enums.LEDGER_ENTRY_TYPES, ordinalByteWidth: 2
    },
    TransactionType: {
      initVals: enums.TRANSACTION_TYPES, ordinalByteWidth: 2
    },
    TransactionResult: {
      initVals: enums.TRANSACTION_RESULTS, ordinalByteWidth: 1
    }
  });

  Enums.Field = makeClass({
    inherits: EnumType,
    statics: {
      enumName: 'Field',
      initVals: enums.FIELDS,
      valuesByName: function valuesByName() {
        var _this2 = this;

        var fields = _.map(this.initVals, function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2);

          var name = _ref2[0];
          var definition = _ref2[1];

          var type = Enums.Type[definition.type];
          var bytes = _this2.header(type.ordinal, definition.nth);
          var ordinal = type.ordinal << 16 | definition.nth;
          var extra = { ordinal: ordinal, name: name, type: type, bytes: bytes };
          return new _this2(_.assign(definition, extra));
        });
        return _.indexBy(fields, 'name');
      },
      header: function header(type, nth) {
        var name = nth;
        var header = [];
        var push = header.push.bind(header);
        if (type < 16) {
          if (name < 16) {
            push(type << 4 | name);
          } else {
            push(type << 4, name);
          }
        } else if (name < 16) {
          push(name, type);
        } else {
          push(0, type, name);
        }
        return parseBytes(header, Uint8Array);
      }
    }
  });

  module.exports = Enums;

/***/ },
/* 462 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _getIterator = __webpack_require__(463)["default"];

  var _isIterable = __webpack_require__(501)["default"];

  exports["default"] = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = _getIterator(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (_isIterable(Object(arr))) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  })();

  exports.__esModule = true;

/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(464), __esModule: true };

/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(465);
  __webpack_require__(493);
  module.exports = __webpack_require__(496);

/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(466);
  var Iterators = __webpack_require__(469);
  Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;

/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var addToUnscopables = __webpack_require__(467)
    , step             = __webpack_require__(468)
    , Iterators        = __webpack_require__(469)
    , toIObject        = __webpack_require__(470);

  // 22.1.3.4 Array.prototype.entries()
  // 22.1.3.13 Array.prototype.keys()
  // 22.1.3.29 Array.prototype.values()
  // 22.1.3.30 Array.prototype[@@iterator]()
  module.exports = __webpack_require__(474)(Array, 'Array', function(iterated, kind){
    this._t = toIObject(iterated); // target
    this._i = 0;                   // next index
    this._k = kind;                // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
  }, function(){
    var O     = this._t
      , kind  = this._k
      , index = this._i++;
    if(!O || index >= O.length){
      this._t = undefined;
      return step(1);
    }
    if(kind == 'keys'  )return step(0, index);
    if(kind == 'values')return step(0, O[index]);
    return step(0, [index, O[index]]);
  }, 'values');

  // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
  Iterators.Arguments = Iterators.Array;

  addToUnscopables('keys');
  addToUnscopables('values');
  addToUnscopables('entries');

/***/ },
/* 467 */
/***/ function(module, exports) {

  module.exports = function(){ /* empty */ };

/***/ },
/* 468 */
/***/ function(module, exports) {

  module.exports = function(done, value){
    return {value: value, done: !!done};
  };

/***/ },
/* 469 */
/***/ function(module, exports) {

  module.exports = {};

/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

  // to indexed object, toObject with fallback for non-array-like ES3 strings
  var IObject = __webpack_require__(471)
    , defined = __webpack_require__(473);
  module.exports = function(it){
    return IObject(defined(it));
  };

/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

  // fallback for non-array-like ES3 and non-enumerable old V8 strings
  var cof = __webpack_require__(472);
  module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
    return cof(it) == 'String' ? it.split('') : Object(it);
  };

/***/ },
/* 472 */
/***/ function(module, exports) {

  var toString = {}.toString;

  module.exports = function(it){
    return toString.call(it).slice(8, -1);
  };

/***/ },
/* 473 */
/***/ function(module, exports) {

  // 7.2.1 RequireObjectCoercible(argument)
  module.exports = function(it){
    if(it == undefined)throw TypeError("Can't call method on  " + it);
    return it;
  };

/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var LIBRARY        = __webpack_require__(475)
    , $export        = __webpack_require__(476)
    , redefine       = __webpack_require__(481)
    , hide           = __webpack_require__(482)
    , has            = __webpack_require__(487)
    , Iterators      = __webpack_require__(469)
    , $iterCreate    = __webpack_require__(488)
    , setToStringTag = __webpack_require__(489)
    , getProto       = __webpack_require__(483).getProto
    , ITERATOR       = __webpack_require__(490)('iterator')
    , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
    , FF_ITERATOR    = '@@iterator'
    , KEYS           = 'keys'
    , VALUES         = 'values';

  var returnThis = function(){ return this; };

  module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
    $iterCreate(Constructor, NAME, next);
    var getMethod = function(kind){
      if(!BUGGY && kind in proto)return proto[kind];
      switch(kind){
        case KEYS: return function keys(){ return new Constructor(this, kind); };
        case VALUES: return function values(){ return new Constructor(this, kind); };
      } return function entries(){ return new Constructor(this, kind); };
    };
    var TAG        = NAME + ' Iterator'
      , DEF_VALUES = DEFAULT == VALUES
      , VALUES_BUG = false
      , proto      = Base.prototype
      , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
      , $default   = $native || getMethod(DEFAULT)
      , methods, key;
    // Fix native
    if($native){
      var IteratorPrototype = getProto($default.call(new Base));
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // FF fix
      if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
      // fix Array#{values, @@iterator}.name in V8 / FF
      if(DEF_VALUES && $native.name !== VALUES){
        VALUES_BUG = true;
        $default = function values(){ return $native.call(this); };
      }
    }
    // Define iterator
    if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
      hide(proto, ITERATOR, $default);
    }
    // Plug for library
    Iterators[NAME] = $default;
    Iterators[TAG]  = returnThis;
    if(DEFAULT){
      methods = {
        values:  DEF_VALUES  ? $default : getMethod(VALUES),
        keys:    IS_SET      ? $default : getMethod(KEYS),
        entries: !DEF_VALUES ? $default : getMethod('entries')
      };
      if(FORCED)for(key in methods){
        if(!(key in proto))redefine(proto, key, methods[key]);
      } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }
    return methods;
  };

/***/ },
/* 475 */
/***/ function(module, exports) {

  module.exports = true;

/***/ },
/* 476 */
/***/ function(module, exports, __webpack_require__) {

  var global    = __webpack_require__(477)
    , core      = __webpack_require__(478)
    , ctx       = __webpack_require__(479)
    , PROTOTYPE = 'prototype';

  var $export = function(type, name, source){
    var IS_FORCED = type & $export.F
      , IS_GLOBAL = type & $export.G
      , IS_STATIC = type & $export.S
      , IS_PROTO  = type & $export.P
      , IS_BIND   = type & $export.B
      , IS_WRAP   = type & $export.W
      , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
      , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
      , key, own, out;
    if(IS_GLOBAL)source = name;
    for(key in source){
      // contains in native
      own = !IS_FORCED && target && key in target;
      if(own && key in exports)continue;
      // export native or passed
      out = own ? target[key] : source[key];
      // prevent global pollution for namespaces
      exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
      // bind timers to global for call from export context
      : IS_BIND && own ? ctx(out, global)
      // wrap global constructors for prevent change them in library
      : IS_WRAP && target[key] == out ? (function(C){
        var F = function(param){
          return this instanceof C ? new C(param) : C(param);
        };
        F[PROTOTYPE] = C[PROTOTYPE];
        return F;
      // make static versions for prototype methods
      })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
      if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
    }
  };
  // type bitmap
  $export.F = 1;  // forced
  $export.G = 2;  // global
  $export.S = 4;  // static
  $export.P = 8;  // proto
  $export.B = 16; // bind
  $export.W = 32; // wrap
  module.exports = $export;

/***/ },
/* 477 */
/***/ function(module, exports) {

  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global = module.exports = typeof window != 'undefined' && window.Math == Math
    ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
  if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 478 */
/***/ function(module, exports) {

  var core = module.exports = {version: '1.2.6'};
  if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

  // optional / simple context binding
  var aFunction = __webpack_require__(480);
  module.exports = function(fn, that, length){
    aFunction(fn);
    if(that === undefined)return fn;
    switch(length){
      case 1: return function(a){
        return fn.call(that, a);
      };
      case 2: return function(a, b){
        return fn.call(that, a, b);
      };
      case 3: return function(a, b, c){
        return fn.call(that, a, b, c);
      };
    }
    return function(/* ...args */){
      return fn.apply(that, arguments);
    };
  };

/***/ },
/* 480 */
/***/ function(module, exports) {

  module.exports = function(it){
    if(typeof it != 'function')throw TypeError(it + ' is not a function!');
    return it;
  };

/***/ },
/* 481 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(482);

/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

  var $          = __webpack_require__(483)
    , createDesc = __webpack_require__(484);
  module.exports = __webpack_require__(485) ? function(object, key, value){
    return $.setDesc(object, key, createDesc(1, value));
  } : function(object, key, value){
    object[key] = value;
    return object;
  };

/***/ },
/* 483 */
/***/ function(module, exports) {

  var $Object = Object;
  module.exports = {
    create:     $Object.create,
    getProto:   $Object.getPrototypeOf,
    isEnum:     {}.propertyIsEnumerable,
    getDesc:    $Object.getOwnPropertyDescriptor,
    setDesc:    $Object.defineProperty,
    setDescs:   $Object.defineProperties,
    getKeys:    $Object.keys,
    getNames:   $Object.getOwnPropertyNames,
    getSymbols: $Object.getOwnPropertySymbols,
    each:       [].forEach
  };

/***/ },
/* 484 */
/***/ function(module, exports) {

  module.exports = function(bitmap, value){
    return {
      enumerable  : !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable    : !(bitmap & 4),
      value       : value
    };
  };

/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

  // Thank's IE8 for his funny defineProperty
  module.exports = !__webpack_require__(486)(function(){
    return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
  });

/***/ },
/* 486 */
/***/ function(module, exports) {

  module.exports = function(exec){
    try {
      return !!exec();
    } catch(e){
      return true;
    }
  };

/***/ },
/* 487 */
/***/ function(module, exports) {

  var hasOwnProperty = {}.hasOwnProperty;
  module.exports = function(it, key){
    return hasOwnProperty.call(it, key);
  };

/***/ },
/* 488 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $              = __webpack_require__(483)
    , descriptor     = __webpack_require__(484)
    , setToStringTag = __webpack_require__(489)
    , IteratorPrototype = {};

  // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
  __webpack_require__(482)(IteratorPrototype, __webpack_require__(490)('iterator'), function(){ return this; });

  module.exports = function(Constructor, NAME, next){
    Constructor.prototype = $.create(IteratorPrototype, {next: descriptor(1, next)});
    setToStringTag(Constructor, NAME + ' Iterator');
  };

/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

  var def = __webpack_require__(483).setDesc
    , has = __webpack_require__(487)
    , TAG = __webpack_require__(490)('toStringTag');

  module.exports = function(it, tag, stat){
    if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
  };

/***/ },
/* 490 */
/***/ function(module, exports, __webpack_require__) {

  var store  = __webpack_require__(491)('wks')
    , uid    = __webpack_require__(492)
    , Symbol = __webpack_require__(477).Symbol;
  module.exports = function(name){
    return store[name] || (store[name] =
      Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));
  };

/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

  var global = __webpack_require__(477)
    , SHARED = '__core-js_shared__'
    , store  = global[SHARED] || (global[SHARED] = {});
  module.exports = function(key){
    return store[key] || (store[key] = {});
  };

/***/ },
/* 492 */
/***/ function(module, exports) {

  var id = 0
    , px = Math.random();
  module.exports = function(key){
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };

/***/ },
/* 493 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $at  = __webpack_require__(494)(true);

  // 21.1.3.27 String.prototype[@@iterator]()
  __webpack_require__(474)(String, 'String', function(iterated){
    this._t = String(iterated); // target
    this._i = 0;                // next index
  // 21.1.5.2.1 %StringIteratorPrototype%.next()
  }, function(){
    var O     = this._t
      , index = this._i
      , point;
    if(index >= O.length)return {value: undefined, done: true};
    point = $at(O, index);
    this._i += point.length;
    return {value: point, done: false};
  });

/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

  var toInteger = __webpack_require__(495)
    , defined   = __webpack_require__(473);
  // true  -> String#at
  // false -> String#codePointAt
  module.exports = function(TO_STRING){
    return function(that, pos){
      var s = String(defined(that))
        , i = toInteger(pos)
        , l = s.length
        , a, b;
      if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
        ? TO_STRING ? s.charAt(i) : a
        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };

/***/ },
/* 495 */
/***/ function(module, exports) {

  // 7.1.4 ToInteger
  var ceil  = Math.ceil
    , floor = Math.floor;
  module.exports = function(it){
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };

/***/ },
/* 496 */
/***/ function(module, exports, __webpack_require__) {

  var anObject = __webpack_require__(497)
    , get      = __webpack_require__(499);
  module.exports = __webpack_require__(478).getIterator = function(it){
    var iterFn = get(it);
    if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
    return anObject(iterFn.call(it));
  };

/***/ },
/* 497 */
/***/ function(module, exports, __webpack_require__) {

  var isObject = __webpack_require__(498);
  module.exports = function(it){
    if(!isObject(it))throw TypeError(it + ' is not an object!');
    return it;
  };

/***/ },
/* 498 */
/***/ function(module, exports) {

  module.exports = function(it){
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };

/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

  var classof   = __webpack_require__(500)
    , ITERATOR  = __webpack_require__(490)('iterator')
    , Iterators = __webpack_require__(469);
  module.exports = __webpack_require__(478).getIteratorMethod = function(it){
    if(it != undefined)return it[ITERATOR]
      || it['@@iterator']
      || Iterators[classof(it)];
  };

/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

  // getting tag from 19.1.3.6 Object.prototype.toString()
  var cof = __webpack_require__(472)
    , TAG = __webpack_require__(490)('toStringTag')
    // ES3 wrong here
    , ARG = cof(function(){ return arguments; }()) == 'Arguments';

  module.exports = function(it){
    var O, T, B;
    return it === undefined ? 'Undefined' : it === null ? 'Null'
      // @@toStringTag case
      : typeof (T = (O = Object(it))[TAG]) == 'string' ? T
      // builtinTag case
      : ARG ? cof(O)
      // ES3 arguments fallback
      : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };

/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(502), __esModule: true };

/***/ },
/* 502 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(465);
  __webpack_require__(493);
  module.exports = __webpack_require__(503);

/***/ },
/* 503 */
/***/ function(module, exports, __webpack_require__) {

  var classof   = __webpack_require__(500)
    , ITERATOR  = __webpack_require__(490)('iterator')
    , Iterators = __webpack_require__(469);
  module.exports = __webpack_require__(478).isIterable = function(it){
    var O = Object(it);
    return O[ITERATOR] !== undefined
      || '@@iterator' in O
      || Iterators.hasOwnProperty(classof(O));
  };

/***/ },
/* 504 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var assert = __webpack_require__(198);

  function signum(a, b) {
    return a < b ? -1 : a === b ? 0 : 1;
  }

  var hexLookup = (function () {
    var res = {};
    var reverse = res.reverse = new Array(256);
    for (var i = 0; i < 16; i++) {
      var char = i.toString(16).toUpperCase();
      res[char] = i;

      for (var j = 0; j < 16; j++) {
        var char2 = j.toString(16).toUpperCase();
        var byte = (i << 4) + j;
        var byteHex = char + char2;
        res[byteHex] = byte;
        reverse[byte] = byteHex;
      }
    }
    return res;
  })();

  var reverseHexLookup = hexLookup.reverse;

  function bytesToHex(sequence) {
    var buf = Array(sequence.length);
    for (var i = sequence.length - 1; i >= 0; i--) {
      buf[i] = reverseHexLookup[sequence[i]];
    }
    return buf.join('');
  }

  function byteForHex(hex) {
    var byte = hexLookup[hex];
    if (byte === undefined) {
      throw new Error('`' + hex + '` is not a valid hex representation of a byte');
    }
    return byte;
  }

  function parseBytes(val) {
    var Output = arguments.length <= 1 || arguments[1] === undefined ? Array : arguments[1];

    if (!val || val.length === undefined) {
      throw new Error(val + ' is not a sequence');
    }

    if (typeof val === 'string') {
      var start = val.length % 2;
      var _res = new Output((val.length + start) / 2);
      for (var i = val.length, to = _res.length - 1; to >= start; i -= 2, to--) {
        _res[to] = byteForHex(val.slice(i - 2, i));
      }
      if (start === 1) {
        _res[0] = byteForHex(val[0]);
      }
      return _res;
    } else if (val instanceof Output) {
      return val;
    } else if (Output === Uint8Array) {
      return new Output(val);
    }
    var res = new Output(val.length);
    for (var i = val.length - 1; i >= 0; i--) {
      res[i] = val[i];
    }
    return res;
  }

  function serializeUIntN(val, width) {
    var newBytes = new Uint8Array(width);
    var lastIx = width - 1;
    for (var i = 0; i < width; i++) {
      newBytes[lastIx - i] = val >>> i * 8 & 0xff;
    }
    return newBytes;
  }

  function compareBytes(a, b) {
    assert(a.length === b.length);
    for (var i = 0; i < a.length; i++) {
      var cmp = signum(a[i], b[i]);
      if (cmp !== 0) {
        return cmp;
      }
    }
    return 0;
  }

  function slice(val) {
    var startIx = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
    var endIx = arguments.length <= 2 || arguments[2] === undefined ? val.length : arguments[2];
    var Output = arguments.length <= 3 || arguments[3] === undefined ? val.constructor : arguments[3];
    return (function () {
      /* eslint-disable no-param-reassign*/
      if (startIx < 0) {
        startIx += val.length;
      }
      if (endIx < 0) {
        endIx += val.length;
      }
      /* eslint-enable no-param-reassign*/
      var len = endIx - startIx;
      var res = new Output(len);
      for (var i = endIx - 1; i >= startIx; i--) {
        res[i - startIx] = val[i];
      }
      return res;
    })();
  }

  module.exports = {
    parseBytes: parseBytes,
    bytesToHex: bytesToHex,
    slice: slice,
    compareBytes: compareBytes,
    serializeUIntN: serializeUIntN
  };

/***/ },
/* 505 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _Object$keys = __webpack_require__(506)['default'];

  var _ = __webpack_require__(192);
  var inherits = __webpack_require__(511);

  function forEach(obj, func) {
    _Object$keys(obj || {}).forEach(function (k) {
      func(obj[k], k);
    });
  }

  function ensureArray(val) {
    return Array.isArray(val) ? val : [val];
  }

  module.exports = function makeClass(klass_, definition_) {
    var definition = definition_ || klass_;
    var klass = typeof klass_ === 'function' ? klass_ : null;
    if (klass === null) {
      for (var k in definition) {
        if (k[0].match(/[A-Z]/)) {
          klass = definition[k];
          break;
        }
      }
    }
    var parent = definition.inherits;
    if (parent) {
      if (klass === null) {
        klass = function () {
          parent.apply(this, arguments);
        };
      }
      inherits(klass, parent);
      _.defaults(klass, parent);
    }
    if (klass === null) {
      klass = function () {};
    }
    var proto = klass.prototype;
    function addFunc(original, name, wrapper) {
      proto[name] = wrapper || original;
    }
    (definition.getters || []).forEach(function (k) {
      var key = '_' + k;
      proto[k] = function () {
        return this[key];
      };
    });
    forEach(definition.virtuals, function (f, n) {
      addFunc(f, n, function () {
        throw new Error('unimplemented');
      });
    });
    forEach(definition.methods, addFunc);
    forEach(definition, function (f, n) {
      if (_.isFunction(f) && f !== klass) {
        addFunc(f, n);
      }
    });
    _.assign(klass, definition.statics);
    if (typeof klass.init === 'function') {
      klass.init();
    }
    forEach(definition.cached, function (f, n) {
      var key = '_' + n;
      addFunc(f, n, function () {
        var value = this[key];
        if (value === undefined) {
          value = this[key] = f.call(this);
        }
        return value;
      });
    });
    if (definition.mixins) {
      (function () {
        var mixins = {};
        // Right-most in the list win
        ensureArray(definition.mixins).reverse().forEach(function (o) {
          _.defaults(mixins, o);
        });
        _.defaults(proto, mixins);
      })();
    }

    return klass;
  };

/***/ },
/* 506 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(507), __esModule: true };

/***/ },
/* 507 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(508);
  module.exports = __webpack_require__(478).Object.keys;

/***/ },
/* 508 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.14 Object.keys(O)
  var toObject = __webpack_require__(509);

  __webpack_require__(510)('keys', function($keys){
    return function keys(it){
      return $keys(toObject(it));
    };
  });

/***/ },
/* 509 */
/***/ function(module, exports, __webpack_require__) {

  // 7.1.13 ToObject(argument)
  var defined = __webpack_require__(473);
  module.exports = function(it){
    return Object(defined(it));
  };

/***/ },
/* 510 */
/***/ function(module, exports, __webpack_require__) {

  // most Object methods by ES6 should accept primitives
  var $export = __webpack_require__(476)
    , core    = __webpack_require__(478)
    , fails   = __webpack_require__(486);
  module.exports = function(KEY, exec){
    var fn  = (core.Object || {})[KEY] || Object[KEY]
      , exp = {};
    exp[KEY] = exec(fn);
    $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
  };

/***/ },
/* 511 */
/***/ function(module, exports) {

  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }


/***/ },
/* 512 */
/***/ function(module, exports) {

  module.exports = {
    "TYPES": {
      "Validation": 10003,
      "Done": -1,
      "Hash128": 4,
      "Blob": 7,
      "AccountID": 8,
      "Amount": 6,
      "Hash256": 5,
      "UInt8": 16,
      "Vector256": 19,
      "STObject": 14,
      "Unknown": -2,
      "Transaction": 10001,
      "Hash160": 17,
      "PathSet": 18,
      "LedgerEntry": 10002,
      "UInt16": 1,
      "NotPresent": 0,
      "UInt64": 3,
      "UInt32": 2,
      "STArray": 15
    },
    "LEDGER_ENTRY_TYPES": {
      "Ticket": 84,
      "LedgerHashes": 104,
      "EnabledAmendments": 102,
      "SignerList": 83,
      "Offer": 111,
      "AccountRoot": 97,
      "RippleState": 114,
      "FeeSettings": 115,
      "DirectoryNode": 100,
      "GeneratorMap": 103,
      "Contract": 99,
      "Invalid": -1
    },
    "FIELDS": [
      [
        "Generic",
        {
          "nth": 0,
          "isVLEncoded": false,
          "bytes": "E0",
          "isSerialized": false,
          "isSigningField": false,
          "type": "Unknown"
        }
      ],
      [
        "Invalid",
        {
          "nth": -1,
          "isVLEncoded": false,
          "bytes": "FF",
          "isSerialized": false,
          "isSigningField": false,
          "type": "Unknown"
        }
      ],
      [
        "LedgerEntryType",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "11",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt16"
        }
      ],
      [
        "TransactionType",
        {
          "nth": 2,
          "isVLEncoded": false,
          "bytes": "12",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt16"
        }
      ],
      [
        "SignerWeight",
        {
          "nth": 3,
          "isVLEncoded": false,
          "bytes": "13",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt16"
        }
      ],
      [
        "Flags",
        {
          "nth": 2,
          "isVLEncoded": false,
          "bytes": "22",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "SourceTag",
        {
          "nth": 3,
          "isVLEncoded": false,
          "bytes": "23",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "Sequence",
        {
          "nth": 4,
          "isVLEncoded": false,
          "bytes": "24",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "PreviousTxnLgrSeq",
        {
          "nth": 5,
          "isVLEncoded": false,
          "bytes": "25",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "LedgerSequence",
        {
          "nth": 6,
          "isVLEncoded": false,
          "bytes": "26",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "CloseTime",
        {
          "nth": 7,
          "isVLEncoded": false,
          "bytes": "27",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "ParentCloseTime",
        {
          "nth": 8,
          "isVLEncoded": false,
          "bytes": "28",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "SigningTime",
        {
          "nth": 9,
          "isVLEncoded": false,
          "bytes": "29",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "Expiration",
        {
          "nth": 10,
          "isVLEncoded": false,
          "bytes": "2A",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "TransferRate",
        {
          "nth": 11,
          "isVLEncoded": false,
          "bytes": "2B",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "WalletSize",
        {
          "nth": 12,
          "isVLEncoded": false,
          "bytes": "2C",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "OwnerCount",
        {
          "nth": 13,
          "isVLEncoded": false,
          "bytes": "2D",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "DestinationTag",
        {
          "nth": 14,
          "isVLEncoded": false,
          "bytes": "2E",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "HighQualityIn",
        {
          "nth": 16,
          "isVLEncoded": false,
          "bytes": "2010",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "HighQualityOut",
        {
          "nth": 17,
          "isVLEncoded": false,
          "bytes": "2011",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "LowQualityIn",
        {
          "nth": 18,
          "isVLEncoded": false,
          "bytes": "2012",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "LowQualityOut",
        {
          "nth": 19,
          "isVLEncoded": false,
          "bytes": "2013",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "QualityIn",
        {
          "nth": 20,
          "isVLEncoded": false,
          "bytes": "2014",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "QualityOut",
        {
          "nth": 21,
          "isVLEncoded": false,
          "bytes": "2015",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "StampEscrow",
        {
          "nth": 22,
          "isVLEncoded": false,
          "bytes": "2016",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "BondAmount",
        {
          "nth": 23,
          "isVLEncoded": false,
          "bytes": "2017",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "LoadFee",
        {
          "nth": 24,
          "isVLEncoded": false,
          "bytes": "2018",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "OfferSequence",
        {
          "nth": 25,
          "isVLEncoded": false,
          "bytes": "2019",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "FirstLedgerSequence",
        {
          "nth": 26,
          "isVLEncoded": false,
          "bytes": "201A",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "LastLedgerSequence",
        {
          "nth": 27,
          "isVLEncoded": false,
          "bytes": "201B",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "TransactionIndex",
        {
          "nth": 28,
          "isVLEncoded": false,
          "bytes": "201C",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "OperationLimit",
        {
          "nth": 29,
          "isVLEncoded": false,
          "bytes": "201D",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "ReferenceFeeUnits",
        {
          "nth": 30,
          "isVLEncoded": false,
          "bytes": "201E",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "ReserveBase",
        {
          "nth": 31,
          "isVLEncoded": false,
          "bytes": "201F",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "ReserveIncrement",
        {
          "nth": 32,
          "isVLEncoded": false,
          "bytes": "2020",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "SetFlag",
        {
          "nth": 33,
          "isVLEncoded": false,
          "bytes": "2021",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "ClearFlag",
        {
          "nth": 34,
          "isVLEncoded": false,
          "bytes": "2022",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "SignerQuorum",
        {
          "nth": 35,
          "isVLEncoded": false,
          "bytes": "2023",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "CancelAfter",
        {
          "nth": 36,
          "isVLEncoded": false,
          "bytes": "2024",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "FinishAfter",
        {
          "nth": 37,
          "isVLEncoded": false,
          "bytes": "2025",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "IndexNext",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "31",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt64"
        }
      ],
      [
        "IndexPrevious",
        {
          "nth": 2,
          "isVLEncoded": false,
          "bytes": "32",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt64"
        }
      ],
      [
        "BookNode",
        {
          "nth": 3,
          "isVLEncoded": false,
          "bytes": "33",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt64"
        }
      ],
      [
        "OwnerNode",
        {
          "nth": 4,
          "isVLEncoded": false,
          "bytes": "34",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt64"
        }
      ],
      [
        "BaseFee",
        {
          "nth": 5,
          "isVLEncoded": false,
          "bytes": "35",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt64"
        }
      ],
      [
        "ExchangeRate",
        {
          "nth": 6,
          "isVLEncoded": false,
          "bytes": "36",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt64"
        }
      ],
      [
        "LowNode",
        {
          "nth": 7,
          "isVLEncoded": false,
          "bytes": "37",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt64"
        }
      ],
      [
        "HighNode",
        {
          "nth": 8,
          "isVLEncoded": false,
          "bytes": "38",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt64"
        }
      ],
      [
        "EmailHash",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "41",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash128"
        }
      ],
      [
        "LedgerHash",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "51",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "ParentHash",
        {
          "nth": 2,
          "isVLEncoded": false,
          "bytes": "52",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "TransactionHash",
        {
          "nth": 3,
          "isVLEncoded": false,
          "bytes": "53",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "AccountHash",
        {
          "nth": 4,
          "isVLEncoded": false,
          "bytes": "54",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "PreviousTxnID",
        {
          "nth": 5,
          "isVLEncoded": false,
          "bytes": "55",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "LedgerIndex",
        {
          "nth": 6,
          "isVLEncoded": false,
          "bytes": "56",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "WalletLocator",
        {
          "nth": 7,
          "isVLEncoded": false,
          "bytes": "57",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "RootIndex",
        {
          "nth": 8,
          "isVLEncoded": false,
          "bytes": "58",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "AccountTxnID",
        {
          "nth": 9,
          "isVLEncoded": false,
          "bytes": "59",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "BookDirectory",
        {
          "nth": 16,
          "isVLEncoded": false,
          "bytes": "5010",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "InvoiceID",
        {
          "nth": 17,
          "isVLEncoded": false,
          "bytes": "5011",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "Nickname",
        {
          "nth": 18,
          "isVLEncoded": false,
          "bytes": "5012",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "Amendment",
        {
          "nth": 19,
          "isVLEncoded": false,
          "bytes": "5013",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "TicketID",
        {
          "nth": 20,
          "isVLEncoded": false,
          "bytes": "5014",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "Digest",
        {
          "nth": 21,
          "isVLEncoded": false,
          "bytes": "5015",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "hash",
        {
          "nth": 257,
          "isVLEncoded": false,
          "bytes": "5001",
          "isSerialized": false,
          "isSigningField": false,
          "type": "Hash256"
        }
      ],
      [
        "index",
        {
          "nth": 258,
          "isVLEncoded": false,
          "bytes": "5002",
          "isSerialized": false,
          "isSigningField": false,
          "type": "Hash256"
        }
      ],
      [
        "Amount",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "61",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "Balance",
        {
          "nth": 2,
          "isVLEncoded": false,
          "bytes": "62",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "LimitAmount",
        {
          "nth": 3,
          "isVLEncoded": false,
          "bytes": "63",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "TakerPays",
        {
          "nth": 4,
          "isVLEncoded": false,
          "bytes": "64",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "TakerGets",
        {
          "nth": 5,
          "isVLEncoded": false,
          "bytes": "65",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "LowLimit",
        {
          "nth": 6,
          "isVLEncoded": false,
          "bytes": "66",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "HighLimit",
        {
          "nth": 7,
          "isVLEncoded": false,
          "bytes": "67",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "Fee",
        {
          "nth": 8,
          "isVLEncoded": false,
          "bytes": "68",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "SendMax",
        {
          "nth": 9,
          "isVLEncoded": false,
          "bytes": "69",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "DeliverMin",
        {
          "nth": 10,
          "isVLEncoded": false,
          "bytes": "6A",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "MinimumOffer",
        {
          "nth": 16,
          "isVLEncoded": false,
          "bytes": "6010",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "RippleEscrow",
        {
          "nth": 17,
          "isVLEncoded": false,
          "bytes": "6011",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "DeliveredAmount",
        {
          "nth": 18,
          "isVLEncoded": false,
          "bytes": "6012",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "taker_gets_funded",
        {
          "nth": 258,
          "isVLEncoded": false,
          "bytes": "6002",
          "isSerialized": false,
          "isSigningField": false,
          "type": "Amount"
        }
      ],
      [
        "taker_pays_funded",
        {
          "nth": 259,
          "isVLEncoded": false,
          "bytes": "6003",
          "isSerialized": false,
          "isSigningField": false,
          "type": "Amount"
        }
      ],
      [
        "PublicKey",
        {
          "nth": 1,
          "isVLEncoded": true,
          "bytes": "71",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "MessageKey",
        {
          "nth": 2,
          "isVLEncoded": true,
          "bytes": "72",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "SigningPubKey",
        {
          "nth": 3,
          "isVLEncoded": true,
          "bytes": "73",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "TxnSignature",
        {
          "nth": 4,
          "isVLEncoded": true,
          "bytes": "74",
          "isSerialized": true,
          "isSigningField": false,
          "type": "Blob"
        }
      ],
      [
        "Generator",
        {
          "nth": 5,
          "isVLEncoded": true,
          "bytes": "75",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "Signature",
        {
          "nth": 6,
          "isVLEncoded": true,
          "bytes": "76",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "Domain",
        {
          "nth": 7,
          "isVLEncoded": true,
          "bytes": "77",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "FundCode",
        {
          "nth": 8,
          "isVLEncoded": true,
          "bytes": "78",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "RemoveCode",
        {
          "nth": 9,
          "isVLEncoded": true,
          "bytes": "79",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "ExpireCode",
        {
          "nth": 10,
          "isVLEncoded": true,
          "bytes": "7A",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "CreateCode",
        {
          "nth": 11,
          "isVLEncoded": true,
          "bytes": "7B",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "MemoType",
        {
          "nth": 12,
          "isVLEncoded": true,
          "bytes": "7C",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "MemoData",
        {
          "nth": 13,
          "isVLEncoded": true,
          "bytes": "7D",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "MemoFormat",
        {
          "nth": 14,
          "isVLEncoded": true,
          "bytes": "7E",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "Proof",
        {
          "nth": 17,
          "isVLEncoded": true,
          "bytes": "7011",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "Account",
        {
          "nth": 1,
          "isVLEncoded": true,
          "bytes": "81",
          "isSerialized": true,
          "isSigningField": true,
          "type": "AccountID"
        }
      ],
      [
        "Owner",
        {
          "nth": 2,
          "isVLEncoded": true,
          "bytes": "82",
          "isSerialized": true,
          "isSigningField": true,
          "type": "AccountID"
        }
      ],
      [
        "Destination",
        {
          "nth": 3,
          "isVLEncoded": true,
          "bytes": "83",
          "isSerialized": true,
          "isSigningField": true,
          "type": "AccountID"
        }
      ],
      [
        "Issuer",
        {
          "nth": 4,
          "isVLEncoded": true,
          "bytes": "84",
          "isSerialized": true,
          "isSigningField": true,
          "type": "AccountID"
        }
      ],
      [
        "Target",
        {
          "nth": 7,
          "isVLEncoded": true,
          "bytes": "87",
          "isSerialized": true,
          "isSigningField": true,
          "type": "AccountID"
        }
      ],
      [
        "RegularKey",
        {
          "nth": 8,
          "isVLEncoded": true,
          "bytes": "88",
          "isSerialized": true,
          "isSigningField": true,
          "type": "AccountID"
        }
      ],
      [
        "ObjectEndMarker",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "E1",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "TransactionMetaData",
        {
          "nth": 2,
          "isVLEncoded": false,
          "bytes": "E2",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "CreatedNode",
        {
          "nth": 3,
          "isVLEncoded": false,
          "bytes": "E3",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "DeletedNode",
        {
          "nth": 4,
          "isVLEncoded": false,
          "bytes": "E4",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "ModifiedNode",
        {
          "nth": 5,
          "isVLEncoded": false,
          "bytes": "E5",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "PreviousFields",
        {
          "nth": 6,
          "isVLEncoded": false,
          "bytes": "E6",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "FinalFields",
        {
          "nth": 7,
          "isVLEncoded": false,
          "bytes": "E7",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "NewFields",
        {
          "nth": 8,
          "isVLEncoded": false,
          "bytes": "E8",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "TemplateEntry",
        {
          "nth": 9,
          "isVLEncoded": false,
          "bytes": "E9",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "Memo",
        {
          "nth": 10,
          "isVLEncoded": false,
          "bytes": "EA",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "SignerEntry",
        {
          "nth": 11,
          "isVLEncoded": false,
          "bytes": "EB",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "Signer",
        {
          "nth": 16,
          "isVLEncoded": false,
          "bytes": "E010",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "ArrayEndMarker",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "F1",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STArray"
        }
      ],
      [
        "Signers",
        {
          "nth": 3,
          "isVLEncoded": false,
          "bytes": "F3",
          "isSerialized": true,
          "isSigningField": false,
          "type": "STArray"
        }
      ],
      [
        "SignerEntries",
        {
          "nth": 4,
          "isVLEncoded": false,
          "bytes": "F4",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STArray"
        }
      ],
      [
        "Template",
        {
          "nth": 5,
          "isVLEncoded": false,
          "bytes": "F5",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STArray"
        }
      ],
      [
        "Necessary",
        {
          "nth": 6,
          "isVLEncoded": false,
          "bytes": "F6",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STArray"
        }
      ],
      [
        "Sufficient",
        {
          "nth": 7,
          "isVLEncoded": false,
          "bytes": "F7",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STArray"
        }
      ],
      [
        "AffectedNodes",
        {
          "nth": 8,
          "isVLEncoded": false,
          "bytes": "F8",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STArray"
        }
      ],
      [
        "Memos",
        {
          "nth": 9,
          "isVLEncoded": false,
          "bytes": "F9",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STArray"
        }
      ],
      [
        "CloseResolution",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "0110",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt8"
        }
      ],
      [
        "Method",
        {
          "nth": 2,
          "isVLEncoded": false,
          "bytes": "0210",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt8"
        }
      ],
      [
        "TransactionResult",
        {
          "nth": 3,
          "isVLEncoded": false,
          "bytes": "0310",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt8"
        }
      ],
      [
        "TakerPaysCurrency",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "0111",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash160"
        }
      ],
      [
        "TakerPaysIssuer",
        {
          "nth": 2,
          "isVLEncoded": false,
          "bytes": "0211",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash160"
        }
      ],
      [
        "TakerGetsCurrency",
        {
          "nth": 3,
          "isVLEncoded": false,
          "bytes": "0311",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash160"
        }
      ],
      [
        "TakerGetsIssuer",
        {
          "nth": 4,
          "isVLEncoded": false,
          "bytes": "0411",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash160"
        }
      ],
      [
        "Paths",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "0112",
          "isSerialized": true,
          "isSigningField": true,
          "type": "PathSet"
        }
      ],
      [
        "Indexes",
        {
          "nth": 1,
          "isVLEncoded": true,
          "bytes": "0113",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Vector256"
        }
      ],
      [
        "Hashes",
        {
          "nth": 2,
          "isVLEncoded": true,
          "bytes": "0213",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Vector256"
        }
      ],
      [
        "Features",
        {
          "nth": 3,
          "isVLEncoded": true,
          "bytes": "0313",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Vector256"
        }
      ],
      [
        "Transaction",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "0111",
          "isSerialized": false,
          "isSigningField": false,
          "type": "Transaction"
        }
      ],
      [
        "LedgerEntry",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "0112",
          "isSerialized": false,
          "isSigningField": false,
          "type": "LedgerEntry"
        }
      ],
      [
        "Validation",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "0113",
          "isSerialized": false,
          "isSigningField": false,
          "type": "Validation"
        }
      ]
    ],
    "date-generated": "Fri Sep 11 11:35:38 ICT 2015",
    "TRANSACTION_RESULTS": {
      "tecINSUFFICIENT_RESERVE": 141,
      "telNO_DST_PARTIAL": -393,
      "tecUNFUNDED_PAYMENT": 104,
      "tecNO_TARGET": 138,
      "temBAD_SRC_ACCOUNT": -281,
      "tefPAST_SEQ": -189,
      "terNO_ACCOUNT": -96,
      "temREDUNDANT": -275,
      "tefCREATED": -194,
      "temDST_IS_SRC": -279,
      "terRETRY": -99,
      "temINVALID_FLAG": -276,
      "temBAD_SEND_XRP_LIMIT": -288,
      "terNO_LINE": -94,
      "tefBAD_AUTH": -196,
      "temBAD_EXPIRATION": -295,
      "tecNO_ISSUER": 133,
      "temBAD_SEND_XRP_NO_DIRECT": -286,
      "temBAD_SEND_XRP_PATHS": -284,
      "tefBAD_LEDGER": -195,
      "tefNO_AUTH_REQUIRED": -190,
      "tecINSUF_RESERVE_LINE": 122,
      "terOWNERS": -93,
      "tecNO_REGULAR_KEY": 131,
      "tecINSUFF_FEE": 136,
      "tecNO_ALTERNATIVE_KEY": 130,
      "tecNO_ENTRY": 140,
      "terLAST": -91,
      "terNO_RIPPLE": -90,
      "tecNO_PERMISSION": 139,
      "tecNEED_MASTER_KEY": 142,
      "temBAD_FEE": -294,
      "terPRE_SEQ": -92,
      "tecOVERSIZE": 145,
      "tefMASTER_DISABLED": -187,
      "temBAD_CURRENCY": -296,
      "tefDST_TAG_NEEDED": -193,
      "tecUNFUNDED_ADD": 102,
      "tecOWNERS": 132,
      "tecNO_LINE_REDUNDANT": 127,
      "temBAD_SIGNATURE": -282,
      "tefFAILURE": -199,
      "telBAD_PATH_COUNT": -397,
      "temBAD_TRANSFER_RATE": -280,
      "tefWRONG_PRIOR": -188,
      "tecNO_DST": 124,
      "tecNO_AUTH": 134,
      "telBAD_DOMAIN": -398,
      "temBAD_AMOUNT": -298,
      "temBAD_AUTH_MASTER": -297,
      "temBAD_LIMIT": -292,
      "temBAD_ISSUER": -293,
      "tecNO_DST_INSUF_XRP": 125,
      "tecPATH_PARTIAL": 101,
      "telBAD_PUBLIC_KEY": -396,
      "tefBAD_ADD_AUTH": -197,
      "tecDST_TAG_NEEDED": 143,
      "temBAD_OFFER": -291,
      "temBAD_SEND_XRP_PARTIAL": -285,
      "temDST_NEEDED": -278,
      "tefALREADY": -198,
      "tecUNFUNDED": 129,
      "tecNO_LINE": 135,
      "tecFROZEN": 137,
      "temUNCERTAIN": -272,
      "tecFAILED_PROCESSING": 105,
      "telLOCAL_ERROR": -399,
      "temREDUNDANT_SEND_MAX": -274,
      "tefINTERNAL": -191,
      "temBAD_PATH_LOOP": -289,
      "tecPATH_DRY": 128,
      "tefEXCEPTION": -192,
      "tecDIR_FULL": 121,
      "tecUNFUNDED_OFFER": 103,
      "temRIPPLE_EMPTY": -273,
      "telINSUF_FEE_P": -394,
      "temBAD_SEQUENCE": -283,
      "tefMAX_LEDGER": -186,
      "terFUNDS_SPENT": -98,
      "temBAD_SEND_XRP_MAX": -287,
      "telFAILED_PROCESSING": -395,
      "terINSUF_FEE_B": -97,
      "tecCLAIM": 100,
      "tesSUCCESS": 0,
      "temBAD_PATH": -290,
      "temMALFORMED": -299,
      "temUNKNOWN": -271,
      "tecINTERNAL": 144,
      "temINVALID": -277,
      "tecINSUF_RESERVE_OFFER": 123,
      "tecNO_LINE_INSUF_RESERVE": 126,
      "terNO_AUTH": -95
    },
    "TRANSACTION_TYPES": {
      "OfferCancel": 8,
      "EnableAmendment": 100,
      "SetFee": 101,
      "SetRegularKey": 5,
      "TicketCreate": 10,
      "TicketCancel": 11,
      "NickNameSet": 6,
      "TrustSet": 20,
      "Payment": 0,
      "AccountSet": 3,
      "OfferCreate": 7,
      "SignerListSet": 12,
      "Contract": 9,
      "SuspendedPaymentCreate": 1,
      "SuspendedPaymentFinish": 2,
      "SuspendedPaymentCancel": 4,
      "Invalid": -1
    }
  };

/***/ },
/* 513 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var enums = __webpack_require__(461);
  var Field = enums.Field;

  var _require = __webpack_require__(514);

  var AccountID = _require.AccountID;

  var _require2 = __webpack_require__(519);

  var Amount = _require2.Amount;

  var _require3 = __webpack_require__(534);

  var Blob = _require3.Blob;

  var _require4 = __webpack_require__(531);

  var Currency = _require4.Currency;

  var _require5 = __webpack_require__(535);

  var Hash128 = _require5.Hash128;

  var _require6 = __webpack_require__(515);

  var Hash160 = _require6.Hash160;

  var _require7 = __webpack_require__(536);

  var Hash256 = _require7.Hash256;

  var _require8 = __webpack_require__(537);

  var PathSet = _require8.PathSet;

  var _require9 = __webpack_require__(538);

  var STArray = _require9.STArray;

  var _require10 = __webpack_require__(539);

  var STObject = _require10.STObject;

  var _require11 = __webpack_require__(540);

  var UInt16 = _require11.UInt16;

  var _require12 = __webpack_require__(541);

  var UInt32 = _require12.UInt32;

  var _require13 = __webpack_require__(532);

  var UInt64 = _require13.UInt64;

  var _require14 = __webpack_require__(542);

  var UInt8 = _require14.UInt8;

  var _require15 = __webpack_require__(543);

  var Vector256 = _require15.Vector256;

  var coreTypes = {
    AccountID: AccountID,
    Amount: Amount,
    Blob: Blob,
    Currency: Currency,
    Hash128: Hash128,
    Hash160: Hash160,
    Hash256: Hash256,
    PathSet: PathSet,
    STArray: STArray,
    STObject: STObject,
    UInt8: UInt8,
    UInt16: UInt16,
    UInt32: UInt32,
    UInt64: UInt64,
    Vector256: Vector256
  };

  Field.values.forEach(function (field) {
    field.associatedType = coreTypes[field.type];
  });

  Field.TransactionType.associatedType = enums.TransactionType;
  Field.TransactionResult.associatedType = enums.TransactionResult;
  Field.LedgerEntryType.associatedType = enums.LedgerEntryType;

  module.exports = coreTypes;

/***/ },
/* 514 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(249);

  var decodeAccountID = _require.decodeAccountID;
  var encodeAccountID = _require.encodeAccountID;

  var _require2 = __webpack_require__(515);

  var Hash160 = _require2.Hash160;

  var AccountID = makeClass({
    AccountID: function AccountID(bytes) {
      Hash160.call(this, bytes);
    },
    inherits: Hash160,
    statics: {
      from: function from(value) {
        return value instanceof this ? value : /^r/.test(value) ? this.fromBase58(value) : new this(value);
      },
      cache: {},
      fromCache: function fromCache(base58) {
        var cached = this.cache[base58];
        if (!cached) {
          cached = this.cache[base58] = this.fromBase58(base58);
        }
        return cached;
      },
      fromBase58: function fromBase58(value) {
        var acc = new this(decodeAccountID(value));
        acc._toBase58 = value;
        return acc;
      }
    },
    toJSON: function toJSON() {
      return this.toBase58();
    },
    cached: {
      toBase58: function toBase58() {
        return encodeAccountID(this._bytes);
      }
    }
  });

  module.exports = {
    AccountID: AccountID
  };

/***/ },
/* 515 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(516);

  var Hash = _require.Hash;

  var Hash160 = makeClass({
    inherits: Hash,
    statics: { width: 20 }
  });

  module.exports = {
    Hash160: Hash160
  };

/***/ },
/* 516 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var assert = __webpack_require__(198);
  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(517);

  var Comparable = _require.Comparable;
  var SerializedType = _require.SerializedType;

  var _require2 = __webpack_require__(504);

  var compareBytes = _require2.compareBytes;
  var parseBytes = _require2.parseBytes;

  var Hash = makeClass({
    Hash: function Hash(bytes) {
      var width = this.constructor.width;
      this._bytes = bytes ? parseBytes(bytes, Uint8Array) : new Uint8Array(width);
      assert.equal(this._bytes.length, width);
    },
    mixins: [Comparable, SerializedType],
    statics: {
      width: NaN,
      from: function from(value) {
        if (value instanceof this) {
          return value;
        }
        return new this(parseBytes(value));
      },
      fromParser: function fromParser(parser, hint) {
        return new this(parser.read(hint || this.width));
      }
    },
    compareTo: function compareTo(other) {
      return compareBytes(this._bytes, this.constructor.from(other)._bytes);
    },
    toString: function toString() {
      return this.toHex();
    },
    nibblet: function nibblet(depth) {
      var byte_ix = depth > 0 ? depth / 2 | 0 : 0;
      var b = this._bytes[byte_ix];
      if (depth % 2 === 0) {
        b = (b & 0xF0) >>> 4;
      } else {
        b = b & 0x0F;
      }
      return b;
    }
  });

  module.exports = {
    Hash: Hash
  };

/***/ },
/* 517 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _require = __webpack_require__(504);

  var bytesToHex = _require.bytesToHex;
  var slice = _require.slice;

  var _require2 = __webpack_require__(518);

  var BytesList = _require2.BytesList;

  var Comparable = {
    lt: function lt(other) {
      return this.compareTo(other) < 0;
    },
    eq: function eq(other) {
      return this.compareTo(other) === 0;
    },
    gt: function gt(other) {
      return this.compareTo(other) > 0;
    },
    gte: function gte(other) {
      return this.compareTo(other) > -1;
    },
    lte: function lte(other) {
      return this.compareTo(other) < 1;
    }
  };

  var SerializedType = {
    toBytesSink: function toBytesSink(sink) {
      sink.put(this._bytes);
    },
    toHex: function toHex() {
      return bytesToHex(this.toBytes());
    },
    toBytes: function toBytes() {
      if (this._bytes) {
        return slice(this._bytes);
      }
      var bl = new BytesList();
      this.toBytesSink(bl);
      return bl.toBytes();
    },
    toJSON: function toJSON() {
      return this.toHex();
    },
    toString: function toString() {
      return this.toHex();
    }
  };

  function ensureArrayLikeIs(Type, arrayLike) {
    return {
      withChildren: function withChildren(Child) {
        if (arrayLike instanceof Type) {
          return arrayLike;
        }
        var obj = new Type();
        for (var i = 0; i < arrayLike.length; i++) {
          obj.push(Child.from(arrayLike[i]));
        }
        return obj;
      }
    };
  }

  module.exports = {
    ensureArrayLikeIs: ensureArrayLikeIs,
    SerializedType: SerializedType,
    Comparable: Comparable
  };

/***/ },
/* 518 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var assert = __webpack_require__(198);

  var _require = __webpack_require__(504);

  var parseBytes = _require.parseBytes;
  var bytesToHex = _require.bytesToHex;

  var makeClass = __webpack_require__(505);

  var _require2 = __webpack_require__(461);

  var Type = _require2.Type;
  var Field = _require2.Field;

  var BytesSink = {
    put: function put() /* bytesSequence */{
      // any hex string or any object with a `length` and where 0 <= [ix] <= 255
    }
  };

  var BytesList = makeClass({
    implementing: BytesSink,
    BytesList: function BytesList() {
      this.arrays = [];
      this.length = 0;
    },
    put: function put(bytesArg) {
      var bytes = parseBytes(bytesArg, Uint8Array);
      this.length += bytes.length;
      this.arrays.push(bytes);
      return this;
    },
    toBytesSink: function toBytesSink(sink) {
      this.arrays.forEach(function (arr) {
        sink.put(arr);
      });
    },
    toBytes: function toBytes() {
      var concatenated = new Uint8Array(this.length);
      var pointer = 0;
      this.arrays.forEach(function (arr) {
        concatenated.set(arr, pointer);
        pointer += arr.length;
      });
      return concatenated;
    },
    toHex: function toHex() {
      return bytesToHex(this.toBytes());
    }
  });

  var BinarySerializer = makeClass({
    BinarySerializer: function BinarySerializer(sink) {
      this.sink = sink;
    },
    write: function write(value) {
      value.toBytesSink(this.sink);
    },
    put: function put(bytes) {
      this.sink.put(bytes);
    },
    writeType: function writeType(type, value) {
      this.write(type.from(value));
    },
    writeBytesList: function writeBytesList(bl) {
      bl.toBytesSink(this.sink);
    },
    encodeVL: function encodeVL(len) {
      var length = len;
      var lenBytes = new Uint8Array(4);
      if (length <= 192) {
        lenBytes[0] = length;
        return lenBytes.subarray(0, 1);
      } else if (length <= 12480) {
        length -= 193;
        lenBytes[0] = 193 + (length >>> 8);
        lenBytes[1] = length & 0xff;
        return lenBytes.subarray(0, 2);
      } else if (length <= 918744) {
        length -= 12481;
        lenBytes[0] = 241 + (length >>> 16);
        lenBytes[1] = length >> 8 & 0xff;
        lenBytes[2] = length & 0xff;
        return lenBytes.subarray(0, 3);
      }
      throw new Error('Overflow error');
    },
    writeFieldAndValue: function writeFieldAndValue(field, _value) {
      var sink = this.sink;
      var value = field.associatedType.from(_value);
      assert(value.toBytesSink, field);
      sink.put(field.bytes);

      if (field.isVLEncoded) {
        this.writeLengthEncoded(value);
      } else {
        value.toBytesSink(sink);
        if (field.type === Type.STObject) {
          sink.put(Field.ObjectEndMarker.bytes);
        } else if (field.type === Type.STArray) {
          sink.put(Field.ArrayEndMarker.bytes);
        }
      }
    },
    writeLengthEncoded: function writeLengthEncoded(value) {
      var bytes = new BytesList();
      value.toBytesSink(bytes);
      this.put(this.encodeVL(bytes.length));
      this.writeBytesList(bytes);
    }
  });

  module.exports = {
    BytesList: BytesList,
    BinarySerializer: BinarySerializer
  };

/***/ },
/* 519 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _toConsumableArray = __webpack_require__(520)['default'];

  var _bind = __webpack_require__(528)['default'];

  var _ = __webpack_require__(192);
  var assert = __webpack_require__(198);
  var BN = __webpack_require__(529);
  var Decimal = __webpack_require__(530);
  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(517);

  var SerializedType = _require.SerializedType;

  var _require2 = __webpack_require__(504);

  var bytesToHex = _require2.bytesToHex;

  var _require3 = __webpack_require__(531);

  var Currency = _require3.Currency;

  var _require4 = __webpack_require__(514);

  var AccountID = _require4.AccountID;

  var _require5 = __webpack_require__(532);

  var UInt64 = _require5.UInt64;

  Decimal.config({
    toExpPos: 32,
    toExpNeg: -32
  });

  function isDefined(val) {
    return !_.isUndefined(val);
  }

  var parsers = {
    string: function string(str) {
      return [new Decimal(str).dividedBy('1e6'), Currency.XRP];
    },
    object: function object(_object) {
      assert(isDefined(_object.currency), 'currency must be defined');
      assert(isDefined(_object.issuer), 'issuer must be defined');
      return [new Decimal(_object.value), Currency.from(_object.currency), AccountID.from(_object.issuer)];
    }
  };

  var Amount = makeClass({
    Amount: function Amount(value, currency, issuer) {
      this.value = value || new Decimal('0');
      this.currency = currency || Currency.XRP;
      this.issuer = issuer || null;
    },
    mixins: SerializedType,
    statics: {
      from: function from(value) {
        if (value instanceof this) {
          return value;
        }
        var parser = parsers[typeof value];
        if (parser) {
          return new (_bind.apply(this, [null].concat(_toConsumableArray(parser(value)))))();
        }
        throw new Error('unsupported value: ' + value);
      },
      fromParser: function fromParser(parser) {
        var mantissa = parser.read(8);
        var b1 = mantissa[0];
        var b2 = mantissa[1];

        var isIOU = b1 & 0x80;
        var isPositive = b1 & 0x40;
        var sign = isPositive ? '+' : '-';

        if (isIOU) {
          mantissa[0] = 0;
          var currency = parser.readType(Currency);
          var issuer = parser.readType(AccountID);
          var exponent = ((b1 & 0x3F) << 2) + ((b2 & 0xff) >> 6) - 97;
          mantissa[1] &= 0x3F;
          // decimal.js won't accept e notation with hex
          var value = new Decimal(sign + bytesToHex(mantissa), 16).times('1e' + exponent);
          return new this(value, currency, issuer);
        }

        mantissa[0] &= 0x3F;
        var drops = new Decimal(sign + bytesToHex(mantissa), 16);
        var xrpValue = drops.dividedBy('1e6');
        return new this(xrpValue, Currency.XRP);
      }
    },
    isNative: function isNative() {
      return this.currency.isNative();
    },
    mantissa: function mantissa() {
      return new UInt64(new BN(this.value.times('1e' + -this.exponent()).abs().toString()));
    },
    isZero: function isZero() {
      return this.value.isZero();
    },
    exponent: function exponent() {
      return this.isNative() ? -6 : this.value.e - 15;
    },
    valueString: function valueString() {
      return (this.isNative() ? this.value.times('1e6') : this.value).toString();
    },
    toBytesSink: function toBytesSink(sink) {
      var isNative = this.isNative();
      var notNegative = !this.value.isNegative();
      var mantissa = this.mantissa().toBytes();

      if (isNative) {
        mantissa[0] |= notNegative ? 0x40 : 0;
        sink.put(mantissa);
      } else {
        mantissa[0] |= 0x80;
        if (!this.isZero()) {
          if (notNegative) {
            mantissa[0] |= 0x40;
          }
          var exponent = this.value.e - 15;
          var exponentByte = 97 + exponent;
          mantissa[0] |= exponentByte >>> 2;
          mantissa[1] |= (exponentByte & 0x03) << 6;
        }
        sink.put(mantissa);
        this.currency.toBytesSink(sink);
        this.issuer.toBytesSink(sink);
      }
    },
    toJSON: function toJSON() {
      var valueString = this.valueString();
      if (this.isNative()) {
        return valueString;
      }
      return {
        value: valueString,
        currency: this.currency.toJSON(),
        issuer: this.issuer.toJSON()
      };
    }
  });

  module.exports = {
    Amount: Amount
  };

/***/ },
/* 520 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _Array$from = __webpack_require__(521)["default"];

  exports["default"] = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    } else {
      return _Array$from(arr);
    }
  };

  exports.__esModule = true;

/***/ },
/* 521 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(522), __esModule: true };

/***/ },
/* 522 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(493);
  __webpack_require__(523);
  module.exports = __webpack_require__(478).Array.from;

/***/ },
/* 523 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var ctx         = __webpack_require__(479)
    , $export     = __webpack_require__(476)
    , toObject    = __webpack_require__(509)
    , call        = __webpack_require__(524)
    , isArrayIter = __webpack_require__(525)
    , toLength    = __webpack_require__(526)
    , getIterFn   = __webpack_require__(499);
  $export($export.S + $export.F * !__webpack_require__(527)(function(iter){ Array.from(iter); }), 'Array', {
    // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
    from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
      var O       = toObject(arrayLike)
        , C       = typeof this == 'function' ? this : Array
        , $$      = arguments
        , $$len   = $$.length
        , mapfn   = $$len > 1 ? $$[1] : undefined
        , mapping = mapfn !== undefined
        , index   = 0
        , iterFn  = getIterFn(O)
        , length, result, step, iterator;
      if(mapping)mapfn = ctx(mapfn, $$len > 2 ? $$[2] : undefined, 2);
      // if object isn't iterable or it's array with default iterator - use simple case
      if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
        for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
          result[index] = mapping ? call(iterator, mapfn, [step.value, index], true) : step.value;
        }
      } else {
        length = toLength(O.length);
        for(result = new C(length); length > index; index++){
          result[index] = mapping ? mapfn(O[index], index) : O[index];
        }
      }
      result.length = index;
      return result;
    }
  });


/***/ },
/* 524 */
/***/ function(module, exports, __webpack_require__) {

  // call something on iterator step with safe closing on error
  var anObject = __webpack_require__(497);
  module.exports = function(iterator, fn, value, entries){
    try {
      return entries ? fn(anObject(value)[0], value[1]) : fn(value);
    // 7.4.6 IteratorClose(iterator, completion)
    } catch(e){
      var ret = iterator['return'];
      if(ret !== undefined)anObject(ret.call(iterator));
      throw e;
    }
  };

/***/ },
/* 525 */
/***/ function(module, exports, __webpack_require__) {

  // check on default Array iterator
  var Iterators  = __webpack_require__(469)
    , ITERATOR   = __webpack_require__(490)('iterator')
    , ArrayProto = Array.prototype;

  module.exports = function(it){
    return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
  };

/***/ },
/* 526 */
/***/ function(module, exports, __webpack_require__) {

  // 7.1.15 ToLength
  var toInteger = __webpack_require__(495)
    , min       = Math.min;
  module.exports = function(it){
    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
  };

/***/ },
/* 527 */
/***/ function(module, exports, __webpack_require__) {

  var ITERATOR     = __webpack_require__(490)('iterator')
    , SAFE_CLOSING = false;

  try {
    var riter = [7][ITERATOR]();
    riter['return'] = function(){ SAFE_CLOSING = true; };
    Array.from(riter, function(){ throw 2; });
  } catch(e){ /* empty */ }

  module.exports = function(exec, skipClosing){
    if(!skipClosing && !SAFE_CLOSING)return false;
    var safe = false;
    try {
      var arr  = [7]
        , iter = arr[ITERATOR]();
      iter.next = function(){ safe = true; };
      arr[ITERATOR] = function(){ return iter; };
      exec(arr);
    } catch(e){ /* empty */ }
    return safe;
  };

/***/ },
/* 528 */
/***/ function(module, exports) {

  "use strict";

  exports["default"] = Function.prototype.bind;
  exports.__esModule = true;

/***/ },
/* 529 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {

  'use strict';

  // Utils

  function assert(val, msg) {
    if (!val)
      throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN(number, base, endian) {
    // May be `new BN(bn)` ?
    if (number !== null &&
        typeof number === 'object' &&
        Array.isArray(number.words)) {
      return number;
    }

    this.sign = false;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (base === 'le' || base === 'be') {
      endian = base;
      base = 10;
    }

    if (number !== null)
      this._init(number || 0, base || 10, endian || 'be');
  }
  if (typeof module === 'object')
    module.exports = BN;
  else
    exports.BN = BN;

  BN.BN = BN;
  BN.wordSize = 26;

  BN.max = function max(left, right) {
    if (left.cmp(right) > 0)
      return left;
    else
      return right;
  };

  BN.min = function min(left, right) {
    if (left.cmp(right) < 0)
      return left;
    else
      return right;
  };

  BN.prototype._init = function init(number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    } else if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }
    if (base === 'hex')
      base = 16;
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-')
      start++;

    if (base === 16)
      this._parseHex(number, start);
    else
      this._parseBase(number, base, start);

    if (number[0] === '-')
      this.sign = true;

    this.strip();

    if (endian !== 'le')
      return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber(number, base, endian) {
    if (number < 0) {
      this.sign = true;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le')
      return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray(number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++)
      this.words[i] = 0;

    var off = 0;
    if (endian === 'be') {
      for (var i = number.length - 1, j = 0; i >= 0; i -= 3) {
        var w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (var i = 0, j = 0; i < number.length; i += 3) {
        var w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex(str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54)
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      else if (c >= 17 && c <= 22)
        r |= c - 17 + 0xa;

      // '0' - '9'
      else
        r |= c & 0xf;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex(number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++)
      this.words[i] = 0;

    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (var i = number.length - 6, j = 0; i >= start; i -= 6) {
      var w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      var w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase(str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49)
        r += c - 49 + 0xa;

      // 'A'
      else if (c >= 17)
        r += c - 17 + 0xa;

      // '0' - '9'
      else
        r += c;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase(number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)
      limbLen++;
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000)
        this.words[0] += word;
      else
        this._iaddn(word);
    }

    if (mod !== 0) {
      var pow = 1;
      var word = parseBase(number, i, number.length, base);

      for (var i = 0; i < mod; i++)
        pow *= base;
      this.imuln(pow);
      if (this.words[0] + word < 0x4000000)
        this.words[0] += word;
      else
        this._iaddn(word);
    }
  };

  BN.prototype.copy = function copy(dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++)
      dest.words[i] = this.words[i];
    dest.length = this.length;
    dest.sign = this.sign;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone() {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip() {
    while (this.length > 1 && this.words[this.length - 1] === 0)
      this.length--;
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign() {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0)
      this.sign = false;
    return this;
  };

  BN.prototype.inspect = function inspect() {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString(base, padding) {
    base = base || 10;
    var padding = padding | 0 || 1;
    if (base === 16 || base === 'hex') {
      var out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1)
          out = zeros[6 - word.length] + word + out;
        else
          out = word + out;
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0)
        out = carry.toString(16) + out;
      while (out.length % padding !== 0)
        out = '0' + out;
      if (this.sign)
        out = '-' + out;
      return out;
    } else if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      var out = '';
      var c = this.clone();
      c.sign = false;
      while (c.cmpn(0) !== 0) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (c.cmpn(0) !== 0)
          out = zeros[groupSize - r.length] + r + out;
        else
          out = r + out;
      }
      if (this.cmpn(0) === 0)
        out = '0' + out;
      while (out.length % padding !== 0)
        out = '0' + out;
      if (this.sign)
        out = '-' + out;
      return out;
    } else {
      assert(false, 'Base should be between 2 and 36');
    }
  };

  BN.prototype.toJSON = function toJSON() {
    return this.toString(16);
  };

  BN.prototype.toArray = function toArray(endian, length) {
    this.strip();
    var littleEndian = endian === 'le';
    var res = new Array(this.byteLength());
    res[0] = 0;

    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (var i = 0; q.cmpn(0) !== 0; i++) {
        var b = q.andln(0xff);
        q.iushrn(8);

        res[res.length - i - 1] = b;
      }
    } else {
      for (var i = 0; q.cmpn(0) !== 0; i++) {
        var b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }
    }

    if (length) {
      assert(res.length <= length, 'byte array longer than desired length');

      while (res.length < length) {
        if (littleEndian)
          res.push(0);
        else
          res.unshift(0);
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits(w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits(w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits(w) {
    // Short-cut
    if (w === 0)
      return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0)
      r++;
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength() {
    var hi = 0;
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray(num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits() {
    if (this.cmpn(0) === 0)
      return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26)
        break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength() {
    return Math.ceil(this.bitLength() / 8);
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg() {
    if (this.cmpn(0) === 0)
      return this.clone();

    var r = this.clone();
    r.sign = !this.sign;
    return r;
  };


  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor(num) {
    while (this.length < num.length)
      this.words[this.length++] = 0;

    for (var i = 0; i < num.length; i++)
      this.words[i] = this.words[i] | num.words[i];

    return this.strip();
  };

  BN.prototype.ior = function ior(num) {
    assert(!this.sign && !num.sign);
    return this.iuor(num);
  };


  // Or `num` with `this`
  BN.prototype.or = function or(num) {
    if (this.length > num.length)
      return this.clone().ior(num);
    else
      return num.clone().ior(this);
  };

  BN.prototype.uor = function uor(num) {
    if (this.length > num.length)
      return this.clone().iuor(num);
    else
      return num.clone().iuor(this);
  };


  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand(num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length)
      b = num;
    else
      b = this;

    for (var i = 0; i < b.length; i++)
      this.words[i] = this.words[i] & num.words[i];

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand(num) {
    assert(!this.sign && !num.sign);
    return this.iuand(num);
  };


  // And `num` with `this`
  BN.prototype.and = function and(num) {
    if (this.length > num.length)
      return this.clone().iand(num);
    else
      return num.clone().iand(this);
  };

  BN.prototype.uand = function uand(num) {
    if (this.length > num.length)
      return this.clone().iuand(num);
    else
      return num.clone().iuand(this);
  };


  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor(num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++)
      this.words[i] = a.words[i] ^ b.words[i];

    if (this !== a)
      for (; i < a.length; i++)
        this.words[i] = a.words[i];

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor(num) {
    assert(!this.sign && !num.sign);
    return this.iuxor(num);
  };


  // Xor `num` with `this`
  BN.prototype.xor = function xor(num) {
    if (this.length > num.length)
      return this.clone().ixor(num);
    else
      return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor(num) {
    if (this.length > num.length)
      return this.clone().iuxor(num);
    else
      return num.clone().iuxor(this);
  };


  // Set `bit` of `this`
  BN.prototype.setn = function setn(bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    while (this.length <= off)
      this.words[this.length++] = 0;

    if (val)
      this.words[off] = this.words[off] | (1 << wbit);
    else
      this.words[off] = this.words[off] & ~(1 << wbit);

    return this.strip();
  };


  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd(num) {
    // negative + positive
    if (this.sign && !num.sign) {
      this.sign = false;
      var r = this.isub(num);
      this.sign = !this.sign;
      return this._normSign();

    // positive + negative
    } else if (!this.sign && num.sign) {
      num.sign = false;
      var r = this.isub(num);
      num.sign = true;
      return r._normSign();
    }

    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      var r = a.words[i] + b.words[i] + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      var r = a.words[i] + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++)
        this.words[i] = a.words[i];
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add(num) {
    if (num.sign && !this.sign) {
      num.sign = false;
      var res = this.sub(num);
      num.sign = true;
      return res;
    } else if (!num.sign && this.sign) {
      this.sign = false;
      var res = num.sub(this);
      this.sign = true;
      return res;
    }

    if (this.length > num.length)
      return this.clone().iadd(num);
    else
      return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub(num) {
    // this - (-num) = this + num
    if (num.sign) {
      num.sign = false;
      var r = this.iadd(num);
      num.sign = true;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.sign) {
      this.sign = false;
      this.iadd(num);
      this.sign = true;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.sign = false;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a;
    var b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      var r = a.words[i] - b.words[i] + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      var r = a.words[i] + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this)
      for (; i < a.length; i++)
        this.words[i] = a.words[i];
    this.length = Math.max(this.length, i);

    if (a !== this)
      this.sign = true;

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub(num) {
    return this.clone().isub(num);
  };

  /*
  // NOTE: This could be potentionally used to generate loop-less multiplications
  function _genCombMulTo(alen, blen) {
    var len = alen + blen - 1;
    var src = [
      'var a = this.words, b = num.words, o = out.words, c = 0, w, ' +
          'mask = 0x3ffffff, shift = 0x4000000;',
      'out.length = ' + len + ';'
    ];
    for (var k = 0; k < len; k++) {
      var minJ = Math.max(0, k - alen + 1);
      var maxJ = Math.min(k, blen - 1);

      for (var j = minJ; j <= maxJ; j++) {
        var i = k - j;
        var mul = 'a[' + i + '] * b[' + j + ']';

        if (j === minJ) {
          src.push('w = ' + mul + ' + c;');
          src.push('c = (w / shift) | 0;');
        } else {
          src.push('w += ' + mul + ';');
          src.push('c += (w / shift) | 0;');
        }
        src.push('w &= mask;');
      }
      src.push('o[' + k + '] = w;');
    }
    src.push('if (c !== 0) {',
             '  o[' + k + '] = c;',
             '  out.length++;',
             '}',
             'return out;');

    return src.join('\n');
  }
  */

  BN.prototype._smallMulTo = function _smallMulTo(num, out) {
    out.sign = num.sign !== this.sign;
    out.length = this.length + num.length;

    var carry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = this.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;
      }
      out.words[k] = rword;
      carry = ncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  };

  BN.prototype._bigMulTo = function _bigMulTo(num, out) {
    out.sign = num.sign !== this.sign;
    out.length = this.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = this.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  };

  BN.prototype.mulTo = function mulTo(num, out) {
    var res;
    if (this.length + num.length < 63)
      res = this._smallMulTo(num, out);
    else
      res = this._bigMulTo(num, out);
    return res;
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul(num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul(num) {
    if (this.cmpn(0) === 0 || num.cmpn(0) === 0) {
      this.words[0] = 0;
      this.length = 1;
      return this;
    }

    var tlen = this.length;
    var nlen = num.length;

    this.sign = num.sign !== this.sign;
    this.length = this.length + num.length;
    this.words[this.length - 1] = 0;

    for (var k = this.length - 2; k >= 0; k--) {
      // Sum all words with the same `i + j = k` and accumulate `carry`,
      // note that carry could be >= 0x3ffffff
      var carry = 0;
      var rword = 0;
      var maxJ = Math.min(k, nlen - 1);
      for (var j = Math.max(0, k - tlen + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = this.words[i];
        var b = num.words[j];
        var r = a * b;

        var lo = r & 0x3ffffff;
        carry += (r / 0x4000000) | 0;
        lo += rword;
        rword = lo & 0x3ffffff;
        carry += lo >>> 26;
      }
      this.words[k] = rword;
      this.words[k + 1] += carry;
      carry = 0;
    }

    // Propagate overflows
    var carry = 0;
    for (var i = 1; i < this.length; i++) {
      var w = this.words[i] + carry;
      this.words[i] = w & 0x3ffffff;
      carry = w >>> 26;
    }

    return this.strip();
  };

  BN.prototype.imuln = function imuln(num) {
    assert(typeof num === 'number');

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = this.words[i] * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln(num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr() {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr() {
    return this.mul(this);
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow(num) {
    var w = toBitArray(num);
    if (w.length === 0)
      return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr())
      if (w[i] !== 0)
        break;

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0)
          continue;
        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);

    if (r !== 0) {
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = (this.words[i] - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }
      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (var i = this.length - 1; i >= 0; i--)
        this.words[i + s] = this.words[i];
      for (var i = 0; i < s; i++)
        this.words[i] = 0;
      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln(bits) {
    // TODO(indutny): implement me
    assert(!this.sign);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn(bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint)
      h = (hint - (hint % 26)) / 26;
    else
      h = 0;

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++)
        maskedWords.words[i] = this.words[i];
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (var i = 0; i < this.length; i++)
        this.words[i] = this.words[i + s];
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (var i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i];
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0)
      maskedWords.words[maskedWords.length++] = carry;

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    this.strip();

    return this;
  };

  BN.prototype.ishrn = function ishrn(bits, hint, extended) {
    // TODO(indutny): implement me
    assert(!this.sign);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln(bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln(bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn(bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn(bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn(bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      return false;
    }

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(!this.sign, 'imaskn works only with positive numbers');

    if (r !== 0)
      s++;
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn(bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn(num) {
    assert(typeof num === 'number');
    if (num < 0)
      return this.isubn(-num);

    // Possible sign change
    if (this.sign) {
      if (this.length === 1 && this.words[0] < num) {
        this.words[0] = num - this.words[0];
        this.sign = false;
        return this;
      }

      this.sign = false;
      this.isubn(num);
      this.sign = true;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn(num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1)
        this.words[i + 1] = 1;
      else
        this.words[i + 1]++;
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn(num) {
    assert(typeof num === 'number');
    if (num < 0)
      return this.iaddn(-num);

    if (this.sign) {
      this.sign = false;
      this.iaddn(num);
      this.sign = true;
      return this;
    }

    this.words[0] -= num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] < 0; i++) {
      this.words[i] += 0x4000000;
      this.words[i + 1] -= 1;
    }

    return this.strip();
  };

  BN.prototype.addn = function addn(num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn(num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs() {
    this.sign = false;

    return this;
  };

  BN.prototype.abs = function abs() {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
    // Bigger storage is needed
    var len = num.length + shift;
    var i;
    if (this.words.length < len) {
      var t = new Array(len);
      for (var i = 0; i < this.length; i++)
        t[i] = this.words[i];
      this.words = t;
    } else {
      i = this.length;
    }

    // Zeroify rest
    this.length = Math.max(this.length, len);
    for (; i < this.length; i++)
      this.words[i] = 0;

    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var w = this.words[i + shift] + carry;
      var right = num.words[i] * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      var w = this.words[i + shift] + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0)
      return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = -this.words[i] + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.sign = true;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv(num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1];
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1];
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++)
        q.words[i] = 0;
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (!diff.sign) {
      a = diff;
      if (q)
        q.words[m] = 1;
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = a.words[b.length + j] * 0x4000000 + a.words[b.length + j - 1];

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.sign) {
        qj--;
        a.sign = false;
        a._ishlnsubmul(b, 1, j);
        if (a.cmpn(0) !== 0)
          a.sign = !a.sign;
      }
      if (q)
        q.words[j] = qj;
    }
    if (q)
      q.strip();
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0)
      a.iushrn(shift);
    return { div: q ? q : null, mod: a };
  };

  BN.prototype.divmod = function divmod(num, mode, positive) {
    assert(num.cmpn(0) !== 0);

    if (this.sign && !num.sign) {
      var res = this.neg().divmod(num, mode);
      var div;
      var mod;
      if (mode !== 'mod')
        div = res.div.neg();
      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.neg)
          mod = mod.add(num);
      }
      return {
        div: div,
        mod: mod
      };
    } else if (!this.sign && num.sign) {
      var res = this.divmod(num.neg(), mode);
      var div;
      if (mode !== 'mod')
        div = res.div.neg();
      return { div: div, mod: res.mod };
    } else if (this.sign && num.sign) {
      var res = this.neg().divmod(num.neg(), mode);
      var mod;
      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.neg)
          mod = mod.isub(num);
      }
      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0)
      return { div: new BN(0), mod: this };

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div')
        return { div: this.divn(num.words[0]), mod: null };
      else if (mode === 'mod')
        return { div: null, mod: new BN(this.modn(num.words[0])) };
      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div(num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod(num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod(num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound(num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.cmpn(0) === 0)
      return dm.div;

    var mod = dm.div.sign ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0)
      return dm.div;

    // Round up
    return dm.div.sign ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn(num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--)
      acc = (p * acc + this.words[i]) % num;

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn(num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = this.words[i] + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn(num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd(p) {
    assert(!p.sign);
    assert(p.cmpn(0) !== 0);

    var x = this;
    var y = p.clone();

    if (x.sign)
      x = x.umod(p);
    else
      x = x.clone();

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (x.cmpn(0) !== 0) {
      while (x.isEven()) {
        x.iushrn(1);
        if (A.isEven() && B.isEven()) {
          A.iushrn(1);
          B.iushrn(1);
        } else {
          A.iadd(yp).iushrn(1);
          B.isub(xp).iushrn(1);
        }
      }

      while (y.isEven()) {
        y.iushrn(1);
        if (C.isEven() && D.isEven()) {
          C.iushrn(1);
          D.iushrn(1);
        } else {
          C.iadd(yp).iushrn(1);
          D.isub(xp).iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp(p) {
    assert(!p.sign);
    assert(p.cmpn(0) !== 0);

    var a = this;
    var b = p.clone();

    if (a.sign)
      a = a.umod(p);
    else
      a = a.clone();

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      while (a.isEven()) {
        a.iushrn(1);
        if (x1.isEven())
          x1.iushrn(1);
        else
          x1.iadd(delta).iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
        if (x2.isEven())
          x2.iushrn(1);
        else
          x2.iadd(delta).iushrn(1);
      }
      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0)
      res = x1;
    else
      res = x2;

    if (res.cmpn(0) < 0)
      res.iadd(p);

    return res;
  };

  BN.prototype.gcd = function gcd(num) {
    if (this.cmpn(0) === 0)
      return num.clone();
    if (num.cmpn(0) === 0)
      return this.clone();

    var a = this.clone();
    var b = num.clone();
    a.sign = false;
    b.sign = false;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven())
        a.iushrn(1);
      while (b.isEven())
        b.iushrn(1);

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm(num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven() {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd() {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln(num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn(bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      for (var i = this.length; i < s + 1; i++)
        this.words[i] = 0;
      this.words[s] |= q;
      this.length = s + 1;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i];
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.cmpn = function cmpn(num) {
    var sign = num < 0;
    if (sign)
      num = -num;

    if (this.sign && !sign)
      return -1;
    else if (!this.sign && sign)
      return 1;

    num &= 0x3ffffff;
    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      var w = this.words[0];
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.sign)
      res = -res;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp(num) {
    if (this.sign && !num.sign)
      return -1;
    else if (!this.sign && num.sign)
      return 1;

    var res = this.ucmp(num);
    if (this.sign)
      return -res;
    else
      return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp(num) {
    // At this point both numbers have the same sign
    if (this.length > num.length)
      return 1;
    else if (this.length < num.length)
      return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i];
      var b = num.words[i];

      if (a === b)
        continue;
      if (a < b)
        res = -1;
      else if (a > b)
        res = 1;
      break;
    }
    return res;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red(num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(!this.sign, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed() {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed(ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd(num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd(num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub(num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub(num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl(num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.ushl(this, num);
  };

  BN.prototype.redMul = function redMul(num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul(num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr() {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr() {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt() {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm() {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg() {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow(num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime(name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp() {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce(num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split(input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK(num) {
    return num.imul(this.k);
  };

  function K256() {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split(input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++)
      output.words[i] = input.words[i];
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (var i = 10; i < input.length; i++) {
      var next = input.words[i];
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    input.words[i - 10] = prev >>> 22;
    input.length -= 9;
  };

  K256.prototype.imulK = function imulK(num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var hi;
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i];
      hi = w * 0x40;
      lo += w * 0x3d1;
      hi += (lo / 0x4000000) | 0;
      lo &= 0x3ffffff;

      num.words[i] = lo;

      lo = hi;
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0)
        num.length--;
    }
    return num;
  };

  function P224() {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192() {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519() {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK(num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = num.words[i] * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0)
      num.words[num.length++] = carry;
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime(name) {
    // Cached version of prime
    if (primes[name])
      return primes[name];

    var prime;
    if (name === 'k256')
      prime = new K256();
    else if (name === 'p224')
      prime = new P224();
    else if (name === 'p192')
      prime = new P192();
    else if (name === 'p25519')
      prime = new P25519();
    else
      throw new Error('Unknown prime ' + name);
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red(m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1(a) {
    assert(!a.sign, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2(a, b) {
    assert(!a.sign && !b.sign, 'red works only with positives');
    assert(a.red && a.red === b.red,
           'red works only with red numbers');
  };

  Red.prototype.imod = function imod(a) {
    if (this.prime)
      return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg(a) {
    var r = a.clone();
    r.sign = !r.sign;
    return r.iadd(this.m)._forceRed(this);
  };

  Red.prototype.add = function add(a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0)
      res.isub(this.m);
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd(a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0)
      res.isub(this.m);
    return res;
  };

  Red.prototype.sub = function sub(a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0)
      res.iadd(this.m);
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub(a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0)
      res.iadd(this.m);
    return res;
  };

  Red.prototype.shl = function shl(a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul(a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul(a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr(a) {
    return this.imul(a, a);
  };

  Red.prototype.sqr = function sqr(a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt(a) {
    if (a.cmpn(0) === 0)
      return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      var r = this.pow(a, pow);
      return r;
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (q.cmpn(0) !== 0 && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(q.cmpn(0) !== 0);

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);
    while (this.pow(z, lpow).cmp(nOne) !== 0)
      z.redIAdd(nOne);

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++)
        tmp = tmp.redSqr();
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm(a) {
    var inv = a._invmp(this.m);
    if (inv.sign) {
      inv.sign = false;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow(a, num) {
    var w = toBitArray(num);
    if (w.length === 0)
      return new BN(1);

    // Skip leading zeroes
    var res = a;
    for (var i = 0; i < w.length; i++, res = this.sqr(res))
      if (w[i] !== 0)
        break;

    if (++i < w.length) {
      for (var q = this.sqr(res); i < w.length; i++, q = this.sqr(q)) {
        if (w[i] === 0)
          continue;
        res = this.mul(res, q);
      }
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo(num) {
    var r = num.umod(this.m);
    if (r === num)
      return r.clone();
    else
      return r;
  };

  Red.prototype.convertFrom = function convertFrom(num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont(num) {
    return new Mont(num);
  };

  function Mont(m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0)
      this.shift += 26 - (this.shift % 26);
    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo(num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom(num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul(a, b) {
    if (a.cmpn(0) === 0 || b.cmpn(0) === 0) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0)
      res = u.isub(this.m);
    else if (u.cmpn(0) < 0)
      res = u.iadd(this.m);

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul(a, b) {
    if (a.cmpn(0) === 0 || b.cmpn(0) === 0)
      return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0)
      res = u.isub(this.m);
    else if (u.cmpn(0) < 0)
      res = u.iadd(this.m);

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm(a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };

  })(typeof module === 'undefined' || module, this);

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(233)(module)))

/***/ },
/* 530 */
/***/ function(module, exports, __webpack_require__) {

  var __WEBPACK_AMD_DEFINE_RESULT__;/*! decimal.js v4.0.3 https://github.com/MikeMcl/decimal.js/LICENCE */
  ;(function (global) {
      'use strict';


      /*
       *  decimal.js v4.0.3
       *  An arbitrary-precision Decimal type for JavaScript.
       *  https://github.com/MikeMcl/decimal.js
       *  Copyright (c) 2014 Michael Mclaughlin <M8ch88l@gmail.com>
       *  MIT Expat Licence
       */


      var convertBase, decimal, noConflict,
          crypto = global['crypto'],
          external = true,
          id = 0,
          mathfloor = Math.floor,
          mathpow = Math.pow,
          outOfRange,
          toString = Object.prototype.toString,
          BASE = 1e7,
          LOGBASE = 7,
          NUMERALS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
          P = {},

          /*
           The maximum exponent magnitude.
           The limit on the value of toExpNeg, toExpPos, minE and maxE.
           */
          EXP_LIMIT = 9e15,                      // 0 to 9e15

          /*
           The limit on the value of precision, and on the argument to toDecimalPlaces,
           toExponential, toFixed, toFormat, toPrecision and toSignificantDigits.
           */
          MAX_DIGITS = 1E9,                      // 0 to 1e+9

          /*
           To decide whether or not to calculate x.pow(integer y) using the 'exponentiation by
           squaring' algorithm or by exp(y*ln(x)), the number of significant digits of x is multiplied
           by y. If this number is less than INT_POW_LIMIT then the former algorithm is used.
           */
          INT_POW_LIMIT = 3000,                  // 0 to 5000

          // The natural logarithm of 10 (1025 digits).
          LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058';


      // Decimal prototype methods


      /*
       * Return a new Decimal whose value is the absolute value of this Decimal.
       *
       */
      P['absoluteValue'] = P['abs'] = function () {
          var x = new this['constructor'](this);

          if ( x['s'] < 0 ) {
              x['s'] = 1;
          }

          return rnd(x);
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in
       * the direction of positive Infinity.
       *
       */
      P['ceil'] = function () {

          return rnd( new this['constructor'](this), this['e'] + 1, 2 );
      };


      /*
       * Return
       *   1    if the value of this Decimal is greater than the value of Decimal(y, b),
       *  -1    if the value of this Decimal is less than the value of Decimal(y, b),
       *   0    if they have the same value,
       *  null  if the value of either Decimal is NaN.
       *
       */
      P['comparedTo'] = P['cmp'] = function ( y, b ) {
          var a,
              x = this,
              xc = x['c'],
              yc = ( id = -id, y = new x['constructor']( y, b ), y['c'] ),
              i = x['s'],
              j = y['s'],
              k = x['e'],
              l = y['e'];

          // Either NaN?
          if ( !i || !j ) {
              return null;
          }

          a = xc && !xc[0];
          b = yc && !yc[0];

          // Either zero?
          if ( a || b ) {
              return a ? b ? 0 : -j : i;
          }

          // Signs differ?
          if ( i != j ) {
              return i;
          }

          a = i < 0;

          // Either Infinity?
          if ( !xc || !yc ) {
              return k == l ? 0 : !xc ^ a ? 1 : -1;
          }

          // Compare exponents.
          if ( k != l ) {
              return k > l ^ a ? 1 : -1;
          }

          // Compare digit by digit.
          for ( i = -1,
                j = ( k = xc.length ) < ( l = yc.length ) ? k : l;
                ++i < j; ) {

              if ( xc[i] != yc[i] ) {
                  return xc[i] > yc[i] ^ a ? 1 : -1;
              }
          }

          // Compare lengths.
          return k == l ? 0 : k > l ^ a ? 1 : -1;
      };


      /*
       * Return the number of decimal places of the value of this Decimal.
       *
       */
       P['decimalPlaces'] = P['dp'] = function () {
          var c, v,
              n = null;

          if ( c = this['c'] ) {
              n = ( ( v = c.length - 1 ) - mathfloor( this['e'] / LOGBASE ) ) * LOGBASE;

              if ( v = c[v] ) {

                  // Subtract the number of trailing zeros of the last number.
                  for ( ; v % 10 == 0; v /= 10, n-- );
              }

              if ( n < 0 ) {
                  n = 0;
              }
          }

          return n;
      };


      /*
       *  n / 0 = I
       *  n / N = N
       *  n / I = 0
       *  0 / n = 0
       *  0 / 0 = N
       *  0 / N = N
       *  0 / I = 0
       *  N / n = N
       *  N / 0 = N
       *  N / N = N
       *  N / I = N
       *  I / n = I
       *  I / 0 = I
       *  I / N = N
       *  I / I = N
       *
       * Return a new Decimal whose value is the value of this Decimal divided by Decimal(y, b),
       * rounded to precision significant digits using rounding mode rounding.
       *
       */
      P['dividedBy'] = P['div'] = function ( y, b ) {
          id = 2;

          return div( this, new this['constructor']( y, b ) );
      };


      /*
       * Return a new Decimal whose value is the integer part of dividing the value of this Decimal by
       * the value of Decimal(y, b), rounded to precision significant digits using rounding mode
       * rounding.
       *
       */
      P['dividedToIntegerBy'] = P['divToInt'] = function ( y, b ) {
          var x = this,
              Decimal = x['constructor'];
          id = 18;

          return rnd(
            div( x, new Decimal( y, b ), 0, 1, 1 ), Decimal['precision'], Decimal['rounding']
          );
      };


      /*
       * Return true if the value of this Decimal is equal to the value of Decimal(n, b), otherwise
       * return false.
       *
       */
      P['equals'] = P['eq'] = function ( n, b ) {
          id = 3;

          return this['cmp']( n, b ) === 0;
      };


      /*
       * Return a new Decimal whose value is the exponential of the value of this Decimal, i.e. the
       * base e raised to the power the value of this Decimal, rounded to precision significant digits
       * using rounding mode rounding.
       *
       */
      P['exponential'] = P['exp'] = function () {

          return exp(this);
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in
       * the direction of negative Infinity.
       *
       */
      P['floor'] = function () {

          return rnd( new this['constructor'](this), this['e'] + 1, 3 );
      };


      /*
       * Return true if the value of this Decimal is greater than the value of Decimal(n, b), otherwise
       * return false.
       *
       */
      P['greaterThan'] = P['gt'] = function ( n, b ) {
          id = 4;

          return this['cmp']( n, b ) > 0;
      };


      /*
       * Return true if the value of this Decimal is greater than or equal to the value of
       * Decimal(n, b), otherwise return false.
       *
       */
      P['greaterThanOrEqualTo'] = P['gte'] = function ( n, b ) {
          id = 5;
          b = this['cmp']( n, b );

          return b == 1 || b === 0;
      };


      /*
       * Return true if the value of this Decimal is a finite number, otherwise return false.
       *
       */
      P['isFinite'] = function () {

          return !!this['c'];
      };


      /*
       * Return true if the value of this Decimal is an integer, otherwise return false.
       *
       */
      P['isInteger'] = P['isInt'] = function () {

          return !!this['c'] && mathfloor( this['e'] / LOGBASE ) > this['c'].length - 2;
      };


      /*
       * Return true if the value of this Decimal is NaN, otherwise return false.
       *
       */
      P['isNaN'] = function () {

          return !this['s'];
      };


      /*
       * Return true if the value of this Decimal is negative, otherwise return false.
       *
       */
      P['isNegative'] = P['isNeg'] = function () {

          return this['s'] < 0;
      };


      /*
       * Return true if the value of this Decimal is 0 or -0, otherwise return false.
       *
       */
      P['isZero'] = function () {

          return !!this['c'] && this['c'][0] == 0;
      };


      /*
       * Return true if the value of this Decimal is less than Decimal(n, b), otherwise return false.
       *
       */
      P['lessThan'] = P['lt'] = function ( n, b ) {
          id = 6;

          return this['cmp']( n, b ) < 0;
      };


      /*
       * Return true if the value of this Decimal is less than or equal to Decimal(n, b), otherwise
       * return false.
       *
       */
      P['lessThanOrEqualTo'] = P['lte'] = function ( n, b ) {
          id = 7;
          b = this['cmp']( n, b );

          return b == -1 || b === 0;
      };


      /*
       * Return the logarithm of the value of this Decimal to the specified base, rounded
       * to precision significant digits using rounding mode rounding.
       *
       * If no base is specified, return log[10](arg).
       *
       * log[base](arg) = ln(arg) / ln(base)
       *
       * The result will always be correctly rounded if the base of the log is 2 or 10, and
       * 'almost always' if not:
       *
       * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
       * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
       * between the result and the correctly rounded result will be one ulp (unit in the last place).
       *
       * log[-b](a)       = NaN
       * log[0](a)        = NaN
       * log[1](a)        = NaN
       * log[NaN](a)      = NaN
       * log[Infinity](a) = NaN
       * log[b](0)        = -Infinity
       * log[b](-0)       = -Infinity
       * log[b](-a)       = NaN
       * log[b](1)        = 0
       * log[b](Infinity) = Infinity
       * log[b](NaN)      = NaN
       *
       * [base] {number|string|Decimal} The base of the logarithm.
       * [b] {number} The base of base.
       *
       */
      P['logarithm'] = P['log'] = function ( base, b ) {
          var base10, c, denom, i, inf, num, sd, sd10, r,
              arg = this,
              Decimal = arg['constructor'],
              pr = Decimal['precision'],
              rm = Decimal['rounding'],
              guard = 5;

          // Default base is 10.
          if ( base == null ) {
              base = new Decimal(10);
              base10 = true;
          } else {
              id = 15;
              base = new Decimal( base, b );
              c = base['c'];

              // If base < 0 or +-Infinity/NaN or 0 or 1.
              if ( base['s'] < 0 || !c || !c[0] || !base['e'] && c[0] == 1 && c.length == 1 ) {

                  return new Decimal(NaN);
              }
              base10 = base['eq'](10);
          }
          c = arg['c'];

          // If arg < 0 or +-Infinity/NaN or 0 or 1.
          if ( arg['s'] < 0 || !c || !c[0] || !arg['e'] && c[0] == 1 && c.length == 1 ) {

              return new Decimal( c && !c[0] ? -1 / 0 : arg['s'] != 1 ? NaN : c ? 0 : 1 / 0 );
          }

          /*
            The result will have an infinite decimal expansion if base is 10 and arg is not an
            integer power of 10...
           */
          inf = base10 && ( i = c[0], c.length > 1 || i != 1 && i != 10 &&
            i != 1e2 && i != 1e3 && i != 1e4 && i != 1e5 && i != 1e6 );
              /*
              // or if base last digit's evenness is not the same as arg last digit's evenness...
              // (FAILS when e.g. base.c[0] = 10 and c[0] = 1)
              || ( base['c'][ base['c'].length - 1 ] & 1 ) != ( c[ c.length - 1 ] & 1 )
                // or if base is 2 and there is more than one 1 in arg in base 2.
                // (SLOWS the method down significantly)
                || base['eq'](2) && arg.toString(2).replace( /[^1]+/g, '' ) != '1';
               */

          external = false;
          sd = pr + guard;
          sd10 = sd + 10;

          num = ln( arg, sd );

          if (base10) {

              if ( sd10 > LN10.length ) {
                  ifExceptionsThrow( Decimal, 1, sd10, 'log' );
              }
              denom = new Decimal( LN10.slice( 0, sd10 ) );
          } else {
              denom = ln( base, sd );
          }

          // The result will have 5 rounding digits.
          r = div( num, denom, sd, 1 );

          /*
           If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
           calculate 10 further digits.

           If the result is known to have an infinite decimal expansion, repeat this until it is
           clear that the result is above or below the boundary. Otherwise, if after calculating
           the 10 further digits, the last 14 are nines, round up and assume the result is exact.
           Also assume the result is exact if the last 14 are zero.

           Example of a result that will be incorrectly rounded:
           log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
           The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7,
           but it will be given as 2.6 as there are 15 zeros immediately after the requested
           decimal place, so the exact result would be assumed to be 2.6, which rounded using
           ROUND_CEIL to 1 decimal place is still 2.6.
           */
          if ( checkRoundingDigits( r['c'], i = pr, rm ) ) {

              do {
                  sd += 10;
                  num = ln( arg, sd );

                  if (base10) {
                      sd10 = sd + 10;

                      if ( sd10 > LN10.length ) {
                          ifExceptionsThrow( Decimal, 1, sd10, 'log' );
                      }
                      denom = new Decimal( LN10.slice( 0, sd10 ) );
                  } else {
                      denom = ln( base, sd );
                  }

                  r = div( num, denom, sd, 1 );

                  if ( !inf ) {

                      // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
                      if ( +coefficientToString( r['c'] ).slice( i + 1, i + 15 ) + 1 == 1e14 ) {
                          r = rnd( r, pr + 1, 0 );
                      }

                      break;
                  }
              } while ( checkRoundingDigits( r['c'], i += 10, rm ) );
          }
          external = true;

          return rnd( r, pr, rm );
      };


      /*
       *  n - 0 = n
       *  n - N = N
       *  n - I = -I
       *  0 - n = -n
       *  0 - 0 = 0
       *  0 - N = N
       *  0 - I = -I
       *  N - n = N
       *  N - 0 = N
       *  N - N = N
       *  N - I = N
       *  I - n = I
       *  I - 0 = I
       *  I - N = N
       *  I - I = N
       *
       * Return a new Decimal whose value is the value of this Decimal minus Decimal(y, b), rounded
       * to precision significant digits using rounding mode rounding.
       *
       */
      P['minus'] = function ( y, b ) {
          var t, i, j, xLTy,
              x = this,
              Decimal = x['constructor'],
              a = x['s'];

          id = 8;
          y = new Decimal( y, b );
          b = y['s'];

          // Either NaN?
          if ( !a || !b ) {

              return new Decimal(NaN);
          }

          // Signs differ?
          if ( a != b ) {
              y['s'] = -b;

              return x['plus'](y);
          }

          var xc = x['c'],
              yc = y['c'],
              e = mathfloor( y['e'] / LOGBASE ),
              k = mathfloor( x['e'] / LOGBASE ),
              pr = Decimal['precision'],
              rm = Decimal['rounding'];

          if ( !k || !e ) {

              // Either Infinity?
              if ( !xc || !yc ) {

                  return xc ? ( y['s'] = -b, y ) : new Decimal( yc ? x : NaN );
              }

              // Either zero?
              if ( !xc[0] || !yc[0] ) {

                  // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                  x = yc[0] ? ( y['s'] = -b, y ) : new Decimal( xc[0] ? x :

                    // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                    rm == 3 ? -0 : 0 );

                  return external ? rnd( x, pr, rm ) : x;
              }
          }

          xc = xc.slice();
          i = xc.length;

          // Determine which is the bigger number. Prepend zeros to equalise exponents.
          if ( a = k - e ) {

              if ( xLTy = a < 0 ) {
                  a = -a;
                  t = xc;
                  i = yc.length;
              } else {
                  e = k;
                  t = yc;
              }

              if ( ( k = Math.ceil( pr / LOGBASE ) ) > i ) {
                  i = k;
              }

              /*
               Numbers with massively different exponents would result in a massive number of
               zeros needing to be prepended, but this can be avoided while still ensuring correct
               rounding by limiting the number of zeros to max( pr, i ) + 2, where pr is precision and
               i is the length of the coefficient of whichever is greater, x or y.
               */
              if ( a > ( i += 2 ) ) {
                  a = i;
                  t.length = 1;
              }

              t.reverse();
              for ( b = a; b--; t.push(0) );
              t.reverse();
          } else {
              // Exponents equal. Check digits.

              if ( xLTy = i < ( j = yc.length ) ) {
                  j = i;
              }

              for ( a = b = 0; b < j; b++ ) {

                  if ( xc[b] != yc[b] ) {
                      xLTy = xc[b] < yc[b];

                      break;
                  }
              }
          }

          // x < y? Point xc to the array of the bigger number.
          if ( xLTy ) {
              t = xc, xc = yc, yc = t;
              y['s'] = -y['s'];
          }

          /*
           Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only
           needs to start at yc length.
           */
          if ( ( b = -( ( j = xc.length ) - yc.length ) ) > 0 ) {

              for ( ; b--; xc[j++] = 0 );
          }

          // Subtract yc from xc.
          for ( k = BASE - 1, b = yc.length; b > a; ) {

              if ( xc[--b] < yc[b] ) {

                  for ( i = b; i && !xc[--i]; xc[i] = k );
                  --xc[i];
                  xc[b] += BASE;
              }
              xc[b] -= yc[b];
          }

          // Remove trailing zeros.
          for ( ; xc[--j] == 0; xc.pop() );

          // Remove leading zeros and adjust exponent accordingly.
          for ( ; xc[0] == 0; xc.shift(), --e );

          if ( !xc[0] ) {

              // Zero.
              xc = [ e = 0 ];

              // Following IEEE 754 (2008) 6.3, n - n = -0 when rounding towards -Infinity.
              y['s'] = rm == 3 ? -1 : 1;
          }

          y['c'] = xc;

          // Get the number of digits of xc[0].
          for ( a = 1, b = xc[0]; b >= 10; b /= 10, a++ );
          y['e'] = a + e * LOGBASE - 1;

          return external ? rnd( y, pr, rm ) : y;
      };


      /*
       *   n % 0 =  N
       *   n % N =  N
       *   n % I =  n
       *   0 % n =  0
       *  -0 % n = -0
       *   0 % 0 =  N
       *   0 % N =  N
       *   0 % I =  0
       *   N % n =  N
       *   N % 0 =  N
       *   N % N =  N
       *   N % I =  N
       *   I % n =  N
       *   I % 0 =  N
       *   I % N =  N
       *   I % I =  N
       *
       * Return a new Decimal whose value is the value of this Decimal modulo Decimal(y, b), rounded
       * to precision significant digits using rounding mode rounding.
       *
       * The result depends on the modulo mode.
       *
       */
      P['modulo'] = P['mod'] = function ( y, b ) {
          var n, q,
              x = this,
              Decimal = x['constructor'],
              m = Decimal['modulo'];

          id = 9;
          y = new Decimal( y, b );
          b = y['s'];
          n = !x['c'] || !b || y['c'] && !y['c'][0];

          /*
           Return NaN if x is Infinity or NaN, or y is NaN or zero, else return x if y is Infinity
           or x is zero.
           */
          if ( n || !y['c'] || x['c'] && !x['c'][0] ) {

              return n
                ? new Decimal(NaN)
                : rnd( new Decimal(x), Decimal['precision'], Decimal['rounding'] );
          }

          external = false;

          if ( m == 9 ) {

              // Euclidian division: q = sign(y) * floor(x / abs(y))
              // r = x - qy    where  0 <= r < abs(y)
              y['s'] = 1;
              q = div( x, y, 0, 3, 1 );
              y['s'] = b;
              q['s'] *= b;
          } else {
              q = div( x, y, 0, m, 1 );
          }

          q = q['times'](y);
          external = true;

          return x['minus'](q);
      };


      /*
       * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
       * rounded to precision significant digits using rounding mode rounding.
       *
       */
      P['naturalLogarithm'] = P['ln'] = function () {

          return ln(this);
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if
       * multiplied by -1.
       *
       */
      P['negated'] = P['neg'] = function () {
          var x = new this['constructor'](this);
          x['s'] = -x['s'] || null;

          return rnd(x);
      };


      /*
       *  n + 0 = n
       *  n + N = N
       *  n + I = I
       *  0 + n = n
       *  0 + 0 = 0
       *  0 + N = N
       *  0 + I = I
       *  N + n = N
       *  N + 0 = N
       *  N + N = N
       *  N + I = N
       *  I + n = I
       *  I + 0 = I
       *  I + N = N
       *  I + I = I
       *
       * Return a new Decimal whose value is the value of this Decimal plus Decimal(y, b), rounded
       * to precision significant digits using rounding mode rounding.
       *
       */
      P['plus'] = function ( y, b ) {
          var t,
              x = this,
              Decimal = x['constructor'],
              a = x['s'];

          id = 10;
          y = new Decimal( y, b );
          b = y['s'];

          // Either NaN?
          if ( !a || !b ) {

              return new Decimal(NaN);
          }

          // Signs differ?
          if ( a != b ) {
              y['s'] = -b;

              return x['minus'](y);
          }

          var xc = x['c'],
              yc = y['c'],
              e = mathfloor( y['e'] / LOGBASE ),
              k = mathfloor( x['e'] / LOGBASE ),
              pr = Decimal['precision'],
              rm = Decimal['rounding'];

          if ( !k || !e ) {

              // Either Infinity?
              if ( !xc || !yc ) {

                  // Return +-Infinity.
                  return new Decimal( a / 0 );
              }

              // Either zero?
              if ( !xc[0] || !yc[0] ) {

                  // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                  x = yc[0] ? y : new Decimal( xc[0] ? x : a * 0 );

                  return external ? rnd( x, pr, rm ) : x;
              }
          }

          xc = xc.slice();

          // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
          if ( a = k - e ) {

              if ( a < 0 ) {
                  a = -a;
                  t = xc;
                  b = yc.length;
              } else {
                  e = k;
                  t = yc;
                  b = xc.length;
              }

              if ( ( k = Math.ceil( pr / LOGBASE ) ) > b ) {
                  b = k;
              }

              // Limit number of zeros prepended to max( pr, b ) + 1.
              if ( a > ++b ) {
                  a = b;
                  t.length = 1;
              }

              for ( t.reverse(); a--; t.push(0) );
              t.reverse();
          }

          // Point xc to the longer array.
          if ( xc.length - yc.length < 0 ) {
              t = yc, yc = xc, xc = t;
          }

          // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.
          for ( a = yc.length, b = 0, k = BASE; a; xc[a] %= k ) {
              b = ( xc[--a] = xc[a] + yc[a] + b ) / k | 0;
          }

          if (b) {
              xc.unshift(b);
              ++e;
          }

          // Remove trailing zeros.
          for ( a = xc.length; xc[--a] == 0; xc.pop() );

          // No need to check for zero, as +x + +y != 0 && -x + -y != 0

          y['c'] = xc;

          // Get the number of digits of xc[0].
          for ( a = 1, b = xc[0]; b >= 10; b /= 10, a++ );
          y['e'] = a + e * LOGBASE - 1;

          return external ? rnd( y, pr, rm ) : y;
      };


      /*
       * Return the number of significant digits of this Decimal.
       *
       * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
       *
       */
      P['precision'] = P['sd'] = function (z) {
          var n = null,
              x = this;

          if ( z != n && z !== !!z && z !== 1 && z !== 0 ) {

              // 'precision() argument not a boolean or binary digit: {z}'
              ifExceptionsThrow( x['constructor'], 'argument', z, 'precision', 1 );
          }

          if ( x['c'] ) {
              n = getCoeffLength( x['c'] );

              if ( z && x['e'] + 1 > n ) {
                  n = x['e'] + 1;
              }
          }

          return n;
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
       * rounding mode rounding.
       *
       */
      P['round'] = function () {
          var x = this,
              Decimal = x['constructor'];

          return rnd( new Decimal(x), x['e'] + 1, Decimal['rounding'] );
      };


      /*
       *  sqrt(-n) =  N
       *  sqrt( N) =  N
       *  sqrt(-I) =  N
       *  sqrt( I) =  I
       *  sqrt( 0) =  0
       *  sqrt(-0) = -0
       *
       * Return a new Decimal whose value is the square root of this Decimal, rounded to precision
       * significant digits using rounding mode rounding.
       *
       */
      P['squareRoot'] = P['sqrt'] = function () {
          var m, n, sd, r, rep, t,
              x = this,
              c = x['c'],
              s = x['s'],
              e = x['e'],
              Decimal = x['constructor'],
              half = new Decimal(0.5);

          // Negative/NaN/Infinity/zero?
          if ( s !== 1 || !c || !c[0] ) {

              return new Decimal( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );
          }

          external = false;

          // Initial estimate.
          s = Math.sqrt( +x );

          /*
           Math.sqrt underflow/overflow?
           Pass x to Math.sqrt as integer, then adjust the exponent of the result.
           */
          if ( s == 0 || s == 1 / 0 ) {
              n = coefficientToString(c);

              if ( ( n.length + e ) % 2 == 0 ) {
                  n += '0';
              }

              s = Math.sqrt(n);
              e = mathfloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );

              if ( s == 1 / 0 ) {
                  n = '1e' + e;
              } else {
                  n = s.toExponential();
                  n = n.slice( 0, n.indexOf('e') + 1 ) + e;
              }

              r = new Decimal(n);
          } else {
              r = new Decimal( s.toString() );
          }

          sd = ( e = Decimal['precision'] ) + 3;

          // Newton-Raphson iteration.
          for ( ; ; ) {
              t = r;
              r = half['times']( t['plus']( div( x, t, sd + 2, 1 ) ) );

              if ( coefficientToString( t['c'] ).slice( 0, sd ) ===
                  ( n = coefficientToString( r['c'] ) ).slice( 0, sd ) ) {
                  n = n.slice( sd - 3, sd + 1 );

                  /*
                   The 4th rounding digit may be in error by -1 so if the 4 rounding digits are
                   9999 or 4999 (i.e. approaching a rounding boundary) continue the iteration.
                   */
                  if ( n == '9999' || !rep && n == '4999' ) {

                      /*
                       On the first iteration only, check to see if rounding up gives the exact result
                       as the nines may infinitely repeat.
                       */
                      if ( !rep ) {
                          rnd( t, e + 1, 0 );

                          if ( t['times'](t)['eq'](x) ) {
                              r = t;

                              break;
                          }
                      }
                      sd += 4;
                      rep = 1;
                  } else {

                      /*
                       If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
                       If not, then there are further digits and m will be truthy.
                       */
                      if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {

                          // Truncate to the first rounding digit.
                          rnd( r, e + 1, 1 );
                          m = !r['times'](r)['eq'](x);
                      }

                      break;
                  }
              }
          }
          external = true;

          return rnd( r, e, Decimal['rounding'], m );
      };


      /*
       *  n * 0 = 0
       *  n * N = N
       *  n * I = I
       *  0 * n = 0
       *  0 * 0 = 0
       *  0 * N = N
       *  0 * I = N
       *  N * n = N
       *  N * 0 = N
       *  N * N = N
       *  N * I = N
       *  I * n = I
       *  I * 0 = N
       *  I * N = N
       *  I * I = I
       *
       * Return a new Decimal whose value is this Decimal times Decimal(y), rounded to precision
       * significant digits using rounding mode rounding.
       *
       */
      P['times'] = function ( y, b ) {
          var c, e,
              x = this,
              Decimal = x['constructor'],
              xc = x['c'],
              yc = ( id = 11, y = new Decimal( y, b ), y['c'] ),
              i = mathfloor( x['e'] / LOGBASE ),
              j = mathfloor( y['e'] / LOGBASE ),
              a = x['s'];

          b = y['s'];

          y['s'] = a == b ? 1 : -1;

          // Either NaN/Infinity/0?
          if ( !i && ( !xc || !xc[0] ) || !j && ( !yc || !yc[0] ) ) {

              // Either NaN?
              return new Decimal( !a || !b ||

                // x is 0 and y is Infinity  or y is 0 and x is Infinity?
                xc && !xc[0] && !yc || yc && !yc[0] && !xc

                  // Return NaN.
                  ? NaN

                  // Either Infinity?
                  : !xc || !yc

                    // Return +-Infinity.
                    ? y['s'] / 0

                    // x or y is 0. Return +-0.
                    : y['s'] * 0 );
          }

          e = i + j;
          a = xc.length;
          b = yc.length;

          if ( a < b ) {

              // Swap.
              c = xc, xc = yc, yc = c;
              j = a, a = b, b = j;
          }

          for ( j = a + b, c = []; j--; c.push(0) );

          // Multiply!
          for ( i = b - 1; i > -1; i-- ) {
              b = 0;

              for ( j = a + i; j > i; ) {
                    b = c[j] + yc[i] * xc[j - i - 1] + b;
                    c[j--] = b % BASE | 0;
                    b = b / BASE | 0;
              }
              c[j] = ( c[j] + b ) % BASE | 0;
          }

          if (b) {
              ++e;
          } else if ( !c[0] ) {

              // Remove leading zero.
              c.shift();
          }

          // Remove trailing zeros.
          for ( j = c.length; !c[--j]; c.pop() );
          y['c'] = c;

          // Get the number of digits of c[0].
          for ( a = 1, b = c[0]; b >= 10; b /= 10, a++ );
          y['e'] = a + e * LOGBASE - 1;

          return external ? rnd( y, Decimal['precision'], Decimal['rounding'] ) : y;
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of dp
       * decimal places using rounding mode rm or rounding if rm is omitted.
       *
       * If dp is omitted, return a new Decimal whose value is the value of this Decimal.
       *
       * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * 'toDP() dp out of range: {dp}'
       * 'toDP() dp not an integer: {dp}'
       * 'toDP() rounding mode not an integer: {rm}'
       * 'toDP() rounding mode out of range: {rm}'
       *
       */
      P['toDecimalPlaces'] = P['toDP'] = function ( dp, rm ) {
          var x = this;
          x = new x['constructor'](x);

          return dp == null || !checkArg( x, dp, 'toDP' )
            ? x
            : rnd( x, ( dp | 0 ) + x['e'] + 1, checkRM( x, rm, 'toDP' ) );
      };


      /*
       * Return a string representing the value of this Decimal in exponential notation rounded to dp
       * fixed decimal places using rounding mode rounding.
       *
       * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * errors true: Throw if dp and rm are not undefined, null or integers in range.
       * errors false: Ignore dp and rm if not numbers or not in range, and truncate non-integers.
       *
       * 'toExponential() dp not an integer: {dp}'
       * 'toExponential() dp out of range: {dp}'
       * 'toExponential() rounding mode not an integer: {rm}'
       * 'toExponential() rounding mode out of range: {rm}'
       *
       */
      P['toExponential'] = function ( dp, rm ) {
          var x = this;

          return x['c']
            ? format( x, dp != null && checkArg( x, dp, 'toExponential' ) ? dp | 0 : null,
              dp != null && checkRM( x, rm, 'toExponential' ), 1 )
            : x.toString();
      };


      /*
       * Return a string representing the value of this Decimal in normal (fixed-point) notation to
       * dp fixed decimal places and rounded using rounding mode rm or rounding if rm is omitted.
       *
       * Note: as with JS numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
       *
       * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * errors true: Throw if dp and rm are not undefined, null or integers in range.
       * errors false: Ignore dp and rm if not numbers or not in range, and truncate non-integers.
       *
       * 'toFixed() dp not an integer: {dp}'
       * 'toFixed() dp out of range: {dp}'
       * 'toFixed() rounding mode not an integer: {rm}'
       * 'toFixed() rounding mode out of range: {rm}'
       *
       */
      P['toFixed'] = function ( dp, rm ) {
          var str,
              x = this,
              Decimal = x['constructor'],
              neg = Decimal['toExpNeg'],
              pos = Decimal['toExpPos'];

          if ( dp != null ) {
              dp = checkArg( x, dp, str = 'toFixed' ) ? x['e'] + ( dp | 0 ) : null;
              rm = checkRM( x, rm, str );
          }

          // Prevent toString returning exponential notation;
          Decimal['toExpNeg'] = -( Decimal['toExpPos'] = 1 / 0 );

          if ( dp == null || !x['c'] ) {
              str = x.toString();
          } else {
              str = format( x, dp, rm );

              // (-0).toFixed() is '0', but (-0.1).toFixed() is '-0'.
              // (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
              if ( x['s'] < 0 && x['c'] ) {

                  // As e.g. (-0).toFixed(3), will wrongly be returned as -0.000 from toString.
                  if ( !x['c'][0] ) {
                      str = str.replace( '-', '' );

                  // As e.g. -0.5 if rounded to -0 will cause toString to omit the minus sign.
                  } else if ( str.indexOf('-') < 0 ) {
                      str = '-' + str;
                  }
              }
          }
          Decimal['toExpNeg'] = neg;
          Decimal['toExpPos'] = pos;

          return str;
      };


      /*
       * Return a string representing the value of this Decimal in fixed-point notation to dp decimal
       * places, rounded using rounding mode rm or Decimal.rounding if rm is omitted, and formatted
       * according to the following properties of the Decimal.format object.
       *
       *  Decimal.format = {
       *      decimalSeparator : '.',
       *      groupSeparator : ',',
       *      groupSize : 3,
       *      secondaryGroupSize : 0,
       *      fractionGroupSeparator : '\xA0',    // non-breaking space
       *      fractionGroupSize : 0
       *  };
       *
       * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive
       *
       * (If dp or rm are invalid the error message will give the offending method call as toFixed.)
       *
       */
      P['toFormat'] = function( dp, rm ) {
          var x = this;

          if ( !x['c'] ) {
              return x.toString();
          }

          var i,
              isNeg = x['s'] < 0,
              f = x['constructor']['format'],
              groupSeparator = f['groupSeparator'],
              g1 = +f['groupSize'],
              g2 = +f['secondaryGroupSize'],
              arr = x.toFixed( dp, rm ).split('.'),
              intPart = arr[0],
              fractionPart = arr[1],
              intDigits = isNeg ? intPart.slice(1) : intPart,
              len = intDigits.length;

          if (g2) {
              len -= ( i = g1, g1 = g2, g2 = i );
          }

          if ( g1 > 0 && len > 0 ) {
              i = len % g1 || g1;
              intPart = intDigits.substr( 0, i );

              for ( ; i < len; i += g1 ) {
                  intPart += groupSeparator + intDigits.substr( i, g1 );
              }

              if ( g2 > 0 ) {
                  intPart += groupSeparator + intDigits.slice(i);
              }

              if (isNeg) {
                  intPart = '-' + intPart;
              }
          }

          return fractionPart
            ? intPart + f['decimalSeparator'] + ( ( g2 = +f['fractionGroupSize'] )
              ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),
                '$&' + f['fractionGroupSeparator'] )
              : fractionPart )
            : intPart;
      };


      /*
       * Return a string array representing the value of this Decimal as a simple fraction with an
       * integer numerator and an integer denominator.
       *
       * The denominator will be a positive non-zero value less than or equal to the specified
       * maximum denominator. If a maximum denominator is not specified, the denominator will be
       * the lowest value necessary to represent the number exactly.
       *
       * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
       *
       */
      P['toFraction'] = function (maxD) {
          var d0, d2, e, frac, n, n0, p, q,
              x = this,
              Decimal = x['constructor'],
              n1 = d0 = new Decimal( Decimal['ONE'] ),
              d1 = n0 = new Decimal(0),
              xc = x['c'],
              d = new Decimal(d1);

          // NaN, Infinity.
          if ( !xc ) {

              return x.toString();
          }

          e = d['e'] = getCoeffLength(xc) - x['e'] - 1;
          d['c'][0] = mathpow( 10, ( p = e % LOGBASE ) < 0 ? LOGBASE + p : p );

          // If maxD is undefined or null...
          if ( maxD == null ||

               // or NaN...
               ( !( id = 12, n = new Decimal(maxD) )['s'] ||

                 // or less than 1, or Infinity...
                 ( outOfRange = n['cmp'](n1) < 0 || !n['c'] ) ||

                   // or not an integer...
                   ( Decimal['errors'] && mathfloor( n['e'] / LOGBASE ) < n['c'].length - 1 ) ) &&

                     // 'toFraction() max denominator not an integer: {maxD}'
                     // 'toFraction() max denominator out of range: {maxD}'
                     !ifExceptionsThrow( Decimal, 'max denominator', maxD, 'toFraction', 0 ) ||

                       // or greater than the maximum denominator needed to specify the value exactly.
                       ( maxD = n )['cmp'](d) > 0 ) {

              // d is 10**e, n1 is 1.
              maxD = e > 0 ? d : n1;
          }

          external = false;
          n = new Decimal( coefficientToString(xc) );
          p = Decimal['precision'];
          Decimal['precision'] = e = xc.length * LOGBASE * 2;

          for ( ; ; )  {
              q = div( n, d, 0, 1, 1 );
              d2 = d0['plus']( q['times'](d1) );

              if ( d2['cmp'](maxD) == 1 ) {

                  break;
              }
              d0 = d1;
              d1 = d2;

              n1 = n0['plus']( q['times']( d2 = n1 ) );
              n0 = d2;

              d = n['minus']( q['times']( d2 = d ) );
              n = d2;
          }

          d2 = div( maxD['minus'](d0), d1, 0, 1, 1 );
          n0 = n0['plus']( d2['times'](n1) );
          d0 = d0['plus']( d2['times'](d1) );
          n0['s'] = n1['s'] = x['s'];

          // Determine which fraction is closer to x, n0/d0 or n1/d1?
          frac = div( n1, d1, e, 1 )['minus'](x)['abs']()['cmp'](
                 div( n0, d0, e, 1 )['minus'](x)['abs']() ) < 1
            ? [ n1 + '', d1 + '' ]
            : [ n0 + '', d0 + '' ];

          external = true;
          Decimal['precision'] = p;

          return frac;
      };


      /*
       * Returns a new Decimal whose value is the nearest multiple of the magnitude of n to the value
       * of this Decimal.
       *
       * If the value of this Decimal is equidistant from two multiples of n, the rounding mode rm,
       * or rounding if rm is omitted or is null or undefined, determines the direction of the
       * nearest multiple.
       *
       * In the context of this method, rounding mode 4 (ROUND_HALF_UP) is the same as rounding mode 0
       * (ROUND_UP), and so on.
       *
       * The return value will always have the same sign as this Decimal, unless either this Decimal
       * or n is NaN, in which case the return value will be also be NaN.
       *
       * The return value is not rounded to precision significant digits.
       *
       * n {number|string|Decimal} The magnitude to round to a multiple of.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * 'toNearest() rounding mode not an integer: {rm}'
       * 'toNearest() rounding mode out of range: {rm}'
       *
       */
      P['toNearest'] = function ( n, rm ) {
          var x = this,
              Decimal = x['constructor'];

          x = new Decimal(x);

          if ( n == null ) {
              n = new Decimal( Decimal['ONE'] );
              rm = Decimal['rounding'];
          } else {
              id = 17;
              n = new Decimal(n);
              rm = checkRM( x, rm, 'toNearest' );
          }

          // If n is finite...
          if ( n['c'] ) {

             // If x is finite...
              if ( x['c'] ) {

                  if ( n['c'][0] ) {
                      external = false;
                      x = div( x, n, 0, rm < 4 ? [4, 5, 7, 8][rm] : rm, 1 )['times'](n);
                      external = true;
                      rnd(x);
                  } else {
                      x['c'] = [ x['e'] = 0 ];
                  }
              }

          // n is NaN or +-Infinity. If x is not NaN...
          } else if ( x['s'] ) {

              // If n is +-Infinity...
              if ( n['s'] ) {
                  n['s'] = x['s'];
              }
              x = n;
          }

          return x;
      };


      /*
       * Return the value of this Decimal converted to a number primitive.
       *
       */
      P['toNumber'] = function () {
          var x = this;

          // Ensure zero has correct sign.
          return +x || ( x['s'] ? 0 * x['s'] : NaN );
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal raised to the power
       * Decimal(y, b), rounded to precision significant digits using rounding mode rounding.
       *
       * ECMAScript compliant.
       *
       *   x is any value, including NaN.
       *   n is any number, including �Infinity unless stated.
       *
       *   pow( x, NaN )                           = NaN
       *   pow( x, �0 )                            = 1

       *   pow( NaN, nonzero )                     = NaN
       *   pow( abs(n) > 1, +Infinity )            = +Infinity
       *   pow( abs(n) > 1, -Infinity )            = +0
       *   pow( abs(n) == 1, �Infinity )           = NaN
       *   pow( abs(n) < 1, +Infinity )            = +0
       *   pow( abs(n) < 1, -Infinity )            = +Infinity
       *   pow( +Infinity, n > 0 )                 = +Infinity
       *   pow( +Infinity, n < 0 )                 = +0
       *   pow( -Infinity, odd integer > 0 )       = -Infinity
       *   pow( -Infinity, even integer > 0 )      = +Infinity
       *   pow( -Infinity, odd integer < 0 )       = -0
       *   pow( -Infinity, even integer < 0 )      = +0
       *   pow( +0, n > 0 )                        = +0
       *   pow( +0, n < 0 )                        = +Infinity
       *   pow( -0, odd integer > 0 )              = -0
       *   pow( -0, even integer > 0 )             = +0
       *   pow( -0, odd integer < 0 )              = -Infinity
       *   pow( -0, even integer < 0 )             = +Infinity
       *   pow( finite n < 0, finite non-integer ) = NaN
       *
       * For non-integer and larger exponents pow(x, y) is calculated using
       *
       *   x^y = exp(y*ln(x))
       *
       * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
       * probability of an incorrectly rounded result
       * P( [49]9{14} | [50]0{14} ) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
       * i.e. 1 in 250,000,000,000,000
       *
       * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
       *
       * y {number|string|Decimal} The power to which to raise this Decimal.
       * [b] {number} The base of y.
       *
       */
      P['toPower'] = P['pow'] = function ( y, b ) {
          var a, e, n, r,
              x = this,
              Decimal = x['constructor'],
              s = x['s'],
              yN = +( id = 13, y = new Decimal( y, b ) ),
              i = yN < 0 ? -yN : yN,
              pr = Decimal['precision'],
              rm = Decimal['rounding'];

          // Handle +-Infinity, NaN and +-0.
          if ( !x['c'] || !y['c'] || ( n = !x['c'][0] ) || !y['c'][0] ) {

              // valueOf -0 is 0, so check for 0 then multiply it by the sign.
              return new Decimal( mathpow( n ? s * 0 : +x, yN ) );
          }

          x = new Decimal(x);
          a = x['c'].length;

          // if x == 1
          if ( !x['e'] && x['c'][0] == x['s'] && a == 1 ) {

              return x;
          }

          b = y['c'].length - 1;

          // if y == 1
          if ( !y['e'] && y['c'][0] == y['s'] && !b ) {
              r = rnd( x, pr, rm );
          } else {
              e = mathfloor( y['e'] / LOGBASE );
              n = e >= b;

              // If y is not an integer and x is negative, return NaN.
              if ( !n && s < 0 ) {
                  r = new Decimal(NaN);
              } else {

                  /*
                   If the approximate number of significant digits of x multiplied by abs(y) is less
                   than INT_POW_LIMIT use the 'exponentiation by squaring' algorithm.
                   */
                  if ( n && a * LOGBASE * i < INT_POW_LIMIT ) {
                      r = intPow( Decimal, x, i );

                      if ( y['s'] < 0 ) {

                          return Decimal['ONE']['div'](r);
                      }
                  } else {

                      // Result is negative if x is negative and the last digit of integer y is odd.
                      s = s < 0 && y['c'][ Math.max( e, b ) ] & 1 ? -1 : 1;

                      b = mathpow( +x, yN );

                      /*
                       Estimate result exponent.
                       x^y = 10^e,  where e = y * log10(x)
                       log10(x) = log10(x_significand) + x_exponent
                       log10(x_significand) = ln(x_significand) / ln(10)
                       */
                      e = b == 0 || !isFinite(b)
                        ? mathfloor( yN * ( Math.log( '0.' + coefficientToString( x['c'] ) ) /
                          Math.LN10 + x['e'] + 1 ) )
                        : new Decimal( b + '' )['e'];

                      // Estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e:-1

                      // Overflow/underflow?
                      if ( e > Decimal['maxE'] + 1 || e < Decimal['minE'] - 1 ) {

                          return new Decimal( e > 0 ? s / 0 : 0 );
                      }

                      external = false;
                      Decimal['rounding'] = x['s'] = 1;

                      /*
                       Estimate extra digits needed from ln(x) to ensure five correct rounding digits
                       in result (i was unnecessary before max exponent was extended?).
                       Example of failure before i was introduced: (precision: 10),
                       new Decimal(2.32456).pow('2087987436534566.46411')
                       should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
                       */
                      i = Math.min( 12, ( e + '' ).length );

                      // r = x^y = exp(y*ln(x))
                      r = exp( y['times']( ln( x, pr + i ) ), pr );

                      // Truncate to the required precision plus five rounding digits.
                      r = rnd( r, pr + 5, 1 );

                      /*
                       If the rounding digits are [49]9999 or [50]0000 increase the precision by 10
                       and recalculate the result.
                       */
                      if ( checkRoundingDigits( r['c'], pr, rm ) ) {
                          e = pr + 10;

                          // Truncate to the increased precision plus five rounding digits.
                          r = rnd( exp( y['times']( ln( x, e + i ) ), e ), e + 5, 1 );

                          /*
                            Check for 14 nines from the 2nd rounding digit (the first rounding digit
                            may be 4 or 9).
                           */
                          if ( +coefficientToString( r['c'] ).slice( pr + 1, pr + 15 ) + 1 == 1e14 ) {
                              r = rnd( r, pr + 1, 0 );
                          }
                      }

                      r['s'] = s;
                      external = true;
                      Decimal['rounding'] = rm;
                  }

                  r = rnd( r, pr, rm );
              }
          }

          return r;
      };


      /*
       * Return a string representing the value of this Decimal rounded to sd significant digits
       * using rounding mode rounding.
       *
       * Return exponential notation if sd is less than the number of digits necessary to represent
       * the integer part of the value in normal notation.
       *
       * sd {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * errors true: Throw if sd and rm are not undefined, null or integers in range.
       * errors false: Ignore sd and rm if not numbers or not in range, and truncate non-integers.
       *
       * 'toPrecision() sd not an integer: {sd}'
       * 'toPrecision() sd out of range: {sd}'
       * 'toPrecision() rounding mode not an integer: {rm}'
       * 'toPrecision() rounding mode out of range: {rm}'
       *
       */
      P['toPrecision'] = function ( sd, rm ) {
          var x = this;

          return sd != null && checkArg( x, sd, 'toPrecision', 1 ) && x['c']
            ? format( x, --sd | 0, checkRM( x, rm, 'toPrecision' ), 2 )
            : x.toString();
      };


      /*
       * Return a new Decimal whose value is this Decimal rounded to a maximum of d significant
       * digits using rounding mode rm, or to precision and rounding respectively if omitted.
       *
       * [d] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * 'toSD() digits out of range: {d}'
       * 'toSD() digits not an integer: {d}'
       * 'toSD() rounding mode not an integer: {rm}'
       * 'toSD() rounding mode out of range: {rm}'
       *
       */
      P['toSignificantDigits'] = P['toSD'] = function ( d, rm ) {
          var x = this,
              Decimal = x['constructor'];

          x = new Decimal(x);

          return d == null || !checkArg( x, d, 'toSD', 1 )
            ? rnd( x, Decimal['precision'], Decimal['rounding'] )
            : rnd( x, d | 0, checkRM( x, rm, 'toSD' ) );
      };


      /*
       * Return a string representing the value of this Decimal in base b, or base 10 if b is
       * omitted. If a base is specified, including base 10, round to precision significant digits
       * using rounding mode rounding.
       *
       * Return exponential notation if a base is not specified, and this Decimal has a positive
       * exponent equal to or greater than toExpPos, or a negative exponent equal to or less than
       * toExpNeg.
       *
       * [b] {number} Base. Integer, 2 to 64 inclusive.
       *
       */
      P['toString'] = function (b) {
          var u, str, strL,
              x = this,
              Decimal = x['constructor'],
              xe = x['e'];

          // Infinity or NaN?
          if ( xe === null ) {
              str = x['s'] ? 'Infinity' : 'NaN';

          // Exponential format?
          } else if ( b === u && ( xe <= Decimal['toExpNeg'] || xe >= Decimal['toExpPos'] ) ) {

              return format( x, null, Decimal['rounding'], 1 );
          } else {
              str = coefficientToString( x['c'] );

              // Negative exponent?
              if ( xe < 0 ) {

                  // Prepend zeros.
                  for ( ; ++xe; str = '0' + str );
                  str = '0.' + str;

              // Positive exponent?
              } else if ( strL = str.length, xe > 0 ) {

                  if ( ++xe > strL ) {

                      // Append zeros.
                      for ( xe -= strL; xe-- ; str += '0' );

                  } else if ( xe < strL ) {
                      str = str.slice( 0, xe ) + '.' + str.slice(xe);
                  }

              // Exponent zero.
              } else {
                  u = str.charAt(0);

                  if ( strL > 1 ) {
                      str = u + '.' + str.slice(1);

                  // Avoid '-0'
                  } else if ( u == '0' ) {

                      return u;
                  }
              }

              if ( b != null ) {

                  if ( !( outOfRange = !( b >= 2 && b < 65 ) ) &&
                    ( b == (b | 0) || !Decimal['errors'] ) ) {
                      str = convertBase( Decimal, str, b | 0, 10, x['s'] );

                      // Avoid '-0'
                      if ( str == '0' ) {

                          return str;
                      }
                  } else {

                      // 'toString() base not an integer: {b}'
                      // 'toString() base out of range: {b}'
                      ifExceptionsThrow( Decimal, 'base', b, 'toString', 0 );
                  }
              }
          }

          return x['s'] < 0 ? '-' + str : str;
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
       *
       */
      P['truncated'] = P['trunc'] = function () {

          return rnd( new this['constructor'](this), this['e'] + 1, 1 );
      };


      /*
       * Return as toString, but do not accept a base argument.
       *
       * Ensures that JSON.stringify() uses toString for serialization.
       *
       */
      P['valueOf'] = P['toJSON'] = function () {

          return this.toString();
      };


      /*
      // Add aliases to match BigDecimal method names.
      P['add'] = P['plus'];
      P['subtract'] = P['minus'];
      P['multiply'] = P['times'];
      P['divide'] = P['div'];
      P['remainder'] = P['mod'];
      P['compareTo'] = P['cmp'];
      P['negate'] = P['neg'];
       */


      // Private functions for Decimal.prototype methods.


      /*
       *  coefficientToString
       *  checkRoundingDigits
       *  checkRM
       *  checkArg
       *  convertBase
       *  div
       *  exp
       *  format
       *  getCoeffLength
       *  ifExceptionsThrow
       *  intPow
       *  ln
       *  rnd
       */


      function coefficientToString(a) {
          var s, z,
              i = 1,
              j = a.length,
              r = a[0] + '';

          for ( ; i < j; i++ ) {
              s = a[i] + '';

              for ( z = LOGBASE - s.length; z--; ) {
                  s = '0' + s;
              }

              r += s;
          }

          // '0'
          for ( j = r.length; r.charCodeAt(--j) === 48; );

          return r.slice( 0, j + 1 || 1 );
      }


      /*
       * Check 5 rounding digits if repeating is null, 4 otherwise.
       * repeating == null if caller is log or pow,
       * repeating != null if caller is ln or exp.
       *
       *
       // Previous, much simpler implementation when coefficient was base 10.
       function checkRoundingDigits( c, i, rm, repeating ) {
           return ( !repeating && rm > 3 && c[i] == 4 ||
             ( repeating || rm < 4 ) && c[i] == 9 ) && c[i + 1] == 9 && c[i + 2] == 9 &&
               c[i + 3] == 9 && ( repeating != null || c[i + 4] == 9 ) ||
                 repeating == null && ( c[i] == 5 || !c[i] ) && !c[i + 1] && !c[i + 2] &&
                   !c[i + 3] && !c[i + 4];
       }
       */
      function checkRoundingDigits( c, i, rm, repeating ) {
          var ci, k, n, r, rd;

          // Get the length of the first element of the array c.
          for ( k = 1, n = c[0]; n >= 10; n /= 10, k++ );

          n = i - k;

          // Is the rounding digit in the first element of c?
          if ( n < 0 ) {
              n += LOGBASE;
              ci = 0;
          } else {
              ci = Math.ceil( ( n + 1 ) / LOGBASE );
              n %= LOGBASE;
          }

          k = mathpow( 10, LOGBASE - n );
          rd = c[ci] % k | 0;

          if ( repeating == null ) {

              if ( n < 3 ) {

                  if ( n == 0 ) {
                      rd = rd / 100 | 0;
                  } else if ( n == 1 ) {
                      rd = rd / 10 | 0;
                  }

                  r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
              } else {
                  r = ( rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2 ) &&
                      ( c[ci + 1] / k / 100 | 0 ) == mathpow( 10, n - 2 ) - 1 ||
                          ( rd == k / 2 || rd == 0 ) && ( c[ci + 1] / k / 100 | 0 ) == 0;
              }
          } else {

              if ( n < 4 ) {

                  if ( n == 0 ) {
                      rd = rd / 1000 | 0;
                  } else if ( n == 1 ) {
                      rd = rd / 100 | 0;
                  } else if ( n == 2 ) {
                      rd = rd / 10 | 0;
                  }

                  r = ( repeating || rm < 4 ) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
              } else {
                  r = ( ( repeating || rm < 4 ) && rd + 1 == k ||
                  ( !repeating && rm > 3 ) && rd + 1 == k / 2 ) &&
                      ( c[ci + 1] / k / 1000 | 0 ) == mathpow( 10, n - 3 ) - 1;
              }
          }

          return r;
      }


      /*
       * Check and return rounding mode. If rm is invalid, return rounding mode rounding.
       */
      function checkRM( x, rm, method ) {
          var Decimal = x['constructor'];

          return rm == null || ( ( outOfRange = rm < 0 || rm > 8 ) ||
            rm !== 0 && ( Decimal['errors'] ? parseInt : parseFloat )(rm) != rm ) &&
              !ifExceptionsThrow( Decimal, 'rounding mode', rm, method, 0 )
                ? Decimal['rounding'] : rm | 0;
      }


      /*
       * Check that argument n is in range, return true or false.
       */
      function checkArg( x, n, method, min ) {
          var Decimal = x['constructor'];

          return !( outOfRange = n < ( min || 0 ) || n >= MAX_DIGITS + 1 ) &&

            /*
             * Include 'n === 0' because Opera has 'parseFloat(-0) == -0' as false
             * despite having 'parseFloat(-0) === -0 && parseFloat('-0') === -0 && 0 == -0' as true.
             */
            ( n === 0 || ( Decimal['errors'] ? parseInt : parseFloat )(n) == n ) ||
              ifExceptionsThrow( Decimal, 'argument', n, method, 0 );
      }


      /*
       * Convert a numeric string of baseIn to a numeric string of baseOut.
       */
      convertBase = (function () {

          /*
           * Convert string of baseIn to an array of numbers of baseOut.
           * Eg. convertBase('255', 10, 16) returns [15, 15].
           * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
           */
          function toBaseOut( str, baseIn, baseOut ) {
              var j,
                  arr = [0],
                  arrL,
                  i = 0,
                  strL = str.length;

              for ( ; i < strL; ) {
                  for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );
                  arr[ j = 0 ] += NUMERALS.indexOf( str.charAt( i++ ) );

                  for ( ; j < arr.length; j++ ) {

                      if ( arr[j] > baseOut - 1 ) {

                          if ( arr[j + 1] == null ) {
                              arr[j + 1] = 0;
                          }
                          arr[j + 1] += arr[j] / baseOut | 0;
                          arr[j] %= baseOut;
                      }
                  }
              }

              return arr.reverse();
          }

          return function ( Decimal, str, baseOut, baseIn, sign ) {
              var e, j, r, x, xc, y,
                  i = str.indexOf( '.' ),
                  pr = Decimal['precision'],
                  rm = Decimal['rounding'];

              if ( baseIn < 37 ) {
                  str = str.toLowerCase();
              }

              // Non-integer.
              if ( i >= 0 ) {
                  str = str.replace( '.', '' );
                  y = new Decimal(baseIn);
                  x = intPow( Decimal, y, str.length - i );

                  /*
                   Convert str as if an integer, then divide the result by its base raised to a power
                   such that the fraction part will be restored.
                   Use toFixed to avoid possible exponential notation.
                   */
                  y['c'] = toBaseOut( x.toFixed(), 10, baseOut );
                  y['e'] = y['c'].length;
              }

              // Convert the number as integer.
              xc = toBaseOut( str, baseIn, baseOut );
              e = j = xc.length;

              // Remove trailing zeros.
              for ( ; xc[--j] == 0; xc.pop() );

              if ( !xc[0] ) {

                  return '0';
              }

              if ( i < 0 ) {
                  e--;
              } else {
                  x['c'] = xc;
                  x['e'] = e;

                  // sign is needed for correct rounding.
                  x['s'] = sign;
                  x = div( x, y, pr, rm, 0, baseOut );
                  xc = x['c'];
                  r = x['r'];
                  e = x['e'];
              }

              // The rounding digit, i.e. the digit after the digit that may be rounded up.
              i = xc[pr];
              j = baseOut / 2;
              r = r || xc[pr + 1] != null;

              if ( rm < 4
                ? ( i != null || r ) && ( rm == 0 || rm == ( sign < 0 ? 3 : 2 ) )
                : i > j || i == j && ( rm == 4 || r || rm == 6 && xc[pr - 1] & 1 ||
                  rm == ( sign < 0 ? 8 : 7 ) ) ) {

                  xc.length = pr;

                  // Rounding up may mean the previous digit has to be rounded up and so on.
                  for ( --baseOut; ++xc[--pr] > baseOut; ) {
                      xc[pr] = 0;

                      if ( !pr ) {
                          ++e;
                          xc.unshift(1);
                      }
                  }
              } else {
                  xc.length = pr;
              }

              // Determine trailing zeros.
              for ( j = xc.length; !xc[--j]; );

              // E.g. [4, 11, 15] becomes 4bf.
              for ( i = 0, str = ''; i <= j; str += NUMERALS.charAt( xc[i++] ) );

              // Negative exponent?
              if ( e < 0 ) {

                  // Prepend zeros.
                  for ( ; ++e; str = '0' + str );

                  str = '0.' + str;

              // Positive exponent?
              } else {
                  i = str.length;

                  if ( ++e > i ) {

                      // Append zeros.
                      for ( e -= i; e-- ; str += '0' );

                  } else if ( e < i ) {
                      str = str.slice( 0, e ) + '.' + str.slice(e);
                  }
              }

              // No negative numbers: the caller will add the sign.
              return str;
          };
      })();



      /*
       * Perform division in the specified base. Called by div and convertBase.
       */
      var div = ( function () {

          // Assumes non-zero x and k, and hence non-zero result.
          function multiplyInteger( x, k, base ) {
              var temp,
                  carry = 0,
                  i = x.length;

              for ( x = x.slice(); i--; ) {
                  temp = x[i] * k + carry;
                  x[i] = temp % base | 0;
                  carry = temp / base | 0;
              }

              if (carry) {
                  x.unshift(carry);
              }

              return x;
          }

          function compare( a, b, aL, bL ) {
              var i, cmp;

              if ( aL != bL ) {
                  cmp = aL > bL ? 1 : -1;
              } else {

                  for ( i = cmp = 0; i < aL; i++ ) {

                      if ( a[i] != b[i] ) {
                          cmp = a[i] > b[i] ? 1 : -1;

                          break;
                      }
                  }
              }

              return cmp;
          }

          function subtract( a, b, aL, base ) {
              var i = 0;

              // Subtract b from a.
              for ( ; aL--; ) {
                  a[aL] -= i;
                  i = a[aL] < b[aL] ? 1 : 0;
                  a[aL] = i * base + a[aL] - b[aL];
              }

              // Remove leading zeros.
              for ( ; !a[0] && a.length > 1; a.shift() );
          }

          // x: dividend, y: divisor.
          return function ( x, y, pr, rm, dp, base ) {
              var cmp, e, i, logbase, more, n, prod, prodL, q, qc, rem, remL, rem0, t, xi, xL, yc0,
                  yL, yz,
                  Decimal = x['constructor'],
                  s = x['s'] == y['s'] ? 1 : -1,
                  xc = x['c'],
                  yc = y['c'];

              // Either NaN, Infinity or 0?
              if ( !xc || !xc[0] || !yc || !yc[0] ) {

                  return new Decimal(

                    // Return NaN if either NaN, or both Infinity or 0.
                    !x['s'] || !y['s'] || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :

                      // Return +-0 if x is 0 or y is +-Infinity, or return +-Infinity as y is 0.
                      xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                  );
              }

              if (base) {
                  logbase = 1;
                  e = x['e'] - y['e'];
              } else {
                  base = BASE;
                  logbase = LOGBASE;
                  e = mathfloor( x['e'] / logbase ) - mathfloor( y['e'] / logbase );
              }

              yL = yc.length;
              xL = xc.length;
              q = new Decimal(s);
              qc = q['c'] = [];

              // Result exponent may be one less then the current value of e.
              // The coefficients of the Decimals from convertBase may have trailing zeros.
              for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );

              if ( yc[i] > ( xc[i] || 0 ) ) {
                  e--;
              }

              if ( pr == null ) {
                  s = pr = Decimal['precision'];
                  rm = Decimal['rounding'];
              } else if (dp) {
                  s = pr + ( x['e'] - y['e'] ) + 1;
              } else {
                  s = pr;
              }

              if ( s < 0 ) {
                  qc.push(1);
                  more = true;
              } else {

                  // Convert base 10 decimal places to base 1e7 decimal places.
                  s = s / logbase + 2 | 0;
                  i = 0;

                  // divisor < 1e7
                  if ( yL == 1 ) {
                      n = 0;
                      yc = yc[0];
                      s++;

                      // 'n' is the carry.
                      for ( ; ( i < xL || n ) && s--; i++ ) {
                          t = n * base + ( xc[i] || 0 );
                          qc[i] = t / yc | 0;
                          n = t % yc | 0;
                      }

                      more = n || i < xL;

                  // divisor >= 1e7
                  } else {

                      // Normalise xc and yc so highest order digit of yc is >= base/2
                      n = base / ( yc[0] + 1 ) | 0;

                      if ( n > 1 ) {
                          yc = multiplyInteger( yc, n, base );
                          xc = multiplyInteger( xc, n, base );
                          yL = yc.length;
                          xL = xc.length;
                      }

                      xi = yL;
                      rem = xc.slice( 0, yL );
                      remL = rem.length;

                      // Add zeros to make remainder as long as divisor.
                      for ( ; remL < yL; rem[remL++] = 0 );

                      yz = yc.slice();
                      yz.unshift(0);
                      yc0 = yc[0];

                      if ( yc[1] >= base / 2 ) {
                          yc0++;
                      }

                      do {
                          n = 0;

                          // Compare divisor and remainder.
                          cmp = compare( yc, rem, yL, remL );

                          // If divisor < remainder.
                          if ( cmp < 0 ) {

                              // Calculate trial digit, n.
                              rem0 = rem[0];

                              if ( yL != remL ) {
                                  rem0 = rem0 * base + ( rem[1] || 0 );
                              }

                              // n will be how many times the divisor goes into the current remainder.
                              n = rem0 / yc0 | 0;

                              /*
                                Algorithm:
                                1. product = divisor * trial digit (n)
                                2. if product > remainder: product -= divisor, n--
                                3. remainder -= product
                                4. if product was < remainder at 2:
                                  5. compare new remainder and divisor
                                  6. If remainder > divisor: remainder -= divisor, n++
                              */

                              if ( n > 1 ) {

                                  if ( n >= base ) {
                                      n = base - 1;
                                  }

                                  // product = divisor * trial digit.
                                  prod = multiplyInteger( yc, n, base );
                                  prodL = prod.length;
                                  remL = rem.length;

                                  // Compare product and remainder.
                                  cmp = compare( prod, rem, prodL, remL );

                                  // product > remainder.
                                  if ( cmp == 1 ) {
                                      n--;

                                      // Subtract divisor from product.
                                      subtract( prod, yL < prodL ? yz : yc, prodL, base );
                                  }
                              } else {

                                  // cmp is -1.
                                  // If n is 0, there is no need to compare yc and rem again below, so change cmp to 1 to avoid it.
                                  // If n is 1 there IS a need to compare yc and rem again below.
                                  if ( n == 0 ) {
                                      cmp = n = 1;
                                  }
                                  prod = yc.slice();
                              }
                              prodL = prod.length;

                              if ( prodL < remL ) {
                                  prod.unshift(0);
                              }

                              // Subtract product from remainder.
                              subtract( rem, prod, remL, base );

                              // If product was < previous remainder.
                              if ( cmp == -1 ) {
                                  remL = rem.length;

                                  // Compare divisor and new remainder.
                                  cmp = compare( yc, rem, yL, remL );

                                  // If divisor < new remainder, subtract divisor from remainder.
                                  if ( cmp < 1 ) {
                                      n++;

                                      // Subtract divisor from remainder.
                                      subtract( rem, yL < remL ? yz : yc, remL, base );
                                  }
                              }

                              remL = rem.length;

                          } else if ( cmp === 0 ) {
                              n++;
                              rem = [0];
                          }    // if cmp === 1, n will be 0

                          // Add the next digit, n, to the result array.
                          qc[i++] = n;

                          // Update the remainder.
                          if ( cmp && rem[0] ) {
                              rem[remL++] = xc[xi] || 0;
                          } else {
                              rem = [ xc[xi] ];
                              remL = 1;
                          }

                      } while ( ( xi++ < xL || rem[0] != null ) && s-- );

                      more = rem[0] != null;
                  }

                  // Leading zero?
                  if ( !qc[0] ) {
                      qc.shift();
                  }
              }

              // If div is being used for base conversion.
              if ( logbase == 1 ) {
                  q['e'] = e;
                  q['r'] = +more;
              } else {

                  // To calculate q.e, first get the number of digits of qc[0].
                  for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );
                  q['e'] = i + e * logbase - 1;

                  rnd( q, dp ? pr + q['e'] + 1 : pr, rm, more );
              }

              return q;
          };
      })();


      /*
       * Taylor/Maclaurin series.
       *
       * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
       *
       * Argument reduction:
       *   Repeat x = x / 32, k += 5, until |x| < 0.1
       *   exp(x) = exp(x / 2^k)^(2^k)
       *
       * Previously, the argument was initially reduced by
       * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
       * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
       * found to be slower than just dividing repeatedly by 32 as above.
       *
       * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
       * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
       * ( Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324 )
       *
       *  exp(Infinity)  = Infinity
       *  exp(-Infinity) = 0
       *  exp(NaN)       = NaN
       *  exp(+-0)       = 1
       *
       *  exp(x) is non-terminating for any finite, non-zero x.
       *
       *  The result will always be correctly rounded.
       *
       */
      function exp( x, pr ) {
          var denom, guard, j, pow, sd, sum, t,
              rep = 0,
              i = 0,
              k = 0,
              Decimal = x['constructor'],
              one = Decimal['ONE'],
              rm = Decimal['rounding'],
              precision = Decimal['precision'];

          // 0/NaN/Infinity?
          if ( !x['c'] || !x['c'][0] || x['e'] > 17 ) {

              return new Decimal( x['c']
                ? !x['c'][0] ? one : x['s'] < 0 ? 0 : 1 / 0
                : x['s'] ? x['s'] < 0 ? 0 : x : NaN );
          }

          if ( pr == null ) {

              /*
               Estimate result exponent.
               e^x = 10^j, where j = x * log10(e) and
               log10(e) = ln(e) / ln(10) = 1 / ln(10),
               so j = x / ln(10)
              j = mathfloor( x / Math.LN10 );

              // Overflow/underflow? Estimate may be +-1 of true value.
              if ( j > Decimal['maxE'] + 1 || j < Decimal['minE'] - 1 ) {

                  return new Decimal( j > 0 ? 1 / 0 : 0 );
              }
               */

              external = false;
              sd = precision;
          } else {
              sd = pr;
          }

          t = new Decimal(0.03125);

          // while abs(x) >= 0.1
          while ( x['e'] > -2 ) {

              // x = x / 2^5
              x = x['times'](t);
              k += 5;
          }

          /*
           Use 2 * log10(2^k) + 5 to estimate the increase in precision necessary to ensure the first
           4 rounding digits are correct.
           */
          guard = Math.log( mathpow( 2, k ) ) / Math.LN10 * 2 + 5 | 0;
          sd += guard;

          denom = pow = sum = new Decimal(one);
          Decimal['precision'] = sd;

          for ( ; ; ) {
              pow = rnd( pow['times'](x), sd, 1 );
              denom = denom['times'](++i);
              t = sum['plus']( div( pow, denom, sd, 1 ) );

              if ( coefficientToString( t['c'] ).slice( 0, sd ) ===
                   coefficientToString( sum['c'] ).slice( 0, sd ) ) {
                  j = k;

                  while ( j-- ) {
                      sum = rnd( sum['times'](sum), sd, 1 );
                  }

                  /*
                   Check to see if the first 4 rounding digits are [49]999.
                   If so, repeat the summation with a higher precision, otherwise
                   E.g. with precision: 18, rounding: 1
                   exp(18.404272462595034083567793919843761) = 98372560.1229999999
                                             when it should be 98372560.123

                   sd - guard is the index of first rounding digit.
                   */
                  if ( pr == null ) {

                      if ( rep < 3 && checkRoundingDigits( sum['c'], sd - guard, rm, rep ) ) {
                          Decimal['precision'] = sd += 10;
                          denom = pow = t = new Decimal(one);
                          i = 0;
                          rep++;
                      } else {

                          return rnd( sum, Decimal['precision'] = precision, rm, external = true );
                      }
                  } else {
                      Decimal['precision'] = precision;

                      return sum;
                  }
              }
              sum = t;
          }
      }


      /*
       * Return a string representing the value of Decimal n in normal or exponential notation
       * rounded to the specified decimal places or significant digits.
       * Called by toString, toExponential (k is 1), toFixed, and toPrecision (k is 2).
       * i is the index (with the value in normal notation) of the digit that may be rounded up.
       * j is the rounding mode, then the number of digits required including fraction-part trailing
       * zeros.
       */
      function format( n, i, j, k ) {
          var s, z,
              Decimal = n['constructor'],
              e = ( n = new Decimal(n) )['e'];

          // i == null when toExponential(no arg), or toString() when x >= toExpPos etc.
          if ( i == null ) {
              j = 0;
          } else {
              rnd( n, ++i, j );

              // If toFixed, n['e'] may have changed if the value was rounded up.
              j = k ? i : i + n['e'] - e;
          }

          e = n['e'];
          s = coefficientToString( n['c'] );

          /*
           toPrecision returns exponential notation if the number of significant digits specified
           is less than the number of digits necessary to represent the integer part of the value
           in normal notation.
           */

          // Exponential notation.
          if ( k == 1 || k == 2 && ( i <= e || e <= Decimal['toExpNeg'] ) ) {

              // Append zeros?
              for ( ; s.length < j; s += '0' );

              if ( s.length > 1 ) {
                  s = s.charAt(0) + '.' + s.slice(1);
              }

              s += ( e < 0 ? 'e' : 'e+' ) + e;

          // Normal notation.
          } else {
              k = s.length;

              // Negative exponent?
              if ( e < 0 ) {
                  z = j - k;

                  // Prepend zeros.
                  for ( ; ++e; s = '0' + s );
                  s = '0.' + s;

              // Positive exponent?
              } else {

                  if ( ++e > k ) {
                      z = j - e;

                      // Append zeros.
                      for ( e -= k; e-- ; s += '0' );

                      if ( z > 0 ) {
                          s += '.';
                      }

                  } else {
                      z = j - k;

                      if ( e < k ) {
                          s = s.slice( 0, e ) + '.' + s.slice(e);
                      } else if ( z > 0 ) {
                          s += '.';
                      }
                  }
              }

              // Append more zeros?
              if ( z > 0 ) {

                  for ( ; z--; s += '0' );
              }
          }

          return n['s'] < 0 && n['c'][0] ? '-' + s : s;
      }


      function getCoeffLength(c) {
          var v = c.length - 1,
              n = v * LOGBASE + 1;

          if ( v = c[v] ) {

              // Subtract the number of trailing zeros of the last number.
              for ( ; v % 10 == 0; v /= 10, n-- );

              // Add the number of digits of the first number.
              for ( v = c[0]; v >= 10; v /= 10, n++ );
          }

          return n;
      }


      /*
       * Assemble error messages. Throw Decimal Errors.
       */
      function ifExceptionsThrow( Decimal, message, arg, method, more ) {

          if ( Decimal['errors'] ) {
              var error = new Error( ( method || [
                'new Decimal', 'cmp', 'div', 'eq', 'gt', 'gte', 'lt', 'lte', 'minus', 'mod',
                'plus', 'times', 'toFraction', 'pow', 'random', 'log', 'sqrt', 'toNearest', 'divToInt'
                ][ id ? id < 0 ? -id : id : 1 / id < 0 ? 1 : 0 ] ) + '() ' + ( [
                'number type has more than 15 significant digits', 'LN10 out of digits' ][message]
                || message + ( [ outOfRange ? ' out of range' : ' not an integer',
                ' not a boolean or binary digit' ][more] || '' ) ) + ': ' + arg
              );
              error['name'] = 'Decimal Error';
              outOfRange = id = 0;

              throw error;
          }
      }




      /*
       * Use 'exponentiation by squaring' for small integers. Called by convertBase and pow.
       */
      function intPow( Decimal, x, i ) {
          var r = new Decimal( Decimal['ONE'] );

          for ( external = false; ; ) {

              if ( i & 1 ) {
                  r = r['times'](x);
              }
              i >>= 1;

              if ( !i ) {

                  break;
              }
              x = x['times'](x);
          }
          external = true;

          return r;
      }


      /*
       *  ln(-n)        = NaN
       *  ln(0)         = -Infinity
       *  ln(-0)        = -Infinity
       *  ln(1)         = 0
       *  ln(Infinity)  = Infinity
       *  ln(-Infinity) = NaN
       *  ln(NaN)       = NaN
       *
       *  ln(n) (n != 1) is non-terminating.
       *
       */
      function ln( y, pr ) {
          var c, c0, denom, e, num, rep, sd, sum, t, x1, x2,
              n = 1,
              guard = 10,
              x = y,
              xc = x['c'],
              Decimal = x['constructor'],
              one = Decimal['ONE'],
              rm = Decimal['rounding'],
              precision = Decimal['precision'];

          // x < 0 or +-Infinity/NaN or 0 or 1.
          if ( x['s'] < 0 || !xc || !xc[0] || !x['e'] && xc[0] == 1 && xc.length == 1 ) {

              return new Decimal( xc && !xc[0] ? -1 / 0 : x['s'] != 1 ? NaN : xc ? 0 : x );
          }

          if ( pr == null ) {
              external = false;
              sd = precision;
          } else {
              sd = pr;
          }

          Decimal['precision'] = sd += guard;

          c = coefficientToString(xc);
          c0 = c.charAt(0);

          if ( Math.abs( e = x['e'] ) < 1.5e15 ) {

              /*
               Argument reduction.
               The series converges faster the closer the argument is to 1, so using
               ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
               multiply the argument by itself until the leading digits of the significand are 7, 8,
               9, 10, 11, 12 or 13, recording the number of multiplications so the sum of the series
               can later be divided by this number, then separate out the power of 10 using
               ln(a*10^b) = ln(a) + b*ln(10).
               */

              // max n is 21 ( gives 0.9, 1.0 or 1.1 ) ( 9e15 / 21 = 4.2e14 ).
              //while ( c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1 ) {
              // max n is 6 ( gives 0.7 - 1.3 )
              while ( c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3 ) {
                  x = x['times'](y);
                  c = coefficientToString( x['c'] );
                  c0 = c.charAt(0);
                  n++;
              }

              e = x['e'];

              if ( c0 > 1 ) {
                  x = new Decimal( '0.' + c );
                  e++;
              } else {
                  x = new Decimal( c0 + '.' + c.slice(1) );
              }
          } else {

              /*
               The argument reduction method above may result in overflow if the argument y is a
               massive number with exponent >= 1500000000000000 ( 9e15 / 6 = 1.5e15 ), so instead
               recall this function using ln(x*10^e) = ln(x) + e*ln(10).
               */
              x = new Decimal( c0 + '.' + c.slice(1) );

              if ( sd + 2 > LN10.length ) {
                  ifExceptionsThrow( Decimal, 1, sd + 2, 'ln' );
              }

              x = ln( x, sd - guard )['plus'](
                  new Decimal( LN10.slice( 0, sd + 2 ) )['times']( e + '' )
              );

              Decimal['precision'] = precision;

              return pr == null ? rnd( x, precision, rm, external = true ) : x;
          }

          // x1 is x reduced to a value near 1.
          x1 = x;

          /*
           Taylor series.
           ln(y) = ln( (1 + x)/(1 - x) ) = 2( x + x^3/3 + x^5/5 + x^7/7 + ... )
           where
           x = (y - 1)/(y + 1)              ( |x| < 1 )
           */
          sum = num = x = div( x['minus'](one), x['plus'](one), sd, 1 );
          x2 = rnd( x['times'](x), sd, 1 );
          denom = 3;

          for ( ; ; ) {
              num = rnd( num['times'](x2), sd, 1 );
              t = sum['plus']( div( num, new Decimal(denom), sd, 1 ) );

              if ( coefficientToString( t['c'] ).slice( 0, sd ) ===
                   coefficientToString( sum['c'] ).slice( 0, sd ) ) {
                  sum = sum['times'](2);

                  /*
                   Reverse the argument reduction. Check that e is not 0 because, as well as
                   preventing an unnecessary calculation, -0 + 0 = +0 and to ensure correct
                   rounding later -0 needs to stay -0.
                   */
                  if ( e !== 0 ) {

                      if ( sd + 2 > LN10.length ) {
                          ifExceptionsThrow( Decimal, 1, sd + 2, 'ln' );
                      }

                      sum = sum['plus'](
                          new Decimal( LN10.slice( 0, sd + 2 ) )['times']( e + '' )
                      );
                  }

                  sum = div( sum, new Decimal(n), sd, 1 );

                  /*
                   Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
                   been repeated previously) and the first 4 rounding digits 9999?

                   If so, restart the summation with a higher precision, otherwise
                   e.g. with precision: 12, rounding: 1
                   ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.

                   sd - guard is the index of first rounding digit.
                   */
                  if ( pr == null ) {

                      if ( checkRoundingDigits( sum['c'], sd - guard, rm, rep ) ) {
                          Decimal['precision'] = sd += guard;
                          t = num = x = div( x1['minus'](one), x1['plus'](one), sd, 1 );
                          x2 = rnd( x['times'](x), sd, 1 );
                          denom = rep = 1;
                      } else {

                          return rnd( sum, Decimal['precision'] = precision, rm, external = true );
                      }
                  } else {
                      Decimal['precision'] = precision;

                      return sum;
                  }
              }

              sum = t;
              denom += 2;
          }
      }


      /*
       * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
       */
       function rnd( x, sd, rm, r ) {
          var digits, i, j, k, n, rd, xc, xci,
              Decimal = x['constructor'];

          // Don't round if sd is null or undefined.
          out: if ( sd != null ) {

              // Infinity/NaN.
              if ( !( xc = x['c'] ) ) {

                  return x;
              }

              /*
               rd, the rounding digit, i.e. the digit after the digit that may be rounded up,
               n, a base 1e7 number, the element of xc containing rd,
               xci, the index of n within xc,
               digits, the number of digits of n,
               i, what would be the index of rd within n if all the numbers were 7 digits long (i.e. they had leading zeros)
               j, if > 0, the actual index of rd within n (if < 0, rd is a leading zero),
               nLeadingZeros, the number of leading zeros n would have if it were 7 digits long.
               */

              // Get the length of the first element of the coefficient array xc.
              for ( digits = 1, k = xc[0]; k >= 10; k /= 10, digits++ );

              i = sd - digits;

              // Is the rounding digit in the first element of xc?
              if ( i < 0 ) {
                  i += LOGBASE;
                  j = sd;
                  n = xc[ xci = 0 ];

                  // Get the rounding digit at index j of n.
                  rd = n / mathpow( 10, digits - j - 1 ) % 10 | 0;
              } else {
                  xci = Math.ceil( ( i + 1 ) / LOGBASE );

                  if ( xci >= xc.length ) {

                      if (r) {

                          // Needed by exp, ln and sqrt.
                          for ( ; xc.length <= xci; xc.push(0) );

                          n = rd = 0;
                          digits = 1;
                          i %= LOGBASE;
                          j = i - LOGBASE + 1;
                      } else {

                        break out;
                      }
                  } else {
                      n = k = xc[xci];

                      // Get the number of digits of n.
                      for ( digits = 1; k >= 10; k /= 10, digits++ );

                      // Get the index of rd within n.
                      i %= LOGBASE;

                      // Get the index of rd within n, adjusted for leading zeros.
                      // The number of leading zeros of n is given by LOGBASE - digits.
                      j = i - LOGBASE + digits;

                      // Get the rounding digit at index j of n.
                      // Floor using Math.floor instead of | 0 as rd may be outside int range.
                      rd = j < 0 ? 0 : mathfloor( n / mathpow( 10, digits - j - 1 ) % 10 );
                  }
              }

              r = r || sd < 0 ||
                // Are there any non-zero digits after the rounding digit?
                xc[xci + 1] != null || ( j < 0 ? n : n % mathpow( 10, digits - j - 1 ) );

              /*
               The expression  n % mathpow( 10, digits - j - 1 )  returns all the digits of n to the
               right of the digit at (left-to-right) index j,
               e.g. if n is 908714 and j is 2, the expression will give 714.
               */

              r = rm < 4
                ? ( rd || r ) && ( rm == 0 || rm == ( x['s'] < 0 ? 3 : 2 ) )
                : rd > 5 || rd == 5 && ( rm == 4 || r ||
                  // Check whether the digit to the left of the rounding digit is odd.
                  rm == 6 && ( ( i > 0 ? j > 0 ? n / mathpow( 10, digits - j ) : 0 : xc[xci - 1] ) % 10 ) & 1 ||
                    rm == ( x['s'] < 0 ? 8 : 7 ) );

              if ( sd < 1 || !xc[0] ) {
                  xc.length = 0;

                  if (r) {

                      // Convert sd to decimal places.
                      sd -= x['e'] + 1;

                      // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                      xc[0] = mathpow( 10, ( LOGBASE - sd % LOGBASE ) % LOGBASE );
                      x['e'] = -sd || 0;
                  } else {

                      // Zero.
                      xc[0] = x['e'] = 0;
                  }

                  return x;
              }

              // Remove excess digits.

              if ( i == 0 ) {
                  xc.length = xci;
                  k = 1;
                  xci--;
              } else {
                  xc.length = xci + 1;
                  k = mathpow( 10, LOGBASE - i );

                  // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                  // j > 0 means i > number of leading zeros of n.
                  xc[xci] = j > 0 ? ( n / mathpow( 10, digits - j ) % mathpow( 10, j ) | 0 ) * k : 0;
              }

              // Round up?
              if (r) {

                  for ( ; ; ) {

                      // Is the digit to be rounded up in the first element of xc?
                      if ( xci == 0 ) {

                          // i will be the length of xc[0] before k is added.
                          for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );

                          j = xc[0] += k;

                          for ( k = 1; j >= 10; j /= 10, k++ );

                          // if i != k the length has increased.
                          if ( i != k ) {
                              x['e']++;

                              if ( xc[0] == BASE ) {
                                  xc[0] = 1;
                              }
                          }

                          break;
                      } else {
                          xc[xci] += k;

                          if ( xc[xci] != BASE ) {

                              break;
                          }

                          xc[xci--] = 0;
                          k = 1;
                      }
                  }
              }

              // Remove trailing zeros.
              for ( i = xc.length; xc[--i] === 0; xc.pop() );
          }

          if (external) {

              // Overflow?
              if ( x['e'] > Decimal['maxE'] ) {

                  // Infinity.
                  x['c'] = x['e'] = null;

              // Underflow?
              } else if ( x['e'] < Decimal['minE'] ) {

                  // Zero.
                  x['c'] = [ x['e'] = 0 ];
              }
          }

          return x;
      }


      decimal = (function () {


          // Private functions used by static Decimal methods.


          /*
           *  The following emulations or wrappers of Math object functions are currently
           *  commented-out and not in the public API.
           *
           *  abs
           *  acos
           *  asin
           *  atan
           *  atan2
           *  ceil
           *  cos
           *  floor
           *  round
           *  sin
           *  tan
           *  trunc
           */


          /*
           * Return a new Decimal whose value is the absolute value of n.
           *
           * n {number|string|Decimal}
           *
          function abs(n) { return new this(n)['abs']() }
           */


          /*
           * Return a new Decimal whose value is the arccosine in radians of n.
           *
           * n {number|string|Decimal}
           *
          function acos(n) { return new this( Math.acos(n) + '' ) }
           */


          /*
           * Return a new Decimal whose value is the arcsine in radians of n.
           *
           * n {number|string|Decimal}
           *
          function asin(n) { return new this( Math.asin(n) + '' ) }
           */


          /*
           * Return a new Decimal whose value is the arctangent in radians of n.
           *
           * n {number|string|Decimal}
           *
          function atan(n) { return new this( Math.atan(n) + '' ) }
           */


          /*
           * Return a new Decimal whose value is the arctangent in radians of y/x in the range
           * -PI to PI (inclusive).
           *
           * y {number|string|Decimal} The y-coordinate.
           * x {number|string|Decimal} The x-coordinate.
           *
          function atan2( y, x ) { return new this( Math.atan2( y, x ) + '' ) }
           */


          /*
           * Return a new Decimal whose value is n round to an integer using ROUND_CEIL.
           *
           * n {number|string|Decimal}
           *
          function ceil(n) { return new this(n)['ceil']() }
           */


          /*
           * Configure global settings for a Decimal constructor.
           *
           * obj is an object with any of the following properties,
           *
           *   precision  {number}
           *   rounding   {number}
           *   toExpNeg   {number}
           *   toExpPos   {number}
           *   minE       {number}
           *   maxE       {number}
           *   errors     {boolean|number}
           *   crypto     {boolean|number}
           *   modulo     {number}
           *
           *   format     {object}     See Decimal.prototype.toFormat
           *      decimalSeparator       {string}
           *      groupSeparator         {string}
           *      groupSize              {number}
           *      secondaryGroupSize     {number}
           *      fractionGroupSeparator {string}
           *      fractionGroupSize      {number}
           *
           *   A format object will replace the existing Decimal.format object without any property
           *   checking.
           *
           * E.g.
           *   Decimal.config({ precision: 20, rounding: 4 })
           *
           */
          function config(obj) {
              var p, u, v,
                  Decimal = this,
                  c = 'config',
                  parse = Decimal['errors'] ? parseInt : parseFloat;

              if ( obj == u || typeof obj != 'object' &&
                // 'config() object expected: {obj}'
                !ifExceptionsThrow( Decimal, 'object expected', obj, c ) ) {

                  return Decimal;
              }

              // precision {number} Integer, 1 to MAX_DIGITS inclusive.
              if ( ( v = obj[ p = 'precision' ] ) != u ) {

                  if ( !( outOfRange = v < 1 || v > MAX_DIGITS ) && parse(v) == v ) {
                      Decimal[p] = v | 0;
                  } else {

                      // 'config() precision not an integer: {v}'
                      // 'config() precision out of range: {v}'
                      ifExceptionsThrow( Decimal, p, v, c, 0 );
                  }
              }

              // rounding {number} Integer, 0 to 8 inclusive.
              if ( ( v = obj[ p = 'rounding' ] ) != u ) {

                  if ( !( outOfRange = v < 0 || v > 8 ) && parse(v) == v ) {
                      Decimal[p] = v | 0;
                  } else {

                      // 'config() rounding not an integer: {v}'
                      // 'config() rounding out of range: {v}'
                      ifExceptionsThrow( Decimal, p, v, c, 0 );
                  }
              }

              // toExpNeg {number} Integer, -EXP_LIMIT to 0 inclusive.
              if ( ( v = obj[ p = 'toExpNeg' ] ) != u ) {

                  if ( !( outOfRange = v < -EXP_LIMIT || v > 0 ) && parse(v) == v ) {
                      Decimal[p] = mathfloor(v);
                  } else {

                      // 'config() toExpNeg not an integer: {v}'
                      // 'config() toExpNeg out of range: {v}'
                      ifExceptionsThrow( Decimal, p, v, c, 0 );
                  }
              }

              // toExpPos {number} Integer, 0 to EXP_LIMIT inclusive.
              if ( ( v = obj[ p = 'toExpPos' ] ) != u ) {

                  if ( !( outOfRange = v < 0 || v > EXP_LIMIT ) && parse(v) == v ) {
                      Decimal[p] = mathfloor(v);
                  } else {

                      // 'config() toExpPos not an integer: {v}'
                      // 'config() toExpPos out of range: {v}'
                      ifExceptionsThrow( Decimal, p, v, c, 0 );
                  }
              }

               // minE {number} Integer, -EXP_LIMIT to 0 inclusive.
              if ( ( v = obj[ p = 'minE' ] ) != u ) {

                  if ( !( outOfRange = v < -EXP_LIMIT || v > 0 ) && parse(v) == v ) {
                      Decimal[p] = mathfloor(v);
                  } else {

                      // 'config() minE not an integer: {v}'
                      // 'config() minE out of range: {v}'
                      ifExceptionsThrow( Decimal, p, v, c, 0 );
                  }
              }

              // maxE {number} Integer, 0 to EXP_LIMIT inclusive.
              if ( ( v = obj[ p = 'maxE' ] ) != u ) {

                  if ( !( outOfRange = v < 0 || v > EXP_LIMIT ) && parse(v) == v ) {
                      Decimal[p] = mathfloor(v);
                  } else {

                      // 'config() maxE not an integer: {v}'
                      // 'config() maxE out of range: {v}'
                      ifExceptionsThrow( Decimal, p, v, c, 0 );
                  }
              }

              // errors {boolean|number} true, false, 1 or 0.
              if ( ( v = obj[ p = 'errors' ] ) != u ) {

                  if ( v === !!v || v === 1 || v === 0 ) {
                      outOfRange = id = 0;
                      Decimal[p] = !!v;
                  } else {

                      // 'config() errors not a boolean or binary digit: {v}'
                      ifExceptionsThrow( Decimal, p, v, c, 1 );
                  }
              }

              // crypto {boolean|number} true, false, 1 or 0.
              if ( ( v = obj[ p = 'crypto' ] ) != u ) {

                  if ( v === !!v || v === 1 || v === 0 ) {
                      Decimal[p] = !!( v && crypto && typeof crypto == 'object' );
                  } else {

                      // 'config() crypto not a boolean or binary digit: {v}'
                      ifExceptionsThrow( Decimal, p, v, c, 1 );
                  }
              }

              // modulo {number} Integer, 0 to 9 inclusive.
              if ( ( v = obj[ p = 'modulo' ] ) != u ) {

                  if ( !( outOfRange = v < 0 || v > 9 ) && parse(v) == v ) {
                      Decimal[p] = v | 0;
                  } else {

                      // 'config() modulo not an integer: {v}'
                      // 'config() modulo out of range: {v}'
                      ifExceptionsThrow( Decimal, p, v, c, 0 );
                  }
              }

              // format {object}
              if ( ( obj = obj[ p = 'format' ] ) != u ) {

                  if ( typeof obj == 'object' ) {
                      Decimal[p] = obj;
                  } else {

                      // 'config() format object expected: {obj}'
                      ifExceptionsThrow( Decimal, 'format object expected', obj, c );
                  }
              }

              return Decimal;
          }


          /*
           * Return a new Decimal whose value is the cosine of n.
           *
           * n {number|string|Decimal} A number given in radians.
           *
          function cos(n) { return new this( Math.cos(n) + '' ) }
           */


          /*
           * Return a new Decimal whose value is the exponential of n,
           *
           * n {number|string|Decimal} The power to which to raise the base of the natural log.
           *
           */
          function exp(n) { return new this(n)['exp'](); }


          /*
           * Return a new Decimal whose value is n round to an integer using ROUND_FLOOR.
           *
           * n {number|string|Decimal}
           *
          function floor(n) { return new this(n)['floor']() }
           */




          /*
           * Return a new Decimal whose value is the natural logarithm of n.
           *
           * n {number|string|Decimal}
           *
           */
          function ln(n) { return new this(n)['ln'](); }


          /*
           * Return a new Decimal whose value is the log of x to the base y, or to base 10 if no
           * base is specified.
           *
           * log[y](x)
           *
           * x {number|string|Decimal} The argument of the logarithm.
           * y {number|string|Decimal} The base of the logarithm.
           *
           */
          function log( x, y ) { return new this(x)['log'](y); }


          /*
           * Handle max and min. ltgt is 'lt' or 'gt'.
           */
          function maxOrMin( Decimal, args, ltgt ) {
              var m, n,
                  i = 0;

              if ( toString.call( args[0] ) == '[object Array]' ) {
                  args = args[0];
              }

              m = new Decimal( args[0] );

              for ( ; ++i < args.length; ) {
                  n = new Decimal( args[i] );

                  if ( !n['s'] ) {
                      m = n;

                      break;
                  } else if ( m[ltgt](n) ) {
                      m = n;
                  }
              }

              return m;
          }


          /*
           * Return a new Decimal whose value is the maximum of the arguments.
           *
           * arguments {number|string|Decimal}
           *
           */
          function max() { return maxOrMin( this, arguments, 'lt' ); }


          /*
           * Return a new Decimal whose value is the minimum of the arguments.
           *
           * arguments {number|string|Decimal}
           *
           */
          function min() { return maxOrMin( this, arguments, 'gt' ); }


          /*
           * Parse the value of a new Decimal from a number or string.
           */
          var parseDecimal = (function () {
              var isValid = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
                  trim = String.prototype.trim ||
                    function () { return this.replace(/^\s+|\s+$/g, ''); };

              return function ( Decimal, x, n, b ) {
                  var d, e, i, isNum, orig, valid;

                  if ( typeof n != 'string' ) {

                      // If n is a number, check if minus zero.
                      n = ( isNum = typeof n == 'number' || toString.call(n) == '[object Number]' ) &&
                          n === 0 && 1 / n < 0 ? '-0' : n + '';
                  }
                  orig = n;

                  if ( b == null && isValid.test(n) ) {

                      // Determine sign.
                      x['s'] = n.charCodeAt(0) === 45 ? ( n = n.slice(1), -1 ) : 1;

                  // Either n is not a valid Decimal or a base has been specified.
                  } else {

                      /*
                       Enable exponential notation to be used with base 10 argument.
                       Ensure return value is rounded to precision as with other bases.
                       */
                      if ( b == 10 ) {

                          return rnd( new Decimal(n), Decimal['precision'], Decimal['rounding'] );
                      }

                      n = trim.call(n).replace( /^\+(?!-)/, '' );

                      x['s'] = n.charCodeAt(0) === 45 ? ( n = n.replace( /^-(?!-)/, '' ), -1 ) : 1;

                      if ( b != null ) {

                          if ( ( b == (b | 0) || !Decimal['errors'] ) &&
                            !( outOfRange = !( b >= 2 && b < 65 ) ) ) {
                              d = '[' + NUMERALS.slice( 0, b = b | 0 ) + ']+';

                             // Remove the `.` from e.g. '1.', and replace e.g. '.1' with '0.1'.
                              n = n.replace( /\.$/, '' ).replace( /^\./, '0.' );

                              // Any number in exponential form will fail due to the e+/-.
                              if ( valid = new RegExp(
                                '^' + d + '(?:\\.' + d + ')?$', b < 37 ? 'i' : '' ).test(n) ) {

                                  if (isNum) {

                                      if ( n.replace( /^0\.0*|\./, '' ).length > 15 ) {

                                          // '{method} number type has more than 15 significant digits: {n}'
                                          ifExceptionsThrow( Decimal, 0, orig );
                                      }

                                      // Prevent later check for length on converted number.
                                      isNum = !isNum;
                                  }
                                  n = convertBase( Decimal, n, 10, b, x['s'] );

                              } else if ( n != 'Infinity' && n != 'NaN' ) {

                                  // '{method} not a base {b} number: {n}'
                                  ifExceptionsThrow( Decimal, 'not a base ' + b + ' number', orig );
                                  n = 'NaN';
                              }
                          } else {

                              // '{method} base not an integer: {b}'
                              // '{method} base out of range: {b}'
                              ifExceptionsThrow( Decimal, 'base', b, 0, 0 );

                              // Ignore base.
                              valid = isValid.test(n);
                          }
                      } else {
                          valid = isValid.test(n);
                      }

                      if ( !valid ) {

                          // Infinity/NaN
                          x['c'] = x['e'] = null;

                          // NaN
                          if ( n != 'Infinity' ) {

                              // No exception on NaN.
                              if ( n != 'NaN' ) {

                                  // '{method} not a number: {n}'
                                  ifExceptionsThrow( Decimal, 'not a number', orig );
                              }
                              x['s'] = null;
                          }
                          id = 0;

                          return x;
                      }
                  }

                  // Decimal point?
                  if ( ( e = n.indexOf('.') ) > -1 ) {
                      n = n.replace( '.', '' );
                  }

                  // Exponential form?
                  if ( ( i = n.search(/e/i) ) > 0 ) {

                      // Determine exponent.
                      if ( e < 0 ) {
                          e = i;
                      }
                      e += +n.slice( i + 1 );
                      n = n.substring( 0, i );

                  } else if ( e < 0 ) {

                      // Integer.
                      e = n.length;
                  }

                  // Determine leading zeros.
                  for ( i = 0; n.charCodeAt(i) === 48; i++ );

                  // Determine trailing zeros.
                  for ( b = n.length; n.charCodeAt(--b) === 48; );

                  n = n.slice( i, b + 1 );

                  if (n) {
                      b = n.length;

                      // Disallow numbers with over 15 significant digits if number type.
                      if ( isNum && b > 15 ) {

                          // '{method} number type has more than 15 significant digits: {n}'
                          ifExceptionsThrow( Decimal, 0, orig );
                      }

                      x['e'] = e = e - i - 1;
                      x['c'] = [];

                      // Transform base

                      // e is the base 10 exponent.
                      // i is where to slice n to get the first element of the coefficient array.
                      i = ( e + 1 ) % LOGBASE;

                      if ( e < 0 ) {
                          i += LOGBASE;
                      }

                      // b is n.length.
                      if ( i < b ) {

                          if (i) {
                              x['c'].push( +n.slice( 0, i ) );
                          }

                          for ( b -= LOGBASE; i < b; ) {
                              x['c'].push( +n.slice( i, i += LOGBASE ) );
                          }

                          n = n.slice(i);
                          i = LOGBASE - n.length;
                      } else {
                          i -= b;
                      }

                      for ( ; i--; n += '0' );

                      x['c'].push( +n );

                      if (external) {

                          // Overflow?
                          if ( x['e'] > Decimal['maxE'] ) {

                              // Infinity.
                              x['c'] = x['e'] = null;

                          // Underflow?
                          } else if ( x['e'] < Decimal['minE'] ) {

                              // Zero.
                              x['c'] = [ x['e'] = 0 ];
                          }
                      }
                  } else {

                      // Zero.
                      x['c'] = [ x['e'] = 0 ];
                  }
                  id = 0;

                  return x;
              };
          })();


          /*
           * Return a new Decimal whose value is x raised to the power y.
           *
           * x {number|string|Decimal} The base.
           * y {number|string|Decimal} The exponent.
           *
           */
          function pow( x, y ) { return new this(x)['pow'](y); }


          /*
           * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and
           * with dp, or Decimal.precision if dp is omitted, decimal places (or less if trailing
           * zeros are produced).
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
           *
           */
          function random(dp) {
              var a, n, v,
                  i = 0,
                  r = [],
                  Decimal = this,
                  rand = new Decimal( Decimal['ONE'] );

              if ( dp == null || !checkArg( rand, dp, 'random' ) ) {
                  dp = Decimal['precision'];
              } else {
                  dp |= 0;
              }

              n = Math.ceil( dp / LOGBASE );

              if ( Decimal['crypto'] ) {

                  // Browsers supporting crypto.getRandomValues.
                  if ( crypto && crypto['getRandomValues'] ) {

                      a = crypto['getRandomValues']( new Uint32Array(n) );

                      for ( ; i < n; ) {
                          v = a[i];

                          // 0 <= v < 4294967296
                          // Probability that v >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
                          if ( v >= 4.29e9 ) {

                              a[i] = crypto['getRandomValues']( new Uint32Array(1) )[0];
                          } else {

                              // 0 <= v <= 4289999999
                              // 0 <= ( v % 1e7 ) <= 9999999
                              r[i++] = v % 1e7;
                          }
                      }

                  // Node.js supporting crypto.randomBytes.
                  } else if ( crypto && crypto['randomBytes'] ) {

                      // buffer
                      a = crypto['randomBytes']( n *= 4 );

                      for ( ; i < n; ) {

                          // 0 <= v < 2147483648
                          v = a[i] + ( a[i + 1] << 8 ) + ( a[i + 2] << 16 ) +
                              ( ( a[i + 3] & 0x7f ) << 24 );

                          // Probability that v >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
                          if ( v >= 2.14e9 ) {
                              crypto['randomBytes'](4).copy( a, i );
                          } else {

                              // 0 <= v <= 2139999999
                              // 0 <= ( v % 1e7 ) <= 9999999
                              r.push( v % 1e7 );
                              i += 4;
                          }
                      }
                      i = n / 4;

                  } else {
                      ifExceptionsThrow( Decimal, 'crypto unavailable', crypto, 'random' );
                  }
              }

              // Use Math.random: either Decimal.crypto is false or crypto is unavailable and errors is false.
              if (!i) {

                  for ( ; i < n; ) {
                      r[i++] = Math.random() * 1e7 | 0;
                  }
              }

              n = r[--i];
              dp %= LOGBASE;

              // Convert trailing digits to zeros according to dp.
              if ( n && dp ) {
                  v = mathpow( 10, LOGBASE - dp );
                  r[i] = ( n / v | 0 ) * v;
              }

              // Remove trailing elements which are zero.
              for ( ; r[i] === 0; i-- ) {
                  r.pop();
              }

              // Zero?
              if ( i < 0 ) {
                  r = [ n = 0 ];
              } else {
                  n = -1;

                  // Remove leading elements which are zero and adjust exponent accordingly.
                  for ( ; r[0] === 0; ) {
                      r.shift();
                      n -= LOGBASE;
                  }

                  // Count the digits of the first element of r to determine leading zeros.
                  for ( i = 1, v = r[0]; v >= 10; ) {
                      v /= 10;
                      i++;
                  }

                  // Adjust the exponent for leading zeros of the first element of r.
                  if ( i < LOGBASE ) {
                      n -= LOGBASE - i;
                  }
              }

              rand['e'] = n;
              rand['c'] = r;

              return rand;
          }


          /*
           * Return a new Decimal whose value is n round to an integer using rounding mode rounding.
           *
           * To emulate Math.round, set rounding to 7 (ROUND_HALF_CEIL).
           *
           * n {number|string|Decimal}
           *
          function round(n) {
              var x = new this(n);

              return rnd( x, x['e'] + 1, this['rounding'] );
          }
           */


          /*
           * Return a new Decimal whose value is the sine of n.
           *
           * n {number|string|Decimal} A number given in radians.
           *
          function sin(n) { return new this( Math.sin(n) + '' ) }
           */


          /*
           * Return a new Decimal whose value is the square root of n.
           *
           * n {number|string|Decimal}
           *
           */
          function sqrt(n) { return new this(n)['sqrt'](); }


          /*
           * Return a new Decimal whose value is the tangent of n.
           *
           * n {number|string|Decimal} A number given in radians.
           *
          function tan(n) { return new this( Math.tan(n) + '' ) }
           */


          /*
           * Return a new Decimal whose value is n truncated to an integer.
           *
           * n {number|string|Decimal}
           *
          function trunc(n) { return new this(n)['trunc']() }
           */


          /*
           * Create and return a Decimal constructor.
           *
           */
          function decimalFactory(obj) {

              /*
               * The Decimal constructor and exported function.
               * Create and return a new instance of a Decimal object.
               *
               * n {number|string|Decimal} A numeric value.
               * [b] {number} The base of n. Integer, 2 to 64 inclusive.
               *
               */
              function Decimal( n, b ) {
                  var x = this;

                  // Constructor called without new.
                  if ( !( x instanceof Decimal ) ) {
                      ifExceptionsThrow( Decimal, 'Decimal called without new', n );

                      return new Decimal( n, b );
                  }

                  // Retain a reference to this Decimal constructor, and shadow
                  // Decimal.prototype.constructor which points to Object.
                  x['constructor'] = Decimal;

                  // Duplicate.
                  if ( n instanceof Decimal ) {

                      if ( b == null ) {
                          id = 0;
                          x['s'] = n['s'];
                          x['e'] = n['e'];
                          x['c'] = ( n = n['c'] ) ? n.slice() : n;

                          return x;
                      } else if ( b == 10 ) {

                          return rnd( new Decimal(n), Decimal['precision'], Decimal['rounding'] );
                      } else {
                          n += '';
                      }
                  }

                  return parseDecimal( Decimal, x, n, b );
              }


              /* ************************ CONSTRUCTOR DEFAULT PROPERTIES ************************** */

              /*
               These default values must be integers within the stated ranges (inclusive).
               Most of these values can be changed during run-time using Decimal.config.
               */

              /*
               The maximum number of significant digits of the result of a calculation or base
               conversion.
               E.g.  Decimal.config({ precision: 20 })
               */
              Decimal['precision'] = 20;                        // 1 to MAX_DIGITS

              /*
               The rounding mode used when rounding to precision.

               ROUND_UP         0 Away from zero.
               ROUND_DOWN       1 Towards zero.
               ROUND_CEIL       2 Towards +Infinity.
               ROUND_FLOOR      3 Towards -Infinity.
               ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
               ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
               ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
               ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
               ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.

               E.g.
               Decimal.rounding = 4;
               Decimal.rounding = Decimal.ROUND_HALF_UP;
               */
              Decimal['rounding'] = 4;                          // 0 to 8

              /*
               The modulo mode used when calculating the modulus: a mod n.
               The quotient (q = a / n) is calculated according to the corresponding rounding mode.
               The remainder (r) is calculated as: r = a - n * q.

               UP         0 The remainder is positive if the dividend is negative, else is negative.
               DOWN       1 The remainder has the same sign as the dividend.
                            This modulo mode is commonly known as "truncated division" and matches
                            as closely as possible, the behaviour of JS remainder operator (a % n).
               FLOOR      3 The remainder has the same sign as the divisor (Python %).
               HALF_EVEN  6 This modulo mode implements the IEEE 754 remainder function.
               EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)).
                            The remainder is always positive.

               The above modes - truncated division, floored division, Euclidian division and IEEE 754
               remainder - are commonly used for the modulus operation. Although any other of the
               rounding modes can be used, they may not give useful results.
               */
              Decimal['modulo'] = 1;                            // 0 to 9

              // The exponent value at and beneath which toString returns exponential notation.
              // Number type: -7
              Decimal['toExpNeg'] = -7;                         // 0 to -EXP_LIMIT

              // The exponent value at and above which toString returns exponential notation.
              // Number type: 21
              Decimal['toExpPos'] = 21;                         // 0 to EXP_LIMIT

              // The minimum exponent value, beneath which underflow to zero occurs.
              // Number type: -324  (5e-324)
              Decimal['minE'] = -EXP_LIMIT;                     // -1 to -EXP_LIMIT

              // The maximum exponent value, above which overflow to Infinity occurs.
              // Number type:  308  (1.7976931348623157e+308)
              Decimal['maxE'] = EXP_LIMIT;                      // 1 to EXP_LIMIT

              // Whether Decimal Errors are ever thrown.
              Decimal['errors'] = true;                         // true/false

              // Whether to use cryptographically-secure random number generation, if available.
              Decimal['crypto'] = false;                        // true/false

              // Format specification for the Decimal.prototype.toFormat method
              Decimal.format = {
                  decimalSeparator: '.',
                  groupSeparator: ',',
                  groupSize: 3,
                  secondaryGroupSize: 0,
                  fractionGroupSeparator: '\xA0',              // non-breaking space
                  fractionGroupSize: 0
              };


              /* ********************** END OF CONSTRUCTOR DEFAULT PROPERTIES ********************* */


              Decimal.prototype = P;

              Decimal['ONE'] = new Decimal(1);

              /*
              // Pi to 80 s.d.
              Decimal['PI'] = new Decimal(
                  '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089'
              );
               */

              Decimal['ROUND_UP'] = 0;
              Decimal['ROUND_DOWN'] = 1;
              Decimal['ROUND_CEIL'] = 2;
              Decimal['ROUND_FLOOR'] = 3;
              Decimal['ROUND_HALF_UP'] = 4;
              Decimal['ROUND_HALF_DOWN'] = 5;
              Decimal['ROUND_HALF_EVEN'] = 6;
              Decimal['ROUND_HALF_CEIL'] = 7;
              Decimal['ROUND_HALF_FLOOR'] = 8;

              // modulo mode
              Decimal['EUCLID'] = 9;

              //Decimal['abs'] = abs;
              //Decimal['acos'] = acos;
              //Decimal['asin'] = asin;
              //Decimal['atan'] = atan;
              //Decimal['atan2'] = atan2;
              //Decimal['ceil'] = ceil;
              //Decimal['cos'] = cos;
              //Decimal['floor'] = floor;
              //Decimal['round'] = round;
              //Decimal['sin'] = sin;
              //Decimal['tan'] = tan;
              //Decimal['trunc'] = trunc;

              Decimal['config'] = config;
              Decimal['constructor'] = decimalFactory;
              Decimal['exp'] = exp;
              Decimal['ln'] = ln;
              Decimal['log'] = log;
              Decimal['max'] = max;
              Decimal['min'] = min;
              Decimal['pow'] = pow;
              Decimal['sqrt'] = sqrt;
              Decimal['random'] = random;

              if ( obj != null ) {
                  Decimal['config'](obj);
              }

              return Decimal;
          }

          return decimalFactory();
      })();


      // Export.


      // AMD.
      if ( true ) {

          !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
              return decimal;
          }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

      // Node and other environments that support module.exports.
      } else if ( typeof module != 'undefined' && module.exports ) {
          module.exports = decimal;

          if ( !crypto ) {

              try {
                  crypto = require('crypto');
              } catch (e) {}
          }

      // Browser.
      } else {
          noConflict = global['Decimal'];

          decimal['noConflict'] = function () {
              global['Decimal'] = noConflict;

              return decimal;
          };

          global['Decimal'] = decimal;
      }
  })(this);


/***/ },
/* 531 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _ = __webpack_require__(192);
  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(504);

  var slice = _require.slice;

  var _require2 = __webpack_require__(515);

  var Hash160 = _require2.Hash160;

  var ISO_REGEX = /^[A-Z0-9]{3}$/;
  var HEX_REGEX = /^[A-F0-9]{40}$/;

  function isoToBytes(iso) {
    var bytes = new Uint8Array(20);
    if (iso !== 'XRP') {
      var isoBytes = iso.split('').map(function (c) {
        return c.charCodeAt(0);
      });
      bytes.set(isoBytes, 12);
    }
    return bytes;
  }

  function isISOCode(val) {
    return val.length === 3; // ISO_REGEX.test(val);
  }

  function isHex(val) {
    return HEX_REGEX.test(val);
  }

  function isStringRepr(val) {
    return _.isString(val) && (isISOCode(val) || isHex(val));
  }

  function isBytesArray(val) {
    return val.length === 20;
  }

  function isValidRepr(val) {
    return isStringRepr(val) || isBytesArray(val);
  }

  function bytesFromRepr(val) {
    if (isValidRepr(val)) {
      // We assume at this point that we have an object with a length, either 3,
      // 20 or 40.
      return val.length === 3 ? isoToBytes(val) : val;
    }
    throw new Error('Unsupported Currency repr: ' + val);
  }

  var $uper = Hash160.prototype;
  var Currency = makeClass({
    inherits: Hash160,
    getters: ['isNative', 'iso'],
    statics: {
      init: function init() {
        this.XRP = new this(new Uint8Array(20));
      },
      from: function from(val) {
        return val instanceof this ? val : new this(bytesFromRepr(val));
      }
    },
    Currency: function Currency(bytes) {
      Hash160.call(this, bytes);
      this.classify();
    },
    classify: function classify() {
      // We only have a non null iso() property available if the currency can be
      // losslessly represented by the 3 letter iso code. If none is available a
      // hex encoding of the full 20 bytes is the canonical representation.
      var onlyISO = true;

      var bytes = this._bytes;
      var code = slice(this._bytes, 12, 15, Array);
      var iso = code.map(function (c) {
        return String.fromCharCode(c);
      }).join('');

      for (var i = bytes.length - 1; i >= 0; i--) {
        if (bytes[i] !== 0 && !(i === 12 || i === 13 || i === 14)) {
          onlyISO = false;
          break;
        }
      }
      var lossLessISO = onlyISO && iso !== 'XRP' && ISO_REGEX.test(iso);
      this._isNative = onlyISO && _.isEqual(code, [0, 0, 0]);
      this._iso = this._isNative ? 'XRP' : lossLessISO ? iso : null;
    },
    toJSON: function toJSON() {
      if (this.iso()) {
        return this.iso();
      }
      return $uper.toJSON.call(this);
    }
  });

  module.exports = {
    Currency: Currency
  };

/***/ },
/* 532 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var assert = __webpack_require__(198);
  var BN = __webpack_require__(529);
  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(504);

  var bytesToHex = _require.bytesToHex;
  var parseBytes = _require.parseBytes;
  var serializeUIntN = _require.serializeUIntN;

  var _require2 = __webpack_require__(533);

  var UInt = _require2.UInt;

  var HEX_REGEX = /^[A-F0-9]{16}$/;

  var UInt64 = makeClass({
    inherits: UInt,
    statics: { width: 8 },
    UInt64: function UInt64() {
      var arg = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

      var argType = typeof arg;
      if (argType === 'number') {
        assert(arg >= 0);
        this._bytes = new Uint8Array(8);
        this._bytes.set(serializeUIntN(arg, 4), 4);
      } else if (arg instanceof BN) {
        this._bytes = parseBytes(arg.toArray('be', 8), Uint8Array);
        this._toBN = arg;
      } else {
        if (argType === 'string') {
          if (!HEX_REGEX.test(arg)) {
            throw new Error(arg + ' is not a valid UInt64 hex string');
          }
        }
        this._bytes = parseBytes(arg, Uint8Array);
      }
      assert(this._bytes.length === 8);
    },
    toJSON: function toJSON() {
      return bytesToHex(this._bytes);
    },
    valueOf: function valueOf() {
      return this.toBN();
    },
    cached: {
      toBN: function toBN() {
        return new BN(this._bytes);
      }
    },
    toBytes: function toBytes() {
      return this._bytes;
    }
  });

  module.exports = {
    UInt64: UInt64
  };

/***/ },
/* 533 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var assert = __webpack_require__(198);
  var BN = __webpack_require__(529);
  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(517);

  var Comparable = _require.Comparable;
  var SerializedType = _require.SerializedType;

  var _require2 = __webpack_require__(504);

  var serializeUIntN = _require2.serializeUIntN;

  var MAX_VALUES = [0, 255, 65535, 16777215, 4294967295];

  function signum(a, b) {
    return a < b ? -1 : a === b ? 0 : 1;
  }

  var UInt = makeClass({
    mixins: [Comparable, SerializedType],
    UInt: function UInt() {
      var val = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

      var max = MAX_VALUES[this.constructor.width];
      if (val < 0 || !(val <= max)) {
        throw new Error(val + ' not in range 0 <= $val <= ' + max);
      }
      this.val = val;
    },
    statics: {
      width: 0,
      fromParser: function fromParser(parser) {
        var val = this.width > 4 ? parser.read(this.width) : parser.readUIntN(this.width);
        return new this(val);
      },
      from: function from(val) {
        return val instanceof this ? val : new this(val);
      }
    },
    toJSON: function toJSON() {
      return this.val;
    },
    valueOf: function valueOf() {
      return this.val;
    },
    compareTo: function compareTo(other) {
      var thisValue = this.valueOf();
      var otherValue = other.valueOf();
      if (thisValue instanceof BN) {
        return otherValue instanceof BN ? thisValue.cmp(otherValue) : thisValue.cmpn(otherValue);
      } else if (otherValue instanceof BN) {
        return -other.compareTo(this);
      }
      assert(typeof otherValue === 'number');
      return signum(thisValue, otherValue);
    },
    toBytesSink: function toBytesSink(sink) {
      sink.put(this.toBytes());
    },
    toBytes: function toBytes() {
      return serializeUIntN(this.val, this.constructor.width);
    }
  });

  module.exports = {
    UInt: UInt
  };

/***/ },
/* 534 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(504);

  var parseBytes = _require.parseBytes;

  var _require2 = __webpack_require__(517);

  var SerializedType = _require2.SerializedType;

  var Blob = makeClass({
    mixins: SerializedType,
    Blob: function Blob(bytes) {
      if (bytes) {
        this._bytes = parseBytes(bytes, Uint8Array);
      } else {
        this._bytes = new Uint8Array(0);
      }
    },
    statics: {
      fromParser: function fromParser(parser, hint) {
        return new this(parser.read(hint));
      },
      from: function from(value) {
        if (value instanceof this) {
          return value;
        }
        return new this(value);
      }
    }
  });

  module.exports = {
    Blob: Blob
  };

/***/ },
/* 535 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(516);

  var Hash = _require.Hash;

  var Hash128 = makeClass({
    inherits: Hash,
    statics: { width: 16 }
  });

  module.exports = {
    Hash128: Hash128
  };

/***/ },
/* 536 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(516);

  var Hash = _require.Hash;

  var Hash256 = makeClass({
    inherits: Hash,
    statics: {
      width: 32,
      init: function init() {
        this.ZERO_256 = new this(new Uint8Array(this.width));
      }
    }
  });

  module.exports = {
    Hash256: Hash256
  };

/***/ },
/* 537 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  /* eslint-disable no-unused-expressions */

  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(517);

  var SerializedType = _require.SerializedType;
  var ensureArrayLikeIs = _require.ensureArrayLikeIs;

  var _require2 = __webpack_require__(531);

  var Currency = _require2.Currency;

  var _require3 = __webpack_require__(514);

  var AccountID = _require3.AccountID;

  var PATHSET_END_BYTE = 0x00;
  var PATH_SEPARATOR_BYTE = 0xFF;
  var TYPE_ACCOUNT = 0x01;
  var TYPE_CURRENCY = 0x10;
  var TYPE_ISSUER = 0x20;

  var Hop = makeClass({
    statics: {
      from: function from(value) {
        if (value instanceof this) {
          return value;
        }
        var hop = new Hop();
        value.issuer && (hop.issuer = AccountID.from(value.issuer));
        value.account && (hop.account = AccountID.from(value.account));
        value.currency && (hop.currency = Currency.from(value.currency));
        return hop;
      },
      parse: function parse(parser, type) {
        var hop = new Hop();
        type & TYPE_ACCOUNT && (hop.account = AccountID.fromParser(parser));
        type & TYPE_CURRENCY && (hop.currency = Currency.fromParser(parser));
        type & TYPE_ISSUER && (hop.issuer = AccountID.fromParser(parser));
        return hop;
      }
    },
    toJSON: function toJSON() {
      var type = this.type();
      var ret = {};
      type & TYPE_ACCOUNT && (ret.account = this.account.toJSON());
      type & TYPE_ISSUER && (ret.issuer = this.issuer.toJSON());
      type & TYPE_CURRENCY && (ret.currency = this.currency.toJSON());
      return ret;
    },
    type: function type() {
      var type = 0;
      this.issuer && (type += TYPE_ISSUER);
      this.account && (type += TYPE_ACCOUNT);
      this.currency && (type += TYPE_CURRENCY);
      return type;
    }
  });

  var Path = makeClass({
    inherits: Array,
    statics: {
      from: function from(value) {
        return ensureArrayLikeIs(Path, value).withChildren(Hop);
      }
    },
    toJSON: function toJSON() {
      return this.map(function (k) {
        return k.toJSON();
      });
    }
  });

  var PathSet = makeClass({
    mixins: SerializedType,
    inherits: Array,
    statics: {
      from: function from(value) {
        return ensureArrayLikeIs(PathSet, value).withChildren(Path);
      },
      fromParser: function fromParser(parser) {
        var pathSet = new this();
        var path = undefined;
        while (!parser.end()) {
          var type = parser.readUInt8();
          if (type === PATHSET_END_BYTE) {
            break;
          }
          if (type === PATH_SEPARATOR_BYTE) {
            path = null;
            continue;
          }
          if (!path) {
            path = new Path();
            pathSet.push(path);
          }
          path.push(Hop.parse(parser, type));
        }
        return pathSet;
      }
    },
    toJSON: function toJSON() {
      return this.map(function (k) {
        return k.toJSON();
      });
    },
    toBytesSink: function toBytesSink(sink) {
      var n = 0;
      this.forEach(function (path) {
        if (n++ !== 0) {
          sink.put([PATH_SEPARATOR_BYTE]);
        }
        path.forEach(function (hop) {
          sink.put([hop.type()]);
          hop.account && hop.account.toBytesSink(sink);
          hop.currency && hop.currency.toBytesSink(sink);
          hop.issuer && hop.issuer.toBytesSink(sink);
        });
      });
      sink.put([PATHSET_END_BYTE]);
    }
  });

  module.exports = {
    PathSet: PathSet
  };

/***/ },
/* 538 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(517);

  var ensureArrayLikeIs = _require.ensureArrayLikeIs;
  var SerializedType = _require.SerializedType;

  var _require2 = __webpack_require__(461);

  var Field = _require2.Field;

  var _require3 = __webpack_require__(539);

  var STObject = _require3.STObject;
  var ArrayEndMarker = Field.ArrayEndMarker;

  var STArray = makeClass({
    mixins: SerializedType,
    inherits: Array,
    statics: {
      fromParser: function fromParser(parser) {
        var array = new STArray();
        while (!parser.end()) {
          var field = parser.readField();
          if (field === ArrayEndMarker) {
            break;
          }
          var outer = new STObject();
          outer[field] = parser.readFieldValue(field);
          array.push(outer);
        }
        return array;
      },
      from: function from(value) {
        return ensureArrayLikeIs(STArray, value).withChildren(STObject);
      }
    },
    toJSON: function toJSON() {
      return this.map(function (v) {
        return v.toJSON();
      });
    },
    toBytesSink: function toBytesSink(sink) {
      this.forEach(function (so) {
        return so.toBytesSink(sink);
      });
    }
  });

  module.exports = {
    STArray: STArray
  };

/***/ },
/* 539 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  // const assert = require('assert');

  var _Object$keys = __webpack_require__(506)['default'];

  var _ = __webpack_require__(192);
  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(461);

  var Field = _require.Field;

  var _require2 = __webpack_require__(518);

  var BinarySerializer = _require2.BinarySerializer;
  var ObjectEndMarker = Field.ObjectEndMarker;

  var _require3 = __webpack_require__(517);

  var SerializedType = _require3.SerializedType;

  var STObject = makeClass({
    mixins: SerializedType,
    statics: {
      fromParser: function fromParser(parser, hint) {
        var end = typeof hint === 'number' ? parser.pos() + hint : null;
        var so = new this();
        while (!parser.end(end)) {
          var field = parser.readField();
          if (field === ObjectEndMarker) {
            break;
          }
          so[field] = parser.readFieldValue(field);
        }
        return so;
      },
      from: function from(value) {
        if (value instanceof this) {
          return value;
        }
        if (typeof value === 'object') {
          return _.transform(value, function (so, val, key) {
            var field = Field[key];
            if (field) {
              so[field] = field.associatedType.from(val);
            } else {
              so[key] = val;
            }
          }, new this());
        }
        throw new Error(value + ' is unsupported');
      }
    },
    fieldKeys: function fieldKeys() {
      return _Object$keys(this).map(function (k) {
        return Field[k];
      }).filter(Boolean);
    },
    toJSON: function toJSON() {
      return _.transform(this, function (result, value, key) {
        result[key] = value && value.toJSON ? value.toJSON() : value;
      });
    },
    toBytesSink: function toBytesSink(sink) {
      var _this = this;

      var filter = arguments.length <= 1 || arguments[1] === undefined ? function () {
        return true;
      } : arguments[1];

      var serializer = new BinarySerializer(sink);
      var fields = this.fieldKeys();
      var sorted = _.sortBy(fields, 'ordinal');
      sorted.filter(filter).forEach(function (field) {
        var value = _this[field];
        if (!field.isSerialized) {
          return;
        }
        serializer.writeFieldAndValue(field, value);
      });
    }
  });

  module.exports = {
    STObject: STObject
  };

/***/ },
/* 540 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(533);

  var UInt = _require.UInt;

  var UInt16 = makeClass({
    inherits: UInt,
    statics: { width: 2 }
  });

  module.exports = {
    UInt16: UInt16
  };

/***/ },
/* 541 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(533);

  var UInt = _require.UInt;

  var UInt32 = makeClass({
    inherits: UInt,
    statics: { width: 4 }
  });

  module.exports = {
    UInt32: UInt32
  };

/***/ },
/* 542 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(533);

  var UInt = _require.UInt;

  var UInt8 = makeClass({
    inherits: UInt,
    statics: { width: 1 }
  });

  module.exports = {
    UInt8: UInt8
  };

/***/ },
/* 543 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(536);

  var Hash256 = _require.Hash256;

  var _require2 = __webpack_require__(517);

  var ensureArrayLikeIs = _require2.ensureArrayLikeIs;
  var SerializedType = _require2.SerializedType;

  var Vector256 = makeClass({
    mixins: SerializedType,
    inherits: Array,
    statics: {
      fromParser: function fromParser(parser, hint) {
        var vector256 = new this();
        var bytes = hint !== null ? hint : parser.size() - parser.pos();
        var hashes = bytes / 32;
        for (var i = 0; i < hashes; i++) {
          vector256.push(Hash256.fromParser(parser));
        }
        return vector256;
      },
      from: function from(value) {
        return ensureArrayLikeIs(Vector256, value).withChildren(Hash256);
      }
    },
    toBytesSink: function toBytesSink(sink) {
      this.forEach(function (h) {
        return h.toBytesSink(sink);
      });
    },
    toJSON: function toJSON() {
      return this.map(function (hash) {
        return hash.toJSON();
      });
    }
  });

  module.exports = {
    Vector256: Vector256
  };

/***/ },
/* 544 */
/***/ function(module, exports, __webpack_require__) {

  /* eslint-disable func-style */

  'use strict';

  var types = __webpack_require__(513);

  var _require = __webpack_require__(545);

  var HashPrefix = _require.HashPrefix;

  var _require2 = __webpack_require__(546);

  var BinaryParser = _require2.BinaryParser;

  var _require3 = __webpack_require__(518);

  var BinarySerializer = _require3.BinarySerializer;
  var BytesList = _require3.BytesList;

  var _require4 = __webpack_require__(504);

  var bytesToHex = _require4.bytesToHex;
  var slice = _require4.slice;
  var parseBytes = _require4.parseBytes;

  var _require5 = __webpack_require__(547);

  var sha512Half = _require5.sha512Half;
  var transactionID = _require5.transactionID;

  var makeParser = function makeParser(bytes) {
    return new BinaryParser(bytes);
  };
  var readJSON = function readJSON(parser) {
    return parser.readType(types.STObject).toJSON();
  };
  var binaryToJSON = function binaryToJSON(bytes) {
    return readJSON(makeParser(bytes));
  };

  function serializeObject(object) {
    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var prefix = opts.prefix;
    var suffix = opts.suffix;
    var _opts$signingFieldsOnly = opts.signingFieldsOnly;
    var signingFieldsOnly = _opts$signingFieldsOnly === undefined ? false : _opts$signingFieldsOnly;

    var bytesList = new BytesList();
    if (prefix) {
      bytesList.put(prefix);
    }
    var filter = signingFieldsOnly ? function (f) {
      return f.isSigningField;
    } : undefined;
    types.STObject.from(object).toBytesSink(bytesList, filter);
    if (suffix) {
      bytesList.put(suffix);
    }
    return bytesList.toBytes();
  }

  function signingData(tx) {
    var prefix = arguments.length <= 1 || arguments[1] === undefined ? HashPrefix.transactionSig : arguments[1];

    return serializeObject(tx, { prefix: prefix, signingFieldsOnly: true });
  }

  function multiSigningData(tx, signingAccount) {
    var prefix = HashPrefix.transactionMultiSig;
    var suffix = types.AccountID.from(signingAccount).toBytes();
    return serializeObject(tx, { prefix: prefix, suffix: suffix, signingFieldsOnly: true });
  }

  module.exports = {
    BinaryParser: BinaryParser,
    BinarySerializer: BinarySerializer,
    BytesList: BytesList,
    makeParser: makeParser,
    serializeObject: serializeObject,
    readJSON: readJSON,
    bytesToHex: bytesToHex,
    parseBytes: parseBytes,
    multiSigningData: multiSigningData,
    signingData: signingData,
    binaryToJSON: binaryToJSON,
    sha512Half: sha512Half,
    transactionID: transactionID,
    slice: slice
  };

/***/ },
/* 545 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _require = __webpack_require__(504);

  var serializeUIntN = _require.serializeUIntN;

  function bytes(uint32) {
    return serializeUIntN(uint32, 4);
  }

  var HashPrefix = {
    transactionID: bytes(0x54584E00),
    // transaction plus metadata
    transaction: bytes(0x534E4400),
    // account state
    accountStateEntry: bytes(0x4D4C4E00),
    // inner node in tree
    innerNode: bytes(0x4D494E00),
    // ledger master data for signing
    ledgerHeader: bytes(0x4C575200),
    // inner transaction to sign
    transactionSig: bytes(0x53545800),
    // inner transaction to sign
    transactionMultiSig: bytes(0x534D5400),
    // validation for signing
    validation: bytes(0x56414C00),
    // proposal for signing
    proposal: bytes(0x50525000)
  };

  module.exports = {
    HashPrefix: HashPrefix
  };

/***/ },
/* 546 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var assert = __webpack_require__(198);
  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(461);

  var Field = _require.Field;

  var _require2 = __webpack_require__(504);

  var slice = _require2.slice;
  var parseBytes = _require2.parseBytes;

  var BinaryParser = makeClass({
    BinaryParser: function BinaryParser(buf) {
      this._buf = parseBytes(buf, Uint8Array);
      this._length = this._buf.length;
      this._cursor = 0;
    },
    skip: function skip(n) {
      this._cursor += n;
    },
    read: function read(n) {
      var to = arguments.length <= 1 || arguments[1] === undefined ? Uint8Array : arguments[1];

      var start = this._cursor;
      var end = this._cursor + n;
      assert(end <= this._buf.length);
      this._cursor = end;
      return slice(this._buf, start, end, to);
    },
    readUIntN: function readUIntN(n) {
      return this.read(n, Array).reduce(function (a, b) {
        return a << 8 | b;
      }) >>> 0;
    },
    readUInt8: function readUInt8() {
      return this._buf[this._cursor++];
    },
    readUInt16: function readUInt16() {
      return this.readUIntN(2);
    },
    readUInt32: function readUInt32() {
      return this.readUIntN(4);
    },
    pos: function pos() {
      return this._cursor;
    },
    size: function size() {
      return this._buf.length;
    },
    end: function end(customEnd) {
      var cursor = this.pos();
      return cursor >= this._length || customEnd !== null && cursor >= customEnd;
    },
    readVL: function readVL() {
      return this.read(this.readVLLength());
    },
    readVLLength: function readVLLength() {
      var b1 = this.readUInt8();
      if (b1 <= 192) {
        return b1;
      } else if (b1 <= 240) {
        var b2 = this.readUInt8();
        return 193 + (b1 - 193) * 256 + b2;
      } else if (b1 <= 254) {
        var b2 = this.readUInt8();
        var b3 = this.readUInt8();
        return 12481 + (b1 - 241) * 65536 + b2 * 256 + b3;
      }
      throw new Error('Invalid varint length indicator');
    },
    readFieldOrdinal: function readFieldOrdinal() {
      var tagByte = this.readUInt8();
      var type = (tagByte & 0xF0) >>> 4 || this.readUInt8();
      var nth = tagByte & 0x0F || this.readUInt8();
      return type << 16 | nth;
    },
    readField: function readField() {
      return Field.from(this.readFieldOrdinal());
    },
    readType: function readType(type) {
      return type.fromParser(this);
    },
    typeForField: function typeForField(field) {
      return field.associatedType;
    },
    readFieldValue: function readFieldValue(field) {
      var kls = this.typeForField(field);
      if (!kls) {
        throw new Error('unsupported: (' + field.name + ', ' + field.type.name + ')');
      }
      var sizeHint = field.isVLEncoded ? this.readVLLength() : null;
      var value = kls.fromParser(this, sizeHint);
      if (value === undefined) {
        throw new Error('fromParser for (' + field.name + ', ' + field.type.name + ') -> undefined ');
      }
      return value;
    },
    readFieldAndValue: function readFieldAndValue() {
      var field = this.readField();
      return [field, this.readFieldValue(field)];
    }
  });

  module.exports = {
    BinaryParser: BinaryParser
  };

/***/ },
/* 547 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(545);

  var HashPrefix = _require.HashPrefix;

  var _require2 = __webpack_require__(513);

  var Hash256 = _require2.Hash256;

  var _require3 = __webpack_require__(504);

  var parseBytes = _require3.parseBytes;

  var createHash = __webpack_require__(548);

  var Sha512Half = makeClass({
    Sha512Half: function Sha512Half() {
      this.hash = createHash('sha512');
    },
    statics: {
      put: function put(bytes) {
        return new this().put(bytes);
      }
    },
    put: function put(bytes) {
      this.hash.update(parseBytes(bytes, Buffer));
      return this;
    },
    finish256: function finish256() {
      var bytes = this.hash.digest();
      return bytes.slice(0, 32);
    },
    finish: function finish() {
      return new Hash256(this.finish256());
    }
  });

  function sha512Half() {
    var hash = new Sha512Half();

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    args.forEach(function (a) {
      return hash.put(a);
    });
    return parseBytes(hash.finish256(), Uint8Array);
  }

  function transactionID(serialized) {
    return new Hash256(sha512Half(HashPrefix.transactionID, serialized));
  }

  module.exports = {
    Sha512Half: Sha512Half,
    sha512Half: sha512Half,
    transactionID: transactionID
  };
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 548 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
  var inherits = __webpack_require__(511)
  var md5 = __webpack_require__(549)
  var rmd160 = __webpack_require__(551)
  var sha = __webpack_require__(552)

  var Base = __webpack_require__(560)

  function HashNoConstructor(hash) {
    Base.call(this, 'digest')

    this._hash = hash
    this.buffers = []
  }

  inherits(HashNoConstructor, Base)

  HashNoConstructor.prototype._update = function (data) {
    this.buffers.push(data)
  }

  HashNoConstructor.prototype._final = function () {
    var buf = Buffer.concat(this.buffers)
    var r = this._hash(buf)
    this.buffers = null

    return r
  }

  function Hash(hash) {
    Base.call(this, 'digest')

    this._hash = hash
  }

  inherits(Hash, Base)

  Hash.prototype._update = function (data) {
    this._hash.update(data)
  }

  Hash.prototype._final = function () {
    return this._hash.digest()
  }

  module.exports = function createHash (alg) {
    alg = alg.toLowerCase()
    if ('md5' === alg) return new HashNoConstructor(md5)
    if ('rmd160' === alg || 'ripemd160' === alg) return new HashNoConstructor(rmd160)

    return new Hash(sha(alg))
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 549 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  /*
   * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
   * Digest Algorithm, as defined in RFC 1321.
   * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for more info.
   */

  var helpers = __webpack_require__(550);

  /*
   * Calculate the MD5 of an array of little-endian words, and a bit length
   */
  function core_md5(x, len)
  {
    /* append padding */
    x[len >> 5] |= 0x80 << ((len) % 32);
    x[(((len + 64) >>> 9) << 4) + 14] = len;

    var a =  1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d =  271733878;

    for(var i = 0; i < x.length; i += 16)
    {
      var olda = a;
      var oldb = b;
      var oldc = c;
      var oldd = d;

      a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
      d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
      c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
      b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
      a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
      d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
      c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
      b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
      a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
      d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
      c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
      b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
      a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
      d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
      c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
      b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

      a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
      d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
      c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
      b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
      a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
      d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
      c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
      b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
      a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
      d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
      c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
      b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
      a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
      d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
      c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
      b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

      a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
      d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
      c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
      b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
      a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
      d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
      c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
      b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
      a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
      d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
      c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
      b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
      a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
      d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
      c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
      b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

      a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
      d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
      c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
      b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
      a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
      d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
      c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
      b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
      a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
      d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
      c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
      b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
      a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
      d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
      c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
      b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

      a = safe_add(a, olda);
      b = safe_add(b, oldb);
      c = safe_add(c, oldc);
      d = safe_add(d, oldd);
    }
    return Array(a, b, c, d);

  }

  /*
   * These functions implement the four basic operations the algorithm uses.
   */
  function md5_cmn(q, a, b, x, s, t)
  {
    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
  }
  function md5_ff(a, b, c, d, x, s, t)
  {
    return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
  }
  function md5_gg(a, b, c, d, x, s, t)
  {
    return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
  }
  function md5_hh(a, b, c, d, x, s, t)
  {
    return md5_cmn(b ^ c ^ d, a, b, x, s, t);
  }
  function md5_ii(a, b, c, d, x, s, t)
  {
    return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
  }

  /*
   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
   * to work around bugs in some JS interpreters.
   */
  function safe_add(x, y)
  {
    var lsw = (x & 0xFFFF) + (y & 0xFFFF);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return (msw << 16) | (lsw & 0xFFFF);
  }

  /*
   * Bitwise rotate a 32-bit number to the left.
   */
  function bit_rol(num, cnt)
  {
    return (num << cnt) | (num >>> (32 - cnt));
  }

  module.exports = function md5(buf) {
    return helpers.hash(buf, core_md5, 16);
  };

/***/ },
/* 550 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
  var intSize = 4;
  var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
  var chrsz = 8;

  function toArray(buf, bigEndian) {
    if ((buf.length % intSize) !== 0) {
      var len = buf.length + (intSize - (buf.length % intSize));
      buf = Buffer.concat([buf, zeroBuffer], len);
    }

    var arr = [];
    var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
    for (var i = 0; i < buf.length; i += intSize) {
      arr.push(fn.call(buf, i));
    }
    return arr;
  }

  function toBuffer(arr, size, bigEndian) {
    var buf = new Buffer(size);
    var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
    for (var i = 0; i < arr.length; i++) {
      fn.call(buf, arr[i], i * 4, true);
    }
    return buf;
  }

  function hash(buf, fn, hashSize, bigEndian) {
    if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
    var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
    return toBuffer(arr, hashSize, bigEndian);
  }
  exports.hash = hash;
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 551 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {/*
  CryptoJS v3.1.2
  code.google.com/p/crypto-js
  (c) 2009-2013 by Jeff Mott. All rights reserved.
  code.google.com/p/crypto-js/wiki/License
  */
  /** @preserve
  (c) 2012 by Cédric Mesnil. All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

      - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
      - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */

  // constants table
  var zl = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  ]

  var zr = [
    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  ]

  var sl = [
    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  ]

  var sr = [
    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  ]

  var hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]
  var hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]

  function bytesToWords (bytes) {
    var words = []
    for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
      words[b >>> 5] |= bytes[i] << (24 - b % 32)
    }
    return words
  }

  function wordsToBytes (words) {
    var bytes = []
    for (var b = 0; b < words.length * 32; b += 8) {
      bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)
    }
    return bytes
  }

  function processBlock (H, M, offset) {
    // swap endian
    for (var i = 0; i < 16; i++) {
      var offset_i = offset + i
      var M_offset_i = M[offset_i]

      // Swap
      M[offset_i] = (
        (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
        (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
      )
    }

    // Working variables
    var al, bl, cl, dl, el
    var ar, br, cr, dr, er

    ar = al = H[0]
    br = bl = H[1]
    cr = cl = H[2]
    dr = dl = H[3]
    er = el = H[4]

    // computation
    var t
    for (i = 0; i < 80; i += 1) {
      t = (al + M[offset + zl[i]]) | 0
      if (i < 16) {
        t += f1(bl, cl, dl) + hl[0]
      } else if (i < 32) {
        t += f2(bl, cl, dl) + hl[1]
      } else if (i < 48) {
        t += f3(bl, cl, dl) + hl[2]
      } else if (i < 64) {
        t += f4(bl, cl, dl) + hl[3]
      } else {// if (i<80) {
        t += f5(bl, cl, dl) + hl[4]
      }
      t = t | 0
      t = rotl(t, sl[i])
      t = (t + el) | 0
      al = el
      el = dl
      dl = rotl(cl, 10)
      cl = bl
      bl = t

      t = (ar + M[offset + zr[i]]) | 0
      if (i < 16) {
        t += f5(br, cr, dr) + hr[0]
      } else if (i < 32) {
        t += f4(br, cr, dr) + hr[1]
      } else if (i < 48) {
        t += f3(br, cr, dr) + hr[2]
      } else if (i < 64) {
        t += f2(br, cr, dr) + hr[3]
      } else {// if (i<80) {
        t += f1(br, cr, dr) + hr[4]
      }

      t = t | 0
      t = rotl(t, sr[i])
      t = (t + er) | 0
      ar = er
      er = dr
      dr = rotl(cr, 10)
      cr = br
      br = t
    }

    // intermediate hash value
    t = (H[1] + cl + dr) | 0
    H[1] = (H[2] + dl + er) | 0
    H[2] = (H[3] + el + ar) | 0
    H[3] = (H[4] + al + br) | 0
    H[4] = (H[0] + bl + cr) | 0
    H[0] = t
  }

  function f1 (x, y, z) {
    return ((x) ^ (y) ^ (z))
  }

  function f2 (x, y, z) {
    return (((x) & (y)) | ((~x) & (z)))
  }

  function f3 (x, y, z) {
    return (((x) | (~(y))) ^ (z))
  }

  function f4 (x, y, z) {
    return (((x) & (z)) | ((y) & (~(z))))
  }

  function f5 (x, y, z) {
    return ((x) ^ ((y) | (~(z))))
  }

  function rotl (x, n) {
    return (x << n) | (x >>> (32 - n))
  }

  function ripemd160 (message) {
    var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]

    if (typeof message === 'string') {
      message = new Buffer(message, 'utf8')
    }

    var m = bytesToWords(message)

    var nBitsLeft = message.length * 8
    var nBitsTotal = message.length * 8

    // Add padding
    m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)
    m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
      (((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
      (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00)
    )

    for (var i = 0; i < m.length; i += 16) {
      processBlock(H, m, i)
    }

    // swap endian
    for (i = 0; i < 5; i++) {
      // shortcut
      var H_i = H[i]

      // Swap
      H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
        (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00)
    }

    var digestbytes = wordsToBytes(H)
    return new Buffer(digestbytes)
  }

  module.exports = ripemd160

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 552 */
/***/ function(module, exports, __webpack_require__) {

  var exports = module.exports = function SHA (algorithm) {
    algorithm = algorithm.toLowerCase()

    var Algorithm = exports[algorithm]
    if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

    return new Algorithm()
  }

  exports.sha = __webpack_require__(553)
  exports.sha1 = __webpack_require__(555)
  exports.sha224 = __webpack_require__(556)
  exports.sha256 = __webpack_require__(557)
  exports.sha384 = __webpack_require__(558)
  exports.sha512 = __webpack_require__(559)


/***/ },
/* 553 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {/*
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
   * in FIPS PUB 180-1
   * This source code is derived from sha1.js of the same repository.
   * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
   * operation was added.
   */

  var inherits = __webpack_require__(511)
  var Hash = __webpack_require__(554)

  var W = new Array(80)

  function Sha () {
    this.init()
    this._w = W

    Hash.call(this, 64, 56)
  }

  inherits(Sha, Hash)

  Sha.prototype.init = function () {
    this._a = 0x67452301 | 0
    this._b = 0xefcdab89 | 0
    this._c = 0x98badcfe | 0
    this._d = 0x10325476 | 0
    this._e = 0xc3d2e1f0 | 0

    return this
  }

  /*
   * Bitwise rotate a 32-bit number to the left.
   */
  function rol (num, cnt) {
    return (num << cnt) | (num >>> (32 - cnt))
  }

  Sha.prototype._update = function (M) {
    var W = this._w

    var a = this._a
    var b = this._b
    var c = this._c
    var d = this._d
    var e = this._e

    var j = 0
    var k

    /*
     * SHA-1 has a bitwise rotate left operation. But, SHA is not
     * function calcW() { return rol(W[j - 3] ^ W[j -  8] ^ W[j - 14] ^ W[j - 16], 1) }
     */
    function calcW () { return W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16] }
    function loop (w, f) {
      W[j] = w

      var t = rol(a, 5) + f + e + w + k

      e = d
      d = c
      c = rol(b, 30)
      b = a
      a = t
      j++
    }

    k = 1518500249
    while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))
    while (j < 20) loop(calcW(), (b & c) | ((~b) & d))
    k = 1859775393
    while (j < 40) loop(calcW(), b ^ c ^ d)
    k = -1894007588
    while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))
    k = -899497514
    while (j < 80) loop(calcW(), b ^ c ^ d)

    this._a = (a + this._a) | 0
    this._b = (b + this._b) | 0
    this._c = (c + this._c) | 0
    this._d = (d + this._d) | 0
    this._e = (e + this._e) | 0
  }

  Sha.prototype._hash = function () {
    var H = new Buffer(20)

    H.writeInt32BE(this._a | 0, 0)
    H.writeInt32BE(this._b | 0, 4)
    H.writeInt32BE(this._c | 0, 8)
    H.writeInt32BE(this._d | 0, 12)
    H.writeInt32BE(this._e | 0, 16)

    return H
  }

  module.exports = Sha


  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 554 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {// prototype class for hash functions
  function Hash (blockSize, finalSize) {
    this._block = new Buffer(blockSize)
    this._finalSize = finalSize
    this._blockSize = blockSize
    this._len = 0
    this._s = 0
  }

  Hash.prototype.update = function (data, enc) {
    if (typeof data === 'string') {
      enc = enc || 'utf8'
      data = new Buffer(data, enc)
    }

    var l = this._len += data.length
    var s = this._s || 0
    var f = 0
    var buffer = this._block

    while (s < l) {
      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
      var ch = (t - f)

      for (var i = 0; i < ch; i++) {
        buffer[(s % this._blockSize) + i] = data[i + f]
      }

      s += ch
      f += ch

      if ((s % this._blockSize) === 0) {
        this._update(buffer)
      }
    }
    this._s = s

    return this
  }

  Hash.prototype.digest = function (enc) {
    // Suppose the length of the message M, in bits, is l
    var l = this._len * 8

    // Append the bit 1 to the end of the message
    this._block[this._len % this._blockSize] = 0x80

    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
    this._block.fill(0, this._len % this._blockSize + 1)

    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
      this._update(this._block)
      this._block.fill(0)
    }

    // to this append the block which is equal to the number l written in binary
    // TODO: handle case where l is > Math.pow(2, 29)
    this._block.writeInt32BE(l, this._blockSize - 4)

    var hash = this._update(this._block) || this._hash()

    return enc ? hash.toString(enc) : hash
  }

  Hash.prototype._update = function () {
    throw new Error('_update must be implemented by subclass')
  }

  module.exports = Hash

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 555 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {/*
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
   * in FIPS PUB 180-1
   * Version 2.1a Copyright Paul Johnston 2000 - 2002.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for details.
   */

  var inherits = __webpack_require__(511)
  var Hash = __webpack_require__(554)

  var W = new Array(80)

  function Sha1 () {
    this.init()
    this._w = W

    Hash.call(this, 64, 56)
  }

  inherits(Sha1, Hash)

  Sha1.prototype.init = function () {
    this._a = 0x67452301 | 0
    this._b = 0xefcdab89 | 0
    this._c = 0x98badcfe | 0
    this._d = 0x10325476 | 0
    this._e = 0xc3d2e1f0 | 0

    return this
  }

  /*
   * Bitwise rotate a 32-bit number to the left.
   */
  function rol (num, cnt) {
    return (num << cnt) | (num >>> (32 - cnt))
  }

  Sha1.prototype._update = function (M) {
    var W = this._w

    var a = this._a
    var b = this._b
    var c = this._c
    var d = this._d
    var e = this._e

    var j = 0
    var k

    function calcW () { return rol(W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16], 1) }
    function loop (w, f) {
      W[j] = w

      var t = rol(a, 5) + f + e + w + k

      e = d
      d = c
      c = rol(b, 30)
      b = a
      a = t
      j++
    }

    k = 1518500249
    while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))
    while (j < 20) loop(calcW(), (b & c) | ((~b) & d))
    k = 1859775393
    while (j < 40) loop(calcW(), b ^ c ^ d)
    k = -1894007588
    while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))
    k = -899497514
    while (j < 80) loop(calcW(), b ^ c ^ d)

    this._a = (a + this._a) | 0
    this._b = (b + this._b) | 0
    this._c = (c + this._c) | 0
    this._d = (d + this._d) | 0
    this._e = (e + this._e) | 0
  }

  Sha1.prototype._hash = function () {
    var H = new Buffer(20)

    H.writeInt32BE(this._a | 0, 0)
    H.writeInt32BE(this._b | 0, 4)
    H.writeInt32BE(this._c | 0, 8)
    H.writeInt32BE(this._d | 0, 12)
    H.writeInt32BE(this._e | 0, 16)

    return H
  }

  module.exports = Sha1

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 556 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {/**
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
   * in FIPS 180-2
   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   *
   */

  var inherits = __webpack_require__(511)
  var Sha256 = __webpack_require__(557)
  var Hash = __webpack_require__(554)

  var W = new Array(64)

  function Sha224 () {
    this.init()

    this._w = W // new Array(64)

    Hash.call(this, 64, 56)
  }

  inherits(Sha224, Sha256)

  Sha224.prototype.init = function () {
    this._a = 0xc1059ed8 | 0
    this._b = 0x367cd507 | 0
    this._c = 0x3070dd17 | 0
    this._d = 0xf70e5939 | 0
    this._e = 0xffc00b31 | 0
    this._f = 0x68581511 | 0
    this._g = 0x64f98fa7 | 0
    this._h = 0xbefa4fa4 | 0

    return this
  }

  Sha224.prototype._hash = function () {
    var H = new Buffer(28)

    H.writeInt32BE(this._a, 0)
    H.writeInt32BE(this._b, 4)
    H.writeInt32BE(this._c, 8)
    H.writeInt32BE(this._d, 12)
    H.writeInt32BE(this._e, 16)
    H.writeInt32BE(this._f, 20)
    H.writeInt32BE(this._g, 24)

    return H
  }

  module.exports = Sha224

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 557 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {/**
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
   * in FIPS 180-2
   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   *
   */

  var inherits = __webpack_require__(511)
  var Hash = __webpack_require__(554)

  var K = [
    0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
    0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
    0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
    0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
    0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
    0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
    0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
    0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
    0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
    0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
    0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
    0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
    0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
    0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
    0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
    0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
  ]

  var W = new Array(64)

  function Sha256 () {
    this.init()

    this._w = W // new Array(64)

    Hash.call(this, 64, 56)
  }

  inherits(Sha256, Hash)

  Sha256.prototype.init = function () {
    this._a = 0x6a09e667 | 0
    this._b = 0xbb67ae85 | 0
    this._c = 0x3c6ef372 | 0
    this._d = 0xa54ff53a | 0
    this._e = 0x510e527f | 0
    this._f = 0x9b05688c | 0
    this._g = 0x1f83d9ab | 0
    this._h = 0x5be0cd19 | 0

    return this
  }

  function Ch (x, y, z) {
    return z ^ (x & (y ^ z))
  }

  function Maj (x, y, z) {
    return (x & y) | (z & (x | y))
  }

  function Sigma0 (x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
  }

  function Sigma1 (x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
  }

  function Gamma0 (x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
  }

  function Gamma1 (x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
  }

  Sha256.prototype._update = function (M) {
    var W = this._w

    var a = this._a | 0
    var b = this._b | 0
    var c = this._c | 0
    var d = this._d | 0
    var e = this._e | 0
    var f = this._f | 0
    var g = this._g | 0
    var h = this._h | 0

    var j = 0

    function calcW () { return Gamma1(W[j - 2]) + W[j - 7] + Gamma0(W[j - 15]) + W[j - 16] }
    function loop (w) {
      W[j] = w

      var T1 = h + Sigma1(e) + Ch(e, f, g) + K[j] + w
      var T2 = Sigma0(a) + Maj(a, b, c)

      h = g
      g = f
      f = e
      e = d + T1
      d = c
      c = b
      b = a
      a = T1 + T2

      j++
    }

    while (j < 16) loop(M.readInt32BE(j * 4))
    while (j < 64) loop(calcW())

    this._a = (a + this._a) | 0
    this._b = (b + this._b) | 0
    this._c = (c + this._c) | 0
    this._d = (d + this._d) | 0
    this._e = (e + this._e) | 0
    this._f = (f + this._f) | 0
    this._g = (g + this._g) | 0
    this._h = (h + this._h) | 0
  }

  Sha256.prototype._hash = function () {
    var H = new Buffer(32)

    H.writeInt32BE(this._a, 0)
    H.writeInt32BE(this._b, 4)
    H.writeInt32BE(this._c, 8)
    H.writeInt32BE(this._d, 12)
    H.writeInt32BE(this._e, 16)
    H.writeInt32BE(this._f, 20)
    H.writeInt32BE(this._g, 24)
    H.writeInt32BE(this._h, 28)

    return H
  }

  module.exports = Sha256

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 558 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {var inherits = __webpack_require__(511)
  var SHA512 = __webpack_require__(559)
  var Hash = __webpack_require__(554)

  var W = new Array(160)

  function Sha384 () {
    this.init()
    this._w = W

    Hash.call(this, 128, 112)
  }

  inherits(Sha384, SHA512)

  Sha384.prototype.init = function () {
    this._a = 0xcbbb9d5d | 0
    this._b = 0x629a292a | 0
    this._c = 0x9159015a | 0
    this._d = 0x152fecd8 | 0
    this._e = 0x67332667 | 0
    this._f = 0x8eb44a87 | 0
    this._g = 0xdb0c2e0d | 0
    this._h = 0x47b5481d | 0

    this._al = 0xc1059ed8 | 0
    this._bl = 0x367cd507 | 0
    this._cl = 0x3070dd17 | 0
    this._dl = 0xf70e5939 | 0
    this._el = 0xffc00b31 | 0
    this._fl = 0x68581511 | 0
    this._gl = 0x64f98fa7 | 0
    this._hl = 0xbefa4fa4 | 0

    return this
  }

  Sha384.prototype._hash = function () {
    var H = new Buffer(48)

    function writeInt64BE (h, l, offset) {
      H.writeInt32BE(h, offset)
      H.writeInt32BE(l, offset + 4)
    }

    writeInt64BE(this._a, this._al, 0)
    writeInt64BE(this._b, this._bl, 8)
    writeInt64BE(this._c, this._cl, 16)
    writeInt64BE(this._d, this._dl, 24)
    writeInt64BE(this._e, this._el, 32)
    writeInt64BE(this._f, this._fl, 40)

    return H
  }

  module.exports = Sha384

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 559 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {var inherits = __webpack_require__(511)
  var Hash = __webpack_require__(554)

  var K = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  ]

  var W = new Array(160)

  function Sha512 () {
    this.init()
    this._w = W

    Hash.call(this, 128, 112)
  }

  inherits(Sha512, Hash)

  Sha512.prototype.init = function () {
    this._a = 0x6a09e667 | 0
    this._b = 0xbb67ae85 | 0
    this._c = 0x3c6ef372 | 0
    this._d = 0xa54ff53a | 0
    this._e = 0x510e527f | 0
    this._f = 0x9b05688c | 0
    this._g = 0x1f83d9ab | 0
    this._h = 0x5be0cd19 | 0

    this._al = 0xf3bcc908 | 0
    this._bl = 0x84caa73b | 0
    this._cl = 0xfe94f82b | 0
    this._dl = 0x5f1d36f1 | 0
    this._el = 0xade682d1 | 0
    this._fl = 0x2b3e6c1f | 0
    this._gl = 0xfb41bd6b | 0
    this._hl = 0x137e2179 | 0

    return this
  }

  function Ch (x, y, z) {
    return z ^ (x & (y ^ z))
  }

  function Maj (x, y, z) {
    return (x & y) | (z & (x | y))
  }

  function Sigma0 (x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
  }

  function Sigma1 (x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
  }

  function Gamma0 (x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
  }

  function Gamma0l (x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
  }

  function Gamma1 (x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
  }

  function Gamma1l (x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
  }

  Sha512.prototype._update = function (M) {
    var W = this._w

    var a = this._a | 0
    var b = this._b | 0
    var c = this._c | 0
    var d = this._d | 0
    var e = this._e | 0
    var f = this._f | 0
    var g = this._g | 0
    var h = this._h | 0

    var al = this._al | 0
    var bl = this._bl | 0
    var cl = this._cl | 0
    var dl = this._dl | 0
    var el = this._el | 0
    var fl = this._fl | 0
    var gl = this._gl | 0
    var hl = this._hl | 0

    var i = 0
    var j = 0
    var Wi, Wil
    function calcW () {
      var x = W[j - 15 * 2]
      var xl = W[j - 15 * 2 + 1]
      var gamma0 = Gamma0(x, xl)
      var gamma0l = Gamma0l(xl, x)

      x = W[j - 2 * 2]
      xl = W[j - 2 * 2 + 1]
      var gamma1 = Gamma1(x, xl)
      var gamma1l = Gamma1l(xl, x)

      // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
      var Wi7 = W[j - 7 * 2]
      var Wi7l = W[j - 7 * 2 + 1]

      var Wi16 = W[j - 16 * 2]
      var Wi16l = W[j - 16 * 2 + 1]

      Wil = gamma0l + Wi7l
      Wi = gamma0 + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
      Wil = Wil + gamma1l
      Wi = Wi + gamma1 + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
      Wil = Wil + Wi16l
      Wi = Wi + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)
    }

    function loop () {
      W[j] = Wi
      W[j + 1] = Wil

      var maj = Maj(a, b, c)
      var majl = Maj(al, bl, cl)

      var sigma0h = Sigma0(a, al)
      var sigma0l = Sigma0(al, a)
      var sigma1h = Sigma1(e, el)
      var sigma1l = Sigma1(el, e)

      // t1 = h + sigma1 + ch + K[i] + W[i]
      var Ki = K[j]
      var Kil = K[j + 1]

      var ch = Ch(e, f, g)
      var chl = Ch(el, fl, gl)

      var t1l = hl + sigma1l
      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
      t1l = t1l + chl
      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
      t1l = t1l + Kil
      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
      t1l = t1l + Wil
      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

      // t2 = sigma0 + maj
      var t2l = sigma0l + majl
      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

      h = g
      hl = gl
      g = f
      gl = fl
      f = e
      fl = el
      el = (dl + t1l) | 0
      e = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
      d = c
      dl = cl
      c = b
      cl = bl
      b = a
      bl = al
      al = (t1l + t2l) | 0
      a = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0

      i++
      j += 2
    }

    while (i < 16) {
      Wi = M.readInt32BE(j * 4)
      Wil = M.readInt32BE(j * 4 + 4)

      loop()
    }

    while (i < 80) {
      calcW()
      loop()
    }

    this._al = (this._al + al) | 0
    this._bl = (this._bl + bl) | 0
    this._cl = (this._cl + cl) | 0
    this._dl = (this._dl + dl) | 0
    this._el = (this._el + el) | 0
    this._fl = (this._fl + fl) | 0
    this._gl = (this._gl + gl) | 0
    this._hl = (this._hl + hl) | 0

    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
  }

  Sha512.prototype._hash = function () {
    var H = new Buffer(64)

    function writeInt64BE (h, l, offset) {
      H.writeInt32BE(h, offset)
      H.writeInt32BE(l, offset + 4)
    }

    writeInt64BE(this._a, this._al, 0)
    writeInt64BE(this._b, this._bl, 8)
    writeInt64BE(this._c, this._cl, 16)
    writeInt64BE(this._d, this._dl, 24)
    writeInt64BE(this._e, this._el, 32)
    writeInt64BE(this._f, this._fl, 40)
    writeInt64BE(this._g, this._gl, 48)
    writeInt64BE(this._h, this._hl, 56)

    return H
  }

  module.exports = Sha512

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 560 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {var Transform = __webpack_require__(285).Transform
  var inherits = __webpack_require__(511)
  var StringDecoder = __webpack_require__(295).StringDecoder
  module.exports = CipherBase
  inherits(CipherBase, Transform)
  function CipherBase (hashMode) {
    Transform.call(this)
    this.hashMode = typeof hashMode === 'string'
    if (this.hashMode) {
      this[hashMode] = this._finalOrDigest
    } else {
      this.final = this._finalOrDigest
    }
    this._decoder = null
    this._encoding = null
  }
  CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
    if (typeof data === 'string') {
      data = new Buffer(data, inputEnc)
    }
    var outData = this._update(data)
    if (this.hashMode) {
      return this
    }
    if (outputEnc) {
      outData = this._toString(outData, outputEnc)
    }
    return outData
  }

  CipherBase.prototype.setAutoPadding = function () {}

  CipherBase.prototype.getAuthTag = function () {
    throw new Error('trying to get auth tag in unsupported state')
  }

  CipherBase.prototype.setAuthTag = function () {
    throw new Error('trying to set auth tag in unsupported state')
  }

  CipherBase.prototype.setAAD = function () {
    throw new Error('trying to set aad in unsupported state')
  }

  CipherBase.prototype._transform = function (data, _, next) {
    var err
    try {
      if (this.hashMode) {
        this._update(data)
      } else {
        this.push(this._update(data))
      }
    } catch (e) {
      err = e
    } finally {
      next(err)
    }
  }
  CipherBase.prototype._flush = function (done) {
    var err
    try {
      this.push(this._final())
    } catch (e) {
      err = e
    } finally {
      done(err)
    }
  }
  CipherBase.prototype._finalOrDigest = function (outputEnc) {
    var outData = this._final() || new Buffer('')
    if (outputEnc) {
      outData = this._toString(outData, outputEnc, true)
    }
    return outData
  }

  CipherBase.prototype._toString = function (value, enc, final) {
    if (!this._decoder) {
      this._decoder = new StringDecoder(enc)
      this._encoding = enc
    }
    if (this._encoding !== enc) {
      throw new Error('can\'t switch encodings')
    }
    var out = this._decoder.write(value)
    if (final) {
      out += this._decoder.end()
    }
    return out
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 561 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var assert = __webpack_require__(198);
  var makeClass = __webpack_require__(505);

  var _require = __webpack_require__(513);

  var Hash256 = _require.Hash256;

  var _require2 = __webpack_require__(545);

  var HashPrefix = _require2.HashPrefix;

  var _require3 = __webpack_require__(547);

  var Hasher = _require3.Sha512Half;

  var ShaMapNode = makeClass({
    virtuals: {
      hashPrefix: function hashPrefix() {},
      isLeaf: function isLeaf() {},
      isInner: function isInner() {}
    },
    cached: {
      hash: function hash() {
        var hasher = Hasher.put(this.hashPrefix());
        this.toBytesSink(hasher);
        return hasher.finish();
      }
    }
  });

  var ShaMapLeaf = makeClass({
    inherits: ShaMapNode,
    ShaMapLeaf: function ShaMapLeaf(index, item) {
      ShaMapNode.call(this);
      this.index = index;
      this.item = item;
    },
    isLeaf: function isLeaf() {
      return true;
    },
    isInner: function isInner() {
      return false;
    },
    hashPrefix: function hashPrefix() {
      return this.item.hashPrefix();
    },
    toBytesSink: function toBytesSink(sink) {
      this.item.toBytesSink(sink);
      this.index.toBytesSink(sink);
    }
  });

  var $uper = ShaMapNode.prototype;

  var ShaMapInner = makeClass({
    inherits: ShaMapNode,
    ShaMapInner: function ShaMapInner() {
      var depth = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

      ShaMapNode.call(this);
      this.depth = depth;
      this.slotBits = 0;
      this.branches = Array(16);
    },
    isInner: function isInner() {
      return true;
    },
    isLeaf: function isLeaf() {
      return false;
    },
    hashPrefix: function hashPrefix() {
      return HashPrefix.innerNode;
    },
    setBranch: function setBranch(slot, branch) {
      this.slotBits = this.slotBits | 1 << slot;
      this.branches[slot] = branch;
    },
    empty: function empty() {
      return this.slotBits === 0;
    },
    hash: function hash() {
      if (this.empty()) {
        return Hash256.ZERO_256;
      }
      return $uper.hash.call(this);
    },
    toBytesSink: function toBytesSink(sink) {
      for (var i = 0; i < this.branches.length; i++) {
        var branch = this.branches[i];
        var hash = branch ? branch.hash() : Hash256.ZERO_256;
        hash.toBytesSink(sink);
      }
    },
    addItem: function addItem(index, item, leaf) {
      assert(index instanceof Hash256);
      var nibble = index.nibblet(this.depth);
      var existing = this.branches[nibble];
      if (!existing) {
        this.setBranch(nibble, leaf || new ShaMapLeaf(index, item));
      } else if (existing.isLeaf()) {
        var newInner = new ShaMapInner(this.depth + 1);
        newInner.addItem(existing.index, null, existing);
        newInner.addItem(index, item, leaf);
        this.setBranch(nibble, newInner);
      } else if (existing.isInner()) {
        existing.addItem(index, item, leaf);
      } else {
        assert(false);
      }
    }
  });

  var ShaMap = makeClass({
    inherits: ShaMapInner
  });

  module.exports = {
    ShaMap: ShaMap
  };

/***/ },
/* 562 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _toConsumableArray = __webpack_require__(520)['default'];

  var _ = __webpack_require__(192);
  var BN = __webpack_require__(529);
  var assert = __webpack_require__(198);
  var types = __webpack_require__(513);
  var STObject = types.STObject;
  var Hash256 = types.Hash256;

  var _require = __webpack_require__(561);

  var ShaMap = _require.ShaMap;

  var _require2 = __webpack_require__(545);

  var HashPrefix = _require2.HashPrefix;

  var _require3 = __webpack_require__(547);

  var Sha512Half = _require3.Sha512Half;

  var _require4 = __webpack_require__(544);

  var BinarySerializer = _require4.BinarySerializer;
  var serializeObject = _require4.serializeObject;

  function computeHash(itemizer, itemsJson) {
    var map = new ShaMap();
    itemsJson.forEach(function (item) {
      return map.addItem.apply(map, _toConsumableArray(itemizer(item)));
    });
    return map.hash();
  }

  function transactionItem(json) {
    assert(json.hash);
    var index = Hash256.from(json.hash);
    var item = {
      hashPrefix: function hashPrefix() {
        return HashPrefix.transaction;
      },
      toBytesSink: function toBytesSink(sink) {
        var serializer = new BinarySerializer(sink);
        serializer.writeLengthEncoded(STObject.from(json));
        serializer.writeLengthEncoded(STObject.from(json.metaData));
      }
    };
    return [index, item];
  }

  function entryItem(json) {
    var index = Hash256.from(json.index);
    var bytes = serializeObject(json);
    var item = {
      hashPrefix: function hashPrefix() {
        return HashPrefix.accountStateEntry;
      },
      toBytesSink: function toBytesSink(sink) {
        sink.put(bytes);
      }
    };
    return [index, item];
  }

  var transactionTreeHash = _.partial(computeHash, transactionItem);
  var accountStateHash = _.partial(computeHash, entryItem);

  function ledgerHash(header) {
    var hash = new Sha512Half();
    hash.put(HashPrefix.ledgerHeader);
    assert(header.parent_close_time !== undefined);
    assert(header.close_flags !== undefined);

    types.UInt32.from(header.ledger_index).toBytesSink(hash);
    types.UInt64.from(new BN(header.total_coins)).toBytesSink(hash);
    types.Hash256.from(header.parent_hash).toBytesSink(hash);
    types.Hash256.from(header.transaction_hash).toBytesSink(hash);
    types.Hash256.from(header.account_hash).toBytesSink(hash);
    types.UInt32.from(header.parent_close_time).toBytesSink(hash);
    types.UInt32.from(header.close_time).toBytesSink(hash);
    types.UInt8.from(header.close_time_resolution).toBytesSink(hash);
    types.UInt8.from(header.close_flags).toBytesSink(hash);
    return hash.finish();
  }

  module.exports = {
    accountStateHash: accountStateHash,
    transactionTreeHash: transactionTreeHash,
    ledgerHash: ledgerHash
  };

/***/ },
/* 563 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var Decimal = __webpack_require__(530);

  var _require = __webpack_require__(504);

  var bytesToHex = _require.bytesToHex;
  var slice = _require.slice;
  var parseBytes = _require.parseBytes;

  var _require2 = __webpack_require__(513);

  var UInt64 = _require2.UInt64;

  var BN = __webpack_require__(529);

  module.exports = {
    encode: function encode(arg) {
      var quality = arg instanceof Decimal ? arg : new Decimal(arg);
      var exponent = quality.e - 15;
      var qualityString = quality.times('1e' + -exponent).abs().toString();
      var bytes = new UInt64(new BN(qualityString)).toBytes();
      bytes[0] = exponent + 100;
      return bytes;
    },
    decode: function decode(arg) {
      var bytes = slice(parseBytes(arg), -8);
      var exponent = bytes[0] - 100;
      var mantissa = new Decimal(bytesToHex(slice(bytes, 1)), 16);
      return mantissa.times('1e' + exponent);
    }
  };

/***/ },
/* 564 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  /* eslint-disable func-style */

  var _ = __webpack_require__(192);

  var _require = __webpack_require__(513);

  var AccountID = _require.AccountID;

  var binary = __webpack_require__(544);
  var serializeObject = binary.serializeObject;
  var bytesToHex = binary.bytesToHex;
  var multiSigningData = binary.multiSigningData;
  var transactionID = binary.transactionID;
  var signingData = binary.signingData;

  var FULL_CANONICAL_SIGNATURE = 0x80000000;

  var toHex = function toHex(v) {
    return bytesToHex(v);
  };
  var getSigner = function getSigner(o) {
    return AccountID.from(o.Signer.Account);
  };
  var signerComparator = function signerComparator(a, b) {
    return getSigner(a).compareTo(getSigner(b));
  };

  function setCanonicalSignatureFlag(tx_json) {
    tx_json.Flags |= FULL_CANONICAL_SIGNATURE;
    tx_json.Flags >>>= 0;
  }

  function serializedBundle(tx_json) {
    var serialized = serializeObject(tx_json);
    var hash = transactionID(serialized).toHex();
    var tx_blob = toHex(serialized);
    return { tx_json: tx_json, tx_blob: tx_blob, hash: hash };
  }

  function signFor(tx_json_, keyPair) {
    var signingAccount = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

    var tx_json = _.clone(tx_json_);
    tx_json.SigningPubKey = '';
    setCanonicalSignatureFlag(tx_json);
    var signerID = signingAccount || keyPair.id();
    var signature = keyPair.sign(multiSigningData(tx_json, signerID));
    var signer = {
      Signer: {
        SigningPubKey: toHex(keyPair.publicBytes()),
        TxnSignature: toHex(signature),
        Account: signerID
      }
    };

    var signers = tx_json.Signers = tx_json.Signers || [];
    signers.push(signer);
    signers.sort(signerComparator);

    return serializedBundle(tx_json);
  }

  function sign(tx_json_, keyPair) {
    var tx_json = _.clone(tx_json_);
    setCanonicalSignatureFlag(tx_json);

    tx_json.SigningPubKey = toHex(keyPair.publicBytes());
    tx_json.TxnSignature = toHex(keyPair.sign(signingData(tx_json)));

    return serializedBundle(tx_json);
  }

  module.exports = {
    signFor: signFor,
    sign: sign
  };

/***/ },
/* 565 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
  var BigNumber = __webpack_require__(196);
  var decodeAddress = __webpack_require__(249).decodeAddress;
  var binary = __webpack_require__(459);
  var hashprefixes = __webpack_require__(566);
  var SHAMap = __webpack_require__(567).SHAMap;
  var SHAMapTreeNode = __webpack_require__(567).SHAMapTreeNode;
  var ledgerspaces = __webpack_require__(583);
  var sha512half = __webpack_require__(568);

  function hash(hex) {
    return sha512half(new Buffer(hex, 'hex'));
  }

  function padLeftZero(string, length) {
    return Array(length - string.length + 1).join('0') + string;
  }

  function intToHex(integer, byteLength) {
    return padLeftZero(Number(integer).toString(16), byteLength * 2);
  }

  function bytesToHex(bytes) {
    return (new Buffer(bytes)).toString('hex');
  }

  function bigintToHex(integerString, byteLength) {
    var hex = (new BigNumber(integerString)).toString(16);
    return padLeftZero(hex, byteLength * 2);
  }

  function addressToHex(address) {
    return (new Buffer(decodeAddress(address))).toString('hex');
  }

  function currencyToHex(currency) {
    if (currency.length === 3) {
      var bytes = new Array(20 + 1).join('0').split('').map(parseFloat);
      bytes[12] = currency.charCodeAt(0) & 0xff;
      bytes[13] = currency.charCodeAt(1) & 0xff;
      bytes[14] = currency.charCodeAt(2) & 0xff;
      return bytesToHex(bytes);
    }
    return currency;
  }

  function addLengthPrefix(hex) {
    var length = hex.length / 2;
    if (length <= 192) {
      return bytesToHex([length]) + hex;
    } else if (length <= 12480) {
      var x = length - 193;
      return bytesToHex([193 + (x >>> 8), x & 0xff]) + hex;
    } else if (length <= 918744) {
      var x = length - 12481;
      return bytesToHex([241 + (x >>> 16), x >>> 8 & 0xff, x & 0xff]) + hex;
    }
    throw new Error('Variable integer overflow.');
  }

  function computeBinaryTransactionHash(txBlobHex) {
    var prefix = hashprefixes.HASH_TX_ID.toString(16).toUpperCase();
    return hash(prefix + txBlobHex);
  }

  function computeTransactionHash(txJSON) {
    return computeBinaryTransactionHash(binary.encode(txJSON));
  }

  function computeBinaryTransactionSigningHash(txBlobHex) {
    var prefix = hashprefixes.HASH_TX_SIGN.toString(16).toUpperCase();
    return hash(prefix + txBlobHex);
  }

  function computeTransactionSigningHash(txJSON) {
    return computeBinaryTransactionSigningHash(binary.encode(txJSON));
  }

  function computeAccountHash(address) {
    var prefix = '00' + intToHex(ledgerspaces.account.charCodeAt(0), 1);
    return hash(prefix + addressToHex(address));
  }

  function computeOrderHash(address, sequence) {
    var prefix = '00' + intToHex(ledgerspaces.offer.charCodeAt(0), 1);
    return hash(prefix + addressToHex(address) + intToHex(sequence, 4));
  }

  function computeTrustlineHash(address1, address2, currency) {
    var address1Hex = addressToHex(address1);
    var address2Hex = addressToHex(address2);

    var swap = (new BigNumber(address1Hex, 16)).greaterThan(
      new BigNumber(address2Hex, 16));
    var lowAddressHex = swap ? address2Hex : address1Hex;
    var highAddressHex = swap ? address1Hex : address2Hex;

    var prefix = '00' + intToHex(ledgerspaces.rippleState.charCodeAt(0), 1);
    return hash(prefix + lowAddressHex + highAddressHex +
                currencyToHex(currency));
  }

  function computeTransactionTreeHash(transactions) {
    var shamap = new SHAMap();

    transactions.forEach(function(txJSON) {
      var txBlobHex = binary.encode(txJSON);
      var metaHex = binary.encode(txJSON.metaData);
      var txHash = computeBinaryTransactionHash(txBlobHex);
      var data = addLengthPrefix(txBlobHex) + addLengthPrefix(metaHex);
      shamap.add_item(txHash, data, SHAMapTreeNode.TYPE_TRANSACTION_MD);
    });

    return shamap.hash();
  }

  function computeStateTreeHash(entries) {
    var shamap = new SHAMap();

    entries.forEach(function(ledgerEntry) {
      var data = binary.encode(ledgerEntry);
      shamap.add_item(ledgerEntry.index, data, SHAMapTreeNode.TYPE_ACCOUNT_STATE);
    });

    return shamap.hash();
  }

  // see rippled Ledger::updateHash()
  function computeLedgerHash(ledgerHeader) {
    var prefix = hashprefixes.HASH_LEDGER.toString(16).toUpperCase();
    return hash(prefix +
      intToHex(ledgerHeader.ledger_index, 4) +
      bigintToHex(ledgerHeader.total_coins, 8) +
      ledgerHeader.parent_hash +
      ledgerHeader.transaction_hash +
      ledgerHeader.account_hash +
      intToHex(ledgerHeader.parent_close_time, 4) +
      intToHex(ledgerHeader.close_time, 4) +
      intToHex(ledgerHeader.close_time_resolution, 1) +
      intToHex(ledgerHeader.close_flags, 1)
    );
  }

  module.exports = {
    computeTransactionHash: computeTransactionHash,
    computeBinaryTransactionHash: computeBinaryTransactionHash,
    computeTransactionSigningHash: computeTransactionSigningHash,
    computeBinaryTransactionSigningHash: computeBinaryTransactionSigningHash,
    computeAccountHash: computeAccountHash,
    computeOrderHash: computeOrderHash,
    computeTrustlineHash: computeTrustlineHash,
    computeStateTreeHash: computeStateTreeHash,
    computeTransactionTreeHash: computeTransactionTreeHash,
    computeLedgerHash: computeLedgerHash
  };

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 566 */
/***/ function(module, exports) {

  'use strict';

  /**
   * Prefix for hashing functions.
   *
   * These prefixes are inserted before the source material used to
   * generate various hashes. This is done to put each hash in its own
   * "space." This way, two different types of objects with the
   * same binary data will produce different hashes.
   *
   * Each prefix is a 4-byte value with the last byte set to zero
   * and the first three bytes formed from the ASCII equivalent of
   * some arbitrary string. For example "TXN".
   */

  // transaction plus signature to give transaction ID
  exports.HASH_TX_ID = 0x54584E00; // 'TXN'
  // transaction plus metadata
  exports.HASH_TX_NODE = 0x534E4400; // 'TND'
  // inner node in tree
  exports.HASH_INNER_NODE = 0x4D494E00; // 'MIN'
  // leaf node in tree
  exports.HASH_LEAF_NODE = 0x4D4C4E00; // 'MLN'
  // inner transaction to sign
  exports.HASH_TX_SIGN = 0x53545800; // 'STX'
  // inner transaction to sign (TESTNET)
  exports.HASH_TX_SIGN_TESTNET = 0x73747800; // 'stx'
  // inner transaction to multisign
  exports.HASH_TX_MULTISIGN = 0x534D5400; // 'SMT'

  exports.HASH_LEDGER = 0x4C575200;


/***/ },
/* 567 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

  var util = __webpack_require__(199);
  var hashprefixes = __webpack_require__(566);
  var sha512half = __webpack_require__(568);
  var HEX_ZERO = '00000000000000000000000000000000' +
                 '00000000000000000000000000000000';

  /**
   * Abstract class representing a node in a SHAMap tree.
   *
   * Can be either SHAMapTreeNodeInner or SHAMapTreeNodeLeaf.
   *
   * @class
   */
  function SHAMapTreeNode() { }

  SHAMapTreeNode.TYPE_INNER = 1;
  SHAMapTreeNode.TYPE_TRANSACTION_NM = 2;
  SHAMapTreeNode.TYPE_TRANSACTION_MD = 3;
  SHAMapTreeNode.TYPE_ACCOUNT_STATE = 4;

  function hash(hex) {
    return sha512half(new Buffer(hex, 'hex'));
  }

  /**
  * @param {String} tag (64 hexadecimal characters)
  * @param {SHAMapTreeNode} node
  * @return {void}
  * @virtual
  */
  /* eslint-disable no-unused-vars*/
  SHAMapTreeNode.prototype.add_item = function(tag, node) {
    throw new Error(
      'Called unimplemented virtual method SHAMapTreeNode#add_item.');
  };
  /* eslint-enable no-unused-vars*/

  SHAMapTreeNode.prototype.hash = function() {
    throw new Error('Called unimplemented virtual method SHAMapTreeNode#hash.');
  };

  /**
   * Inner (non-leaf) node in a SHAMap tree.
   * @param {Number} depth (i.e. how many parent inner nodes)
   * @class
   */
  function SHAMapTreeNodeInner(depth) {
    SHAMapTreeNode.call(this);
    this.leaves = {};
    this.type = SHAMapTreeNode.INNER;
    this.depth = depth === undefined ? 0 : depth;
    this.empty = true;
  }

  util.inherits(SHAMapTreeNodeInner, SHAMapTreeNode);

  /**
   * @param {String} tag (equates to a ledger entry `index`)
   * @param {SHAMapTreeNode} node (to add)
   * @return {void}
   */
  SHAMapTreeNodeInner.prototype.add_item = function(tag, node) {
    var depth = this.depth;
    var existing_node = this.get_node(tag[depth]);

    if (existing_node) {
      // A node already exists in this slot
      if (existing_node instanceof SHAMapTreeNodeInner) {
        // There is an inner node, so we need to go deeper
        existing_node.add_item(tag, node);
      } else if (existing_node.tag === tag) {
        // Collision
        throw new Error(
            'Tried to add a node to a SHAMap that was already in there.');
      } else {
        // Turn it into an inner node
        var new_inner_node = new SHAMapTreeNodeInner(depth + 1);

        // Parent new and existing node
        new_inner_node.add_item(existing_node.tag, existing_node);
        new_inner_node.add_item(tag, node);

        // And place the newly created inner node in the slot
        this.set_node(tag[depth], new_inner_node);
      }
    } else {
      // Neat, we have a nice open spot for the new node
      this.set_node(tag[depth], node);
    }
  };

  /**
   * Overwrite the node that is currently in a given slot.
   * @param {String} slot (a character 0-F)
   * @param {SHAMapTreeNode} node (to place)
   * @return {void}
   */
  SHAMapTreeNodeInner.prototype.set_node = function(slot, node) {
    this.leaves[slot] = node;
    this.empty = false;
  };

  SHAMapTreeNodeInner.prototype.get_node = function(slot) {
    return this.leaves[slot];
  };

  SHAMapTreeNodeInner.prototype.hash = function() {
    if (this.empty) {
      return HEX_ZERO;
    }

    var hex = '';
    for (var i = 0; i < 16; i++) {
      var slot = i.toString(16).toUpperCase();
      hex += this.leaves[slot] ? this.leaves[slot].hash() : HEX_ZERO;
    }

    var prefix = hashprefixes.HASH_INNER_NODE.toString(16);
    return hash(prefix + hex);
  };

  /**
   * Leaf node in a SHAMap tree.
   * @param {String} tag (equates to a ledger entry `index`)
   * @param {String} data (hex of account state, transaction etc)
   * @param {Number} type (one of TYPE_ACCOUNT_STATE, TYPE_TRANSACTION_MD etc)
   * @class
   */
  function SHAMapTreeNodeLeaf(tag, data, type) {
    SHAMapTreeNode.call(this);

    if (typeof tag !== 'string') {
      throw new Error('Tag is unexpected type.');
    }

    this.tag = tag;
    this.type = type;
    this.data = data;
  }

  util.inherits(SHAMapTreeNodeLeaf, SHAMapTreeNode);

  SHAMapTreeNodeLeaf.prototype.hash = function() {
    switch (this.type) {
      case SHAMapTreeNode.TYPE_ACCOUNT_STATE:
        var leafPrefix = hashprefixes.HASH_LEAF_NODE.toString(16);
        return hash(leafPrefix + this.data + this.tag);
      case SHAMapTreeNode.TYPE_TRANSACTION_NM:
        return this.tag;
      case SHAMapTreeNode.TYPE_TRANSACTION_MD:
        var txPrefix = hashprefixes.HASH_TX_NODE.toString(16);
        return hash(txPrefix + this.data + this.tag);
      default:
        throw new Error('Tried to hash a SHAMap node of unknown type.');
    }
  };

  function SHAMap() {
    this.root = new SHAMapTreeNodeInner(0);
  }

  SHAMap.prototype.add_item = function(tag, data, type) {
    this.root.add_item(tag, new SHAMapTreeNodeLeaf(tag, data, type));
  };

  SHAMap.prototype.hash = function() {
    return this.root.hash();
  };

  exports.SHAMap = SHAMap;
  exports.SHAMapTreeNode = SHAMapTreeNode;
  exports.SHAMapTreeNodeInner = SHAMapTreeNodeInner;
  exports.SHAMapTreeNodeLeaf = SHAMapTreeNodeLeaf;

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 568 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var createHash = __webpack_require__(569);

  // For a hash function, rippled uses SHA-512 and then truncates the result
  // to the first 256 bytes. This algorithm, informally called SHA-512Half,
  // provides an output that has comparable security to SHA-256, but runs
  // faster on 64-bit processors.
  function sha512half(buffer) {
    var sha512 = createHash('sha512');
    return sha512.update(buffer).digest('hex').toUpperCase().slice(0, 64);
  }

  module.exports = sha512half;


/***/ },
/* 569 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
  var inherits = __webpack_require__(570)
  var md5 = __webpack_require__(571)
  var rmd160 = __webpack_require__(573)
  var sha = __webpack_require__(574)

  var Base = __webpack_require__(582)

  function HashNoConstructor(hash) {
    Base.call(this, 'digest')

    this._hash = hash
    this.buffers = []
  }

  inherits(HashNoConstructor, Base)

  HashNoConstructor.prototype._update = function (data) {
    this.buffers.push(data)
  }

  HashNoConstructor.prototype._final = function () {
    var buf = Buffer.concat(this.buffers)
    var r = this._hash(buf)
    this.buffers = null

    return r
  }

  function Hash(hash) {
    Base.call(this, 'digest')

    this._hash = hash
  }

  inherits(Hash, Base)

  Hash.prototype._update = function (data) {
    this._hash.update(data)
  }

  Hash.prototype._final = function () {
    return this._hash.digest()
  }

  module.exports = function createHash (alg) {
    alg = alg.toLowerCase()
    if ('md5' === alg) return new HashNoConstructor(md5)
    if ('rmd160' === alg || 'ripemd160' === alg) return new HashNoConstructor(rmd160)

    return new Hash(sha(alg))
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 570 */
/***/ function(module, exports) {

  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }


/***/ },
/* 571 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  /*
   * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
   * Digest Algorithm, as defined in RFC 1321.
   * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for more info.
   */

  var helpers = __webpack_require__(572);

  /*
   * Calculate the MD5 of an array of little-endian words, and a bit length
   */
  function core_md5(x, len)
  {
    /* append padding */
    x[len >> 5] |= 0x80 << ((len) % 32);
    x[(((len + 64) >>> 9) << 4) + 14] = len;

    var a =  1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d =  271733878;

    for(var i = 0; i < x.length; i += 16)
    {
      var olda = a;
      var oldb = b;
      var oldc = c;
      var oldd = d;

      a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
      d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
      c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
      b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
      a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
      d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
      c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
      b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
      a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
      d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
      c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
      b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
      a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
      d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
      c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
      b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

      a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
      d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
      c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
      b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
      a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
      d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
      c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
      b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
      a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
      d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
      c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
      b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
      a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
      d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
      c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
      b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

      a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
      d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
      c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
      b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
      a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
      d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
      c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
      b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
      a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
      d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
      c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
      b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
      a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
      d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
      c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
      b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

      a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
      d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
      c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
      b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
      a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
      d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
      c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
      b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
      a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
      d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
      c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
      b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
      a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
      d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
      c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
      b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

      a = safe_add(a, olda);
      b = safe_add(b, oldb);
      c = safe_add(c, oldc);
      d = safe_add(d, oldd);
    }
    return Array(a, b, c, d);

  }

  /*
   * These functions implement the four basic operations the algorithm uses.
   */
  function md5_cmn(q, a, b, x, s, t)
  {
    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
  }
  function md5_ff(a, b, c, d, x, s, t)
  {
    return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
  }
  function md5_gg(a, b, c, d, x, s, t)
  {
    return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
  }
  function md5_hh(a, b, c, d, x, s, t)
  {
    return md5_cmn(b ^ c ^ d, a, b, x, s, t);
  }
  function md5_ii(a, b, c, d, x, s, t)
  {
    return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
  }

  /*
   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
   * to work around bugs in some JS interpreters.
   */
  function safe_add(x, y)
  {
    var lsw = (x & 0xFFFF) + (y & 0xFFFF);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return (msw << 16) | (lsw & 0xFFFF);
  }

  /*
   * Bitwise rotate a 32-bit number to the left.
   */
  function bit_rol(num, cnt)
  {
    return (num << cnt) | (num >>> (32 - cnt));
  }

  module.exports = function md5(buf) {
    return helpers.hash(buf, core_md5, 16);
  };

/***/ },
/* 572 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
  var intSize = 4;
  var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
  var chrsz = 8;

  function toArray(buf, bigEndian) {
    if ((buf.length % intSize) !== 0) {
      var len = buf.length + (intSize - (buf.length % intSize));
      buf = Buffer.concat([buf, zeroBuffer], len);
    }

    var arr = [];
    var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
    for (var i = 0; i < buf.length; i += intSize) {
      arr.push(fn.call(buf, i));
    }
    return arr;
  }

  function toBuffer(arr, size, bigEndian) {
    var buf = new Buffer(size);
    var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
    for (var i = 0; i < arr.length; i++) {
      fn.call(buf, arr[i], i * 4, true);
    }
    return buf;
  }

  function hash(buf, fn, hashSize, bigEndian) {
    if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
    var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
    return toBuffer(arr, hashSize, bigEndian);
  }
  exports.hash = hash;
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 573 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {/*
  CryptoJS v3.1.2
  code.google.com/p/crypto-js
  (c) 2009-2013 by Jeff Mott. All rights reserved.
  code.google.com/p/crypto-js/wiki/License
  */
  /** @preserve
  (c) 2012 by Cédric Mesnil. All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

      - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
      - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */

  // constants table
  var zl = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  ]

  var zr = [
    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  ]

  var sl = [
    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  ]

  var sr = [
    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  ]

  var hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]
  var hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]

  function bytesToWords (bytes) {
    var words = []
    for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
      words[b >>> 5] |= bytes[i] << (24 - b % 32)
    }
    return words
  }

  function wordsToBytes (words) {
    var bytes = []
    for (var b = 0; b < words.length * 32; b += 8) {
      bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)
    }
    return bytes
  }

  function processBlock (H, M, offset) {
    // swap endian
    for (var i = 0; i < 16; i++) {
      var offset_i = offset + i
      var M_offset_i = M[offset_i]

      // Swap
      M[offset_i] = (
        (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
        (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
      )
    }

    // Working variables
    var al, bl, cl, dl, el
    var ar, br, cr, dr, er

    ar = al = H[0]
    br = bl = H[1]
    cr = cl = H[2]
    dr = dl = H[3]
    er = el = H[4]

    // computation
    var t
    for (i = 0; i < 80; i += 1) {
      t = (al + M[offset + zl[i]]) | 0
      if (i < 16) {
        t += f1(bl, cl, dl) + hl[0]
      } else if (i < 32) {
        t += f2(bl, cl, dl) + hl[1]
      } else if (i < 48) {
        t += f3(bl, cl, dl) + hl[2]
      } else if (i < 64) {
        t += f4(bl, cl, dl) + hl[3]
      } else {// if (i<80) {
        t += f5(bl, cl, dl) + hl[4]
      }
      t = t | 0
      t = rotl(t, sl[i])
      t = (t + el) | 0
      al = el
      el = dl
      dl = rotl(cl, 10)
      cl = bl
      bl = t

      t = (ar + M[offset + zr[i]]) | 0
      if (i < 16) {
        t += f5(br, cr, dr) + hr[0]
      } else if (i < 32) {
        t += f4(br, cr, dr) + hr[1]
      } else if (i < 48) {
        t += f3(br, cr, dr) + hr[2]
      } else if (i < 64) {
        t += f2(br, cr, dr) + hr[3]
      } else {// if (i<80) {
        t += f1(br, cr, dr) + hr[4]
      }

      t = t | 0
      t = rotl(t, sr[i])
      t = (t + er) | 0
      ar = er
      er = dr
      dr = rotl(cr, 10)
      cr = br
      br = t
    }

    // intermediate hash value
    t = (H[1] + cl + dr) | 0
    H[1] = (H[2] + dl + er) | 0
    H[2] = (H[3] + el + ar) | 0
    H[3] = (H[4] + al + br) | 0
    H[4] = (H[0] + bl + cr) | 0
    H[0] = t
  }

  function f1 (x, y, z) {
    return ((x) ^ (y) ^ (z))
  }

  function f2 (x, y, z) {
    return (((x) & (y)) | ((~x) & (z)))
  }

  function f3 (x, y, z) {
    return (((x) | (~(y))) ^ (z))
  }

  function f4 (x, y, z) {
    return (((x) & (z)) | ((y) & (~(z))))
  }

  function f5 (x, y, z) {
    return ((x) ^ ((y) | (~(z))))
  }

  function rotl (x, n) {
    return (x << n) | (x >>> (32 - n))
  }

  function ripemd160 (message) {
    var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]

    if (typeof message === 'string') {
      message = new Buffer(message, 'utf8')
    }

    var m = bytesToWords(message)

    var nBitsLeft = message.length * 8
    var nBitsTotal = message.length * 8

    // Add padding
    m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)
    m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
      (((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
      (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00)
    )

    for (var i = 0; i < m.length; i += 16) {
      processBlock(H, m, i)
    }

    // swap endian
    for (i = 0; i < 5; i++) {
      // shortcut
      var H_i = H[i]

      // Swap
      H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
        (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00)
    }

    var digestbytes = wordsToBytes(H)
    return new Buffer(digestbytes)
  }

  module.exports = ripemd160

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 574 */
/***/ function(module, exports, __webpack_require__) {

  var exports = module.exports = function SHA (algorithm) {
    algorithm = algorithm.toLowerCase()

    var Algorithm = exports[algorithm]
    if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

    return new Algorithm()
  }

  exports.sha = __webpack_require__(575)
  exports.sha1 = __webpack_require__(577)
  exports.sha224 = __webpack_require__(578)
  exports.sha256 = __webpack_require__(579)
  exports.sha384 = __webpack_require__(580)
  exports.sha512 = __webpack_require__(581)


/***/ },
/* 575 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {/*
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
   * in FIPS PUB 180-1
   * This source code is derived from sha1.js of the same repository.
   * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
   * operation was added.
   */

  var inherits = __webpack_require__(570)
  var Hash = __webpack_require__(576)

  var W = new Array(80)

  function Sha () {
    this.init()
    this._w = W

    Hash.call(this, 64, 56)
  }

  inherits(Sha, Hash)

  Sha.prototype.init = function () {
    this._a = 0x67452301 | 0
    this._b = 0xefcdab89 | 0
    this._c = 0x98badcfe | 0
    this._d = 0x10325476 | 0
    this._e = 0xc3d2e1f0 | 0

    return this
  }

  /*
   * Bitwise rotate a 32-bit number to the left.
   */
  function rol (num, cnt) {
    return (num << cnt) | (num >>> (32 - cnt))
  }

  Sha.prototype._update = function (M) {
    var W = this._w

    var a = this._a
    var b = this._b
    var c = this._c
    var d = this._d
    var e = this._e

    var j = 0
    var k

    /*
     * SHA-1 has a bitwise rotate left operation. But, SHA is not
     * function calcW() { return rol(W[j - 3] ^ W[j -  8] ^ W[j - 14] ^ W[j - 16], 1) }
     */
    function calcW () { return W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16] }
    function loop (w, f) {
      W[j] = w

      var t = rol(a, 5) + f + e + w + k

      e = d
      d = c
      c = rol(b, 30)
      b = a
      a = t
      j++
    }

    k = 1518500249
    while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))
    while (j < 20) loop(calcW(), (b & c) | ((~b) & d))
    k = 1859775393
    while (j < 40) loop(calcW(), b ^ c ^ d)
    k = -1894007588
    while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))
    k = -899497514
    while (j < 80) loop(calcW(), b ^ c ^ d)

    this._a = (a + this._a) | 0
    this._b = (b + this._b) | 0
    this._c = (c + this._c) | 0
    this._d = (d + this._d) | 0
    this._e = (e + this._e) | 0
  }

  Sha.prototype._hash = function () {
    var H = new Buffer(20)

    H.writeInt32BE(this._a | 0, 0)
    H.writeInt32BE(this._b | 0, 4)
    H.writeInt32BE(this._c | 0, 8)
    H.writeInt32BE(this._d | 0, 12)
    H.writeInt32BE(this._e | 0, 16)

    return H
  }

  module.exports = Sha


  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 576 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {// prototype class for hash functions
  function Hash (blockSize, finalSize) {
    this._block = new Buffer(blockSize)
    this._finalSize = finalSize
    this._blockSize = blockSize
    this._len = 0
    this._s = 0
  }

  Hash.prototype.update = function (data, enc) {
    if (typeof data === 'string') {
      enc = enc || 'utf8'
      data = new Buffer(data, enc)
    }

    var l = this._len += data.length
    var s = this._s || 0
    var f = 0
    var buffer = this._block

    while (s < l) {
      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
      var ch = (t - f)

      for (var i = 0; i < ch; i++) {
        buffer[(s % this._blockSize) + i] = data[i + f]
      }

      s += ch
      f += ch

      if ((s % this._blockSize) === 0) {
        this._update(buffer)
      }
    }
    this._s = s

    return this
  }

  Hash.prototype.digest = function (enc) {
    // Suppose the length of the message M, in bits, is l
    var l = this._len * 8

    // Append the bit 1 to the end of the message
    this._block[this._len % this._blockSize] = 0x80

    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
    this._block.fill(0, this._len % this._blockSize + 1)

    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
      this._update(this._block)
      this._block.fill(0)
    }

    // to this append the block which is equal to the number l written in binary
    // TODO: handle case where l is > Math.pow(2, 29)
    this._block.writeInt32BE(l, this._blockSize - 4)

    var hash = this._update(this._block) || this._hash()

    return enc ? hash.toString(enc) : hash
  }

  Hash.prototype._update = function () {
    throw new Error('_update must be implemented by subclass')
  }

  module.exports = Hash

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 577 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {/*
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
   * in FIPS PUB 180-1
   * Version 2.1a Copyright Paul Johnston 2000 - 2002.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for details.
   */

  var inherits = __webpack_require__(570)
  var Hash = __webpack_require__(576)

  var W = new Array(80)

  function Sha1 () {
    this.init()
    this._w = W

    Hash.call(this, 64, 56)
  }

  inherits(Sha1, Hash)

  Sha1.prototype.init = function () {
    this._a = 0x67452301 | 0
    this._b = 0xefcdab89 | 0
    this._c = 0x98badcfe | 0
    this._d = 0x10325476 | 0
    this._e = 0xc3d2e1f0 | 0

    return this
  }

  /*
   * Bitwise rotate a 32-bit number to the left.
   */
  function rol (num, cnt) {
    return (num << cnt) | (num >>> (32 - cnt))
  }

  Sha1.prototype._update = function (M) {
    var W = this._w

    var a = this._a
    var b = this._b
    var c = this._c
    var d = this._d
    var e = this._e

    var j = 0
    var k

    function calcW () { return rol(W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16], 1) }
    function loop (w, f) {
      W[j] = w

      var t = rol(a, 5) + f + e + w + k

      e = d
      d = c
      c = rol(b, 30)
      b = a
      a = t
      j++
    }

    k = 1518500249
    while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))
    while (j < 20) loop(calcW(), (b & c) | ((~b) & d))
    k = 1859775393
    while (j < 40) loop(calcW(), b ^ c ^ d)
    k = -1894007588
    while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))
    k = -899497514
    while (j < 80) loop(calcW(), b ^ c ^ d)

    this._a = (a + this._a) | 0
    this._b = (b + this._b) | 0
    this._c = (c + this._c) | 0
    this._d = (d + this._d) | 0
    this._e = (e + this._e) | 0
  }

  Sha1.prototype._hash = function () {
    var H = new Buffer(20)

    H.writeInt32BE(this._a | 0, 0)
    H.writeInt32BE(this._b | 0, 4)
    H.writeInt32BE(this._c | 0, 8)
    H.writeInt32BE(this._d | 0, 12)
    H.writeInt32BE(this._e | 0, 16)

    return H
  }

  module.exports = Sha1

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 578 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {/**
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
   * in FIPS 180-2
   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   *
   */

  var inherits = __webpack_require__(570)
  var Sha256 = __webpack_require__(579)
  var Hash = __webpack_require__(576)

  var W = new Array(64)

  function Sha224 () {
    this.init()

    this._w = W // new Array(64)

    Hash.call(this, 64, 56)
  }

  inherits(Sha224, Sha256)

  Sha224.prototype.init = function () {
    this._a = 0xc1059ed8 | 0
    this._b = 0x367cd507 | 0
    this._c = 0x3070dd17 | 0
    this._d = 0xf70e5939 | 0
    this._e = 0xffc00b31 | 0
    this._f = 0x68581511 | 0
    this._g = 0x64f98fa7 | 0
    this._h = 0xbefa4fa4 | 0

    return this
  }

  Sha224.prototype._hash = function () {
    var H = new Buffer(28)

    H.writeInt32BE(this._a, 0)
    H.writeInt32BE(this._b, 4)
    H.writeInt32BE(this._c, 8)
    H.writeInt32BE(this._d, 12)
    H.writeInt32BE(this._e, 16)
    H.writeInt32BE(this._f, 20)
    H.writeInt32BE(this._g, 24)

    return H
  }

  module.exports = Sha224

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 579 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {/**
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
   * in FIPS 180-2
   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   *
   */

  var inherits = __webpack_require__(570)
  var Hash = __webpack_require__(576)

  var K = [
    0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
    0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
    0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
    0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
    0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
    0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
    0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
    0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
    0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
    0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
    0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
    0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
    0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
    0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
    0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
    0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
  ]

  var W = new Array(64)

  function Sha256 () {
    this.init()

    this._w = W // new Array(64)

    Hash.call(this, 64, 56)
  }

  inherits(Sha256, Hash)

  Sha256.prototype.init = function () {
    this._a = 0x6a09e667 | 0
    this._b = 0xbb67ae85 | 0
    this._c = 0x3c6ef372 | 0
    this._d = 0xa54ff53a | 0
    this._e = 0x510e527f | 0
    this._f = 0x9b05688c | 0
    this._g = 0x1f83d9ab | 0
    this._h = 0x5be0cd19 | 0

    return this
  }

  function Ch (x, y, z) {
    return z ^ (x & (y ^ z))
  }

  function Maj (x, y, z) {
    return (x & y) | (z & (x | y))
  }

  function Sigma0 (x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
  }

  function Sigma1 (x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
  }

  function Gamma0 (x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
  }

  function Gamma1 (x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
  }

  Sha256.prototype._update = function (M) {
    var W = this._w

    var a = this._a | 0
    var b = this._b | 0
    var c = this._c | 0
    var d = this._d | 0
    var e = this._e | 0
    var f = this._f | 0
    var g = this._g | 0
    var h = this._h | 0

    var j = 0

    function calcW () { return Gamma1(W[j - 2]) + W[j - 7] + Gamma0(W[j - 15]) + W[j - 16] }
    function loop (w) {
      W[j] = w

      var T1 = h + Sigma1(e) + Ch(e, f, g) + K[j] + w
      var T2 = Sigma0(a) + Maj(a, b, c)

      h = g
      g = f
      f = e
      e = d + T1
      d = c
      c = b
      b = a
      a = T1 + T2

      j++
    }

    while (j < 16) loop(M.readInt32BE(j * 4))
    while (j < 64) loop(calcW())

    this._a = (a + this._a) | 0
    this._b = (b + this._b) | 0
    this._c = (c + this._c) | 0
    this._d = (d + this._d) | 0
    this._e = (e + this._e) | 0
    this._f = (f + this._f) | 0
    this._g = (g + this._g) | 0
    this._h = (h + this._h) | 0
  }

  Sha256.prototype._hash = function () {
    var H = new Buffer(32)

    H.writeInt32BE(this._a, 0)
    H.writeInt32BE(this._b, 4)
    H.writeInt32BE(this._c, 8)
    H.writeInt32BE(this._d, 12)
    H.writeInt32BE(this._e, 16)
    H.writeInt32BE(this._f, 20)
    H.writeInt32BE(this._g, 24)
    H.writeInt32BE(this._h, 28)

    return H
  }

  module.exports = Sha256

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 580 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {var inherits = __webpack_require__(570)
  var SHA512 = __webpack_require__(581)
  var Hash = __webpack_require__(576)

  var W = new Array(160)

  function Sha384 () {
    this.init()
    this._w = W

    Hash.call(this, 128, 112)
  }

  inherits(Sha384, SHA512)

  Sha384.prototype.init = function () {
    this._a = 0xcbbb9d5d | 0
    this._b = 0x629a292a | 0
    this._c = 0x9159015a | 0
    this._d = 0x152fecd8 | 0
    this._e = 0x67332667 | 0
    this._f = 0x8eb44a87 | 0
    this._g = 0xdb0c2e0d | 0
    this._h = 0x47b5481d | 0

    this._al = 0xc1059ed8 | 0
    this._bl = 0x367cd507 | 0
    this._cl = 0x3070dd17 | 0
    this._dl = 0xf70e5939 | 0
    this._el = 0xffc00b31 | 0
    this._fl = 0x68581511 | 0
    this._gl = 0x64f98fa7 | 0
    this._hl = 0xbefa4fa4 | 0

    return this
  }

  Sha384.prototype._hash = function () {
    var H = new Buffer(48)

    function writeInt64BE (h, l, offset) {
      H.writeInt32BE(h, offset)
      H.writeInt32BE(l, offset + 4)
    }

    writeInt64BE(this._a, this._al, 0)
    writeInt64BE(this._b, this._bl, 8)
    writeInt64BE(this._c, this._cl, 16)
    writeInt64BE(this._d, this._dl, 24)
    writeInt64BE(this._e, this._el, 32)
    writeInt64BE(this._f, this._fl, 40)

    return H
  }

  module.exports = Sha384

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 581 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {var inherits = __webpack_require__(570)
  var Hash = __webpack_require__(576)

  var K = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  ]

  var W = new Array(160)

  function Sha512 () {
    this.init()
    this._w = W

    Hash.call(this, 128, 112)
  }

  inherits(Sha512, Hash)

  Sha512.prototype.init = function () {
    this._a = 0x6a09e667 | 0
    this._b = 0xbb67ae85 | 0
    this._c = 0x3c6ef372 | 0
    this._d = 0xa54ff53a | 0
    this._e = 0x510e527f | 0
    this._f = 0x9b05688c | 0
    this._g = 0x1f83d9ab | 0
    this._h = 0x5be0cd19 | 0

    this._al = 0xf3bcc908 | 0
    this._bl = 0x84caa73b | 0
    this._cl = 0xfe94f82b | 0
    this._dl = 0x5f1d36f1 | 0
    this._el = 0xade682d1 | 0
    this._fl = 0x2b3e6c1f | 0
    this._gl = 0xfb41bd6b | 0
    this._hl = 0x137e2179 | 0

    return this
  }

  function Ch (x, y, z) {
    return z ^ (x & (y ^ z))
  }

  function Maj (x, y, z) {
    return (x & y) | (z & (x | y))
  }

  function Sigma0 (x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
  }

  function Sigma1 (x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
  }

  function Gamma0 (x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
  }

  function Gamma0l (x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
  }

  function Gamma1 (x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
  }

  function Gamma1l (x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
  }

  Sha512.prototype._update = function (M) {
    var W = this._w

    var a = this._a | 0
    var b = this._b | 0
    var c = this._c | 0
    var d = this._d | 0
    var e = this._e | 0
    var f = this._f | 0
    var g = this._g | 0
    var h = this._h | 0

    var al = this._al | 0
    var bl = this._bl | 0
    var cl = this._cl | 0
    var dl = this._dl | 0
    var el = this._el | 0
    var fl = this._fl | 0
    var gl = this._gl | 0
    var hl = this._hl | 0

    var i = 0
    var j = 0
    var Wi, Wil
    function calcW () {
      var x = W[j - 15 * 2]
      var xl = W[j - 15 * 2 + 1]
      var gamma0 = Gamma0(x, xl)
      var gamma0l = Gamma0l(xl, x)

      x = W[j - 2 * 2]
      xl = W[j - 2 * 2 + 1]
      var gamma1 = Gamma1(x, xl)
      var gamma1l = Gamma1l(xl, x)

      // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
      var Wi7 = W[j - 7 * 2]
      var Wi7l = W[j - 7 * 2 + 1]

      var Wi16 = W[j - 16 * 2]
      var Wi16l = W[j - 16 * 2 + 1]

      Wil = gamma0l + Wi7l
      Wi = gamma0 + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
      Wil = Wil + gamma1l
      Wi = Wi + gamma1 + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
      Wil = Wil + Wi16l
      Wi = Wi + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)
    }

    function loop () {
      W[j] = Wi
      W[j + 1] = Wil

      var maj = Maj(a, b, c)
      var majl = Maj(al, bl, cl)

      var sigma0h = Sigma0(a, al)
      var sigma0l = Sigma0(al, a)
      var sigma1h = Sigma1(e, el)
      var sigma1l = Sigma1(el, e)

      // t1 = h + sigma1 + ch + K[i] + W[i]
      var Ki = K[j]
      var Kil = K[j + 1]

      var ch = Ch(e, f, g)
      var chl = Ch(el, fl, gl)

      var t1l = hl + sigma1l
      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
      t1l = t1l + chl
      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
      t1l = t1l + Kil
      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
      t1l = t1l + Wil
      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

      // t2 = sigma0 + maj
      var t2l = sigma0l + majl
      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

      h = g
      hl = gl
      g = f
      gl = fl
      f = e
      fl = el
      el = (dl + t1l) | 0
      e = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
      d = c
      dl = cl
      c = b
      cl = bl
      b = a
      bl = al
      al = (t1l + t2l) | 0
      a = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0

      i++
      j += 2
    }

    while (i < 16) {
      Wi = M.readInt32BE(j * 4)
      Wil = M.readInt32BE(j * 4 + 4)

      loop()
    }

    while (i < 80) {
      calcW()
      loop()
    }

    this._al = (this._al + al) | 0
    this._bl = (this._bl + bl) | 0
    this._cl = (this._cl + cl) | 0
    this._dl = (this._dl + dl) | 0
    this._el = (this._el + el) | 0
    this._fl = (this._fl + fl) | 0
    this._gl = (this._gl + gl) | 0
    this._hl = (this._hl + hl) | 0

    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
  }

  Sha512.prototype._hash = function () {
    var H = new Buffer(64)

    function writeInt64BE (h, l, offset) {
      H.writeInt32BE(h, offset)
      H.writeInt32BE(l, offset + 4)
    }

    writeInt64BE(this._a, this._al, 0)
    writeInt64BE(this._b, this._bl, 8)
    writeInt64BE(this._c, this._cl, 16)
    writeInt64BE(this._d, this._dl, 24)
    writeInt64BE(this._e, this._el, 32)
    writeInt64BE(this._f, this._fl, 40)
    writeInt64BE(this._g, this._gl, 48)
    writeInt64BE(this._h, this._hl, 56)

    return H
  }

  module.exports = Sha512

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 582 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {var Transform = __webpack_require__(285).Transform
  var inherits = __webpack_require__(570)
  var StringDecoder = __webpack_require__(295).StringDecoder
  module.exports = CipherBase
  inherits(CipherBase, Transform)
  function CipherBase (hashMode) {
    Transform.call(this)
    this.hashMode = typeof hashMode === 'string'
    if (this.hashMode) {
      this[hashMode] = this._finalOrDigest
    } else {
      this.final = this._finalOrDigest
    }
    this._decoder = null
    this._encoding = null
  }
  CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
    if (typeof data === 'string') {
      data = new Buffer(data, inputEnc)
    }
    var outData = this._update(data)
    if (this.hashMode) {
      return this
    }
    if (outputEnc) {
      outData = this._toString(outData, outputEnc)
    }
    return outData
  }

  CipherBase.prototype.setAutoPadding = function () {}

  CipherBase.prototype.getAuthTag = function () {
    throw new Error('trying to get auth tag in unsupported state')
  }

  CipherBase.prototype.setAuthTag = function () {
    throw new Error('trying to set auth tag in unsupported state')
  }

  CipherBase.prototype.setAAD = function () {
    throw new Error('trying to set aad in unsupported state')
  }

  CipherBase.prototype._transform = function (data, _, next) {
    var err
    try {
      if (this.hashMode) {
        this._update(data)
      } else {
        this.push(this._update(data))
      }
    } catch (e) {
      err = e
    } finally {
      next(err)
    }
  }
  CipherBase.prototype._flush = function (done) {
    var err
    try {
      this.push(this._final())
    } catch (e) {
      err = e
    } finally {
      done(err)
    }
  }
  CipherBase.prototype._finalOrDigest = function (outputEnc) {
    var outData = this._final() || new Buffer('')
    if (outputEnc) {
      outData = this._toString(outData, outputEnc, true)
    }
    return outData
  }

  CipherBase.prototype._toString = function (value, enc, final) {
    if (!this._decoder) {
      this._decoder = new StringDecoder(enc)
      this._encoding = enc
    }
    if (this._encoding !== enc) {
      throw new Error('can\'t switch encodings')
    }
    var out = this._decoder.write(value)
    if (final) {
      out += this._decoder.end()
    }
    return out
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 583 */
/***/ function(module, exports) {

  /**
   * Ripple ledger namespace prefixes.
   *
   * The Ripple ledger is a key-value store. In order to avoid name collisions,
   * names are partitioned into namespaces.
   *
   * Each namespace is just a single character prefix.
   */
  module.exports = {
    account        : 'a',
    dirNode        : 'd',
    generatorMap   : 'g',
    nickname       : 'n',
    rippleState    : 'r',
    offer          : 'o',  // Entry for an offer.
    ownerDir       : 'O',  // Directory of things owned by an account.
    bookDir        : 'B',  // Directory of order books.
    contract       : 'c',
    skipList       : 's',
    amendment      : 'f',
    feeSettings    : 'e'
  };

/***/ },
/* 584 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var utils = __webpack_require__(440);
  var validate = utils.common.validate;

  var parseAccountTrustline = __webpack_require__(585);

  function currencyFilter(currency, trustline) {
    return currency === null || trustline.specification.currency === currency;
  }

  function formatResponse(options, data) {
    return {
      marker: data.marker,
      results: data.lines.map(parseAccountTrustline).filter(_.partial(currencyFilter, options.currency || null))
    };
  }

  function getAccountLines(connection, address, ledgerVersion, options, marker, limit) {
    var request = {
      command: 'account_lines',
      account: address,
      ledger_index: ledgerVersion,
      marker: marker,
      limit: utils.clamp(limit, 10, 400),
      peer: options.counterparty
    };

    return connection.request(request).then(_.partial(formatResponse, options));
  }

  function getTrustlines(address) {
    var _this = this;

    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    validate.getTrustlines({ address: address, options: options });

    return this.getLedgerVersion().then(function (ledgerVersion) {
      var getter = _.partial(getAccountLines, _this.connection, address, options.ledgerVersion || ledgerVersion, options);
      return utils.getRecursive(getter, options.limit);
    });
  }

  module.exports = getTrustlines;

/***/ },
/* 585 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var utils = __webpack_require__(442);

  // rippled 'account_lines' returns a different format for
  // trustlines than 'tx'
  function parseAccountTrustline(trustline) {
    var specification = utils.removeUndefined({
      limit: trustline.limit,
      currency: trustline.currency,
      counterparty: trustline.account,
      qualityIn: utils.parseQuality(trustline.quality_in) || undefined,
      qualityOut: utils.parseQuality(trustline.quality_out) || undefined,
      ripplingDisabled: trustline.no_ripple || undefined,
      frozen: trustline.freeze || undefined,
      authorized: trustline.authorized || undefined
    });
    // rippled doesn't provide the counterparty's qualities
    var counterparty = utils.removeUndefined({
      limit: trustline.limit_peer,
      ripplingDisabled: trustline.no_ripple_peer || undefined,
      frozen: trustline.freeze_peer || undefined,
      authorized: trustline.peer_authorized || undefined
    });
    var state = {
      balance: trustline.balance
    };
    return { specification: specification, counterparty: counterparty, state: state };
  }

  module.exports = parseAccountTrustline;

/***/ },
/* 586 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var utils = __webpack_require__(440);
  var validate = utils.common.validate;

  function getTrustlineBalanceAmount(trustline) {
    return {
      currency: trustline.specification.currency,
      counterparty: trustline.specification.counterparty,
      value: trustline.state.balance
    };
  }

  function formatBalances(options, balances) {
    var result = balances.trustlines.map(getTrustlineBalanceAmount);
    if (!(options.counterparty || options.currency && options.currency !== 'XRP')) {
      var xrpBalance = {
        currency: 'XRP',
        value: balances.xrp
      };
      result.unshift(xrpBalance);
    }
    if (options.limit && result.length > options.limit) {
      var toRemove = result.length - options.limit;
      result.splice(-toRemove, toRemove);
    }
    return result;
  }

  function getLedgerVersionHelper(connection, optionValue) {
    if (optionValue !== undefined && optionValue !== null) {
      return Promise.resolve(optionValue);
    }
    return connection.getLedgerVersion();
  }

  function getBalances(address) {
    var _this = this;

    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    validate.getTrustlines({ address: address, options: options });

    return Promise.all([getLedgerVersionHelper(this.connection, options.ledgerVersion).then(function (ledgerVersion) {
      return utils.getXRPBalance(_this.connection, address, ledgerVersion);
    }), this.getTrustlines(address, options)]).then(function (results) {
      return formatBalances(options, { xrp: results[0], trustlines: results[1] });
    });
  }

  module.exports = getBalances;

/***/ },
/* 587 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var utils = __webpack_require__(440);
  var validate = utils.common.validate;

  function formatBalanceSheet(balanceSheet) {
    var result = {};

    if (!_.isUndefined(balanceSheet.balances)) {
      result.balances = [];
      _.forEach(balanceSheet.balances, function (balances, counterparty) {
        _.forEach(balances, function (balance) {
          result.balances.push(Object.assign({ counterparty: counterparty }, balance));
        });
      });
    }
    if (!_.isUndefined(balanceSheet.assets)) {
      result.assets = [];
      _.forEach(balanceSheet.assets, function (assets, counterparty) {
        _.forEach(assets, function (balance) {
          result.assets.push(Object.assign({ counterparty: counterparty }, balance));
        });
      });
    }
    if (!_.isUndefined(balanceSheet.obligations)) {
      result.obligations = _.map(balanceSheet.obligations, function (value, currency) {
        return { currency: currency, value: value };
      });
    }

    return result;
  }

  function getBalanceSheet(address) {
    var _this = this;

    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    validate.getBalanceSheet({ address: address, options: options });

    return utils.ensureLedgerVersion.call(this, options).then(function (_options) {
      var request = {
        command: 'gateway_balances',
        account: address,
        strict: true,
        hotwallet: _options.excludeAddresses,
        ledger_index: _options.ledgerVersion
      };

      return _this.connection.request(request).then(formatBalanceSheet);
    });
  }

  module.exports = getBalanceSheet;

/***/ },
/* 588 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

  var _ = __webpack_require__(192);
  var BigNumber = __webpack_require__(196);
  var utils = __webpack_require__(440);
  var parsePathfind = __webpack_require__(589);
  var _utils$common = utils.common;
  var validate = _utils$common.validate;
  var toRippledAmount = _utils$common.toRippledAmount;

  var NotFoundError = utils.common.errors.NotFoundError;
  var ValidationError = utils.common.errors.ValidationError;

  function addParams(request, result) {
    return _.defaults(_.assign({}, result, {
      source_account: request.source_account,
      source_currencies: request.source_currencies
    }), { destination_amount: request.destination_amount });
  }

  function requestPathFind(connection, pathfind) {
    var destinationAmount = _.assign({ value: -1 }, pathfind.destination.amount);
    var request = {
      command: 'ripple_path_find',
      source_account: pathfind.source.address,
      destination_account: pathfind.destination.address,
      destination_amount: toRippledAmount(destinationAmount)
    };
    if (_typeof(request.destination_amount) === 'object' && !request.destination_amount.issuer) {
      // Convert blank issuer to sender's address
      // (Ripple convention for 'any issuer')
      // https://ripple.com/build/transactions/
      //     #special-issuer-values-for-sendmax-and-amount
      // https://ripple.com/build/ripple-rest/#counterparties-in-payments
      request.destination_amount.issuer = request.destination_account;
    }
    if (pathfind.source.currencies && pathfind.source.currencies.length > 0) {
      request.source_currencies = pathfind.source.currencies.map(function (amount) {
        return _.omit(toRippledAmount(amount), 'value');
      });
    }
    if (pathfind.source.amount) {
      if (pathfind.destination.amount.value !== undefined) {
        throw new ValidationError('Cannot specify both source.amount' + ' and destination.amount.value in getPaths');
      }
      request.send_max = toRippledAmount(pathfind.source.amount);
      if (request.send_max.currency && !request.send_max.issuer) {
        request.send_max.issuer = pathfind.source.address;
      }
    }

    return connection.request(request).then(function (paths) {
      return addParams(request, paths);
    });
  }

  function addDirectXrpPath(paths, xrpBalance) {
    // Add XRP "path" only if the source acct has enough XRP to make the payment
    var destinationAmount = paths.destination_amount;
    if (new BigNumber(xrpBalance).greaterThanOrEqualTo(destinationAmount)) {
      paths.alternatives.unshift({
        paths_computed: [],
        source_amount: paths.destination_amount
      });
    }
    return paths;
  }

  function isRippledIOUAmount(amount) {
    // rippled XRP amounts are specified as decimal strings
    return (typeof amount === 'undefined' ? 'undefined' : _typeof(amount)) === 'object' && amount.currency && amount.currency !== 'XRP';
  }

  function conditionallyAddDirectXRPPath(connection, address, paths) {
    if (isRippledIOUAmount(paths.destination_amount) || !_.includes(paths.destination_currencies, 'XRP')) {
      return Promise.resolve(paths);
    }
    return utils.getXRPBalance(connection, address, undefined).then(function (xrpBalance) {
      return addDirectXrpPath(paths, xrpBalance);
    });
  }

  function filterSourceFundsLowPaths(pathfind, paths) {
    if (pathfind.source.amount && pathfind.destination.amount.value === undefined && paths.alternatives) {
      paths.alternatives = _.filter(paths.alternatives, function (alt) {
        return alt.source_amount && pathfind.source.amount && alt.source_amount.value === pathfind.source.amount.value;
      });
    }
    return paths;
  }

  function formatResponse(pathfind, paths) {
    if (paths.alternatives && paths.alternatives.length > 0) {
      return parsePathfind(paths);
    }
    if (paths.destination_currencies !== undefined && !_.includes(paths.destination_currencies, pathfind.destination.amount.currency)) {
      throw new NotFoundError('No paths found. ' + 'The destination_account does not accept ' + pathfind.destination.amount.currency + ', they only accept: ' + paths.destination_currencies.join(', '));
    } else if (paths.source_currencies && paths.source_currencies.length > 0) {
      throw new NotFoundError('No paths found. Please ensure' + ' that the source_account has sufficient funds to execute' + ' the payment in one of the specified source_currencies. If it does' + ' there may be insufficient liquidity in the network to execute' + ' this payment right now');
    } else {
      throw new NotFoundError('No paths found.' + ' Please ensure that the source_account has sufficient funds to' + ' execute the payment. If it does there may be insufficient liquidity' + ' in the network to execute this payment right now');
    }
  }

  function getPaths(pathfind) {
    var _this = this;

    validate.getPaths({ pathfind: pathfind });

    var address = pathfind.source.address;
    return requestPathFind(this.connection, pathfind).then(function (paths) {
      return conditionallyAddDirectXRPPath(_this.connection, address, paths);
    }).then(function (paths) {
      return filterSourceFundsLowPaths(pathfind, paths);
    }).then(function (paths) {
      return formatResponse(pathfind, paths);
    });
  }

  module.exports = getPaths;

/***/ },
/* 589 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var parseAmount = __webpack_require__(449);

  function parsePaths(paths) {
    return paths.map(function (steps) {
      return steps.map(function (step) {
        return _.omit(step, ['type', 'type_hex']);
      });
    });
  }

  function removeAnyCounterpartyEncoding(address, amount) {
    return amount.counterparty === address ? _.omit(amount, 'counterparty') : amount;
  }

  function createAdjustment(address, adjustmentWithoutAddress) {
    var amountKey = _.keys(adjustmentWithoutAddress)[0];
    var amount = adjustmentWithoutAddress[amountKey];
    return _.set({ address: address }, amountKey, removeAnyCounterpartyEncoding(address, amount));
  }

  function parseAlternative(sourceAddress, destinationAddress, destinationAmount, alternative) {
    // we use "maxAmount"/"minAmount" here so that the result can be passed
    // directly to preparePayment
    var amounts = alternative.destination_amount !== undefined ? { source: { amount: parseAmount(alternative.source_amount) },
      destination: { minAmount: parseAmount(alternative.destination_amount) } } : { source: { maxAmount: parseAmount(alternative.source_amount) },
      destination: { amount: parseAmount(destinationAmount) } };

    return {
      source: createAdjustment(sourceAddress, amounts.source),
      destination: createAdjustment(destinationAddress, amounts.destination),
      paths: JSON.stringify(parsePaths(alternative.paths_computed))
    };
  }

  function parsePathfind(pathfindResult) {
    var sourceAddress = pathfindResult.source_account;
    var destinationAddress = pathfindResult.destination_account;
    var destinationAmount = pathfindResult.destination_amount;
    return pathfindResult.alternatives.map(_.partial(parseAlternative, sourceAddress, destinationAddress, destinationAmount));
  }

  module.exports = parsePathfind;

/***/ },
/* 590 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var utils = __webpack_require__(440);
  var validate = utils.common.validate;

  var parseAccountOrder = __webpack_require__(591);

  function requestAccountOffers(connection, address, ledgerVersion, marker, limit) {
    return connection.request({
      command: 'account_offers',
      account: address,
      marker: marker,
      limit: utils.clamp(limit, 10, 400),
      ledger_index: ledgerVersion
    }).then(function (data) {
      return {
        marker: data.marker,
        results: data.offers.map(_.partial(parseAccountOrder, address))
      };
    });
  }

  function getOrders(address) {
    var _this = this;

    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    validate.getOrders({ address: address, options: options });

    return utils.ensureLedgerVersion.call(this, options).then(function (_options) {
      var getter = _.partial(requestAccountOffers, _this.connection, address, _options.ledgerVersion);
      return utils.getRecursive(getter, _options.limit).then(function (orders) {
        return _.sortBy(orders, function (order) {
          return order.properties.sequence;
        });
      });
    });
  }

  module.exports = getOrders;

/***/ },
/* 591 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var utils = __webpack_require__(442);
  var flags = __webpack_require__(592).orderFlags;
  var parseAmount = __webpack_require__(449);
  var BigNumber = __webpack_require__(196);

  // TODO: remove this function once rippled provides quality directly
  function computeQuality(takerGets, takerPays) {
    var quotient = new BigNumber(takerPays.value).dividedBy(takerGets.value);
    return quotient.toDigits(16, BigNumber.ROUND_HALF_UP).toString();
  }

  // rippled 'account_offers' returns a different format for orders than 'tx'
  // the flags are also different
  function parseAccountOrder(address, order) {
    var direction = (order.flags & flags.Sell) === 0 ? 'buy' : 'sell';
    var takerGetsAmount = parseAmount(order.taker_gets);
    var takerPaysAmount = parseAmount(order.taker_pays);
    var quantity = direction === 'buy' ? takerPaysAmount : takerGetsAmount;
    var totalPrice = direction === 'buy' ? takerGetsAmount : takerPaysAmount;

    // note: immediateOrCancel and fillOrKill orders cannot enter the order book
    // so we can omit those flags here
    var specification = utils.removeUndefined({
      direction: direction,
      quantity: quantity,
      totalPrice: totalPrice,
      passive: (order.flags & flags.Passive) !== 0 || undefined,
      // rippled currently does not provide "expiration" in account_offers
      expirationTime: utils.parseTimestamp(order.expiration)
    });

    var properties = {
      maker: address,
      sequence: order.seq,
      makerExchangeRate: order.quality ? order.quality.toString() : computeQuality(takerGetsAmount, takerPaysAmount)
    };

    return { specification: specification, properties: properties };
  }

  module.exports = parseAccountOrder;

/***/ },
/* 592 */
/***/ function(module, exports) {

  'use strict';

  var orderFlags = {
    Passive: 0x00010000,
    Sell: 0x00020000 // offer was placed as a sell
  };

  var trustlineFlags = {
    LowReserve: 0x00010000, // entry counts toward reserve
    HighReserve: 0x00020000,
    LowAuth: 0x00040000,
    HighAuth: 0x00080000,
    LowNoRipple: 0x00100000,
    HighNoRipple: 0x00200000,
    LowFreeze: 0x00400000,
    HighFreeze: 0x00800000
  };

  module.exports = {
    orderFlags: orderFlags,
    trustlineFlags: trustlineFlags
  };

/***/ },
/* 593 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var utils = __webpack_require__(440);
  var validate = utils.common.validate;

  var parseOrderbookOrder = __webpack_require__(594);

  // account is to specify a "perspective", which affects which unfunded offers
  // are returned
  function getBookOffers(connection, account, ledgerVersion, limit, takerGets, takerPays) {
    return connection.request(utils.renameCounterpartyToIssuerInOrder({
      command: 'book_offers',
      taker_gets: takerGets,
      taker_pays: takerPays,
      ledger_index: ledgerVersion || 'validated',
      limit: limit,
      taker: account
    })).then(function (data) {
      return data.offers;
    });
  }

  function isSameIssue(a, b) {
    return a.currency === b.currency && a.counterparty === b.counterparty;
  }

  function directionFilter(direction, order) {
    return order.specification.direction === direction;
  }

  function flipOrder(order) {
    var specification = order.specification;
    var flippedSpecification = {
      quantity: specification.totalPrice,
      totalPrice: specification.quantity,
      direction: specification.direction === 'buy' ? 'sell' : 'buy'
    };
    var newSpecification = _.merge({}, specification, flippedSpecification);
    return _.merge({}, order, { specification: newSpecification });
  }

  function alignOrder(base, order) {
    var quantity = order.specification.quantity;
    return isSameIssue(quantity, base) ? order : flipOrder(order);
  }

  function formatBidsAndAsks(orderbook, offers) {
    // the "base" currency is the currency that you are buying or selling
    // the "counter" is the currency that the "base" is priced in
    // a "bid"/"ask" is an order to buy/sell the base, respectively
    // for bids: takerGets = totalPrice = counter, takerPays = quantity = base
    // for asks: takerGets = quantity = base, takerPays = totalPrice = counter
    // quality = takerPays / takerGets; price = totalPrice / quantity
    // for bids: lowest quality => lowest quantity/totalPrice => highest price
    // for asks: lowest quality => lowest totalPrice/quantity => lowest price
    // for both bids and asks, lowest quality is closest to mid-market
    // we sort the orders so that earlier orders are closer to mid-market
    var orders = _.sortBy(offers, 'quality').map(parseOrderbookOrder);
    var alignedOrders = orders.map(_.partial(alignOrder, orderbook.base));
    var bids = alignedOrders.filter(_.partial(directionFilter, 'buy'));
    var asks = alignedOrders.filter(_.partial(directionFilter, 'sell'));
    return { bids: bids, asks: asks };
  }

  function getOrderbook(address, orderbook) {
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    validate.getOrderbook({ address: address, orderbook: orderbook, options: options });

    var getter = _.partial(getBookOffers, this.connection, address, options.ledgerVersion, options.limit);
    var getOffers = _.partial(getter, orderbook.base, orderbook.counter);
    var getReverseOffers = _.partial(getter, orderbook.counter, orderbook.base);
    return Promise.all([getOffers(), getReverseOffers()]).then(function (data) {
      return formatBidsAndAsks(orderbook, _.flatten(data));
    });
  }

  module.exports = getOrderbook;

/***/ },
/* 594 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var utils = __webpack_require__(442);
  var flags = __webpack_require__(592).orderFlags;
  var parseAmount = __webpack_require__(449);

  function parseOrderbookOrder(order) {
    var direction = (order.Flags & flags.Sell) === 0 ? 'buy' : 'sell';
    var takerGetsAmount = parseAmount(order.TakerGets);
    var takerPaysAmount = parseAmount(order.TakerPays);
    var quantity = direction === 'buy' ? takerPaysAmount : takerGetsAmount;
    var totalPrice = direction === 'buy' ? takerGetsAmount : takerPaysAmount;

    // note: immediateOrCancel and fillOrKill orders cannot enter the order book
    // so we can omit those flags here
    var specification = utils.removeUndefined({
      direction: direction,
      quantity: quantity,
      totalPrice: totalPrice,
      passive: (order.Flags & flags.Passive) !== 0 || undefined,
      expirationTime: utils.parseTimestamp(order.Expiration)
    });

    var properties = {
      maker: order.Account,
      sequence: order.Sequence,
      makerExchangeRate: utils.adjustQualityForXRP(order.quality, takerGetsAmount.currency, takerPaysAmount.currency)
    };

    var takerGetsFunded = order.taker_gets_funded ? parseAmount(order.taker_gets_funded) : undefined;
    var takerPaysFunded = order.taker_pays_funded ? parseAmount(order.taker_pays_funded) : undefined;
    var available = utils.removeUndefined({
      fundedAmount: takerGetsFunded,
      priceOfFundedAmount: takerPaysFunded
    });
    var state = _.isEmpty(available) ? undefined : available;
    return utils.removeUndefined({ specification: specification, properties: properties, state: state });
  }

  module.exports = parseOrderbookOrder;

/***/ },
/* 595 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var utils = __webpack_require__(440);
  var parseFields = __webpack_require__(454);
  var validate = utils.common.validate;

  var AccountFlags = utils.common.constants.AccountFlags;

  function parseFlags(value) {
    var settings = {};
    for (var flagName in AccountFlags) {
      if (value & AccountFlags[flagName]) {
        settings[flagName] = true;
      }
    }
    return settings;
  }

  function formatSettings(response) {
    var data = response.account_data;
    var parsedFlags = parseFlags(data.Flags);
    var parsedFields = parseFields(data);
    return _.assign({}, parsedFlags, parsedFields);
  }

  function getSettings(address) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    validate.getSettings({ address: address, options: options });

    var request = {
      command: 'account_info',
      account: address,
      ledger_index: options.ledgerVersion || 'validated'
    };

    return this.connection.request(request).then(formatSettings);
  }

  module.exports = getSettings;

/***/ },
/* 596 */
/***/ function(module, exports, __webpack_require__) {



  'use strict';

  var utils = __webpack_require__(440);
  var _utils$common = utils.common;
  var validate = _utils$common.validate;
  var removeUndefined = _utils$common.removeUndefined;

  function formatAccountInfo(response) {
    var data = response.account_data;
    return removeUndefined({
      sequence: data.Sequence,
      xrpBalance: utils.common.dropsToXrp(data.Balance),
      ownerCount: data.OwnerCount,
      previousInitiatedTransactionID: data.AccountTxnID,
      previousAffectingTransactionID: data.PreviousTxnID,
      previousAffectingTransactionLedgerVersion: data.PreviousTxnLgrSeq
    });
  }

  function getAccountInfo(address) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    validate.getAccountInfo({ address: address, options: options });

    var request = {
      command: 'account_info',
      account: address,
      ledger_index: options.ledgerVersion || 'validated'
    };

    return this.connection.request(request).then(formatAccountInfo);
  }

  module.exports = getAccountInfo;

/***/ },
/* 597 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var utils = __webpack_require__(598);
  var validate = utils.common.validate;
  var toRippledAmount = utils.common.toRippledAmount;
  var paymentFlags = utils.common.txFlags.Payment;
  var ValidationError = utils.common.errors.ValidationError;

  function isXRPToXRPPayment(payment) {
    var sourceCurrency = _.get(payment, 'source.maxAmount.currency', _.get(payment, 'source.amount.currency'));
    var destinationCurrency = _.get(payment, 'destination.amount.currency', _.get(payment, 'destination.minAmount.currency'));
    return sourceCurrency === 'XRP' && destinationCurrency === 'XRP';
  }

  function isIOUWithoutCounterparty(amount) {
    return amount && amount.currency !== 'XRP' && amount.counterparty === undefined;
  }

  function applyAnyCounterpartyEncoding(payment) {
    // Convert blank counterparty to sender or receiver's address
    //   (Ripple convention for 'any counterparty')
    // https://ripple.com/build/transactions/
    //    #special-issuer-values-for-sendmax-and-amount
    // https://ripple.com/build/ripple-rest/#counterparties-in-payments
    _.forEach([payment.source, payment.destination], function (adjustment) {
      _.forEach(['amount', 'minAmount', 'maxAmount'], function (key) {
        if (isIOUWithoutCounterparty(adjustment[key])) {
          adjustment[key].counterparty = adjustment.address;
        }
      });
    });
  }

  function createMaximalAmount(amount) {
    var maxXRPValue = '100000000000';
    var maxIOUValue = '9999999999999999e80';
    var maxValue = amount.currency === 'XRP' ? maxXRPValue : maxIOUValue;
    return _.assign({}, amount, { value: maxValue });
  }

  function createPaymentTransaction(address, paymentArgument) {
    var payment = _.cloneDeep(paymentArgument);
    applyAnyCounterpartyEncoding(payment);

    if (address !== payment.source.address) {
      throw new ValidationError('address must match payment.source.address');
    }

    if (payment.source.maxAmount && payment.destination.minAmount || payment.source.amount && payment.destination.amount) {
      throw new ValidationError('payment must specify either (source.maxAmount ' + 'and destination.amount) or (source.amount and destination.minAmount)');
    }

    // when using destination.minAmount, rippled still requires that we set
    // a destination amount in addition to DeliverMin. the destination amount
    // is interpreted as the maximum amount to send. we want to be sure to
    // send the whole source amount, so we set the destination amount to the
    // maximum possible amount. otherwise it's possible that the destination
    // cap could be hit before the source cap.
    var amount = payment.destination.minAmount && !isXRPToXRPPayment(payment) ? createMaximalAmount(payment.destination.minAmount) : payment.destination.amount || payment.destination.minAmount;

    var txJSON = {
      TransactionType: 'Payment',
      Account: payment.source.address,
      Destination: payment.destination.address,
      Amount: toRippledAmount(amount),
      Flags: 0
    };

    if (payment.invoiceID !== undefined) {
      txJSON.InvoiceID = payment.invoiceID;
    }
    if (payment.source.tag !== undefined) {
      txJSON.SourceTag = payment.source.tag;
    }
    if (payment.destination.tag !== undefined) {
      txJSON.DestinationTag = payment.destination.tag;
    }
    if (payment.memos !== undefined) {
      txJSON.Memos = _.map(payment.memos, utils.convertMemo);
    }
    if (payment.noDirectRipple === true) {
      txJSON.Flags |= paymentFlags.NoRippleDirect;
    }
    if (payment.limitQuality === true) {
      txJSON.Flags |= paymentFlags.LimitQuality;
    }
    if (!isXRPToXRPPayment(payment)) {
      // Don't set SendMax for XRP->XRP payment
      // temREDUNDANT_SEND_MAX removed in:
      // https://github.com/ripple/rippled/commit/
      //  c522ffa6db2648f1d8a987843e7feabf1a0b7de8/
      if (payment.allowPartialPayment === true || payment.destination.minAmount !== undefined) {
        txJSON.Flags |= paymentFlags.PartialPayment;
      }

      txJSON.SendMax = toRippledAmount(payment.source.maxAmount || payment.source.amount);

      if (payment.destination.minAmount !== undefined) {
        txJSON.DeliverMin = toRippledAmount(payment.destination.minAmount);
      }

      if (payment.paths !== undefined) {
        txJSON.Paths = JSON.parse(payment.paths);
      }
    } else if (payment.allowPartialPayment === true) {
      throw new ValidationError('XRP to XRP payments cannot be partial payments');
    }

    return txJSON;
  }

  function preparePayment(address, payment) {
    var instructions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    validate.preparePayment({ address: address, payment: payment, instructions: instructions });
    var txJSON = createPaymentTransaction(address, payment);
    return utils.prepareTransaction(txJSON, this, instructions);
  }

  module.exports = preparePayment;

/***/ },
/* 598 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {
  'use strict';

  var _ = __webpack_require__(192);
  var BigNumber = __webpack_require__(196);
  var common = __webpack_require__(194);
  var txFlags = common.txFlags;

  function formatPrepareResponse(txJSON) {
    var instructions = {
      fee: common.dropsToXrp(txJSON.Fee),
      sequence: txJSON.Sequence,
      maxLedgerVersion: txJSON.LastLedgerSequence === undefined ? null : txJSON.LastLedgerSequence
    };
    return {
      txJSON: JSON.stringify(txJSON),
      instructions: _.omit(instructions, _.isUndefined)
    };
  }

  function setCanonicalFlag(txJSON) {
    txJSON.Flags |= txFlags.Universal.FullyCanonicalSig;

    // JavaScript converts operands to 32-bit signed ints before doing bitwise
    // operations. We need to convert it back to an unsigned int.
    txJSON.Flags = txJSON.Flags >>> 0;
  }

  function scaleValue(value, multiplier) {
    return new BigNumber(value).times(multiplier).toString();
  }

  function prepareTransaction(txJSON, api, instructions) {
    common.validate.instructions(instructions);

    var account = txJSON.Account;
    setCanonicalFlag(txJSON);

    function prepareMaxLedgerVersion() {
      if (instructions.maxLedgerVersion !== undefined) {
        if (instructions.maxLedgerVersion !== null) {
          txJSON.LastLedgerSequence = instructions.maxLedgerVersion;
        }
        return Promise.resolve(txJSON);
      }
      var offset = instructions.maxLedgerVersionOffset !== undefined ? instructions.maxLedgerVersionOffset : 3;
      return api.connection.getLedgerVersion().then(function (ledgerVersion) {
        txJSON.LastLedgerSequence = ledgerVersion + offset;
        return txJSON;
      });
    }

    function prepareFee() {
      var multiplier = instructions.signersCount === undefined ? 1 : instructions.signersCount + 1;
      if (instructions.fee !== undefined) {
        txJSON.Fee = scaleValue(common.xrpToDrops(instructions.fee), multiplier);
        return Promise.resolve(txJSON);
      }
      var cushion = api._feeCushion;
      return common.serverInfo.getFee(api.connection, cushion).then(function (fee) {
        var feeDrops = common.xrpToDrops(fee);
        if (instructions.maxFee !== undefined) {
          var maxFeeDrops = common.xrpToDrops(instructions.maxFee);
          var normalFee = BigNumber.min(feeDrops, maxFeeDrops).toString();
          txJSON.Fee = scaleValue(normalFee, multiplier);
        } else {
          txJSON.Fee = scaleValue(feeDrops, multiplier);
        }
        return txJSON;
      });
    }

    function prepareSequence() {
      if (instructions.sequence !== undefined) {
        txJSON.Sequence = instructions.sequence;
        return Promise.resolve(txJSON);
      }
      var request = {
        command: 'account_info',
        account: account
      };
      return api.connection.request(request).then(function (response) {
        txJSON.Sequence = response.account_data.Sequence;
        return txJSON;
      });
    }

    return Promise.all([prepareMaxLedgerVersion(), prepareFee(), prepareSequence()]).then(function () {
      return formatPrepareResponse(txJSON);
    });
  }

  function convertStringToHex(string) {
    return string ? new Buffer(string, 'utf8').toString('hex').toUpperCase() : undefined;
  }

  function convertMemo(memo) {
    return {
      Memo: common.removeUndefined({
        MemoData: convertStringToHex(memo.data),
        MemoType: convertStringToHex(memo.type),
        MemoFormat: convertStringToHex(memo.format)
      })
    };
  }

  module.exports = {
    convertStringToHex: convertStringToHex,
    convertMemo: convertMemo,
    prepareTransaction: prepareTransaction,
    common: common
  };
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 599 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var utils = __webpack_require__(598);
  var validate = utils.common.validate;
  var trustlineFlags = utils.common.txFlags.TrustSet;
  var BigNumber = __webpack_require__(196);

  function convertQuality(quality) {
    return new BigNumber(quality).shift(9).truncated().toNumber();
  }

  function createTrustlineTransaction(account, trustline) {
    var limit = {
      currency: trustline.currency,
      issuer: trustline.counterparty,
      value: trustline.limit
    };

    var txJSON = {
      TransactionType: 'TrustSet',
      Account: account,
      LimitAmount: limit,
      Flags: 0
    };
    if (trustline.qualityIn !== undefined) {
      txJSON.QualityIn = convertQuality(trustline.qualityIn);
    }
    if (trustline.qualityOut !== undefined) {
      txJSON.QualityOut = convertQuality(trustline.qualityOut);
    }
    if (trustline.authorized === true) {
      txJSON.Flags |= trustlineFlags.SetAuth;
    }
    if (trustline.ripplingDisabled !== undefined) {
      txJSON.Flags |= trustline.ripplingDisabled ? trustlineFlags.NoRipple : trustlineFlags.ClearNoRipple;
    }
    if (trustline.frozen !== undefined) {
      txJSON.Flags |= trustline.frozen ? trustlineFlags.SetFreeze : trustlineFlags.ClearFreeze;
    }
    if (trustline.memos !== undefined) {
      txJSON.Memos = _.map(trustline.memos, utils.convertMemo);
    }
    return txJSON;
  }

  function prepareTrustline(address, trustline) {
    var instructions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    validate.prepareTrustline({ address: address, trustline: trustline, instructions: instructions });
    var txJSON = createTrustlineTransaction(address, trustline);
    return utils.prepareTransaction(txJSON, this, instructions);
  }

  module.exports = prepareTrustline;

/***/ },
/* 600 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var utils = __webpack_require__(598);
  var offerFlags = utils.common.txFlags.OfferCreate;
  var _utils$common = utils.common;
  var validate = _utils$common.validate;
  var iso8601ToRippleTime = _utils$common.iso8601ToRippleTime;

  function createOrderTransaction(account, order) {
    var takerPays = utils.common.toRippledAmount(order.direction === 'buy' ? order.quantity : order.totalPrice);
    var takerGets = utils.common.toRippledAmount(order.direction === 'buy' ? order.totalPrice : order.quantity);

    var txJSON = {
      TransactionType: 'OfferCreate',
      Account: account,
      TakerGets: takerGets,
      TakerPays: takerPays,
      Flags: 0
    };
    if (order.direction === 'sell') {
      txJSON.Flags |= offerFlags.Sell;
    }
    if (order.passive === true) {
      txJSON.Flags |= offerFlags.Passive;
    }
    if (order.immediateOrCancel === true) {
      txJSON.Flags |= offerFlags.ImmediateOrCancel;
    }
    if (order.fillOrKill === true) {
      txJSON.Flags |= offerFlags.FillOrKill;
    }
    if (order.expirationTime !== undefined) {
      txJSON.Expiration = iso8601ToRippleTime(order.expirationTime);
    }
    if (order.memos !== undefined) {
      txJSON.Memos = _.map(order.memos, utils.convertMemo);
    }
    return txJSON;
  }

  function prepareOrder(address, order) {
    var instructions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    validate.prepareOrder({ address: address, order: order, instructions: instructions });
    var txJSON = createOrderTransaction(address, order);
    return utils.prepareTransaction(txJSON, this, instructions);
  }

  module.exports = prepareOrder;

/***/ },
/* 601 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var utils = __webpack_require__(598);
  var validate = utils.common.validate;

  function createOrderCancellationTransaction(account, orderCancellation) {
    var txJSON = {
      TransactionType: 'OfferCancel',
      Account: account,
      OfferSequence: orderCancellation.orderSequence
    };
    if (orderCancellation.memos !== undefined) {
      txJSON.Memos = _.map(orderCancellation.memos, utils.convertMemo);
    }
    return txJSON;
  }

  function prepareOrderCancellation(address, orderCancellation) {
    var instructions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    validate.prepareOrderCancellation({ address: address, orderCancellation: orderCancellation, instructions: instructions });
    var txJSON = createOrderCancellationTransaction(address, orderCancellation);
    return utils.prepareTransaction(txJSON, this, instructions);
  }

  module.exports = prepareOrderCancellation;

/***/ },
/* 602 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var utils = __webpack_require__(598);
  var _utils$common = utils.common;
  var validate = _utils$common.validate;
  var iso8601ToRippleTime = _utils$common.iso8601ToRippleTime;
  var toRippledAmount = _utils$common.toRippledAmount;

  function createSuspendedPaymentCreationTransaction(account, payment) {
    var txJSON = {
      TransactionType: 'SuspendedPaymentCreate',
      Account: account,
      Destination: payment.destination.address,
      Amount: toRippledAmount(payment.destination.amount)
    };

    if (payment.digest !== undefined) {
      txJSON.Digest = payment.digest;
    }
    if (payment.allowCancelAfter !== undefined) {
      txJSON.CancelAfter = iso8601ToRippleTime(payment.allowCancelAfter);
    }
    if (payment.allowExecuteAfter !== undefined) {
      txJSON.FinishAfter = iso8601ToRippleTime(payment.allowExecuteAfter);
    }
    if (payment.source.tag !== undefined) {
      txJSON.SourceTag = payment.source.tag;
    }
    if (payment.destination.tag !== undefined) {
      txJSON.DestinationTag = payment.destination.tag;
    }
    if (payment.memos !== undefined) {
      txJSON.Memos = _.map(payment.memos, utils.convertMemo);
    }
    return txJSON;
  }

  function prepareSuspendedPaymentCreation(address, suspendedPaymentCreation) {
    var instructions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    validate.prepareSuspendedPaymentCreation({ address: address, suspendedPaymentCreation: suspendedPaymentCreation, instructions: instructions });
    var txJSON = createSuspendedPaymentCreationTransaction(address, suspendedPaymentCreation);
    return utils.prepareTransaction(txJSON, this, instructions);
  }

  module.exports = prepareSuspendedPaymentCreation;

/***/ },
/* 603 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var utils = __webpack_require__(598);
  var validate = utils.common.validate;

  function createSuspendedPaymentExecutionTransaction(account, payment) {
    var txJSON = {
      TransactionType: 'SuspendedPaymentFinish',
      Account: account,
      Owner: payment.owner,
      OfferSequence: payment.suspensionSequence
    };

    if (payment.method !== undefined) {
      txJSON.Method = payment.method;
    }
    if (payment.digest !== undefined) {
      txJSON.Digest = payment.digest;
    }
    if (payment.proof !== undefined) {
      txJSON.Proof = utils.convertStringToHex(payment.proof);
    }
    if (payment.memos !== undefined) {
      txJSON.Memos = _.map(payment.memos, utils.convertMemo);
    }
    return txJSON;
  }

  function prepareSuspendedPaymentExecution(address, suspendedPaymentExecution) {
    var instructions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    validate.prepareSuspendedPaymentExecution({ address: address, suspendedPaymentExecution: suspendedPaymentExecution, instructions: instructions });
    var txJSON = createSuspendedPaymentExecutionTransaction(address, suspendedPaymentExecution);
    return utils.prepareTransaction(txJSON, this, instructions);
  }

  module.exports = prepareSuspendedPaymentExecution;

/***/ },
/* 604 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var utils = __webpack_require__(598);
  var validate = utils.common.validate;

  function createSuspendedPaymentCancellationTransaction(account, payment) {
    var txJSON = {
      TransactionType: 'SuspendedPaymentCancel',
      Account: account,
      Owner: payment.owner,
      OfferSequence: payment.suspensionSequence
    };
    if (payment.memos !== undefined) {
      txJSON.Memos = _.map(payment.memos, utils.convertMemo);
    }
    return txJSON;
  }

  function prepareSuspendedPaymentCancellation(address, suspendedPaymentCancellation) {
    var instructions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    validate.prepareSuspendedPaymentCancellation({ address: address, suspendedPaymentCancellation: suspendedPaymentCancellation, instructions: instructions });
    var txJSON = createSuspendedPaymentCancellationTransaction(address, suspendedPaymentCancellation);
    return utils.prepareTransaction(txJSON, this, instructions);
  }

  module.exports = prepareSuspendedPaymentCancellation;

/***/ },
/* 605 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {
  'use strict';

  var _ = __webpack_require__(192);
  var assert = __webpack_require__(198);
  var BigNumber = __webpack_require__(196);
  var utils = __webpack_require__(598);
  var validate = utils.common.validate;
  var AccountFlagIndices = utils.common.constants.AccountFlagIndices;
  var AccountFields = utils.common.constants.AccountFields;

  // Emptry string passed to setting will clear it
  var CLEAR_SETTING = null;

  function setTransactionFlags(txJSON, values) {
    var keys = Object.keys(values);
    assert(keys.length === 1, 'ERROR: can only set one setting per transaction');
    var flagName = keys[0];
    var value = values[flagName];
    var index = AccountFlagIndices[flagName];
    if (index !== undefined) {
      if (value) {
        txJSON.SetFlag = index;
      } else {
        txJSON.ClearFlag = index;
      }
    }
  }

  function setTransactionFields(txJSON, input) {
    var fieldSchema = AccountFields;
    for (var fieldName in fieldSchema) {
      var field = fieldSchema[fieldName];
      var value = input[field.name];

      if (value === undefined) {
        continue;
      }

      // The value required to clear an account root field varies
      if (value === CLEAR_SETTING && field.hasOwnProperty('defaults')) {
        value = field.defaults;
      }

      if (field.encoding === 'hex' && !field.length) {
        // This is currently only used for Domain field
        value = new Buffer(value, 'ascii').toString('hex').toUpperCase();
      }

      txJSON[fieldName] = value;
    }
  }

  /**
   *  Note: A fee of 1% requires 101% of the destination to be sent for the
   *        destination to receive 100%.
   *  The transfer rate is specified as the input amount as fraction of 1.
   *  To specify the default rate of 0%, a 100% input amount, specify 1.
   *  To specify a rate of 1%, a 101% input amount, specify 1.01
   *
   *  @param {Number|String} transferRate
   *
   *  @returns {Number|String} numbers will be converted while strings
   *                           are returned
   */

  function convertTransferRate(transferRate) {
    return new BigNumber(transferRate).shift(9).toNumber();
  }

  function formatSignerEntry(signer) {
    return {
      SignerEntry: {
        Account: signer.address,
        SignerWeight: signer.weight
      }
    };
  }

  function createSettingsTransactionWithoutMemos(account, settings) {
    if (settings.regularKey !== undefined) {
      var removeRegularKey = {
        TransactionType: 'SetRegularKey',
        Account: account
      };
      if (settings.regularKey === null) {
        return removeRegularKey;
      }
      return _.assign({}, removeRegularKey, { RegularKey: settings.regularKey });
    }

    if (settings.signers !== undefined) {
      return {
        TransactionType: 'SignerListSet',
        Account: account,
        SignerQuorum: settings.signers.threshold,
        SignerEntries: _.map(settings.signers.weights, formatSignerEntry)
      };
    }

    var txJSON = {
      TransactionType: 'AccountSet',
      Account: account
    };

    setTransactionFlags(txJSON, _.omit(settings, 'memos'));
    setTransactionFields(txJSON, settings);

    if (txJSON.TransferRate !== undefined) {
      txJSON.TransferRate = convertTransferRate(txJSON.TransferRate);
    }
    return txJSON;
  }

  function createSettingsTransaction(account, settings) {
    var txJSON = createSettingsTransactionWithoutMemos(account, settings);
    if (settings.memos !== undefined) {
      txJSON.Memos = _.map(settings.memos, utils.convertMemo);
    }
    return txJSON;
  }

  function prepareSettings(address, settings) {
    var instructions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    validate.prepareSettings({ address: address, settings: settings, instructions: instructions });
    var txJSON = createSettingsTransaction(address, settings);
    return utils.prepareTransaction(txJSON, this, instructions);
  }

  module.exports = prepareSettings;
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 606 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var utils = __webpack_require__(598);
  var keypairs = __webpack_require__(197);
  var binary = __webpack_require__(459);

  var _require = __webpack_require__(565);

  var computeBinaryTransactionHash = _require.computeBinaryTransactionHash;

  var validate = utils.common.validate;

  function computeSignature(tx, privateKey, signAs) {
    var signingData = signAs ? binary.encodeForMultisigning(tx, signAs) : binary.encodeForSigning(tx);
    return keypairs.sign(signingData, privateKey);
  }

  function sign(txJSON, secret) {
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    validate.sign({ txJSON: txJSON, secret: secret });
    // we can't validate that the secret matches the account because
    // the secret could correspond to the regular key

    var tx = JSON.parse(txJSON);
    if (tx.TxnSignature || tx.Signers) {
      throw new utils.common.errors.ValidationError('txJSON must not contain "TxnSignature" or "Signers" properties');
    }

    var keypair = keypairs.deriveKeypair(secret);
    tx.SigningPubKey = options.signAs ? '' : keypair.publicKey;

    if (options.signAs) {
      var signer = {
        Account: options.signAs,
        SigningPubKey: keypair.publicKey,
        TxnSignature: computeSignature(tx, keypair.privateKey, options.signAs)
      };
      tx.Signers = [{ Signer: signer }];
    } else {
      tx.TxnSignature = computeSignature(tx, keypair.privateKey);
    }

    var serialized = binary.encode(tx);
    return {
      signedTransaction: serialized,
      id: computeBinaryTransactionHash(serialized)
    };
  }

  module.exports = sign;

/***/ },
/* 607 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {
  'use strict';

  var _ = __webpack_require__(192);
  var binary = __webpack_require__(459);
  var utils = __webpack_require__(598);
  var BigNumber = __webpack_require__(196);

  var _require = __webpack_require__(249);

  var decodeAddress = _require.decodeAddress;
  var validate = utils.common.validate;

  var _require2 = __webpack_require__(565);

  var computeBinaryTransactionHash = _require2.computeBinaryTransactionHash;

  function addressToBigNumber(address) {
    var hex = new Buffer(decodeAddress(address)).toString('hex');
    return new BigNumber(hex, 16);
  }

  function compareSigners(a, b) {
    return addressToBigNumber(a.Signer.Account).comparedTo(addressToBigNumber(b.Signer.Account));
  }

  function combine(signedTransactions) {
    validate.combine({ signedTransactions: signedTransactions });

    var txs = _.map(signedTransactions, binary.decode);
    var tx = _.omit(txs[0], 'Signers');
    if (!_.every(txs, function (_tx) {
      return _.isEqual(tx, _.omit(_tx, 'Signers'));
    })) {
      throw new utils.common.errors.ValidationError('txJSON is not the same for all signedTransactions');
    }
    var unsortedSigners = _.reduce(txs, function (accumulator, _tx) {
      return accumulator.concat(_tx.Signers || []);
    }, []);
    var signers = unsortedSigners.sort(compareSigners);
    var signedTx = _.assign({}, tx, { Signers: signers });
    var signedTransaction = binary.encode(signedTx);
    var id = computeBinaryTransactionHash(signedTransaction);
    return { signedTransaction: signedTransaction, id: id };
  }

  module.exports = combine;
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204).Buffer))

/***/ },
/* 608 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var utils = __webpack_require__(598);
  var validate = utils.common.validate;

  function isImmediateRejection(engineResult) {
    // note: "tel" errors mean the local server refused to process the
    // transaction *at that time*, but it could potentially buffer the
    // transaction and then process it at a later time, for example
    // if the required fee changes (this does not occur at the time of
    // this writing, but it could change in the future)
    // all other error classes can potentially result in transcation validation
    return _.startsWith(engineResult, 'tem') || _.startsWith(engineResult, 'tej');
  }

  function formatSubmitResponse(response) {
    var data = {
      resultCode: response.engine_result,
      resultMessage: response.engine_result_message
    };
    if (isImmediateRejection(response.engine_result)) {
      throw new utils.common.errors.RippledError('Submit failed', data);
    }
    return data;
  }

  function submit(signedTransaction) {
    validate.submit({ signedTransaction: signedTransaction });

    var request = {
      command: 'submit',
      tx_blob: signedTransaction
    };
    return this.connection.request(request).then(formatSubmitResponse);
  }

  module.exports = submit;

/***/ },
/* 609 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var keypairs = __webpack_require__(197);
  var common = __webpack_require__(194);
  var errors = common.errors;
  var validate = common.validate;

  function generateAddress(options) {
    var secret = keypairs.generateSeed(options);
    var keypair = keypairs.deriveKeypair(secret);
    var address = keypairs.deriveAddress(keypair.publicKey);
    return { secret: secret, address: address };
  }

  function generateAddressAPI(options) {
    validate.generateAddress({ options: options });
    try {
      return generateAddress(options);
    } catch (error) {
      throw new errors.UnexpectedError(error.message);
    }
  }

  module.exports = {
    generateAddressAPI: generateAddressAPI
  };

/***/ },
/* 610 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);
  var common = __webpack_require__(194);
  var hashes = __webpack_require__(565);

  function convertLedgerHeader(header) {
    return {
      account_hash: header.stateHash,
      close_time: common.iso8601ToRippleTime(header.closeTime),
      close_time_resolution: header.closeTimeResolution,
      close_flags: header.closeFlags,
      hash: header.ledgerHash,
      ledger_hash: header.ledgerHash,
      ledger_index: header.ledgerVersion.toString(),
      seqNum: header.ledgerVersion.toString(),
      parent_hash: header.parentLedgerHash,
      parent_close_time: common.iso8601ToRippleTime(header.parentCloseTime),
      total_coins: header.totalDrops,
      totalCoins: header.totalDrops,
      transaction_hash: header.transactionHash
    };
  }

  function hashLedgerHeader(ledgerHeader) {
    var header = convertLedgerHeader(ledgerHeader);
    return hashes.computeLedgerHash(header);
  }

  function computeTransactionHash(ledger) {
    if (ledger.rawTransactions === undefined) {
      return ledger.transactionHash;
    }
    var transactions = JSON.parse(ledger.rawTransactions);
    var txs = _.map(transactions, function (tx) {
      var mergeTx = _.assign({}, _.omit(tx, 'tx'), tx.tx || {});
      var renameMeta = _.assign({}, _.omit(mergeTx, 'meta'), tx.meta ? { metaData: tx.meta } : {});
      return renameMeta;
    });
    var transactionHash = hashes.computeTransactionTreeHash(txs);
    if (ledger.transactionHash !== undefined && ledger.transactionHash !== transactionHash) {
      throw new common.errors.ValidationError('transactionHash in header' + ' does not match computed hash of transactions');
    }
    return transactionHash;
  }

  function computeStateHash(ledger) {
    if (ledger.rawState === undefined) {
      return ledger.stateHash;
    }
    var state = JSON.parse(ledger.rawState);
    var stateHash = hashes.computeStateTreeHash(state);
    if (ledger.stateHash !== undefined && ledger.stateHash !== stateHash) {
      throw new common.errors.ValidationError('stateHash in header' + ' does not match computed hash of state');
    }
    return stateHash;
  }

  function computeLedgerHash(ledger) {
    var subhashes = {
      transactionHash: computeTransactionHash(ledger),
      stateHash: computeStateHash(ledger)
    };
    return hashLedgerHeader(_.assign({}, ledger, subhashes));
  }

  module.exports = computeLedgerHash;

/***/ },
/* 611 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var utils = __webpack_require__(440);
  var validate = utils.common.validate;

  var parseLedger = __webpack_require__(612);

  function getLedger() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    validate.getLedger({ options: options });

    var request = {
      command: 'ledger',
      ledger_index: options.ledgerVersion || 'validated',
      expand: options.includeAllData,
      transactions: options.includeTransactions,
      accounts: options.includeState
    };

    return this.connection.request(request).then(function (response) {
      return parseLedger(response.ledger);
    });
  }

  module.exports = getLedger;

/***/ },
/* 612 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var _ = __webpack_require__(192);

  var _require = __webpack_require__(442);

  var removeUndefined = _require.removeUndefined;
  var rippleTimeToISO8601 = _require.rippleTimeToISO8601;

  var parseTransaction = __webpack_require__(441);

  function parseTransactionWrapper(ledgerVersion, tx) {
    var transaction = _.assign({}, _.omit(tx, 'metaData'), { meta: tx.metaData });
    var result = parseTransaction(transaction);
    if (!result.outcome.ledgerVersion) {
      result.outcome.ledgerVersion = ledgerVersion;
    }
    return result;
  }

  function parseTransactions(transactions, ledgerVersion) {
    if (_.isEmpty(transactions)) {
      return {};
    }
    if (_.isString(transactions[0])) {
      return { transactionHashes: transactions };
    }
    return {
      transactions: _.map(transactions, _.partial(parseTransactionWrapper, ledgerVersion)),
      rawTransactions: JSON.stringify(transactions)
    };
  }

  function parseState(state) {
    if (_.isEmpty(state)) {
      return {};
    }
    if (_.isString(state[0])) {
      return { stateHashes: state };
    }
    return { rawState: JSON.stringify(state) };
  }

  function parseLedger(ledger) {
    var ledgerVersion = parseInt(ledger.ledger_index || ledger.seqNum, 10);
    return removeUndefined(_.assign({
      stateHash: ledger.account_hash,
      closeTime: rippleTimeToISO8601(ledger.close_time),
      closeTimeResolution: ledger.close_time_resolution,
      closeFlags: ledger.close_flags,
      ledgerHash: ledger.hash || ledger.ledger_hash,
      ledgerVersion: ledgerVersion,
      parentLedgerHash: ledger.parent_hash,
      parentCloseTime: rippleTimeToISO8601(ledger.parent_close_time),
      totalDrops: ledger.total_coins || ledger.totalCoins,
      transactionHash: ledger.transaction_hash
    }, parseTransactions(ledger.transactions, ledgerVersion), parseState(ledger.accountState)));
  }

  module.exports = parseLedger;

/***/ },
/* 613 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _ = __webpack_require__(192);
  var RippleAPI = __webpack_require__(1).RippleAPI;

  var RippleAPIBroadcast = function (_RippleAPI) {
    _inherits(RippleAPIBroadcast, _RippleAPI);

    function RippleAPIBroadcast(servers, options) {
      _classCallCheck(this, RippleAPIBroadcast);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(RippleAPIBroadcast).call(this, options));

      _this.ledgerVersion = 0;

      var apis = servers.map(function (server) {
        return new RippleAPI(_.assign({}, options, { server: server }));
      });

      // exposed for testing
      _this._apis = apis;

      _this.getMethodNames().forEach(function (name) {
        _this[name] = function () {
          var _arguments = arguments;
          // eslint-disable-line no-loop-func
          return Promise.race(apis.map(function (api) {
            return api[name].apply(api, _arguments);
          }));
        };
      });

      // connection methods must be overridden to apply to all api instances
      _this.connect = function () {
        return Promise.all(apis.map(function (api) {
          return api.connect();
        }));
      };
      _this.disconnect = function () {
        return Promise.all(apis.map(function (api) {
          return api.disconnect();
        }));
      };
      _this.isConnected = function () {
        return _.every(apis.map(function (api) {
          return api.isConnected();
        }));
      };

      // synchronous methods are all passed directly to the first api instance
      var defaultAPI = apis[0];
      var syncMethods = ['sign', 'generateAddress', 'computeLedgerHash'];
      syncMethods.forEach(function (name) {
        _this[name] = defaultAPI[name].bind(defaultAPI);
      });

      apis.forEach(function (api) {
        api.on('ledger', _this.onLedgerEvent.bind(_this));
        api.on('error', function (errorCode, errorMessage, data) {
          return _this.emit('error', errorCode, errorMessage, data);
        });
      });
      return _this;
    }

    _createClass(RippleAPIBroadcast, [{
      key: 'onLedgerEvent',
      value: function onLedgerEvent(ledger) {
        if (ledger.ledgerVersion > this.ledgerVersion) {
          this.ledgerVersion = ledger.ledgerVersion;
          this.emit('ledger', ledger);
        }
      }
    }, {
      key: 'getMethodNames',
      value: function getMethodNames() {
        var methodNames = [];
        for (var name in RippleAPI.prototype) {
          if (RippleAPI.prototype.hasOwnProperty(name)) {
            if (typeof RippleAPI.prototype[name] === 'function') {
              methodNames.push(name);
            }
          }
        }
        return methodNames;
      }
    }]);

    return RippleAPIBroadcast;
  }(RippleAPI);

  module.exports = {
    RippleAPIBroadcast: RippleAPIBroadcast
  };

/***/ },
/* 614 */
/***/ function(module, exports, __webpack_require__) {

  /* eslint-disable new-cap */
  'use strict';

  var assert = __webpack_require__(198);
  var _ = __webpack_require__(192);
  var jayson = __webpack_require__(615);

  var RippleAPI = __webpack_require__(1).RippleAPI;

  /* istanbul ignore next */
  function createHTTPServer(options, httpPort) {
    var rippleAPI = new RippleAPI(options);

    var methodNames = _.filter(_.keys(RippleAPI.prototype), function (k) {
      return typeof RippleAPI.prototype[k] === 'function' && k !== 'connect' && k !== 'disconnect' && k !== 'constructor' && k !== 'RippleAPI';
    });

    function applyPromiseWithCallback(fnName, callback, args_) {
      try {
        var args = args_;
        if (!_.isArray(args_)) {
          var fnParameters = jayson.Utils.getParameterNames(rippleAPI[fnName]);
          args = fnParameters.map(function (name) {
            return args_[name];
          });
          var defaultArgs = _.omit(args_, fnParameters);
          assert(_.size(defaultArgs) <= 1, 'Function must have no more than one default argument');
          if (_.size(defaultArgs) > 0) {
            args.push(defaultArgs[_.keys(defaultArgs)[0]]);
          }
        }
        Promise.resolve(rippleAPI[fnName].apply(rippleAPI, args)).then(function (res) {
          return callback(null, res);
        }).catch(function (err) {
          callback({ code: 99, message: err.message, data: { name: err.name } });
        });
      } catch (err) {
        callback({ code: 99, message: err.message, data: { name: err.name } });
      }
    }

    var methods = {};
    _.forEach(methodNames, function (fn) {
      methods[fn] = jayson.Method(function (args, cb) {
        applyPromiseWithCallback(fn, cb, args);
      }, { collect: true });
    });

    var server = jayson.server(methods);
    var httpServer = null;

    return {
      server: server,
      start: function start() {
        if (httpServer !== null) {
          return Promise.reject('Already started');
        }
        return new Promise(function (resolve) {
          rippleAPI.connect().then(function () {
            httpServer = server.http();
            httpServer.listen(httpPort, resolve);
          });
        });
      },
      stop: function stop() {
        if (httpServer === null) {
          return Promise.reject('Not started');
        }
        return new Promise(function (resolve) {
          rippleAPI.disconnect();
          httpServer.close(function () {
            httpServer = null;
            resolve();
          });
        });
      }
    };
  }

  module.exports = {
    createHTTPServer: createHTTPServer
  };

/***/ },
/* 615 */
/***/ function(module, exports) {

  // empty (null-loader)

/***/ }
/******/ ]);
