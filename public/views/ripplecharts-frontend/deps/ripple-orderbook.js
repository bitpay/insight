var rippleOrderbook =
/******/ (function(modules) { // webpackBootstrap
/******/   // The module cache
/******/   var installedModules = {};

/******/   // The require function
/******/   function __webpack_require__(moduleId) {

/******/     // Check if module is in cache
/******/     if(installedModules[moduleId])
/******/       return installedModules[moduleId].exports;

/******/     // Create a new module (and put it into the cache)
/******/     var module = installedModules[moduleId] = {
/******/       exports: {},
/******/       id: moduleId,
/******/       loaded: false
/******/     };

/******/     // Execute the module function
/******/     modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/     // Flag the module as loaded
/******/     module.loaded = true;

/******/     // Return the exports of the module
/******/     return module.exports;
/******/   }


/******/   // expose the modules object (__webpack_modules__)
/******/   __webpack_require__.m = modules;

/******/   // expose the module cache
/******/   __webpack_require__.c = installedModules;

/******/   // __webpack_public_path__
/******/   __webpack_require__.p = "";

/******/   // Load entry module and return exports
/******/   return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {



  'use strict';

  module.exports = {
    OrderBook: __webpack_require__(1).OrderBook
  };

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {



  // Routines for working with an orderbook.
  //
  // One OrderBook object represents one half of an order book. (i.e. bids OR
  // asks) Which one depends on the ordering of the parameters.
  //
  // Events:
  //  - model
  //  - trade
  //  - transaction

  'use strict';

  var _get = __webpack_require__(2)['default'];

  var _inherits = __webpack_require__(18)['default'];

  var _createClass = __webpack_require__(27)['default'];

  var _classCallCheck = __webpack_require__(30)['default'];

  var _Promise = __webpack_require__(31)['default'];

  var _Object$keys = __webpack_require__(72)['default'];

  var _ = __webpack_require__(76);
  var assert = __webpack_require__(78);

  var _require = __webpack_require__(83);

  var EventEmitter = _require.EventEmitter;

  var _require2 = __webpack_require__(84);

  var normalizeCurrency = _require2.normalizeCurrency;
  var isValidCurrency = _require2.isValidCurrency;

  var _require3 = __webpack_require__(89);

  var AutobridgeCalculator = _require3.AutobridgeCalculator;

  var OrderBookUtils = __webpack_require__(90);

  var _require4 = __webpack_require__(107);

  var isValidAddress = _require4.isValidAddress;

  var _require5 = __webpack_require__(182);

  var XRPValue = _require5.XRPValue;
  var IOUValue = _require5.IOUValue;

  var log = __webpack_require__(187).internal.sub('orderbook');

  var DEFAULT_TRANSFER_RATE = new IOUValue('1.000000000');

  var ZERO_NATIVE_AMOUNT = new XRPValue('0');

  var ZERO_NORMALIZED_AMOUNT = new IOUValue('0');

  /**
   * Events emitted from OrderBook
   */
  var EVENTS = ['transaction', 'model', 'trade', 'offer_added', 'offer_removed', 'offer_changed', 'offer_funds_changed'];

  function prepareTrade(currency, issuer_) {
    var issuer = issuer_ === undefined ? '' : issuer_;
    var suffix = normalizeCurrency(currency) === 'XRP' ? '' : '/' + issuer;
    return currency + suffix;
  }

  function parseRippledAmount(amount) {
    return typeof amount === 'string' ? new XRPValue(amount) : new IOUValue(amount.value);
  }

  function _sortOffersQuick(a, b) {
    return a.qualityHex.localeCompare(b.qualityHex);
  }

  /**
   * account is to specify a "perspective", which affects which unfunded offers
   * are returned
   *
   * @constructor OrderBook
   * @param {RippleAPI} api
   * @param {String} account
   * @param {String} ask currency
   * @param {String} ask issuer
   * @param {String} bid currency
   * @param {String} bid issuer
   */

  var OrderBook = (function (_EventEmitter) {
    _inherits(OrderBook, _EventEmitter);

    function OrderBook(api, currencyGets, issuerGets, currencyPays, issuerPays, account) {
      var trace = arguments.length <= 6 || arguments[6] === undefined ? false : arguments[6];

      _classCallCheck(this, OrderBook);

      _get(Object.getPrototypeOf(OrderBook.prototype), 'constructor', this).call(this);

      this._trace = trace;
      if (this._trace) {
        log.info('OrderBook:constructor', currencyGets, issuerGets, currencyPays, issuerPays);
      }

      this._api = api;
      this._account = account !== undefined ? account : '';
      this._currencyGets = normalizeCurrency(currencyGets);
      this._issuerGets = issuerGets !== undefined ? issuerGets : '';
      this._currencyPays = normalizeCurrency(currencyPays);
      this._issuerPays = issuerPays !== undefined ? issuerPays : '';
      this._key = prepareTrade(currencyGets, issuerGets) + ':' + prepareTrade(currencyPays, issuerPays);

      // When orderbook is IOU/IOU, there will be IOU/XRP and XRP/IOU
      // books that we must keep track of to compute autobridged offers
      this._legOneBook = null;
      this._legTwoBook = null;

      this._listeners = 0;
      this._transactionsLeft = -1;
      this._waitingForOffers = false;
      this._subscribed = false;
      this._synced = false;

      this._isAutobridgeable = this._currencyGets !== 'XRP' && this._currencyPays !== 'XRP';

      this._issuerTransferRate = null;
      this._transferRateIsDefault = false;

      this._offerCounts = {};
      this._ownerFundsUnadjusted = {};
      this._ownerFunds = {};
      this._ownerOffersTotal = {};
      this._validAccounts = {};
      this._validAccountsCount = 0;
      this._offers = [];

      this._closedLedgerVersion = 0;
      this._lastUpdateLedgerSequence = 0;
      this._calculatorRunning = false;
      this._gotOffersFromLegOne = false;
      this._gotOffersFromLegTwo = false;

      this._onReconnectBound = this._onReconnect.bind(this);
      this._onTransactionBound = this._onTransaction.bind(this);

      if (this._isAutobridgeable) {
        this._legOneBook = new OrderBook(api, 'XRP', undefined, currencyPays, issuerPays, account, this._trace);

        this._legTwoBook = new OrderBook(api, currencyGets, issuerGets, 'XRP', undefined, account, this._trace);
      }

      this._initializeSubscriptionMonitoring();
    }

    /**
     * Creates OrderBook instance using options object same as for
     * old Remote.createOrderBook method.
     *
     * @param {Object} api
     * @param {Object} api
     *
     */

    _createClass(OrderBook, [{
      key: 'isValid',

      /**
       * Whether the OrderBook is valid
       *
       * Note: This only checks whether the parameters (currencies and issuer) are
       *       syntactically valid. It does not check anything against the ledger.
       *
       * @return {Boolean} is valid
       */

      value: function isValid() {
        // XXX Should check for same currency (non-native) && same issuer
        return Boolean(this._currencyPays) && isValidCurrency(this._currencyPays) && (this._currencyPays === 'XRP' || isValidAddress(this._issuerPays)) && Boolean(this._currencyGets) && isValidCurrency(this._currencyGets) && (this._currencyGets === 'XRP' || isValidAddress(this._issuerGets)) && !(this._currencyPays === 'XRP' && this._currencyGets === 'XRP');
      }

      /**
       * Return latest known offers
       *
       * Usually, this will just be an empty array if the order book hasn't been
       * loaded yet. But this accessor may be convenient in some circumstances.
       *
       * @return {Array} offers
       */

    }, {
      key: 'getOffersSync',
      value: function getOffersSync() {
        return this._offers;
      }
    }, {
      key: 'requestOffers',
      value: function requestOffers() {
        var _this = this;

        if (this._waitingForOffers) {
          return new _Promise(function (resolve) {
            _this.once('model', resolve);
          });
        }
        if (!this._api.isConnected()) {
          // do not make request if not online.
          // that requests will be queued and
          // eventually all of them will fire back
          return _Promise.reject(new this._api.errors.RippleError('Server is offline'));
        }

        if (this._isAutobridgeable) {
          this._gotOffersFromLegOne = false;
          this._gotOffersFromLegTwo = false;

          if (this._legOneBook !== null && this._legOneBook !== undefined) {
            this._legOneBook.requestOffers();
          }
          if (this._legTwoBook !== null && this._legTwoBook !== undefined) {
            this._legTwoBook.requestOffers();
          }
        }

        this._waitingForOffers = true;
        this._resetCache();
        return this._requestTransferRate().then(this._requestOffers.bind(this));
      }
    }, {
      key: 'toJSON',
      value: function toJSON() {
        var json = {
          taker_gets: {
            currency: this._currencyGets
          },
          taker_pays: {
            currency: this._currencyPays
          }
        };

        if (this._currencyGets !== 'XRP') {
          json.taker_gets.issuer = this._issuerGets;
        }

        if (this._currencyPays !== 'XRP') {
          json.taker_pays.issuer = this._issuerPays;
        }

        return json;
      }
    }, {
      key: '_initializeSubscriptionMonitoring',
      value: function _initializeSubscriptionMonitoring() {
        var self = this;

        function computeAutobridgedOffersWrapperOne() {
          if (!self._gotOffersFromLegOne) {
            self._gotOffersFromLegOne = true;
            self._computeAutobridgedOffersWrapper();
          }
        }

        function computeAutobridgedOffersWrapperTwo() {
          if (!self._gotOffersFromLegTwo) {
            self._gotOffersFromLegTwo = true;
            self._computeAutobridgedOffersWrapper();
          }
        }

        function onLedgerClosedWrapper(message) {
          self._onLedgerClosed(message);
          self._pruneExpiredOffers(message);
        }

        function listenersModified(action, event) {
          // Automatically subscribe and unsubscribe to orderbook
          // on the basis of existing event listeners
          if (_.contains(EVENTS, event)) {
            switch (action) {
              case 'add':
                if (++self._listeners === 1) {

                  self._api.on('ledger', onLedgerClosedWrapper);

                  if (self._isAutobridgeable) {
                    if (self._legOneBook !== null && self._legOneBook !== undefined) {
                      self._legOneBook.on('model', computeAutobridgedOffersWrapperOne);
                    }
                    if (self._legTwoBook !== null && self._legTwoBook !== undefined) {
                      self._legTwoBook.on('model', computeAutobridgedOffersWrapperTwo);
                    }
                  }

                  self._subscribe(true);
                }
                break;
              case 'remove':
                if (--self._listeners === 0) {
                  self._api.removeListener('ledger', onLedgerClosedWrapper);

                  self._gotOffersFromLegOne = false;
                  self._gotOffersFromLegTwo = false;

                  if (self._isAutobridgeable) {
                    if (self._legOneBook !== null && self._legOneBook !== undefined) {
                      self._legOneBook.removeListener('model', computeAutobridgedOffersWrapperOne);
                    }
                    if (self._legTwoBook !== null && self._legTwoBook !== undefined) {
                      self._legTwoBook.removeListener('model', computeAutobridgedOffersWrapperTwo);
                    }
                  }
                  self._subscribe(false);

                  self._resetCache();
                }
                break;
            }
          }
        }

        this.on('newListener', function (event) {
          listenersModified('add', event);
        });

        this.on('removeListener', function (event) {
          listenersModified('remove', event);
        });
      }
    }, {
      key: '_onReconnect',
      value: function _onReconnect() {
        setTimeout(this._subscribe.bind(this, false), 1);
        setTimeout(this._subscribe.bind(this, true), 2);
      }
    }, {
      key: '_subscribe',
      value: function _subscribe(subscribe) {
        var _this2 = this;

        var request = {
          command: subscribe ? 'subscribe' : 'unsubscribe',
          streams: ['transactions']
        };
        this._api.connection.request(request).then(function () {
          _this2._subscribed = subscribe;
        });

        if (subscribe) {
          this._api.connection.on('connected', this._onReconnectBound);
          this._api.connection.on('transaction', this._onTransactionBound);
          this._waitingForOffers = true;
          this._requestTransferRate().then(this._requestOffers.bind(this));
        } else {
          this._api.connection.removeListener('transaction', this._onTransactionBound);
          this._api.connection.removeListener('connected', this._onReconnectBound);
          this._resetCache();
        }
      }
    }, {
      key: '_onLedgerClosed',
      value: function _onLedgerClosed(message) {
        this._transactionsLeft = -1;
        this._closedLedgerVersion = message.ledgerVersion;
        if (!message || message && !_.isNumber(message.transactionCount) || this._waitingForOffers) {
          return;
        }
        this._transactionsLeft = message.transactionCount;

        return;
      }
    }, {
      key: '_onTransaction',
      value: function _onTransaction(transaction) {
        if (this._subscribed && !this._waitingForOffers && this._transactionsLeft > 0) {
          this._processTransaction(transaction);

          if (--this._transactionsLeft === 0) {
            var lastClosedLedger = this._closedLedgerVersion;
            if (this._isAutobridgeable && this._legOneBook !== null && this._legTwoBook !== null) {
              if (!this._calculatorRunning) {
                if (this._legOneBook._lastUpdateLedgerSequence === lastClosedLedger || this._legTwoBook._lastUpdateLedgerSequence === lastClosedLedger) {
                  this._computeAutobridgedOffersWrapper();
                } else if (this._lastUpdateLedgerSequence === lastClosedLedger) {
                  this._mergeDirectAndAutobridgedBooks();
                }
              }
            } else if (this._lastUpdateLedgerSequence === lastClosedLedger) {
              this._emitAsync(['model', this._offers]);
            }
          }
        }
      }
    }, {
      key: '_processTransaction',
      value: function _processTransaction(transaction) {
        if (this._trace) {
          log.info('_processTransaction', this._key, transaction.transaction.hash);
        }

        var metadata = transaction.meta || transaction.metadata;
        if (!metadata) {
          return;
        }

        var affectedNodes = OrderBookUtils.getAffectedNodes(metadata, {
          entryType: 'Offer',
          bookKey: this._key
        });

        if (this._trace) {
          log.info('_processTransaction:affectedNodes.length: ' + String(affectedNodes.length));
        }
        if (affectedNodes.length > 0) {

          var state = {
            takerGetsTotal: this._currencyGets === 'XRP' ? new XRPValue('0') : new IOUValue('0'),
            takerPaysTotal: this._currencyPays === 'XRP' ? new XRPValue('0') : new IOUValue('0'),
            transactionOwnerFunds: transaction.transaction.owner_funds
          };

          var isOfferCancel = transaction.transaction.TransactionType === 'OfferCancel';

          affectedNodes.forEach(this._processTransactionNode.bind(this, isOfferCancel, state));

          this.emit('transaction', transaction.transaction);
          this._lastUpdateLedgerSequence = this._closedLedgerVersion;

          if (!state.takerGetsTotal.isZero()) {
            this.emit('trade', state.takerPaysTotal, state.takerGetsTotal);
          }
        }

        this._updateFundedAmounts(transaction);
      }
    }, {
      key: '_processTransactionNode',
      value: function _processTransactionNode(isOfferCancel, state, node) {
        if (this._trace) {
          log.info('_processTransactionNode', isOfferCancel, node);
        }
        switch (node.nodeType) {
          case 'DeletedNode':
            {
              this._validateAccount(node.fields.Account);
              this._deleteOffer(node, isOfferCancel);

              // We don't want to count an OfferCancel as a trade
              if (!isOfferCancel) {
                state.takerGetsTotal = state.takerGetsTotal.add(parseRippledAmount(node.fieldsFinal.TakerGets));
                state.takerPaysTotal = state.takerPaysTotal.add(parseRippledAmount(node.fieldsFinal.TakerPays));
              }
              break;
            }
          case 'ModifiedNode':
            {
              this._validateAccount(node.fields.Account);
              this._modifyOffer(node);

              state.takerGetsTotal = state.takerGetsTotal.add(parseRippledAmount(node.fieldsPrev.TakerGets)).subtract(parseRippledAmount(node.fieldsFinal.TakerGets));

              state.takerPaysTotal = state.takerPaysTotal.add(parseRippledAmount(node.fieldsPrev.TakerPays)).subtract(parseRippledAmount(node.fieldsFinal.TakerPays));
              break;
            }
          case 'CreatedNode':
            {
              this._validateAccount(node.fields.Account);
              // rippled does not set owner_funds if the order maker is the issuer
              // because the value would be infinite
              var fundedAmount = state.transactionOwnerFunds !== undefined ? state.transactionOwnerFunds : 'Infinity';
              this._setOwnerFunds(node.fields.Account, fundedAmount);
              this._insertOffer(node);
              break;
            }
        }
      }

      /**
       * Updates funded amounts/balances using modified balance nodes
       *
       * Update owner funds using modified AccountRoot and RippleState nodes
       * Update funded amounts for offers in the orderbook using owner funds
       *
       * @param {Object} transaction - transaction that holds meta nodes
       */

    }, {
      key: '_updateFundedAmounts',
      value: function _updateFundedAmounts(transaction) {
        var _this3 = this;

        var metadata = transaction.meta || transaction.metadata;
        if (!metadata) {
          return;
        }

        if (this._currencyGets !== 'XRP' && !this._issuerTransferRate) {
          if (this._trace) {
            log.info('waiting for transfer rate');
          }

          this._requestTransferRate().then(function () {
            // Defer until transfer rate is requested
            _this3._updateFundedAmounts(transaction);
          }, function (err) {
            log.error('Failed to request transfer rate, will not update funded amounts: ' + err.toString());
          });
          return;
        }

        var affectedNodes = OrderBookUtils.getAffectedNodes(metadata, {
          nodeType: 'ModifiedNode',
          entryType: this._currencyGets === 'XRP' ? 'AccountRoot' : 'RippleState'
        });

        if (this._trace) {
          log.info('_updateFundedAmounts:affectedNodes.length: ' + String(affectedNodes.length));
        }

        affectedNodes.forEach(function (node) {
          if (_this3._isBalanceChangeNode(node)) {
            var result = _this3._parseAccountBalanceFromNode(node);

            if (_this3._hasOwnerFunds(result.account)) {
              // We are only updating owner funds that are already cached
              _this3._setOwnerFunds(result.account, result.balance);

              _this3._updateOwnerOffersFundedAmount(result.account);
            }
          }
        });
      }

      /**
       * Get account and final balance of a meta node
       *
       * @param {Object} node - RippleState or AccountRoot meta node
       * @return {Object}
       */

    }, {
      key: '_parseAccountBalanceFromNode',
      value: function _parseAccountBalanceFromNode(node) {
        var result = {
          account: '',
          balance: ''
        };

        switch (node.entryType) {
          case 'AccountRoot':
            result.account = node.fields.Account;
            result.balance = node.fieldsFinal.Balance;
            break;

          case 'RippleState':
            if (node.fields.HighLimit.issuer === this._issuerGets) {
              result.account = node.fields.LowLimit.issuer;
              result.balance = node.fieldsFinal.Balance.value;
            } else if (node.fields.LowLimit.issuer === this._issuerGets) {
              result.account = node.fields.HighLimit.issuer;

              // Negate balance on the trust line
              result.balance = parseRippledAmount(node.fieldsFinal.Balance).negate().toFixed();
            }
            break;
        }

        assert(!isNaN(String(result.balance)), 'node has an invalid balance');
        this._validateAccount(result.account);

        return result;
      }

      /**
       * Check that affected meta node represents a balance change
       *
       * @param {Object} node - RippleState or AccountRoot meta node
       * @return {Boolean}
       */

    }, {
      key: '_isBalanceChangeNode',
      value: function _isBalanceChangeNode(node) {
        // Check meta node has balance, previous balance, and final balance
        if (!(node.fields && node.fields.Balance && node.fieldsPrev && node.fieldsFinal && node.fieldsPrev.Balance && node.fieldsFinal.Balance)) {
          return false;
        }

        // Check if taker gets currency is native and balance is not a number
        if (this._currencyGets === 'XRP') {
          return !isNaN(node.fields.Balance);
        }

        // Check if balance change is not for taker gets currency
        if (node.fields.Balance.currency !== this._currencyGets) {
          return false;
        }

        // Check if trustline does not refer to the taker gets currency issuer
        if (!(node.fields.HighLimit.issuer === this._issuerGets || node.fields.LowLimit.issuer === this._issuerGets)) {
          return false;
        }

        return true;
      }

      /**
       * Modify an existing offer in the orderbook
       *
       * @param {Object} node - Offer node
       */

    }, {
      key: '_modifyOffer',
      value: function _modifyOffer(node) {
        if (this._trace) {
          log.info('modifying offer', this._key, node.fields);
        }

        for (var i = 0; i < this._offers.length; i++) {
          var offer = this._offers[i];

          if (offer.index === node.ledgerIndex) {
            // TODO: This assumes no fields are deleted, which is
            // probably a safe assumption, but should be checked.
            _.extend(offer, node.fieldsFinal);

            break;
          }
        }

        this._updateOwnerOffersFundedAmount(node.fields.Account);
      }

      /**
       * Delete an existing offer in the orderbook
       *
       * NOTE: We only update funded amounts when the node comes from an OfferCancel
       *       transaction because when offers are deleted, it frees up funds to
       *       fund other existing offers in the book
       *
       * @param {Object} node - Offer node
       * @param {Boolean} isOfferCancel - whether node came from an OfferCancel
       */

    }, {
      key: '_deleteOffer',
      value: function _deleteOffer(node, isOfferCancel) {
        if (this._trace) {
          log.info('deleting offer', this._key, node.fields);
        }

        for (var i = 0; i < this._offers.length; i++) {
          var offer = this._offers[i];

          if (offer.index === node.ledgerIndex) {
            // Remove offer amount from sum for account
            this._subtractOwnerOfferTotal(offer.Account, offer.TakerGets);

            this._offers.splice(i, 1);
            this._decrementOwnerOfferCount(offer.Account);

            this.emit('offer_removed', offer);

            break;
          }
        }

        if (isOfferCancel) {
          this._updateOwnerOffersFundedAmount(node.fields.Account);
        }
      }

      /**
       * Subtract amount sum being offered for owner
       *
       * @param {String} account - owner's account address
       * @param {Object|String} amount - offer amount as native string or IOU
       *                                 currency format
       * @return {Amount}
       */

    }, {
      key: '_subtractOwnerOfferTotal',
      value: function _subtractOwnerOfferTotal(account, amount) {
        var previousAmount = this._getOwnerOfferTotal(account);
        var newAmount = previousAmount.subtract(parseRippledAmount(amount));

        this._ownerOffersTotal[account] = newAmount;

        assert(!newAmount.isNegative(), 'Offer total cannot be negative');
        return newAmount;
      }

      /**
       * Insert an offer into the orderbook
       *
       * NOTE: We *MUST* update offers' funded amounts when a new offer is placed
       *       because funds go to the highest quality offers first.
       *
       * @param {Object} node - Offer node
       */

    }, {
      key: '_insertOffer',
      value: function _insertOffer(node) {
        if (this._trace) {
          log.info('inserting offer', this._key, node.fields);
        }

        var originalLength = this._offers.length;
        var offer = OrderBook._offerRewrite(node.fields);
        var takerGets = new IOUValue(offer.TakerGets.value || offer.TakerGets);
        var takerPays = new IOUValue(offer.TakerPays.value || offer.TakerPays);

        // We're safe to calculate quality for newly created offers
        offer.quality = takerPays.divide(takerGets).toFixed();
        offer.LedgerEntryType = node.entryType;
        offer.index = node.ledgerIndex;

        for (var i = 0; i < originalLength; i++) {
          if (offer.qualityHex <= this._offers[i].qualityHex) {
            this._offers.splice(i, 0, offer);
            break;
          }
        }

        if (this._offers.length === originalLength) {
          this._offers.push(offer);
        }

        this._incrementOwnerOfferCount(offer.Account);

        this._updateOwnerOffersFundedAmount(offer.Account);

        this.emit('offer_added', offer);
      }
    }, {
      key: '_pruneExpiredOffers',
      value: function _pruneExpiredOffers(ledger) {
        var _this4 = this;

        var offersLength = this._offers.length;

        this._offers = this._offers.filter(function (offer) {
          if (offer.Expiration <= ledger.ledger_time) {
            _this4._subtractOwnerOfferTotal(offer.Account, offer.TakerGets);
            _this4._decrementOwnerOfferCount(offer.Account);
            _this4._updateOwnerOffersFundedAmount(offer.Account);
            _this4.emit('offer_removed', offer);

            return false;
          }

          return true;
        });

        if (this._offers.length < offersLength) {
          this.emit('model', this._offers);
        }
      }

      /**
       * Decrement offer count for owner
       * When an account has no more orders, we also stop tracking their account
       * funds
       *
       * @param {String} account - owner's account address
       * @return {Number}
       */

    }, {
      key: '_decrementOwnerOfferCount',
      value: function _decrementOwnerOfferCount(account) {
        var result = (this._offerCounts[account] || 1) - 1;
        this._offerCounts[account] = result;

        if (result < 1) {
          this._deleteOwnerFunds(account);
        }

        return result;
      }

      /**
       * Remove cached owner's funds
       *
       * @param {String} account - owner's account address
       */

    }, {
      key: '_deleteOwnerFunds',
      value: function _deleteOwnerFunds(account) {
        delete this._ownerFunds[account];
      }

      /**
       * Update offers' funded amount with their owner's funds
       *
       * @param {String} account - owner's account address
       */

    }, {
      key: '_updateOwnerOffersFundedAmount',
      value: function _updateOwnerOffersFundedAmount(account) {
        var _this5 = this;

        if (!this._hasOwnerFunds(account)) {
          // We are only updating owner funds that are already cached
          return;
        }

        if (this._trace) {
          var ownerFunds = this._getOwnerFunds(account);
          log.info('updating offer funds', this._key, account, ownerFunds ? ownerFunds.toString() : 'undefined');
        }

        this._resetOwnerOfferTotal(account);

        this._offers.forEach(function (offer) {
          if (offer.Account !== account) {
            return;
          }

          // Save a copy of the old offer so we can show how the offer has changed
          var previousOffer = _.extend({}, offer);
          var previousFundedGets = null;

          if (_.isString(offer.taker_gets_funded)) {
            // Offer is not new, so we should consider it for offer_changed and
            // offer_funds_changed events
            // previousFundedGets = OrderBookUtils.getOfferTakerGetsFunded(offer);
            previousFundedGets = _this5._getOfferTakerGetsFunded(offer);
          }

          _this5._setOfferFundedAmount(offer);
          _this5._addOwnerOfferTotal(offer.Account, offer.TakerGets);

          var takerGetsFunded = _this5._getOfferTakerGetsFunded(offer);
          var areFundsChanged = previousFundedGets !== null && !takerGetsFunded.equals(previousFundedGets);

          if (areFundsChanged) {
            _this5.emit('offer_changed', previousOffer, offer);
            _this5.emit('offer_funds_changed', offer, previousOffer.taker_gets_funded, offer.taker_gets_funded);
          }
        });
      }
    }, {
      key: '_getOfferTakerGetsFunded',
      value: function _getOfferTakerGetsFunded(offer) {
        return this._currencyGets === 'XRP' ? new XRPValue(offer.taker_gets_funded) : new IOUValue(offer.taker_gets_funded);
      }

      /**
       * Reset offers amount sum for owner to 0
       *
       * @param {String} account - owner's account address
       * @return {Amount}
       */

    }, {
      key: '_resetOwnerOfferTotal',
      value: function _resetOwnerOfferTotal(account) {
        if (this._currencyGets === 'XRP') {
          this._ownerOffersTotal[account] = ZERO_NATIVE_AMOUNT;
        } else {
          this._ownerOffersTotal[account] = ZERO_NORMALIZED_AMOUNT;
        }
      }
    }, {
      key: '_validateAccount',
      value: function _validateAccount(account) {
        if (this._validAccounts[account] === undefined) {
          assert(isValidAddress(account), 'node has an invalid account');
          this._validAccounts[account] = true;
          this._validAccountsCount++;
        }
      }

      /**
       * Request transfer rate for this orderbook's issuer
       *
       * @param {Function} callback
       */

    }, {
      key: '_requestTransferRate',
      value: function _requestTransferRate() {
        var _this6 = this;

        if (this._currencyGets === 'XRP') {
          // Transfer rate is default for the native currency
          this._issuerTransferRate = DEFAULT_TRANSFER_RATE;
          this._transferRateIsDefault = true;

          return _Promise.resolve(this._issuerTransferRate);
        }

        if (this._issuerTransferRate) {
          // Transfer rate has already been cached
          return _Promise.resolve(this._issuerTransferRate);
        }

        return this._api.getSettings(this._issuerGets, {}).then(function (settings) {
          // When transfer rate is not explicitly set on account, it implies the
          // default transfer rate
          _this6._transferRateIsDefault = !Boolean(settings.transferRate);
          _this6._issuerTransferRate = settings.transferRate ? new IOUValue(settings.transferRate) : DEFAULT_TRANSFER_RATE;
          return _this6._issuerTransferRate;
        });
      }

      /**
       * Request orderbook entries from server
       *
       * @param {Function} callback
       */

    }, {
      key: '_requestOffers',
      value: function _requestOffers() {
        var _this7 = this;

        if (!this._api.isConnected()) {
          // do not make request if not online.
          // that requests will be queued and
          // eventually all of them will fire back
          return _Promise.reject(new this._api.errors.RippleError('Server is offline'));
        }

        if (this._trace) {
          log.info('requesting offers', this._key);
        }

        var requestMessage = _.extend({
          command: 'book_offers',
          taker: this._account ? this._account : 'rrrrrrrrrrrrrrrrrrrrBZbvji',
          ledger_index: 'validated'
        }, this.toJSON());

        return this._api.connection.request(requestMessage).then(function (response) {
          _this7._lastUpdateLedgerSequence = response.ledger_index;
          if (!Array.isArray(response.offers)) {
            _this7._emitAsync(['model', []]);
            throw new _this7._api.errors.RippleError('Invalid response');
          }

          if (_this7._trace) {
            log.info('requested offers', _this7._key, 'offers: ' + response.offers.length);
          }

          _this7._setOffers(response.offers);

          if (!_this7._isAutobridgeable) {
            _this7._waitingForOffers = false;
            _this7._emitAsync(['model', _this7._offers]);
            return _this7._offers;
          }

          _this7._computeAutobridgedOffersWrapper();

          return new _Promise(function (resolve) {
            _this7.once('model', function (offers) {
              _this7._waitingForOffers = false;
              resolve(offers);
            });
          });
        });
      }

      /**
       * Reset internal offers cache from book_offers request
       *
       * @param {Array} offers
       * @api private
       */

    }, {
      key: '_setOffers',
      value: function _setOffers(offers) {
        assert(Array.isArray(offers), 'Offers is not an array');

        this._resetCache();

        var i = -1;
        var offer = undefined;
        var length = offers.length;

        while (++i < length) {
          offer = OrderBook._offerRewrite(offers[i]);

          this._validateAccount(offer.Account);
          if (offer.owner_funds !== undefined) {
            // The first offer of each owner from book_offers contains owner balance
            // of offer's output
            this._setOwnerFunds(offer.Account, offer.owner_funds);
          }

          this._incrementOwnerOfferCount(offer.Account);

          this._setOfferFundedAmount(offer);
          this._addOwnerOfferTotal(offer.Account, offer.TakerGets);
          offers[i] = offer;
        }

        this._offers = offers;
        this._synced = true;
      }

      /**
       * Check whether owner's funds have been cached
       *
       * @param {String} account - owner's account address
       */

    }, {
      key: '_hasOwnerFunds',
      value: function _hasOwnerFunds(account) {
        if (account === undefined) {
          return false;
        }
        return this._ownerFunds[account] !== undefined;
      }

      /**
       * Set owner's, transfer rate adjusted, funds in cache
       *
       * @param {String} account - owner's account address
       * @param {String} fundedAmount
       */

    }, {
      key: '_setOwnerFunds',
      value: function _setOwnerFunds(account, fundedAmount) {
        assert(!isNaN(Number(fundedAmount)), 'Funded amount is invalid');

        this._ownerFundsUnadjusted[account] = fundedAmount;
        this._ownerFunds[account] = this._applyTransferRate(fundedAmount);
      }

      /**
       * Compute adjusted balance that would be left after issuer's transfer fee is
       * deducted
       *
       * @param {String} balance
       * @return {String}
       */

    }, {
      key: '_applyTransferRate',
      value: function _applyTransferRate(balance) {
        assert(!isNaN(Number(balance)), 'Balance is invalid');

        if (this._transferRateIsDefault) {
          return balance;
        }

        var adjustedBalance = new IOUValue(balance).divide(this._issuerTransferRate).toFixed();

        return adjustedBalance;
      }

      /**
      * Increment offer count for owner
      *
      * @param {String} account - owner's account address
      * @return {Number}
      */

    }, {
      key: '_incrementOwnerOfferCount',
      value: function _incrementOwnerOfferCount(account) {
        var result = (this._offerCounts[account] || 0) + 1;
        this._offerCounts[account] = result;
        return result;
      }

      /**
       * Set funded amount on offer with its owner's cached funds
       *
       * is_fully_funded indicates if these funds are sufficient for the offer
       * placed.
       * taker_gets_funded indicates the amount this account can afford to offer.
       * taker_pays_funded indicates adjusted TakerPays for partially funded offer.
       *
       * @param {Object} offer
       * @return offer
       */

    }, {
      key: '_setOfferFundedAmount',
      value: function _setOfferFundedAmount(offer) {
        assert.strictEqual(typeof offer, 'object', 'Offer is invalid');

        var takerGets = parseRippledAmount(offer.TakerGets);
        var fundedAmount = this._getOwnerFunds(offer.Account);
        var previousOfferSum = this._getOwnerOfferTotal(offer.Account);
        var currentOfferSum = previousOfferSum.add(takerGets);

        offer.owner_funds = this._getUnadjustedOwnerFunds(offer.Account);

        assert(fundedAmount.constructor === currentOfferSum.constructor);
        offer.is_fully_funded = fundedAmount.comparedTo(currentOfferSum) >= 0;

        if (offer.is_fully_funded) {
          offer.taker_gets_funded = takerGets.toString();
          offer.taker_pays_funded = OrderBook._getValFromRippledAmount(offer.TakerPays);
        } else if (previousOfferSum.comparedTo(fundedAmount) < 0) {
          offer.taker_gets_funded = fundedAmount.subtract(previousOfferSum).toString();

          var quality = new IOUValue(offer.quality);
          var takerPaysFunded = quality.multiply(new IOUValue(offer.taker_gets_funded));

          offer.taker_pays_funded = this._currencyPays === 'XRP' ? String(Math.floor(Number(takerPaysFunded.toString()))) : takerPaysFunded.toString();
        } else {
          offer.taker_gets_funded = '0';
          offer.taker_pays_funded = '0';
        }

        return offer;
      }

      /**
       * Add amount sum being offered for owner
       *
       * @param {String} account - owner's account address
       * @param {Object|String} amount - offer amount as native string or IOU
       *                                 currency format
       * @return {Amount}
       */

    }, {
      key: '_addOwnerOfferTotal',
      value: function _addOwnerOfferTotal(account, amount) {
        var previousAmount = this._getOwnerOfferTotal(account);
        var currentAmount = previousAmount.add(this._makeGetsValue(amount));

        this._ownerOffersTotal[account] = currentAmount;

        return currentAmount;
      }

      /**
      * Get offers amount sum for owner
      *
      * @param {String} account - owner's account address
      * @return {Value}
      */

    }, {
      key: '_getOwnerOfferTotal',
      value: function _getOwnerOfferTotal(account) {
        var amount = this._ownerOffersTotal[account];
        if (amount) {
          return amount;
        }
        return this._currencyGets === 'XRP' ? ZERO_NATIVE_AMOUNT : ZERO_NORMALIZED_AMOUNT;
      }
    }, {
      key: '_makeGetsValue',
      value: function _makeGetsValue(value_) {
        var value = OrderBook._getValFromRippledAmount(value_);
        return this._currencyGets === 'XRP' ? new XRPValue(value) : new IOUValue(value);
      }

      /**
       * Get owner's cached unadjusted funds
       *
       * @param {String} account - owner's account address
       * @return {String}
       */

    }, {
      key: '_getUnadjustedOwnerFunds',
      value: function _getUnadjustedOwnerFunds(account) {
        return this._ownerFundsUnadjusted[account];
      }

      /**
       * Get owner's cached, transfer rate adjusted, funds
       *
       * @param {String} account - owner's account address
       * @return {Value}
       */

    }, {
      key: '_getOwnerFunds',
      value: function _getOwnerFunds(account) {
        if (this._hasOwnerFunds(account)) {
          return this._makeGetsValue(this._ownerFunds[account]);
        }
        if (this._trace) {
          log.info('No owner funds for ' + account, this._key);
        }
        throw new this._api.errors.RippleError('No owner funds');
      }

      /**
       * Reset cached owner's funds, offer counts, and offer sums
       */

    }, {
      key: '_resetCache',
      value: function _resetCache() {
        this._ownerFundsUnadjusted = {};
        this._ownerFunds = {};
        this._ownerOffersTotal = {};
        this._offerCounts = {};
        this._offers = [];
        this._synced = false;

        if (this._validAccountsCount > 3000) {
          this._validAccounts = {};
          this._validAccountsCount = 0;
        }
      }
    }, {
      key: '_emitAsync',
      value: function _emitAsync(args) {
        var _this8 = this;

        setTimeout(function () {
          return _this8.emit.apply(_this8, args);
        }, 0);
      }

      /**
       * Compute autobridged offers for an IOU:IOU orderbook by merging offers from
       * IOU:XRP and XRP:IOU books
       */

    }, {
      key: '_computeAutobridgedOffers',
      value: function _computeAutobridgedOffers() {
        var _this9 = this;

        assert(this._currencyGets !== 'XRP' && this._currencyPays !== 'XRP', 'Autobridging is only for IOU:IOU orderbooks');

        if (this._trace) {
          log.info('_computeAutobridgedOffers autobridgeCalculator.calculate', this._key);
        }

        // this check is only for flow
        var legOneOffers = this._legOneBook !== null && this._legOneBook !== undefined ? this._legOneBook.getOffersSync() : [];
        var legTwoOffers = this._legTwoBook !== null && this._legTwoBook !== undefined ? this._legTwoBook.getOffersSync() : [];

        var autobridgeCalculator = new AutobridgeCalculator(this._currencyGets, this._currencyPays, legOneOffers, legTwoOffers, this._issuerGets, this._issuerPays);

        return autobridgeCalculator.calculate().then(function (autobridgedOffers) {
          _this9._offersAutobridged = autobridgedOffers;
        });
      }
    }, {
      key: '_computeAutobridgedOffersWrapper',
      value: function _computeAutobridgedOffersWrapper() {
        var _this10 = this;

        if (this._trace) {
          log.info('_computeAutobridgedOffersWrapper', this._key, this._synced, this._calculatorRunning);
        }
        if (!this._gotOffersFromLegOne || !this._gotOffersFromLegTwo || !this._synced || this._calculatorRunning) {
          return;
        }

        this._calculatorRunning = true;
        this._computeAutobridgedOffers().then(function () {
          _this10._mergeDirectAndAutobridgedBooks();
          _this10._calculatorRunning = false;
        });
      }

      /**
       * Merge direct and autobridged offers into a combined orderbook
       *
       * @return
       */

    }, {
      key: '_mergeDirectAndAutobridgedBooks',
      value: function _mergeDirectAndAutobridgedBooks() {
        if (_.isEmpty(this._offers) && _.isEmpty(this._offersAutobridged)) {
          if (this._synced && this._gotOffersFromLegOne && this._gotOffersFromLegTwo) {
            // emit empty model to indicate to listeners that we've got offers,
            // just there was no one
            this._emitAsync(['model', []]);
          }
          return;
        }

        this._mergedOffers = this._offers.concat(this._offersAutobridged).sort(_sortOffersQuick);

        this._emitAsync(['model', this._mergedOffers]);
      }
    }], [{
      key: 'createOrderBook',
      value: function createOrderBook(api, options) {
        var orderbook = new OrderBook(api, options.currency_gets, options.issuer_gets, options.currency_pays, options.issuer_pays, options.account, options.trace);
        return orderbook;
      }
    }, {
      key: '_getValFromRippledAmount',
      value: function _getValFromRippledAmount(value_) {
        return typeof value_ === 'string' ? value_ : value_.value;
      }

      /**
       * Normalize offers from book_offers and transaction stream
       *
       * @param {Object} offer
       * @return {Object} normalized
       */

    }, {
      key: '_offerRewrite',
      value: function _offerRewrite(offer) {
        var result = {};
        var keys = _Object$keys(offer);

        for (var i = 0, l = keys.length; i < l; i++) {
          var _key = keys[i];
          switch (_key) {
            case 'PreviousTxnID':
            case 'PreviousTxnLgrSeq':
              break;
            default:
              result[_key] = offer[_key];
          }
        }

        result.Flags = result.Flags || 0;
        result.OwnerNode = result.OwnerNode || new Array(16 + 1).join('0');
        result.BookNode = result.BookNode || new Array(16 + 1).join('0');
        result.qualityHex = result.BookDirectory.slice(-16);

        return result;
      }
    }]);

    return OrderBook;
  })(EventEmitter);

  exports.OrderBook = OrderBook;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _Object$getOwnPropertyDescriptor = __webpack_require__(3)["default"];

  exports["default"] = function get(_x, _x2, _x3) {
    var _again = true;

    _function: while (_again) {
      var object = _x,
          property = _x2,
          receiver = _x3;
      _again = false;
      if (object === null) object = Function.prototype;

      var desc = _Object$getOwnPropertyDescriptor(object, property);

      if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);

        if (parent === null) {
          return undefined;
        } else {
          _x = parent;
          _x2 = property;
          _x3 = receiver;
          _again = true;
          desc = parent = undefined;
          continue _function;
        }
      } else if ("value" in desc) {
        return desc.value;
      } else {
        var getter = desc.get;

        if (getter === undefined) {
          return undefined;
        }

        return getter.call(receiver);
      }
    }
  };

  exports.__esModule = true;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(4), __esModule: true };

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

  var $ = __webpack_require__(5);
  __webpack_require__(6);
  module.exports = function getOwnPropertyDescriptor(it, key){
    return $.getDesc(it, key);
  };

/***/ },
/* 5 */
/***/ function(module, exports) {

  var $Object = Object;
  module.exports = {
    create:     $Object.create,
    getProto:   $Object.getPrototypeOf,
    isEnum:     {}.propertyIsEnumerable,
    getDesc:    $Object.getOwnPropertyDescriptor,
    setDesc:    $Object.defineProperty,
    setDescs:   $Object.defineProperties,
    getKeys:    $Object.keys,
    getNames:   $Object.getOwnPropertyNames,
    getSymbols: $Object.getOwnPropertySymbols,
    each:       [].forEach
  };

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  var toIObject = __webpack_require__(7);

  __webpack_require__(11)('getOwnPropertyDescriptor', function($getOwnPropertyDescriptor){
    return function getOwnPropertyDescriptor(it, key){
      return $getOwnPropertyDescriptor(toIObject(it), key);
    };
  });

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

  // to indexed object, toObject with fallback for non-array-like ES3 strings
  var IObject = __webpack_require__(8)
    , defined = __webpack_require__(10);
  module.exports = function(it){
    return IObject(defined(it));
  };

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

  // fallback for non-array-like ES3 and non-enumerable old V8 strings
  var cof = __webpack_require__(9);
  module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
    return cof(it) == 'String' ? it.split('') : Object(it);
  };

/***/ },
/* 9 */
/***/ function(module, exports) {

  var toString = {}.toString;

  module.exports = function(it){
    return toString.call(it).slice(8, -1);
  };

/***/ },
/* 10 */
/***/ function(module, exports) {

  // 7.2.1 RequireObjectCoercible(argument)
  module.exports = function(it){
    if(it == undefined)throw TypeError("Can't call method on  " + it);
    return it;
  };

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

  // most Object methods by ES6 should accept primitives
  var $export = __webpack_require__(12)
    , core    = __webpack_require__(14)
    , fails   = __webpack_require__(17);
  module.exports = function(KEY, exec){
    var fn  = (core.Object || {})[KEY] || Object[KEY]
      , exp = {};
    exp[KEY] = exec(fn);
    $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
  };

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

  var global    = __webpack_require__(13)
    , core      = __webpack_require__(14)
    , ctx       = __webpack_require__(15)
    , PROTOTYPE = 'prototype';

  var $export = function(type, name, source){
    var IS_FORCED = type & $export.F
      , IS_GLOBAL = type & $export.G
      , IS_STATIC = type & $export.S
      , IS_PROTO  = type & $export.P
      , IS_BIND   = type & $export.B
      , IS_WRAP   = type & $export.W
      , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
      , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
      , key, own, out;
    if(IS_GLOBAL)source = name;
    for(key in source){
      // contains in native
      own = !IS_FORCED && target && key in target;
      if(own && key in exports)continue;
      // export native or passed
      out = own ? target[key] : source[key];
      // prevent global pollution for namespaces
      exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
      // bind timers to global for call from export context
      : IS_BIND && own ? ctx(out, global)
      // wrap global constructors for prevent change them in library
      : IS_WRAP && target[key] == out ? (function(C){
        var F = function(param){
          return this instanceof C ? new C(param) : C(param);
        };
        F[PROTOTYPE] = C[PROTOTYPE];
        return F;
      // make static versions for prototype methods
      })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
      if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
    }
  };
  // type bitmap
  $export.F = 1;  // forced
  $export.G = 2;  // global
  $export.S = 4;  // static
  $export.P = 8;  // proto
  $export.B = 16; // bind
  $export.W = 32; // wrap
  module.exports = $export;

/***/ },
/* 13 */
/***/ function(module, exports) {

  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global = module.exports = typeof window != 'undefined' && window.Math == Math
    ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
  if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 14 */
/***/ function(module, exports) {

  var core = module.exports = {version: '1.2.6'};
  if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

  // optional / simple context binding
  var aFunction = __webpack_require__(16);
  module.exports = function(fn, that, length){
    aFunction(fn);
    if(that === undefined)return fn;
    switch(length){
      case 1: return function(a){
        return fn.call(that, a);
      };
      case 2: return function(a, b){
        return fn.call(that, a, b);
      };
      case 3: return function(a, b, c){
        return fn.call(that, a, b, c);
      };
    }
    return function(/* ...args */){
      return fn.apply(that, arguments);
    };
  };

/***/ },
/* 16 */
/***/ function(module, exports) {

  module.exports = function(it){
    if(typeof it != 'function')throw TypeError(it + ' is not a function!');
    return it;
  };

/***/ },
/* 17 */
/***/ function(module, exports) {

  module.exports = function(exec){
    try {
      return !!exec();
    } catch(e){
      return true;
    }
  };

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _Object$create = __webpack_require__(19)["default"];

  var _Object$setPrototypeOf = __webpack_require__(21)["default"];

  exports["default"] = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = _Object$create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  exports.__esModule = true;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(20), __esModule: true };

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

  var $ = __webpack_require__(5);
  module.exports = function create(P, D){
    return $.create(P, D);
  };

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(22), __esModule: true };

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(23);
  module.exports = __webpack_require__(14).Object.setPrototypeOf;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.3.19 Object.setPrototypeOf(O, proto)
  var $export = __webpack_require__(12);
  $export($export.S, 'Object', {setPrototypeOf: __webpack_require__(24).set});

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

  // Works with __proto__ only. Old v8 can't work with null proto objects.
  /* eslint-disable no-proto */
  var getDesc  = __webpack_require__(5).getDesc
    , isObject = __webpack_require__(25)
    , anObject = __webpack_require__(26);
  var check = function(O, proto){
    anObject(O);
    if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
  };
  module.exports = {
    set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
      function(test, buggy, set){
        try {
          set = __webpack_require__(15)(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
          set(test, []);
          buggy = !(test instanceof Array);
        } catch(e){ buggy = true; }
        return function setPrototypeOf(O, proto){
          check(O, proto);
          if(buggy)O.__proto__ = proto;
          else set(O, proto);
          return O;
        };
      }({}, false) : undefined),
    check: check
  };

/***/ },
/* 25 */
/***/ function(module, exports) {

  module.exports = function(it){
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

  var isObject = __webpack_require__(25);
  module.exports = function(it){
    if(!isObject(it))throw TypeError(it + ' is not an object!');
    return it;
  };

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _Object$defineProperty = __webpack_require__(28)["default"];

  exports["default"] = (function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;

        _Object$defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();

  exports.__esModule = true;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(29), __esModule: true };

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

  var $ = __webpack_require__(5);
  module.exports = function defineProperty(it, key, desc){
    return $.setDesc(it, key, desc);
  };

/***/ },
/* 30 */
/***/ function(module, exports) {

  "use strict";

  exports["default"] = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  exports.__esModule = true;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(32), __esModule: true };

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(33);
  __webpack_require__(34);
  __webpack_require__(50);
  __webpack_require__(54);
  module.exports = __webpack_require__(14).Promise;

/***/ },
/* 33 */
/***/ function(module, exports) {



/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $at  = __webpack_require__(35)(true);

  // 21.1.3.27 String.prototype[@@iterator]()
  __webpack_require__(37)(String, 'String', function(iterated){
    this._t = String(iterated); // target
    this._i = 0;                // next index
  // 21.1.5.2.1 %StringIteratorPrototype%.next()
  }, function(){
    var O     = this._t
      , index = this._i
      , point;
    if(index >= O.length)return {value: undefined, done: true};
    point = $at(O, index);
    this._i += point.length;
    return {value: point, done: false};
  });

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

  var toInteger = __webpack_require__(36)
    , defined   = __webpack_require__(10);
  // true  -> String#at
  // false -> String#codePointAt
  module.exports = function(TO_STRING){
    return function(that, pos){
      var s = String(defined(that))
        , i = toInteger(pos)
        , l = s.length
        , a, b;
      if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
        ? TO_STRING ? s.charAt(i) : a
        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };

/***/ },
/* 36 */
/***/ function(module, exports) {

  // 7.1.4 ToInteger
  var ceil  = Math.ceil
    , floor = Math.floor;
  module.exports = function(it){
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var LIBRARY        = __webpack_require__(38)
    , $export        = __webpack_require__(12)
    , redefine       = __webpack_require__(39)
    , hide           = __webpack_require__(40)
    , has            = __webpack_require__(43)
    , Iterators      = __webpack_require__(44)
    , $iterCreate    = __webpack_require__(45)
    , setToStringTag = __webpack_require__(46)
    , getProto       = __webpack_require__(5).getProto
    , ITERATOR       = __webpack_require__(47)('iterator')
    , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
    , FF_ITERATOR    = '@@iterator'
    , KEYS           = 'keys'
    , VALUES         = 'values';

  var returnThis = function(){ return this; };

  module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
    $iterCreate(Constructor, NAME, next);
    var getMethod = function(kind){
      if(!BUGGY && kind in proto)return proto[kind];
      switch(kind){
        case KEYS: return function keys(){ return new Constructor(this, kind); };
        case VALUES: return function values(){ return new Constructor(this, kind); };
      } return function entries(){ return new Constructor(this, kind); };
    };
    var TAG        = NAME + ' Iterator'
      , DEF_VALUES = DEFAULT == VALUES
      , VALUES_BUG = false
      , proto      = Base.prototype
      , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
      , $default   = $native || getMethod(DEFAULT)
      , methods, key;
    // Fix native
    if($native){
      var IteratorPrototype = getProto($default.call(new Base));
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // FF fix
      if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
      // fix Array#{values, @@iterator}.name in V8 / FF
      if(DEF_VALUES && $native.name !== VALUES){
        VALUES_BUG = true;
        $default = function values(){ return $native.call(this); };
      }
    }
    // Define iterator
    if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
      hide(proto, ITERATOR, $default);
    }
    // Plug for library
    Iterators[NAME] = $default;
    Iterators[TAG]  = returnThis;
    if(DEFAULT){
      methods = {
        values:  DEF_VALUES  ? $default : getMethod(VALUES),
        keys:    IS_SET      ? $default : getMethod(KEYS),
        entries: !DEF_VALUES ? $default : getMethod('entries')
      };
      if(FORCED)for(key in methods){
        if(!(key in proto))redefine(proto, key, methods[key]);
      } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }
    return methods;
  };

/***/ },
/* 38 */
/***/ function(module, exports) {

  module.exports = true;

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(40);

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

  var $          = __webpack_require__(5)
    , createDesc = __webpack_require__(41);
  module.exports = __webpack_require__(42) ? function(object, key, value){
    return $.setDesc(object, key, createDesc(1, value));
  } : function(object, key, value){
    object[key] = value;
    return object;
  };

/***/ },
/* 41 */
/***/ function(module, exports) {

  module.exports = function(bitmap, value){
    return {
      enumerable  : !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable    : !(bitmap & 4),
      value       : value
    };
  };

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

  // Thank's IE8 for his funny defineProperty
  module.exports = !__webpack_require__(17)(function(){
    return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
  });

/***/ },
/* 43 */
/***/ function(module, exports) {

  var hasOwnProperty = {}.hasOwnProperty;
  module.exports = function(it, key){
    return hasOwnProperty.call(it, key);
  };

/***/ },
/* 44 */
/***/ function(module, exports) {

  module.exports = {};

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $              = __webpack_require__(5)
    , descriptor     = __webpack_require__(41)
    , setToStringTag = __webpack_require__(46)
    , IteratorPrototype = {};

  // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
  __webpack_require__(40)(IteratorPrototype, __webpack_require__(47)('iterator'), function(){ return this; });

  module.exports = function(Constructor, NAME, next){
    Constructor.prototype = $.create(IteratorPrototype, {next: descriptor(1, next)});
    setToStringTag(Constructor, NAME + ' Iterator');
  };

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

  var def = __webpack_require__(5).setDesc
    , has = __webpack_require__(43)
    , TAG = __webpack_require__(47)('toStringTag');

  module.exports = function(it, tag, stat){
    if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
  };

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

  var store  = __webpack_require__(48)('wks')
    , uid    = __webpack_require__(49)
    , Symbol = __webpack_require__(13).Symbol;
  module.exports = function(name){
    return store[name] || (store[name] =
      Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));
  };

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

  var global = __webpack_require__(13)
    , SHARED = '__core-js_shared__'
    , store  = global[SHARED] || (global[SHARED] = {});
  module.exports = function(key){
    return store[key] || (store[key] = {});
  };

/***/ },
/* 49 */
/***/ function(module, exports) {

  var id = 0
    , px = Math.random();
  module.exports = function(key){
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(51);
  var Iterators = __webpack_require__(44);
  Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var addToUnscopables = __webpack_require__(52)
    , step             = __webpack_require__(53)
    , Iterators        = __webpack_require__(44)
    , toIObject        = __webpack_require__(7);

  // 22.1.3.4 Array.prototype.entries()
  // 22.1.3.13 Array.prototype.keys()
  // 22.1.3.29 Array.prototype.values()
  // 22.1.3.30 Array.prototype[@@iterator]()
  module.exports = __webpack_require__(37)(Array, 'Array', function(iterated, kind){
    this._t = toIObject(iterated); // target
    this._i = 0;                   // next index
    this._k = kind;                // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
  }, function(){
    var O     = this._t
      , kind  = this._k
      , index = this._i++;
    if(!O || index >= O.length){
      this._t = undefined;
      return step(1);
    }
    if(kind == 'keys'  )return step(0, index);
    if(kind == 'values')return step(0, O[index]);
    return step(0, [index, O[index]]);
  }, 'values');

  // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
  Iterators.Arguments = Iterators.Array;

  addToUnscopables('keys');
  addToUnscopables('values');
  addToUnscopables('entries');

/***/ },
/* 52 */
/***/ function(module, exports) {

  module.exports = function(){ /* empty */ };

/***/ },
/* 53 */
/***/ function(module, exports) {

  module.exports = function(done, value){
    return {value: value, done: !!done};
  };

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var $          = __webpack_require__(5)
    , LIBRARY    = __webpack_require__(38)
    , global     = __webpack_require__(13)
    , ctx        = __webpack_require__(15)
    , classof    = __webpack_require__(55)
    , $export    = __webpack_require__(12)
    , isObject   = __webpack_require__(25)
    , anObject   = __webpack_require__(26)
    , aFunction  = __webpack_require__(16)
    , strictNew  = __webpack_require__(56)
    , forOf      = __webpack_require__(57)
    , setProto   = __webpack_require__(24).set
    , same       = __webpack_require__(62)
    , SPECIES    = __webpack_require__(47)('species')
    , speciesConstructor = __webpack_require__(63)
    , asap       = __webpack_require__(64)
    , PROMISE    = 'Promise'
    , process    = global.process
    , isNode     = classof(process) == 'process'
    , P          = global[PROMISE]
    , Wrapper;

  var testResolve = function(sub){
    var test = new P(function(){});
    if(sub)test.constructor = Object;
    return P.resolve(test) === test;
  };

  var USE_NATIVE = function(){
    var works = false;
    function P2(x){
      var self = new P(x);
      setProto(self, P2.prototype);
      return self;
    }
    try {
      works = P && P.resolve && testResolve();
      setProto(P2, P);
      P2.prototype = $.create(P.prototype, {constructor: {value: P2}});
      // actual Firefox has broken subclass support, test that
      if(!(P2.resolve(5).then(function(){}) instanceof P2)){
        works = false;
      }
      // actual V8 bug, https://code.google.com/p/v8/issues/detail?id=4162
      if(works && __webpack_require__(42)){
        var thenableThenGotten = false;
        P.resolve($.setDesc({}, 'then', {
          get: function(){ thenableThenGotten = true; }
        }));
        works = thenableThenGotten;
      }
    } catch(e){ works = false; }
    return works;
  }();

  // helpers
  var sameConstructor = function(a, b){
    // library wrapper special case
    if(LIBRARY && a === P && b === Wrapper)return true;
    return same(a, b);
  };
  var getConstructor = function(C){
    var S = anObject(C)[SPECIES];
    return S != undefined ? S : C;
  };
  var isThenable = function(it){
    var then;
    return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
  };
  var PromiseCapability = function(C){
    var resolve, reject;
    this.promise = new C(function($$resolve, $$reject){
      if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
      resolve = $$resolve;
      reject  = $$reject;
    });
    this.resolve = aFunction(resolve),
    this.reject  = aFunction(reject)
  };
  var perform = function(exec){
    try {
      exec();
    } catch(e){
      return {error: e};
    }
  };
  var notify = function(record, isReject){
    if(record.n)return;
    record.n = true;
    var chain = record.c;
    asap(function(){
      var value = record.v
        , ok    = record.s == 1
        , i     = 0;
      var run = function(reaction){
        var handler = ok ? reaction.ok : reaction.fail
          , resolve = reaction.resolve
          , reject  = reaction.reject
          , result, then;
        try {
          if(handler){
            if(!ok)record.h = true;
            result = handler === true ? value : handler(value);
            if(result === reaction.promise){
              reject(TypeError('Promise-chain cycle'));
            } else if(then = isThenable(result)){
              then.call(result, resolve, reject);
            } else resolve(result);
          } else reject(value);
        } catch(e){
          reject(e);
        }
      };
      while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
      chain.length = 0;
      record.n = false;
      if(isReject)setTimeout(function(){
        var promise = record.p
          , handler, console;
        if(isUnhandled(promise)){
          if(isNode){
            process.emit('unhandledRejection', value, promise);
          } else if(handler = global.onunhandledrejection){
            handler({promise: promise, reason: value});
          } else if((console = global.console) && console.error){
            console.error('Unhandled promise rejection', value);
          }
        } record.a = undefined;
      }, 1);
    });
  };
  var isUnhandled = function(promise){
    var record = promise._d
      , chain  = record.a || record.c
      , i      = 0
      , reaction;
    if(record.h)return false;
    while(chain.length > i){
      reaction = chain[i++];
      if(reaction.fail || !isUnhandled(reaction.promise))return false;
    } return true;
  };
  var $reject = function(value){
    var record = this;
    if(record.d)return;
    record.d = true;
    record = record.r || record; // unwrap
    record.v = value;
    record.s = 2;
    record.a = record.c.slice();
    notify(record, true);
  };
  var $resolve = function(value){
    var record = this
      , then;
    if(record.d)return;
    record.d = true;
    record = record.r || record; // unwrap
    try {
      if(record.p === value)throw TypeError("Promise can't be resolved itself");
      if(then = isThenable(value)){
        asap(function(){
          var wrapper = {r: record, d: false}; // wrap
          try {
            then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
          } catch(e){
            $reject.call(wrapper, e);
          }
        });
      } else {
        record.v = value;
        record.s = 1;
        notify(record, false);
      }
    } catch(e){
      $reject.call({r: record, d: false}, e); // wrap
    }
  };

  // constructor polyfill
  if(!USE_NATIVE){
    // 25.4.3.1 Promise(executor)
    P = function Promise(executor){
      aFunction(executor);
      var record = this._d = {
        p: strictNew(this, P, PROMISE),         // <- promise
        c: [],                                  // <- awaiting reactions
        a: undefined,                           // <- checked in isUnhandled reactions
        s: 0,                                   // <- state
        d: false,                               // <- done
        v: undefined,                           // <- value
        h: false,                               // <- handled rejection
        n: false                                // <- notify
      };
      try {
        executor(ctx($resolve, record, 1), ctx($reject, record, 1));
      } catch(err){
        $reject.call(record, err);
      }
    };
    __webpack_require__(69)(P.prototype, {
      // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
      then: function then(onFulfilled, onRejected){
        var reaction = new PromiseCapability(speciesConstructor(this, P))
          , promise  = reaction.promise
          , record   = this._d;
        reaction.ok   = typeof onFulfilled == 'function' ? onFulfilled : true;
        reaction.fail = typeof onRejected == 'function' && onRejected;
        record.c.push(reaction);
        if(record.a)record.a.push(reaction);
        if(record.s)notify(record, false);
        return promise;
      },
      // 25.4.5.1 Promise.prototype.catch(onRejected)
      'catch': function(onRejected){
        return this.then(undefined, onRejected);
      }
    });
  }

  $export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: P});
  __webpack_require__(46)(P, PROMISE);
  __webpack_require__(70)(PROMISE);
  Wrapper = __webpack_require__(14)[PROMISE];

  // statics
  $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
    // 25.4.4.5 Promise.reject(r)
    reject: function reject(r){
      var capability = new PromiseCapability(this)
        , $$reject   = capability.reject;
      $$reject(r);
      return capability.promise;
    }
  });
  $export($export.S + $export.F * (!USE_NATIVE || testResolve(true)), PROMISE, {
    // 25.4.4.6 Promise.resolve(x)
    resolve: function resolve(x){
      // instanceof instead of internal slot check because we should fix it without replacement native Promise core
      if(x instanceof P && sameConstructor(x.constructor, this))return x;
      var capability = new PromiseCapability(this)
        , $$resolve  = capability.resolve;
      $$resolve(x);
      return capability.promise;
    }
  });
  $export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(71)(function(iter){
    P.all(iter)['catch'](function(){});
  })), PROMISE, {
    // 25.4.4.1 Promise.all(iterable)
    all: function all(iterable){
      var C          = getConstructor(this)
        , capability = new PromiseCapability(C)
        , resolve    = capability.resolve
        , reject     = capability.reject
        , values     = [];
      var abrupt = perform(function(){
        forOf(iterable, false, values.push, values);
        var remaining = values.length
          , results   = Array(remaining);
        if(remaining)$.each.call(values, function(promise, index){
          var alreadyCalled = false;
          C.resolve(promise).then(function(value){
            if(alreadyCalled)return;
            alreadyCalled = true;
            results[index] = value;
            --remaining || resolve(results);
          }, reject);
        });
        else resolve(results);
      });
      if(abrupt)reject(abrupt.error);
      return capability.promise;
    },
    // 25.4.4.4 Promise.race(iterable)
    race: function race(iterable){
      var C          = getConstructor(this)
        , capability = new PromiseCapability(C)
        , reject     = capability.reject;
      var abrupt = perform(function(){
        forOf(iterable, false, function(promise){
          C.resolve(promise).then(capability.resolve, reject);
        });
      });
      if(abrupt)reject(abrupt.error);
      return capability.promise;
    }
  });

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

  // getting tag from 19.1.3.6 Object.prototype.toString()
  var cof = __webpack_require__(9)
    , TAG = __webpack_require__(47)('toStringTag')
    // ES3 wrong here
    , ARG = cof(function(){ return arguments; }()) == 'Arguments';

  module.exports = function(it){
    var O, T, B;
    return it === undefined ? 'Undefined' : it === null ? 'Null'
      // @@toStringTag case
      : typeof (T = (O = Object(it))[TAG]) == 'string' ? T
      // builtinTag case
      : ARG ? cof(O)
      // ES3 arguments fallback
      : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };

/***/ },
/* 56 */
/***/ function(module, exports) {

  module.exports = function(it, Constructor, name){
    if(!(it instanceof Constructor))throw TypeError(name + ": use the 'new' operator!");
    return it;
  };

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

  var ctx         = __webpack_require__(15)
    , call        = __webpack_require__(58)
    , isArrayIter = __webpack_require__(59)
    , anObject    = __webpack_require__(26)
    , toLength    = __webpack_require__(60)
    , getIterFn   = __webpack_require__(61);
  module.exports = function(iterable, entries, fn, that){
    var iterFn = getIterFn(iterable)
      , f      = ctx(fn, that, entries ? 2 : 1)
      , index  = 0
      , length, step, iterator;
    if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
    // fast case for arrays with default iterator
    if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
      entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
      call(iterator, f, step.value, entries);
    }
  };

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

  // call something on iterator step with safe closing on error
  var anObject = __webpack_require__(26);
  module.exports = function(iterator, fn, value, entries){
    try {
      return entries ? fn(anObject(value)[0], value[1]) : fn(value);
    // 7.4.6 IteratorClose(iterator, completion)
    } catch(e){
      var ret = iterator['return'];
      if(ret !== undefined)anObject(ret.call(iterator));
      throw e;
    }
  };

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

  // check on default Array iterator
  var Iterators  = __webpack_require__(44)
    , ITERATOR   = __webpack_require__(47)('iterator')
    , ArrayProto = Array.prototype;

  module.exports = function(it){
    return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
  };

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

  // 7.1.15 ToLength
  var toInteger = __webpack_require__(36)
    , min       = Math.min;
  module.exports = function(it){
    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
  };

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

  var classof   = __webpack_require__(55)
    , ITERATOR  = __webpack_require__(47)('iterator')
    , Iterators = __webpack_require__(44);
  module.exports = __webpack_require__(14).getIteratorMethod = function(it){
    if(it != undefined)return it[ITERATOR]
      || it['@@iterator']
      || Iterators[classof(it)];
  };

/***/ },
/* 62 */
/***/ function(module, exports) {

  // 7.2.9 SameValue(x, y)
  module.exports = Object.is || function is(x, y){
    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
  };

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

  // 7.3.20 SpeciesConstructor(O, defaultConstructor)
  var anObject  = __webpack_require__(26)
    , aFunction = __webpack_require__(16)
    , SPECIES   = __webpack_require__(47)('species');
  module.exports = function(O, D){
    var C = anObject(O).constructor, S;
    return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
  };

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

  var global    = __webpack_require__(13)
    , macrotask = __webpack_require__(65).set
    , Observer  = global.MutationObserver || global.WebKitMutationObserver
    , process   = global.process
    , Promise   = global.Promise
    , isNode    = __webpack_require__(9)(process) == 'process'
    , head, last, notify;

  var flush = function(){
    var parent, domain, fn;
    if(isNode && (parent = process.domain)){
      process.domain = null;
      parent.exit();
    }
    while(head){
      domain = head.domain;
      fn     = head.fn;
      if(domain)domain.enter();
      fn(); // <- currently we use it only for Promise - try / catch not required
      if(domain)domain.exit();
      head = head.next;
    } last = undefined;
    if(parent)parent.enter();
  };

  // Node.js
  if(isNode){
    notify = function(){
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if(Observer){
    var toggle = 1
      , node   = document.createTextNode('');
    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
    notify = function(){
      node.data = toggle = -toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if(Promise && Promise.resolve){
    notify = function(){
      Promise.resolve().then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function(){
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  module.exports = function asap(fn){
    var task = {fn: fn, next: undefined, domain: isNode && process.domain};
    if(last)last.next = task;
    if(!head){
      head = task;
      notify();
    } last = task;
  };

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

  var ctx                = __webpack_require__(15)
    , invoke             = __webpack_require__(66)
    , html               = __webpack_require__(67)
    , cel                = __webpack_require__(68)
    , global             = __webpack_require__(13)
    , process            = global.process
    , setTask            = global.setImmediate
    , clearTask          = global.clearImmediate
    , MessageChannel     = global.MessageChannel
    , counter            = 0
    , queue              = {}
    , ONREADYSTATECHANGE = 'onreadystatechange'
    , defer, channel, port;
  var run = function(){
    var id = +this;
    if(queue.hasOwnProperty(id)){
      var fn = queue[id];
      delete queue[id];
      fn();
    }
  };
  var listner = function(event){
    run.call(event.data);
  };
  // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
  if(!setTask || !clearTask){
    setTask = function setImmediate(fn){
      var args = [], i = 1;
      while(arguments.length > i)args.push(arguments[i++]);
      queue[++counter] = function(){
        invoke(typeof fn == 'function' ? fn : Function(fn), args);
      };
      defer(counter);
      return counter;
    };
    clearTask = function clearImmediate(id){
      delete queue[id];
    };
    // Node.js 0.8-
    if(__webpack_require__(9)(process) == 'process'){
      defer = function(id){
        process.nextTick(ctx(run, id, 1));
      };
    // Browsers with MessageChannel, includes WebWorkers
    } else if(MessageChannel){
      channel = new MessageChannel;
      port    = channel.port2;
      channel.port1.onmessage = listner;
      defer = ctx(port.postMessage, port, 1);
    // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
    } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
      defer = function(id){
        global.postMessage(id + '', '*');
      };
      global.addEventListener('message', listner, false);
    // IE8-
    } else if(ONREADYSTATECHANGE in cel('script')){
      defer = function(id){
        html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
          html.removeChild(this);
          run.call(id);
        };
      };
    // Rest old browsers
    } else {
      defer = function(id){
        setTimeout(ctx(run, id, 1), 0);
      };
    }
  }
  module.exports = {
    set:   setTask,
    clear: clearTask
  };

/***/ },
/* 66 */
/***/ function(module, exports) {

  // fast apply, http://jsperf.lnkit.com/fast-apply/5
  module.exports = function(fn, args, that){
    var un = that === undefined;
    switch(args.length){
      case 0: return un ? fn()
                        : fn.call(that);
      case 1: return un ? fn(args[0])
                        : fn.call(that, args[0]);
      case 2: return un ? fn(args[0], args[1])
                        : fn.call(that, args[0], args[1]);
      case 3: return un ? fn(args[0], args[1], args[2])
                        : fn.call(that, args[0], args[1], args[2]);
      case 4: return un ? fn(args[0], args[1], args[2], args[3])
                        : fn.call(that, args[0], args[1], args[2], args[3]);
    } return              fn.apply(that, args);
  };

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(13).document && document.documentElement;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

  var isObject = __webpack_require__(25)
    , document = __webpack_require__(13).document
    // in old IE typeof document.createElement is 'object'
    , is = isObject(document) && isObject(document.createElement);
  module.exports = function(it){
    return is ? document.createElement(it) : {};
  };

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

  var redefine = __webpack_require__(39);
  module.exports = function(target, src){
    for(var key in src)redefine(target, key, src[key]);
    return target;
  };

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var core        = __webpack_require__(14)
    , $           = __webpack_require__(5)
    , DESCRIPTORS = __webpack_require__(42)
    , SPECIES     = __webpack_require__(47)('species');

  module.exports = function(KEY){
    var C = core[KEY];
    if(DESCRIPTORS && C && !C[SPECIES])$.setDesc(C, SPECIES, {
      configurable: true,
      get: function(){ return this; }
    });
  };

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

  var ITERATOR     = __webpack_require__(47)('iterator')
    , SAFE_CLOSING = false;

  try {
    var riter = [7][ITERATOR]();
    riter['return'] = function(){ SAFE_CLOSING = true; };
    Array.from(riter, function(){ throw 2; });
  } catch(e){ /* empty */ }

  module.exports = function(exec, skipClosing){
    if(!skipClosing && !SAFE_CLOSING)return false;
    var safe = false;
    try {
      var arr  = [7]
        , iter = arr[ITERATOR]();
      iter.next = function(){ safe = true; };
      arr[ITERATOR] = function(){ return iter; };
      exec(arr);
    } catch(e){ /* empty */ }
    return safe;
  };

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(73), __esModule: true };

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(74);
  module.exports = __webpack_require__(14).Object.keys;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

  // 19.1.2.14 Object.keys(O)
  var toObject = __webpack_require__(75);

  __webpack_require__(11)('keys', function($keys){
    return function keys(it){
      return $keys(toObject(it));
    };
  });

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

  // 7.1.13 ToObject(argument)
  var defined = __webpack_require__(10);
  module.exports = function(it){
    return Object(defined(it));
  };

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

  var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**
   * @license
   * lodash 3.10.1 (Custom Build) <https://lodash.com/>
   * Build: `lodash modern -d -o ./index.js`
   * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   * Available under MIT license <https://lodash.com/license>
   */
  ;(function() {

    /** Used as a safe reference for `undefined` in pre-ES5 environments. */
    var undefined;

    /** Used as the semantic version number. */
    var VERSION = '3.10.1';

    /** Used to compose bitmasks for wrapper metadata. */
    var BIND_FLAG = 1,
        BIND_KEY_FLAG = 2,
        CURRY_BOUND_FLAG = 4,
        CURRY_FLAG = 8,
        CURRY_RIGHT_FLAG = 16,
        PARTIAL_FLAG = 32,
        PARTIAL_RIGHT_FLAG = 64,
        ARY_FLAG = 128,
        REARG_FLAG = 256;

    /** Used as default options for `_.trunc`. */
    var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';

    /** Used to detect when a function becomes hot. */
    var HOT_COUNT = 150,
        HOT_SPAN = 16;

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /** Used to indicate the type of lazy iteratees. */
    var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2;

    /** Used as the `TypeError` message for "Functions" methods. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /** Used as the internal argument placeholder. */
    var PLACEHOLDER = '__lodash_placeholder__';

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        weakMapTag = '[object WeakMap]';

    var arrayBufferTag = '[object ArrayBuffer]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to match empty string literals in compiled template source. */
    var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

    /** Used to match HTML entities and HTML characters. */
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
        reUnescapedHtml = /[&<>"'`]/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

    /** Used to match template delimiters. */
    var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpolate = /<%=([\s\S]+?)%>/g;

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

    /**
     * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
     * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
     */
    var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
        reHasRegExpChars = RegExp(reRegExpChars.source);

    /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
    var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

    /** Used to match `RegExp` flags from their coerced string values. */
    var reFlags = /\w*$/;

    /** Used to detect hexadecimal string values. */
    var reHasHexPrefix = /^0[xX]/;

    /** Used to detect host constructors (Safari > 5). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^\d+$/;

    /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
    var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

    /** Used to ensure capturing order of template delimiters. */
    var reNoMatch = /($^)/;

    /** Used to match unescaped characters in compiled string literals. */
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

    /** Used to match words to create compound words. */
    var reWords = (function() {
      var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
          lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

      return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
    }());

    /** Used to assign default `context` object properties. */
    var contextProps = [
      'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
      'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
      'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
      'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
      'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
    ];

    /** Used to make template sourceURLs easier to identify. */
    var templateCounter = -1;

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
    typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
    typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
    typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
    typedArrayTags[dateTag] = typedArrayTags[errorTag] =
    typedArrayTags[funcTag] = typedArrayTags[mapTag] =
    typedArrayTags[numberTag] = typedArrayTags[objectTag] =
    typedArrayTags[regexpTag] = typedArrayTags[setTag] =
    typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] =
    cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
    cloneableTags[dateTag] = cloneableTags[float32Tag] =
    cloneableTags[float64Tag] = cloneableTags[int8Tag] =
    cloneableTags[int16Tag] = cloneableTags[int32Tag] =
    cloneableTags[numberTag] = cloneableTags[objectTag] =
    cloneableTags[regexpTag] = cloneableTags[stringTag] =
    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] =
    cloneableTags[mapTag] = cloneableTags[setTag] =
    cloneableTags[weakMapTag] = false;

    /** Used to map latin-1 supplementary letters to basic latin letters. */
    var deburredLetters = {
      '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
      '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
      '\xc7': 'C',  '\xe7': 'c',
      '\xd0': 'D',  '\xf0': 'd',
      '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
      '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
      '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
      '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
      '\xd1': 'N',  '\xf1': 'n',
      '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
      '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
      '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
      '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
      '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
      '\xc6': 'Ae', '\xe6': 'ae',
      '\xde': 'Th', '\xfe': 'th',
      '\xdf': 'ss'
    };

    /** Used to map characters to HTML entities. */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;',
      '`': '&#96;'
    };

    /** Used to map HTML entities to characters. */
    var htmlUnescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'",
      '&#96;': '`'
    };

    /** Used to determine if values are of the language type `Object`. */
    var objectTypes = {
      'function': true,
      'object': true
    };

    /** Used to escape characters for inclusion in compiled regexes. */
    var regexpEscapes = {
      '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
      '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
      'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
      'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
      'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
    };

    /** Used to escape characters for inclusion in compiled string literals. */
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      '\u2028': 'u2028',
      '\u2029': 'u2029'
    };

    /** Detect free variable `exports`. */
    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

    /** Detect free variable `self`. */
    var freeSelf = objectTypes[typeof self] && self && self.Object && self;

    /** Detect free variable `window`. */
    var freeWindow = objectTypes[typeof window] && window && window.Object && window;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

    /**
     * Used as a reference to the global object.
     *
     * The `this` value is used if it's the global object to avoid Greasemonkey's
     * restricted `window` object, otherwise the `window` object is used.
     */
    var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

    /*--------------------------------------------------------------------------*/

    /**
     * The base implementation of `compareAscending` which compares values and
     * sorts them in ascending order without guaranteeing a stable sort.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function baseCompareAscending(value, other) {
      if (value !== other) {
        var valIsNull = value === null,
            valIsUndef = value === undefined,
            valIsReflexive = value === value;

        var othIsNull = other === null,
            othIsUndef = other === undefined,
            othIsReflexive = other === other;

        if ((value > other && !othIsNull) || !valIsReflexive ||
            (valIsNull && !othIsUndef && othIsReflexive) ||
            (valIsUndef && othIsReflexive)) {
          return 1;
        }
        if ((value < other && !valIsNull) || !othIsReflexive ||
            (othIsNull && !valIsUndef && valIsReflexive) ||
            (othIsUndef && valIsReflexive)) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to search.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseFindIndex(array, predicate, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length)) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.indexOf` without support for binary searches.
     *
     * @private
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOf(array, value, fromIndex) {
      if (value !== value) {
        return indexOfNaN(array, fromIndex);
      }
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.isFunction` without support for environments
     * with incorrect `typeof` results.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     */
    function baseIsFunction(value) {
      // Avoid a Chakra JIT bug in compatibility modes of IE 11.
      // See https://github.com/jashkenas/underscore/issues/1621 for more details.
      return typeof value == 'function' || false;
    }

    /**
     * Converts `value` to a string if it's not one. An empty string is returned
     * for `null` or `undefined` values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      return value == null ? '' : (value + '');
    }

    /**
     * Used by `_.trim` and `_.trimLeft` to get the index of the first character
     * of `string` that is not found in `chars`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @param {string} chars The characters to find.
     * @returns {number} Returns the index of the first character not found in `chars`.
     */
    function charsLeftIndex(string, chars) {
      var index = -1,
          length = string.length;

      while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
      return index;
    }

    /**
     * Used by `_.trim` and `_.trimRight` to get the index of the last character
     * of `string` that is not found in `chars`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @param {string} chars The characters to find.
     * @returns {number} Returns the index of the last character not found in `chars`.
     */
    function charsRightIndex(string, chars) {
      var index = string.length;

      while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
      return index;
    }

    /**
     * Used by `_.sortBy` to compare transformed elements of a collection and stable
     * sort them in ascending order.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareAscending(object, other) {
      return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
    }

    /**
     * Used by `_.sortByOrder` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
     * a value is sorted in ascending order if its corresponding order is "asc", and
     * descending if "desc".
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * ((order === 'asc' || order === true) ? 1 : -1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
     *
     * @private
     * @param {string} letter The matched letter to deburr.
     * @returns {string} Returns the deburred letter.
     */
    function deburrLetter(letter) {
      return deburredLetters[letter];
    }

    /**
     * Used by `_.escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeHtmlChar(chr) {
      return htmlEscapes[chr];
    }

    /**
     * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @param {string} leadingChar The capture group for a leading character.
     * @param {string} whitespaceChar The capture group for a whitespace character.
     * @returns {string} Returns the escaped character.
     */
    function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
      if (leadingChar) {
        chr = regexpEscapes[chr];
      } else if (whitespaceChar) {
        chr = stringEscapes[chr];
      }
      return '\\' + chr;
    }

    /**
     * Used by `_.template` to escape characters for inclusion in compiled string literals.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeStringChar(chr) {
      return '\\' + stringEscapes[chr];
    }

    /**
     * Gets the index at which the first occurrence of `NaN` is found in `array`.
     *
     * @private
     * @param {Array} array The array to search.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched `NaN`, else `-1`.
     */
    function indexOfNaN(array, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 0 : -1);

      while ((fromRight ? index-- : ++index < length)) {
        var other = array[index];
        if (other !== other) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Checks if `value` is object-like.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     */
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
     * character code is whitespace.
     *
     * @private
     * @param {number} charCode The character code to inspect.
     * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
     */
    function isSpace(charCode) {
      return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
        (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
    }

    /**
     * Replaces all `placeholder` elements in `array` with an internal placeholder
     * and returns an array of their indexes.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {*} placeholder The placeholder to replace.
     * @returns {Array} Returns the new array of placeholder indexes.
     */
    function replaceHolders(array, placeholder) {
      var index = -1,
          length = array.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        if (array[index] === placeholder) {
          array[index] = PLACEHOLDER;
          result[++resIndex] = index;
        }
      }
      return result;
    }

    /**
     * An implementation of `_.uniq` optimized for sorted arrays without support
     * for callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The function invoked per iteration.
     * @returns {Array} Returns the new duplicate-value-free array.
     */
    function sortedUniq(array, iteratee) {
      var seen,
          index = -1,
          length = array.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value, index, array) : value;

        if (!index || seen !== computed) {
          seen = computed;
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
     * character of `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the index of the first non-whitespace character.
     */
    function trimmedLeftIndex(string) {
      var index = -1,
          length = string.length;

      while (++index < length && isSpace(string.charCodeAt(index))) {}
      return index;
    }

    /**
     * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
     * character of `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the index of the last non-whitespace character.
     */
    function trimmedRightIndex(string) {
      var index = string.length;

      while (index-- && isSpace(string.charCodeAt(index))) {}
      return index;
    }

    /**
     * Used by `_.unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} chr The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    function unescapeHtmlChar(chr) {
      return htmlUnescapes[chr];
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Create a new pristine `lodash` function using the given `context` object.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} [context=root] The context object.
     * @returns {Function} Returns a new `lodash` function.
     * @example
     *
     * _.mixin({ 'foo': _.constant('foo') });
     *
     * var lodash = _.runInContext();
     * lodash.mixin({ 'bar': lodash.constant('bar') });
     *
     * _.isFunction(_.foo);
     * // => true
     * _.isFunction(_.bar);
     * // => false
     *
     * lodash.isFunction(lodash.foo);
     * // => false
     * lodash.isFunction(lodash.bar);
     * // => true
     *
     * // using `context` to mock `Date#getTime` use in `_.now`
     * var mock = _.runInContext({
     *   'Date': function() {
     *     return { 'getTime': getTimeMock };
     *   }
     * });
     *
     * // or creating a suped-up `defer` in Node.js
     * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
     */
    function runInContext(context) {
      // Avoid issues with some ES3 environments that attempt to use values, named
      // after built-in constructors like `Object`, for the creation of literals.
      // ES5 clears this up by stating that literals must use built-in constructors.
      // See https://es5.github.io/#x11.1.5 for more details.
      context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

      /** Native constructor references. */
      var Array = context.Array,
          Date = context.Date,
          Error = context.Error,
          Function = context.Function,
          Math = context.Math,
          Number = context.Number,
          Object = context.Object,
          RegExp = context.RegExp,
          String = context.String,
          TypeError = context.TypeError;

      /** Used for native method references. */
      var arrayProto = Array.prototype,
          objectProto = Object.prototype,
          stringProto = String.prototype;

      /** Used to resolve the decompiled source of functions. */
      var fnToString = Function.prototype.toString;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /** Used to generate unique IDs. */
      var idCounter = 0;

      /**
       * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
       * of values.
       */
      var objToString = objectProto.toString;

      /** Used to restore the original `_` reference in `_.noConflict`. */
      var oldDash = root._;

      /** Used to detect if a method is native. */
      var reIsNative = RegExp('^' +
        fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
        .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
      );

      /** Native method references. */
      var ArrayBuffer = context.ArrayBuffer,
          clearTimeout = context.clearTimeout,
          parseFloat = context.parseFloat,
          pow = Math.pow,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          Set = getNative(context, 'Set'),
          setTimeout = context.setTimeout,
          splice = arrayProto.splice,
          Uint8Array = context.Uint8Array,
          WeakMap = getNative(context, 'WeakMap');

      /* Native method references for those with the same name as other `lodash` methods. */
      var nativeCeil = Math.ceil,
          nativeCreate = getNative(Object, 'create'),
          nativeFloor = Math.floor,
          nativeIsArray = getNative(Array, 'isArray'),
          nativeIsFinite = context.isFinite,
          nativeKeys = getNative(Object, 'keys'),
          nativeMax = Math.max,
          nativeMin = Math.min,
          nativeNow = getNative(Date, 'now'),
          nativeParseInt = context.parseInt,
          nativeRandom = Math.random;

      /** Used as references for `-Infinity` and `Infinity`. */
      var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
          POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

      /** Used as references for the maximum length and index of an array. */
      var MAX_ARRAY_LENGTH = 4294967295,
          MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
          HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

      /**
       * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
       * of an array-like value.
       */
      var MAX_SAFE_INTEGER = 9007199254740991;

      /** Used to store function metadata. */
      var metaMap = WeakMap && new WeakMap;

      /** Used to lookup unminified function names. */
      var realNames = {};

      /*------------------------------------------------------------------------*/

      /**
       * Creates a `lodash` object which wraps `value` to enable implicit chaining.
       * Methods that operate on and return arrays, collections, and functions can
       * be chained together. Methods that retrieve a single value or may return a
       * primitive value will automatically end the chain returning the unwrapped
       * value. Explicit chaining may be enabled using `_.chain`. The execution of
       * chained methods is lazy, that is, execution is deferred until `_#value`
       * is implicitly or explicitly called.
       *
       * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
       * fusion is an optimization strategy which merge iteratee calls; this can help
       * to avoid the creation of intermediate data structures and greatly reduce the
       * number of iteratee executions.
       *
       * Chaining is supported in custom builds as long as the `_#value` method is
       * directly or indirectly included in the build.
       *
       * In addition to lodash methods, wrappers have `Array` and `String` methods.
       *
       * The wrapper `Array` methods are:
       * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
       * `splice`, and `unshift`
       *
       * The wrapper `String` methods are:
       * `replace` and `split`
       *
       * The wrapper methods that support shortcut fusion are:
       * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
       * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
       * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
       * and `where`
       *
       * The chainable wrapper methods are:
       * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
       * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
       * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
       * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
       * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
       * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
       * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
       * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
       * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
       * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
       * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
       * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
       * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
       * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
       * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
       * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
       * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
       *
       * The wrapper methods that are **not** chainable by default are:
       * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
       * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
       * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
       * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
       * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
       * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
       * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
       * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
       * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
       * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
       * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
       * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
       * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
       * `unescape`, `uniqueId`, `value`, and `words`
       *
       * The wrapper method `sample` will return a wrapped value when `n` is provided,
       * otherwise an unwrapped value is returned.
       *
       * @name _
       * @constructor
       * @category Chain
       * @param {*} value The value to wrap in a `lodash` instance.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var wrapped = _([1, 2, 3]);
       *
       * // returns an unwrapped value
       * wrapped.reduce(function(total, n) {
       *   return total + n;
       * });
       * // => 6
       *
       * // returns a wrapped value
       * var squares = wrapped.map(function(n) {
       *   return n * n;
       * });
       *
       * _.isArray(squares);
       * // => false
       *
       * _.isArray(squares.value());
       * // => true
       */
      function lodash(value) {
        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }
          if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
            return wrapperClone(value);
          }
        }
        return new LodashWrapper(value);
      }

      /**
       * The function whose prototype all chaining wrappers inherit from.
       *
       * @private
       */
      function baseLodash() {
        // No operation performed.
      }

      /**
       * The base constructor for creating `lodash` wrapper objects.
       *
       * @private
       * @param {*} value The value to wrap.
       * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
       * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
       */
      function LodashWrapper(value, chainAll, actions) {
        this.__wrapped__ = value;
        this.__actions__ = actions || [];
        this.__chain__ = !!chainAll;
      }

      /**
       * An object environment feature flags.
       *
       * @static
       * @memberOf _
       * @type Object
       */
      var support = lodash.support = {};

      /**
       * By default, the template delimiters used by lodash are like those in
       * embedded Ruby (ERB). Change the following template settings to use
       * alternative delimiters.
       *
       * @static
       * @memberOf _
       * @type Object
       */
      lodash.templateSettings = {

        /**
         * Used to detect `data` property values to be HTML-escaped.
         *
         * @memberOf _.templateSettings
         * @type RegExp
         */
        'escape': reEscape,

        /**
         * Used to detect code to be evaluated.
         *
         * @memberOf _.templateSettings
         * @type RegExp
         */
        'evaluate': reEvaluate,

        /**
         * Used to detect `data` property values to inject.
         *
         * @memberOf _.templateSettings
         * @type RegExp
         */
        'interpolate': reInterpolate,

        /**
         * Used to reference the data object in the template text.
         *
         * @memberOf _.templateSettings
         * @type string
         */
        'variable': '',

        /**
         * Used to import variables into the compiled template.
         *
         * @memberOf _.templateSettings
         * @type Object
         */
        'imports': {

          /**
           * A reference to the `lodash` function.
           *
           * @memberOf _.templateSettings.imports
           * @type Function
           */
          '_': lodash
        }
      };

      /*------------------------------------------------------------------------*/

      /**
       * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
       *
       * @private
       * @param {*} value The value to wrap.
       */
      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = POSITIVE_INFINITY;
        this.__views__ = [];
      }

      /**
       * Creates a clone of the lazy wrapper object.
       *
       * @private
       * @name clone
       * @memberOf LazyWrapper
       * @returns {Object} Returns the cloned `LazyWrapper` object.
       */
      function lazyClone() {
        var result = new LazyWrapper(this.__wrapped__);
        result.__actions__ = arrayCopy(this.__actions__);
        result.__dir__ = this.__dir__;
        result.__filtered__ = this.__filtered__;
        result.__iteratees__ = arrayCopy(this.__iteratees__);
        result.__takeCount__ = this.__takeCount__;
        result.__views__ = arrayCopy(this.__views__);
        return result;
      }

      /**
       * Reverses the direction of lazy iteration.
       *
       * @private
       * @name reverse
       * @memberOf LazyWrapper
       * @returns {Object} Returns the new reversed `LazyWrapper` object.
       */
      function lazyReverse() {
        if (this.__filtered__) {
          var result = new LazyWrapper(this);
          result.__dir__ = -1;
          result.__filtered__ = true;
        } else {
          result = this.clone();
          result.__dir__ *= -1;
        }
        return result;
      }

      /**
       * Extracts the unwrapped value from its lazy wrapper.
       *
       * @private
       * @name value
       * @memberOf LazyWrapper
       * @returns {*} Returns the unwrapped value.
       */
      function lazyValue() {
        var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : (start - 1),
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);

        if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
          return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
        }
        var result = [];

        outer:
        while (length-- && resIndex < takeCount) {
          index += dir;

          var iterIndex = -1,
              value = array[index];

          while (++iterIndex < iterLength) {
            var data = iteratees[iterIndex],
                iteratee = data.iteratee,
                type = data.type,
                computed = iteratee(value);

            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }
          result[resIndex++] = value;
        }
        return result;
      }

      /*------------------------------------------------------------------------*/

      /**
       * Creates a cache object to store key/value pairs.
       *
       * @private
       * @static
       * @name Cache
       * @memberOf _.memoize
       */
      function MapCache() {
        this.__data__ = {};
      }

      /**
       * Removes `key` and its value from the cache.
       *
       * @private
       * @name delete
       * @memberOf _.memoize.Cache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
       */
      function mapDelete(key) {
        return this.has(key) && delete this.__data__[key];
      }

      /**
       * Gets the cached value for `key`.
       *
       * @private
       * @name get
       * @memberOf _.memoize.Cache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the cached value.
       */
      function mapGet(key) {
        return key == '__proto__' ? undefined : this.__data__[key];
      }

      /**
       * Checks if a cached value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf _.memoize.Cache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function mapHas(key) {
        return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
      }

      /**
       * Sets `value` to `key` of the cache.
       *
       * @private
       * @name set
       * @memberOf _.memoize.Cache
       * @param {string} key The key of the value to cache.
       * @param {*} value The value to cache.
       * @returns {Object} Returns the cache object.
       */
      function mapSet(key, value) {
        if (key != '__proto__') {
          this.__data__[key] = value;
        }
        return this;
      }

      /*------------------------------------------------------------------------*/

      /**
       *
       * Creates a cache object to store unique values.
       *
       * @private
       * @param {Array} [values] The values to cache.
       */
      function SetCache(values) {
        var length = values ? values.length : 0;

        this.data = { 'hash': nativeCreate(null), 'set': new Set };
        while (length--) {
          this.push(values[length]);
        }
      }

      /**
       * Checks if `value` is in `cache` mimicking the return signature of
       * `_.indexOf` by returning `0` if the value is found, else `-1`.
       *
       * @private
       * @param {Object} cache The cache to search.
       * @param {*} value The value to search for.
       * @returns {number} Returns `0` if `value` is found, else `-1`.
       */
      function cacheIndexOf(cache, value) {
        var data = cache.data,
            result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

        return result ? 0 : -1;
      }

      /**
       * Adds `value` to the cache.
       *
       * @private
       * @name push
       * @memberOf SetCache
       * @param {*} value The value to cache.
       */
      function cachePush(value) {
        var data = this.data;
        if (typeof value == 'string' || isObject(value)) {
          data.set.add(value);
        } else {
          data.hash[value] = true;
        }
      }

      /*------------------------------------------------------------------------*/

      /**
       * Creates a new array joining `array` with `other`.
       *
       * @private
       * @param {Array} array The array to join.
       * @param {Array} other The other array to join.
       * @returns {Array} Returns the new concatenated array.
       */
      function arrayConcat(array, other) {
        var index = -1,
            length = array.length,
            othIndex = -1,
            othLength = other.length,
            result = Array(length + othLength);

        while (++index < length) {
          result[index] = array[index];
        }
        while (++othIndex < othLength) {
          result[index++] = other[othIndex];
        }
        return result;
      }

      /**
       * Copies the values of `source` to `array`.
       *
       * @private
       * @param {Array} source The array to copy values from.
       * @param {Array} [array=[]] The array to copy values to.
       * @returns {Array} Returns `array`.
       */
      function arrayCopy(source, array) {
        var index = -1,
            length = source.length;

        array || (array = Array(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }

      /**
       * A specialized version of `_.forEach` for arrays without support for callback
       * shorthands and `this` binding.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns `array`.
       */
      function arrayEach(array, iteratee) {
        var index = -1,
            length = array.length;

        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }

      /**
       * A specialized version of `_.forEachRight` for arrays without support for
       * callback shorthands and `this` binding.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns `array`.
       */
      function arrayEachRight(array, iteratee) {
        var length = array.length;

        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }

      /**
       * A specialized version of `_.every` for arrays without support for callback
       * shorthands and `this` binding.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`.
       */
      function arrayEvery(array, predicate) {
        var index = -1,
            length = array.length;

        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }

      /**
       * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
       * with one argument: (value).
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} comparator The function used to compare values.
       * @param {*} exValue The initial extremum value.
       * @returns {*} Returns the extremum value.
       */
      function arrayExtremum(array, iteratee, comparator, exValue) {
        var index = -1,
            length = array.length,
            computed = exValue,
            result = computed;

        while (++index < length) {
          var value = array[index],
              current = +iteratee(value);

          if (comparator(current, computed)) {
            computed = current;
            result = value;
          }
        }
        return result;
      }

      /**
       * A specialized version of `_.filter` for arrays without support for callback
       * shorthands and `this` binding.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */
      function arrayFilter(array, predicate) {
        var index = -1,
            length = array.length,
            resIndex = -1,
            result = [];

        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[++resIndex] = value;
          }
        }
        return result;
      }

      /**
       * A specialized version of `_.map` for arrays without support for callback
       * shorthands and `this` binding.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */
      function arrayMap(array, iteratee) {
        var index = -1,
            length = array.length,
            result = Array(length);

        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }

      /**
       * Appends the elements of `values` to `array`.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to append.
       * @returns {Array} Returns `array`.
       */
      function arrayPush(array, values) {
        var index = -1,
            length = values.length,
            offset = array.length;

        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }

      /**
       * A specialized version of `_.reduce` for arrays without support for callback
       * shorthands and `this` binding.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @param {boolean} [initFromArray] Specify using the first element of `array`
       *  as the initial value.
       * @returns {*} Returns the accumulated value.
       */
      function arrayReduce(array, iteratee, accumulator, initFromArray) {
        var index = -1,
            length = array.length;

        if (initFromArray && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }

      /**
       * A specialized version of `_.reduceRight` for arrays without support for
       * callback shorthands and `this` binding.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @param {boolean} [initFromArray] Specify using the last element of `array`
       *  as the initial value.
       * @returns {*} Returns the accumulated value.
       */
      function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
        var length = array.length;
        if (initFromArray && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }

      /**
       * A specialized version of `_.some` for arrays without support for callback
       * shorthands and `this` binding.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */
      function arraySome(array, predicate) {
        var index = -1,
            length = array.length;

        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }

      /**
       * A specialized version of `_.sum` for arrays without support for callback
       * shorthands and `this` binding..
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {number} Returns the sum.
       */
      function arraySum(array, iteratee) {
        var length = array.length,
            result = 0;

        while (length--) {
          result += +iteratee(array[length]) || 0;
        }
        return result;
      }

      /**
       * Used by `_.defaults` to customize its `_.assign` use.
       *
       * @private
       * @param {*} objectValue The destination object property value.
       * @param {*} sourceValue The source object property value.
       * @returns {*} Returns the value to assign to the destination object.
       */
      function assignDefaults(objectValue, sourceValue) {
        return objectValue === undefined ? sourceValue : objectValue;
      }

      /**
       * Used by `_.template` to customize its `_.assign` use.
       *
       * **Note:** This function is like `assignDefaults` except that it ignores
       * inherited property values when checking if a property is `undefined`.
       *
       * @private
       * @param {*} objectValue The destination object property value.
       * @param {*} sourceValue The source object property value.
       * @param {string} key The key associated with the object and source values.
       * @param {Object} object The destination object.
       * @returns {*} Returns the value to assign to the destination object.
       */
      function assignOwnDefaults(objectValue, sourceValue, key, object) {
        return (objectValue === undefined || !hasOwnProperty.call(object, key))
          ? sourceValue
          : objectValue;
      }

      /**
       * A specialized version of `_.assign` for customizing assigned values without
       * support for argument juggling, multiple sources, and `this` binding `customizer`
       * functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {Function} customizer The function to customize assigned values.
       * @returns {Object} Returns `object`.
       */
      function assignWith(object, source, customizer) {
        var index = -1,
            props = keys(source),
            length = props.length;

        while (++index < length) {
          var key = props[index],
              value = object[key],
              result = customizer(value, source[key], key, object, source);

          if ((result === result ? (result !== value) : (value === value)) ||
              (value === undefined && !(key in object))) {
            object[key] = result;
          }
        }
        return object;
      }

      /**
       * The base implementation of `_.assign` without support for argument juggling,
       * multiple sources, and `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */
      function baseAssign(object, source) {
        return source == null
          ? object
          : baseCopy(source, keys(source), object);
      }

      /**
       * The base implementation of `_.at` without support for string collections
       * and individual key arguments.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {number[]|string[]} props The property names or indexes of elements to pick.
       * @returns {Array} Returns the new array of picked elements.
       */
      function baseAt(collection, props) {
        var index = -1,
            isNil = collection == null,
            isArr = !isNil && isArrayLike(collection),
            length = isArr ? collection.length : 0,
            propsLength = props.length,
            result = Array(propsLength);

        while(++index < propsLength) {
          var key = props[index];
          if (isArr) {
            result[index] = isIndex(key, length) ? collection[key] : undefined;
          } else {
            result[index] = isNil ? undefined : collection[key];
          }
        }
        return result;
      }

      /**
       * Copies properties of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy properties from.
       * @param {Array} props The property names to copy.
       * @param {Object} [object={}] The object to copy properties to.
       * @returns {Object} Returns `object`.
       */
      function baseCopy(source, props, object) {
        object || (object = {});

        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          object[key] = source[key];
        }
        return object;
      }

      /**
       * The base implementation of `_.callback` which supports specifying the
       * number of arguments to provide to `func`.
       *
       * @private
       * @param {*} [func=_.identity] The value to convert to a callback.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {number} [argCount] The number of arguments to provide to `func`.
       * @returns {Function} Returns the callback.
       */
      function baseCallback(func, thisArg, argCount) {
        var type = typeof func;
        if (type == 'function') {
          return thisArg === undefined
            ? func
            : bindCallback(func, thisArg, argCount);
        }
        if (func == null) {
          return identity;
        }
        if (type == 'object') {
          return baseMatches(func);
        }
        return thisArg === undefined
          ? property(func)
          : baseMatchesProperty(func, thisArg);
      }

      /**
       * The base implementation of `_.clone` without support for argument juggling
       * and `this` binding `customizer` functions.
       *
       * @private
       * @param {*} value The value to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @param {Function} [customizer] The function to customize cloning values.
       * @param {string} [key] The key of `value`.
       * @param {Object} [object] The object `value` belongs to.
       * @param {Array} [stackA=[]] Tracks traversed source objects.
       * @param {Array} [stackB=[]] Associates clones with source counterparts.
       * @returns {*} Returns the cloned value.
       */
      function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
        var result;
        if (customizer) {
          result = object ? customizer(value, key, object) : customizer(value);
        }
        if (result !== undefined) {
          return result;
        }
        if (!isObject(value)) {
          return value;
        }
        var isArr = isArray(value);
        if (isArr) {
          result = initCloneArray(value);
          if (!isDeep) {
            return arrayCopy(value, result);
          }
        } else {
          var tag = objToString.call(value),
              isFunc = tag == funcTag;

          if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
            result = initCloneObject(isFunc ? {} : value);
            if (!isDeep) {
              return baseAssign(result, value);
            }
          } else {
            return cloneableTags[tag]
              ? initCloneByTag(value, tag, isDeep)
              : (object ? value : {});
          }
        }
        // Check for circular references and return its corresponding clone.
        stackA || (stackA = []);
        stackB || (stackB = []);

        var length = stackA.length;
        while (length--) {
          if (stackA[length] == value) {
            return stackB[length];
          }
        }
        // Add the source value to the stack of traversed objects and associate it with its clone.
        stackA.push(value);
        stackB.push(result);

        // Recursively populate clone (susceptible to call stack limits).
        (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
          result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
        });
        return result;
      }

      /**
       * The base implementation of `_.create` without support for assigning
       * properties to the created object.
       *
       * @private
       * @param {Object} prototype The object to inherit from.
       * @returns {Object} Returns the new object.
       */
      var baseCreate = (function() {
        function object() {}
        return function(prototype) {
          if (isObject(prototype)) {
            object.prototype = prototype;
            var result = new object;
            object.prototype = undefined;
          }
          return result || {};
        };
      }());

      /**
       * The base implementation of `_.delay` and `_.defer` which accepts an index
       * of where to slice the arguments to provide to `func`.
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {Object} args The arguments provide to `func`.
       * @returns {number} Returns the timer id.
       */
      function baseDelay(func, wait, args) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return setTimeout(function() { func.apply(undefined, args); }, wait);
      }

      /**
       * The base implementation of `_.difference` which accepts a single array
       * of values to exclude.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Array} values The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       */
      function baseDifference(array, values) {
        var length = array ? array.length : 0,
            result = [];

        if (!length) {
          return result;
        }
        var index = -1,
            indexOf = getIndexOf(),
            isCommon = indexOf == baseIndexOf,
            cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
            valuesLength = values.length;

        if (cache) {
          indexOf = cacheIndexOf;
          isCommon = false;
          values = cache;
        }
        outer:
        while (++index < length) {
          var value = array[index];

          if (isCommon && value === value) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values[valuesIndex] === value) {
                continue outer;
              }
            }
            result.push(value);
          }
          else if (indexOf(values, value, 0) < 0) {
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.forEach` without support for callback
       * shorthands and `this` binding.
       *
       * @private
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object|string} Returns `collection`.
       */
      var baseEach = createBaseEach(baseForOwn);

      /**
       * The base implementation of `_.forEachRight` without support for callback
       * shorthands and `this` binding.
       *
       * @private
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object|string} Returns `collection`.
       */
      var baseEachRight = createBaseEach(baseForOwnRight, true);

      /**
       * The base implementation of `_.every` without support for callback
       * shorthands and `this` binding.
       *
       * @private
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`
       */
      function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function(value, index, collection) {
          result = !!predicate(value, index, collection);
          return result;
        });
        return result;
      }

      /**
       * Gets the extremum value of `collection` invoking `iteratee` for each value
       * in `collection` to generate the criterion by which the value is ranked.
       * The `iteratee` is invoked with three arguments: (value, index|key, collection).
       *
       * @private
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} comparator The function used to compare values.
       * @param {*} exValue The initial extremum value.
       * @returns {*} Returns the extremum value.
       */
      function baseExtremum(collection, iteratee, comparator, exValue) {
        var computed = exValue,
            result = computed;

        baseEach(collection, function(value, index, collection) {
          var current = +iteratee(value, index, collection);
          if (comparator(current, computed) || (current === exValue && current === result)) {
            computed = current;
            result = value;
          }
        });
        return result;
      }

      /**
       * The base implementation of `_.fill` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       */
      function baseFill(array, value, start, end) {
        var length = array.length;

        start = start == null ? 0 : (+start || 0);
        if (start < 0) {
          start = -start > length ? 0 : (length + start);
        }
        end = (end === undefined || end > length) ? length : (+end || 0);
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : (end >>> 0);
        start >>>= 0;

        while (start < length) {
          array[start++] = value;
        }
        return array;
      }

      /**
       * The base implementation of `_.filter` without support for callback
       * shorthands and `this` binding.
       *
       * @private
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */
      function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function(value, index, collection) {
          if (predicate(value, index, collection)) {
            result.push(value);
          }
        });
        return result;
      }

      /**
       * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
       * without support for callback shorthands and `this` binding, which iterates
       * over `collection` using the provided `eachFunc`.
       *
       * @private
       * @param {Array|Object|string} collection The collection to search.
       * @param {Function} predicate The function invoked per iteration.
       * @param {Function} eachFunc The function to iterate over `collection`.
       * @param {boolean} [retKey] Specify returning the key of the found element
       *  instead of the element itself.
       * @returns {*} Returns the found element or its key, else `undefined`.
       */
      function baseFind(collection, predicate, eachFunc, retKey) {
        var result;
        eachFunc(collection, function(value, key, collection) {
          if (predicate(value, key, collection)) {
            result = retKey ? key : value;
            return false;
          }
        });
        return result;
      }

      /**
       * The base implementation of `_.flatten` with added support for restricting
       * flattening and specifying the start index.
       *
       * @private
       * @param {Array} array The array to flatten.
       * @param {boolean} [isDeep] Specify a deep flatten.
       * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
       * @param {Array} [result=[]] The initial result value.
       * @returns {Array} Returns the new flattened array.
       */
      function baseFlatten(array, isDeep, isStrict, result) {
        result || (result = []);

        var index = -1,
            length = array.length;

        while (++index < length) {
          var value = array[index];
          if (isObjectLike(value) && isArrayLike(value) &&
              (isStrict || isArray(value) || isArguments(value))) {
            if (isDeep) {
              // Recursively flatten arrays (susceptible to call stack limits).
              baseFlatten(value, isDeep, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }
        return result;
      }

      /**
       * The base implementation of `baseForIn` and `baseForOwn` which iterates
       * over `object` properties returned by `keysFunc` invoking `iteratee` for
       * each property. Iteratee functions may exit iteration early by explicitly
       * returning `false`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */
      var baseFor = createBaseFor();

      /**
       * This function is like `baseFor` except that it iterates over properties
       * in the opposite order.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */
      var baseForRight = createBaseFor(true);

      /**
       * The base implementation of `_.forIn` without support for callback
       * shorthands and `this` binding.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */
      function baseForIn(object, iteratee) {
        return baseFor(object, iteratee, keysIn);
      }

      /**
       * The base implementation of `_.forOwn` without support for callback
       * shorthands and `this` binding.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */
      function baseForOwn(object, iteratee) {
        return baseFor(object, iteratee, keys);
      }

      /**
       * The base implementation of `_.forOwnRight` without support for callback
       * shorthands and `this` binding.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */
      function baseForOwnRight(object, iteratee) {
        return baseForRight(object, iteratee, keys);
      }

      /**
       * The base implementation of `_.functions` which creates an array of
       * `object` function property names filtered from those provided.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Array} props The property names to filter.
       * @returns {Array} Returns the new array of filtered property names.
       */
      function baseFunctions(object, props) {
        var index = -1,
            length = props.length,
            resIndex = -1,
            result = [];

        while (++index < length) {
          var key = props[index];
          if (isFunction(object[key])) {
            result[++resIndex] = key;
          }
        }
        return result;
      }

      /**
       * The base implementation of `get` without support for string paths
       * and default values.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} path The path of the property to get.
       * @param {string} [pathKey] The key representation of path.
       * @returns {*} Returns the resolved value.
       */
      function baseGet(object, path, pathKey) {
        if (object == null) {
          return;
        }
        if (pathKey !== undefined && pathKey in toObject(object)) {
          path = [pathKey];
        }
        var index = 0,
            length = path.length;

        while (object != null && index < length) {
          object = object[path[index++]];
        }
        return (index && index == length) ? object : undefined;
      }

      /**
       * The base implementation of `_.isEqual` without support for `this` binding
       * `customizer` functions.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {Function} [customizer] The function to customize comparing values.
       * @param {boolean} [isLoose] Specify performing partial comparisons.
       * @param {Array} [stackA] Tracks traversed `value` objects.
       * @param {Array} [stackB] Tracks traversed `other` objects.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       */
      function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
      }

      /**
       * A specialized version of `baseIsEqual` for arrays and objects which performs
       * deep comparisons and tracks traversed objects enabling objects with circular
       * references to be compared.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Function} [customizer] The function to customize comparing objects.
       * @param {boolean} [isLoose] Specify performing partial comparisons.
       * @param {Array} [stackA=[]] Tracks traversed `value` objects.
       * @param {Array} [stackB=[]] Tracks traversed `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
        var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = arrayTag,
            othTag = arrayTag;

        if (!objIsArr) {
          objTag = objToString.call(object);
          if (objTag == argsTag) {
            objTag = objectTag;
          } else if (objTag != objectTag) {
            objIsArr = isTypedArray(object);
          }
        }
        if (!othIsArr) {
          othTag = objToString.call(other);
          if (othTag == argsTag) {
            othTag = objectTag;
          } else if (othTag != objectTag) {
            othIsArr = isTypedArray(other);
          }
        }
        var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

        if (isSameTag && !(objIsArr || objIsObj)) {
          return equalByTag(object, other, objTag);
        }
        if (!isLoose) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

          if (objIsWrapped || othIsWrapped) {
            return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
          }
        }
        if (!isSameTag) {
          return false;
        }
        // Assume cyclic values are equal.
        // For more information on detecting circular references see https://es5.github.io/#JO.
        stackA || (stackA = []);
        stackB || (stackB = []);

        var length = stackA.length;
        while (length--) {
          if (stackA[length] == object) {
            return stackB[length] == other;
          }
        }
        // Add `object` and `other` to the stack of traversed objects.
        stackA.push(object);
        stackB.push(other);

        var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

        stackA.pop();
        stackB.pop();

        return result;
      }

      /**
       * The base implementation of `_.isMatch` without support for callback
       * shorthands and `this` binding.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Array} matchData The propery names, values, and compare flags to match.
       * @param {Function} [customizer] The function to customize comparing objects.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       */
      function baseIsMatch(object, matchData, customizer) {
        var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

        if (object == null) {
          return !length;
        }
        object = toObject(object);
        while (index--) {
          var data = matchData[index];
          if ((noCustomizer && data[2])
                ? data[1] !== object[data[0]]
                : !(data[0] in object)
              ) {
            return false;
          }
        }
        while (++index < length) {
          data = matchData[index];
          var key = data[0],
              objValue = object[key],
              srcValue = data[1];

          if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) {
              return false;
            }
          } else {
            var result = customizer ? customizer(objValue, srcValue, key) : undefined;
            if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
              return false;
            }
          }
        }
        return true;
      }

      /**
       * The base implementation of `_.map` without support for callback shorthands
       * and `this` binding.
       *
       * @private
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */
      function baseMap(collection, iteratee) {
        var index = -1,
            result = isArrayLike(collection) ? Array(collection.length) : [];

        baseEach(collection, function(value, key, collection) {
          result[++index] = iteratee(value, key, collection);
        });
        return result;
      }

      /**
       * The base implementation of `_.matches` which does not clone `source`.
       *
       * @private
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new function.
       */
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          var key = matchData[0][0],
              value = matchData[0][1];

          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === value && (value !== undefined || (key in toObject(object)));
          };
        }
        return function(object) {
          return baseIsMatch(object, matchData);
        };
      }

      /**
       * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
       *
       * @private
       * @param {string} path The path of the property to get.
       * @param {*} srcValue The value to compare.
       * @returns {Function} Returns the new function.
       */
      function baseMatchesProperty(path, srcValue) {
        var isArr = isArray(path),
            isCommon = isKey(path) && isStrictComparable(srcValue),
            pathKey = (path + '');

        path = toPath(path);
        return function(object) {
          if (object == null) {
            return false;
          }
          var key = pathKey;
          object = toObject(object);
          if ((isArr || !isCommon) && !(key in object)) {
            object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
            if (object == null) {
              return false;
            }
            key = last(path);
            object = toObject(object);
          }
          return object[key] === srcValue
            ? (srcValue !== undefined || (key in object))
            : baseIsEqual(srcValue, object[key], undefined, true);
        };
      }

      /**
       * The base implementation of `_.merge` without support for argument juggling,
       * multiple sources, and `this` binding `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {Function} [customizer] The function to customize merged values.
       * @param {Array} [stackA=[]] Tracks traversed source objects.
       * @param {Array} [stackB=[]] Associates values with source counterparts.
       * @returns {Object} Returns `object`.
       */
      function baseMerge(object, source, customizer, stackA, stackB) {
        if (!isObject(object)) {
          return object;
        }
        var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
            props = isSrcArr ? undefined : keys(source);

        arrayEach(props || source, function(srcValue, key) {
          if (props) {
            key = srcValue;
            srcValue = source[key];
          }
          if (isObjectLike(srcValue)) {
            stackA || (stackA = []);
            stackB || (stackB = []);
            baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
          }
          else {
            var value = object[key],
                result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
                isCommon = result === undefined;

            if (isCommon) {
              result = srcValue;
            }
            if ((result !== undefined || (isSrcArr && !(key in object))) &&
                (isCommon || (result === result ? (result !== value) : (value === value)))) {
              object[key] = result;
            }
          }
        });
        return object;
      }

      /**
       * A specialized version of `baseMerge` for arrays and objects which performs
       * deep merges and tracks traversed objects enabling objects with circular
       * references to be merged.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {string} key The key of the value to merge.
       * @param {Function} mergeFunc The function to merge values.
       * @param {Function} [customizer] The function to customize merged values.
       * @param {Array} [stackA=[]] Tracks traversed source objects.
       * @param {Array} [stackB=[]] Associates values with source counterparts.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
        var length = stackA.length,
            srcValue = source[key];

        while (length--) {
          if (stackA[length] == srcValue) {
            object[key] = stackB[length];
            return;
          }
        }
        var value = object[key],
            result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
            isCommon = result === undefined;

        if (isCommon) {
          result = srcValue;
          if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
            result = isArray(value)
              ? value
              : (isArrayLike(value) ? arrayCopy(value) : []);
          }
          else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            result = isArguments(value)
              ? toPlainObject(value)
              : (isPlainObject(value) ? value : {});
          }
          else {
            isCommon = false;
          }
        }
        // Add the source value to the stack of traversed objects and associate
        // it with its merged value.
        stackA.push(srcValue);
        stackB.push(result);

        if (isCommon) {
          // Recursively merge objects and arrays (susceptible to call stack limits).
          object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
        } else if (result === result ? (result !== value) : (value === value)) {
          object[key] = result;
        }
      }

      /**
       * The base implementation of `_.property` without support for deep paths.
       *
       * @private
       * @param {string} key The key of the property to get.
       * @returns {Function} Returns the new function.
       */
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined : object[key];
        };
      }

      /**
       * A specialized version of `baseProperty` which supports deep paths.
       *
       * @private
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new function.
       */
      function basePropertyDeep(path) {
        var pathKey = (path + '');
        path = toPath(path);
        return function(object) {
          return baseGet(object, path, pathKey);
        };
      }

      /**
       * The base implementation of `_.pullAt` without support for individual
       * index arguments and capturing the removed elements.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {number[]} indexes The indexes of elements to remove.
       * @returns {Array} Returns `array`.
       */
      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0;
        while (length--) {
          var index = indexes[length];
          if (index != previous && isIndex(index)) {
            var previous = index;
            splice.call(array, index, 1);
          }
        }
        return array;
      }

      /**
       * The base implementation of `_.random` without support for argument juggling
       * and returning floating-point numbers.
       *
       * @private
       * @param {number} min The minimum possible value.
       * @param {number} max The maximum possible value.
       * @returns {number} Returns the random number.
       */
      function baseRandom(min, max) {
        return min + nativeFloor(nativeRandom() * (max - min + 1));
      }

      /**
       * The base implementation of `_.reduce` and `_.reduceRight` without support
       * for callback shorthands and `this` binding, which iterates over `collection`
       * using the provided `eachFunc`.
       *
       * @private
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} accumulator The initial value.
       * @param {boolean} initFromCollection Specify using the first or last element
       *  of `collection` as the initial value.
       * @param {Function} eachFunc The function to iterate over `collection`.
       * @returns {*} Returns the accumulated value.
       */
      function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
        eachFunc(collection, function(value, index, collection) {
          accumulator = initFromCollection
            ? (initFromCollection = false, value)
            : iteratee(accumulator, value, index, collection);
        });
        return accumulator;
      }

      /**
       * The base implementation of `setData` without support for hot loop detection.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */
      var baseSetData = !metaMap ? identity : function(func, data) {
        metaMap.set(func, data);
        return func;
      };

      /**
       * The base implementation of `_.slice` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */
      function baseSlice(array, start, end) {
        var index = -1,
            length = array.length;

        start = start == null ? 0 : (+start || 0);
        if (start < 0) {
          start = -start > length ? 0 : (length + start);
        }
        end = (end === undefined || end > length) ? length : (+end || 0);
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : ((end - start) >>> 0);
        start >>>= 0;

        var result = Array(length);
        while (++index < length) {
          result[index] = array[index + start];
        }
        return result;
      }

      /**
       * The base implementation of `_.some` without support for callback shorthands
       * and `this` binding.
       *
       * @private
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */
      function baseSome(collection, predicate) {
        var result;

        baseEach(collection, function(value, index, collection) {
          result = predicate(value, index, collection);
          return !result;
        });
        return !!result;
      }

      /**
       * The base implementation of `_.sortBy` which uses `comparer` to define
       * the sort order of `array` and replaces criteria objects with their
       * corresponding values.
       *
       * @private
       * @param {Array} array The array to sort.
       * @param {Function} comparer The function to define sort order.
       * @returns {Array} Returns `array`.
       */
      function baseSortBy(array, comparer) {
        var length = array.length;

        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }

      /**
       * The base implementation of `_.sortByOrder` without param guards.
       *
       * @private
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
       * @param {boolean[]} orders The sort orders of `iteratees`.
       * @returns {Array} Returns the new sorted array.
       */
      function baseSortByOrder(collection, iteratees, orders) {
        var callback = getCallback(),
            index = -1;

        iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

        var result = baseMap(collection, function(value) {
          var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
          return { 'criteria': criteria, 'index': ++index, 'value': value };
        });

        return baseSortBy(result, function(object, other) {
          return compareMultiple(object, other, orders);
        });
      }

      /**
       * The base implementation of `_.sum` without support for callback shorthands
       * and `this` binding.
       *
       * @private
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {number} Returns the sum.
       */
      function baseSum(collection, iteratee) {
        var result = 0;
        baseEach(collection, function(value, index, collection) {
          result += +iteratee(value, index, collection) || 0;
        });
        return result;
      }

      /**
       * The base implementation of `_.uniq` without support for callback shorthands
       * and `this` binding.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The function invoked per iteration.
       * @returns {Array} Returns the new duplicate-value-free array.
       */
      function baseUniq(array, iteratee) {
        var index = -1,
            indexOf = getIndexOf(),
            length = array.length,
            isCommon = indexOf == baseIndexOf,
            isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
            seen = isLarge ? createCache() : null,
            result = [];

        if (seen) {
          indexOf = cacheIndexOf;
          isCommon = false;
        } else {
          isLarge = false;
          seen = iteratee ? [] : result;
        }
        outer:
        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value, index, array) : value;

          if (isCommon && value === value) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          }
          else if (indexOf(seen, computed, 0) < 0) {
            if (iteratee || isLarge) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.values` and `_.valuesIn` which creates an
       * array of `object` property values corresponding to the property names
       * of `props`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} props The property names to get values for.
       * @returns {Object} Returns the array of property values.
       */
      function baseValues(object, props) {
        var index = -1,
            length = props.length,
            result = Array(length);

        while (++index < length) {
          result[index] = object[props[index]];
        }
        return result;
      }

      /**
       * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
       * and `_.takeWhile` without support for callback shorthands and `this` binding.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {Function} predicate The function invoked per iteration.
       * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the slice of `array`.
       */
      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
        return isDrop
          ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
          : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
      }

      /**
       * The base implementation of `wrapperValue` which returns the result of
       * performing a sequence of actions on the unwrapped `value`, where each
       * successive action is supplied the return value of the previous.
       *
       * @private
       * @param {*} value The unwrapped value.
       * @param {Array} actions Actions to peform to resolve the unwrapped value.
       * @returns {*} Returns the resolved value.
       */
      function baseWrapperValue(value, actions) {
        var result = value;
        if (result instanceof LazyWrapper) {
          result = result.value();
        }
        var index = -1,
            length = actions.length;

        while (++index < length) {
          var action = actions[index];
          result = action.func.apply(action.thisArg, arrayPush([result], action.args));
        }
        return result;
      }

      /**
       * Performs a binary search of `array` to determine the index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */
      function binaryIndex(array, value, retHighest) {
        var low = 0,
            high = array ? array.length : low;

        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = (low + high) >>> 1,
                computed = array[mid];

            if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return high;
        }
        return binaryIndexBy(array, value, identity, retHighest);
      }

      /**
       * This function is like `binaryIndex` except that it invokes `iteratee` for
       * `value` and each element of `array` to compute their sort ranking. The
       * iteratee is invoked with one argument; (value).
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */
      function binaryIndexBy(array, value, iteratee, retHighest) {
        value = iteratee(value);

        var low = 0,
            high = array ? array.length : 0,
            valIsNaN = value !== value,
            valIsNull = value === null,
            valIsUndef = value === undefined;

        while (low < high) {
          var mid = nativeFloor((low + high) / 2),
              computed = iteratee(array[mid]),
              isDef = computed !== undefined,
              isReflexive = computed === computed;

          if (valIsNaN) {
            var setLow = isReflexive || retHighest;
          } else if (valIsNull) {
            setLow = isReflexive && isDef && (retHighest || computed != null);
          } else if (valIsUndef) {
            setLow = isReflexive && (retHighest || isDef);
          } else if (computed == null) {
            setLow = false;
          } else {
            setLow = retHighest ? (computed <= value) : (computed < value);
          }
          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return nativeMin(high, MAX_ARRAY_INDEX);
      }

      /**
       * A specialized version of `baseCallback` which only supports `this` binding
       * and specifying the number of arguments to provide to `func`.
       *
       * @private
       * @param {Function} func The function to bind.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {number} [argCount] The number of arguments to provide to `func`.
       * @returns {Function} Returns the callback.
       */
      function bindCallback(func, thisArg, argCount) {
        if (typeof func != 'function') {
          return identity;
        }
        if (thisArg === undefined) {
          return func;
        }
        switch (argCount) {
          case 1: return function(value) {
            return func.call(thisArg, value);
          };
          case 3: return function(value, index, collection) {
            return func.call(thisArg, value, index, collection);
          };
          case 4: return function(accumulator, value, index, collection) {
            return func.call(thisArg, accumulator, value, index, collection);
          };
          case 5: return function(value, other, key, object, source) {
            return func.call(thisArg, value, other, key, object, source);
          };
        }
        return function() {
          return func.apply(thisArg, arguments);
        };
      }

      /**
       * Creates a clone of the given array buffer.
       *
       * @private
       * @param {ArrayBuffer} buffer The array buffer to clone.
       * @returns {ArrayBuffer} Returns the cloned array buffer.
       */
      function bufferClone(buffer) {
        var result = new ArrayBuffer(buffer.byteLength),
            view = new Uint8Array(result);

        view.set(new Uint8Array(buffer));
        return result;
      }

      /**
       * Creates an array that is the composition of partially applied arguments,
       * placeholders, and provided arguments into a single array of arguments.
       *
       * @private
       * @param {Array|Object} args The provided arguments.
       * @param {Array} partials The arguments to prepend to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @returns {Array} Returns the new array of composed arguments.
       */
      function composeArgs(args, partials, holders) {
        var holdersLength = holders.length,
            argsIndex = -1,
            argsLength = nativeMax(args.length - holdersLength, 0),
            leftIndex = -1,
            leftLength = partials.length,
            result = Array(leftLength + argsLength);

        while (++leftIndex < leftLength) {
          result[leftIndex] = partials[leftIndex];
        }
        while (++argsIndex < holdersLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
        while (argsLength--) {
          result[leftIndex++] = args[argsIndex++];
        }
        return result;
      }

      /**
       * This function is like `composeArgs` except that the arguments composition
       * is tailored for `_.partialRight`.
       *
       * @private
       * @param {Array|Object} args The provided arguments.
       * @param {Array} partials The arguments to append to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @returns {Array} Returns the new array of composed arguments.
       */
      function composeArgsRight(args, partials, holders) {
        var holdersIndex = -1,
            holdersLength = holders.length,
            argsIndex = -1,
            argsLength = nativeMax(args.length - holdersLength, 0),
            rightIndex = -1,
            rightLength = partials.length,
            result = Array(argsLength + rightLength);

        while (++argsIndex < argsLength) {
          result[argsIndex] = args[argsIndex];
        }
        var offset = argsIndex;
        while (++rightIndex < rightLength) {
          result[offset + rightIndex] = partials[rightIndex];
        }
        while (++holdersIndex < holdersLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
        return result;
      }

      /**
       * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
       *
       * @private
       * @param {Function} setter The function to set keys and values of the accumulator object.
       * @param {Function} [initializer] The function to initialize the accumulator object.
       * @returns {Function} Returns the new aggregator function.
       */
      function createAggregator(setter, initializer) {
        return function(collection, iteratee, thisArg) {
          var result = initializer ? initializer() : {};
          iteratee = getCallback(iteratee, thisArg, 3);

          if (isArray(collection)) {
            var index = -1,
                length = collection.length;

            while (++index < length) {
              var value = collection[index];
              setter(result, value, iteratee(value, index, collection), collection);
            }
          } else {
            baseEach(collection, function(value, key, collection) {
              setter(result, value, iteratee(value, key, collection), collection);
            });
          }
          return result;
        };
      }

      /**
       * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
       *
       * @private
       * @param {Function} assigner The function to assign values.
       * @returns {Function} Returns the new assigner function.
       */
      function createAssigner(assigner) {
        return restParam(function(object, sources) {
          var index = -1,
              length = object == null ? 0 : sources.length,
              customizer = length > 2 ? sources[length - 2] : undefined,
              guard = length > 2 ? sources[2] : undefined,
              thisArg = length > 1 ? sources[length - 1] : undefined;

          if (typeof customizer == 'function') {
            customizer = bindCallback(customizer, thisArg, 5);
            length -= 2;
          } else {
            customizer = typeof thisArg == 'function' ? thisArg : undefined;
            length -= (customizer ? 1 : 0);
          }
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, customizer);
            }
          }
          return object;
        });
      }

      /**
       * Creates a `baseEach` or `baseEachRight` function.
       *
       * @private
       * @param {Function} eachFunc The function to iterate over a collection.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee) {
          var length = collection ? getLength(collection) : 0;
          if (!isLength(length)) {
            return eachFunc(collection, iteratee);
          }
          var index = fromRight ? length : -1,
              iterable = toObject(collection);

          while ((fromRight ? index-- : ++index < length)) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }

      /**
       * Creates a base function for `_.forIn` or `_.forInRight`.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
          var iterable = toObject(object),
              props = keysFunc(object),
              length = props.length,
              index = fromRight ? length : -1;

          while ((fromRight ? index-- : ++index < length)) {
            var key = props[index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }

      /**
       * Creates a function that wraps `func` and invokes it with the `this`
       * binding of `thisArg`.
       *
       * @private
       * @param {Function} func The function to bind.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @returns {Function} Returns the new bound function.
       */
      function createBindWrapper(func, thisArg) {
        var Ctor = createCtorWrapper(func);

        function wrapper() {
          var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
          return fn.apply(thisArg, arguments);
        }
        return wrapper;
      }

      /**
       * Creates a `Set` cache object to optimize linear searches of large arrays.
       *
       * @private
       * @param {Array} [values] The values to cache.
       * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
       */
      function createCache(values) {
        return (nativeCreate && Set) ? new SetCache(values) : null;
      }

      /**
       * Creates a function that produces compound words out of the words in a
       * given string.
       *
       * @private
       * @param {Function} callback The function to combine each word.
       * @returns {Function} Returns the new compounder function.
       */
      function createCompounder(callback) {
        return function(string) {
          var index = -1,
              array = words(deburr(string)),
              length = array.length,
              result = '';

          while (++index < length) {
            result = callback(result, array[index], index);
          }
          return result;
        };
      }

      /**
       * Creates a function that produces an instance of `Ctor` regardless of
       * whether it was invoked as part of a `new` expression or by `call` or `apply`.
       *
       * @private
       * @param {Function} Ctor The constructor to wrap.
       * @returns {Function} Returns the new wrapped function.
       */
      function createCtorWrapper(Ctor) {
        return function() {
          // Use a `switch` statement to work with class constructors.
          // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
          // for more details.
          var args = arguments;
          switch (args.length) {
            case 0: return new Ctor;
            case 1: return new Ctor(args[0]);
            case 2: return new Ctor(args[0], args[1]);
            case 3: return new Ctor(args[0], args[1], args[2]);
            case 4: return new Ctor(args[0], args[1], args[2], args[3]);
            case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
            case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }
          var thisBinding = baseCreate(Ctor.prototype),
              result = Ctor.apply(thisBinding, args);

          // Mimic the constructor's `return` behavior.
          // See https://es5.github.io/#x13.2.2 for more details.
          return isObject(result) ? result : thisBinding;
        };
      }

      /**
       * Creates a `_.curry` or `_.curryRight` function.
       *
       * @private
       * @param {boolean} flag The curry bit flag.
       * @returns {Function} Returns the new curry function.
       */
      function createCurry(flag) {
        function curryFunc(func, arity, guard) {
          if (guard && isIterateeCall(func, arity, guard)) {
            arity = undefined;
          }
          var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
          result.placeholder = curryFunc.placeholder;
          return result;
        }
        return curryFunc;
      }

      /**
       * Creates a `_.defaults` or `_.defaultsDeep` function.
       *
       * @private
       * @param {Function} assigner The function to assign values.
       * @param {Function} customizer The function to customize assigned values.
       * @returns {Function} Returns the new defaults function.
       */
      function createDefaults(assigner, customizer) {
        return restParam(function(args) {
          var object = args[0];
          if (object == null) {
            return object;
          }
          args.push(customizer);
          return assigner.apply(undefined, args);
        });
      }

      /**
       * Creates a `_.max` or `_.min` function.
       *
       * @private
       * @param {Function} comparator The function used to compare values.
       * @param {*} exValue The initial extremum value.
       * @returns {Function} Returns the new extremum function.
       */
      function createExtremum(comparator, exValue) {
        return function(collection, iteratee, thisArg) {
          if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
            iteratee = undefined;
          }
          iteratee = getCallback(iteratee, thisArg, 3);
          if (iteratee.length == 1) {
            collection = isArray(collection) ? collection : toIterable(collection);
            var result = arrayExtremum(collection, iteratee, comparator, exValue);
            if (!(collection.length && result === exValue)) {
              return result;
            }
          }
          return baseExtremum(collection, iteratee, comparator, exValue);
        };
      }

      /**
       * Creates a `_.find` or `_.findLast` function.
       *
       * @private
       * @param {Function} eachFunc The function to iterate over a collection.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new find function.
       */
      function createFind(eachFunc, fromRight) {
        return function(collection, predicate, thisArg) {
          predicate = getCallback(predicate, thisArg, 3);
          if (isArray(collection)) {
            var index = baseFindIndex(collection, predicate, fromRight);
            return index > -1 ? collection[index] : undefined;
          }
          return baseFind(collection, predicate, eachFunc);
        };
      }

      /**
       * Creates a `_.findIndex` or `_.findLastIndex` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new find function.
       */
      function createFindIndex(fromRight) {
        return function(array, predicate, thisArg) {
          if (!(array && array.length)) {
            return -1;
          }
          predicate = getCallback(predicate, thisArg, 3);
          return baseFindIndex(array, predicate, fromRight);
        };
      }

      /**
       * Creates a `_.findKey` or `_.findLastKey` function.
       *
       * @private
       * @param {Function} objectFunc The function to iterate over an object.
       * @returns {Function} Returns the new find function.
       */
      function createFindKey(objectFunc) {
        return function(object, predicate, thisArg) {
          predicate = getCallback(predicate, thisArg, 3);
          return baseFind(object, predicate, objectFunc, true);
        };
      }

      /**
       * Creates a `_.flow` or `_.flowRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new flow function.
       */
      function createFlow(fromRight) {
        return function() {
          var wrapper,
              length = arguments.length,
              index = fromRight ? length : -1,
              leftIndex = 0,
              funcs = Array(length);

          while ((fromRight ? index-- : ++index < length)) {
            var func = funcs[leftIndex++] = arguments[index];
            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
              wrapper = new LodashWrapper([], true);
            }
          }
          index = wrapper ? -1 : length;
          while (++index < length) {
            func = funcs[index];

            var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined;

            if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
            }
          }
          return function() {
            var args = arguments,
                value = args[0];

            if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
              return wrapper.plant(value).value();
            }
            var index = 0,
                result = length ? funcs[index].apply(this, args) : value;

            while (++index < length) {
              result = funcs[index].call(this, result);
            }
            return result;
          };
        };
      }

      /**
       * Creates a function for `_.forEach` or `_.forEachRight`.
       *
       * @private
       * @param {Function} arrayFunc The function to iterate over an array.
       * @param {Function} eachFunc The function to iterate over a collection.
       * @returns {Function} Returns the new each function.
       */
      function createForEach(arrayFunc, eachFunc) {
        return function(collection, iteratee, thisArg) {
          return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
            ? arrayFunc(collection, iteratee)
            : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
        };
      }

      /**
       * Creates a function for `_.forIn` or `_.forInRight`.
       *
       * @private
       * @param {Function} objectFunc The function to iterate over an object.
       * @returns {Function} Returns the new each function.
       */
      function createForIn(objectFunc) {
        return function(object, iteratee, thisArg) {
          if (typeof iteratee != 'function' || thisArg !== undefined) {
            iteratee = bindCallback(iteratee, thisArg, 3);
          }
          return objectFunc(object, iteratee, keysIn);
        };
      }

      /**
       * Creates a function for `_.forOwn` or `_.forOwnRight`.
       *
       * @private
       * @param {Function} objectFunc The function to iterate over an object.
       * @returns {Function} Returns the new each function.
       */
      function createForOwn(objectFunc) {
        return function(object, iteratee, thisArg) {
          if (typeof iteratee != 'function' || thisArg !== undefined) {
            iteratee = bindCallback(iteratee, thisArg, 3);
          }
          return objectFunc(object, iteratee);
        };
      }

      /**
       * Creates a function for `_.mapKeys` or `_.mapValues`.
       *
       * @private
       * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
       * @returns {Function} Returns the new map function.
       */
      function createObjectMapper(isMapKeys) {
        return function(object, iteratee, thisArg) {
          var result = {};
          iteratee = getCallback(iteratee, thisArg, 3);

          baseForOwn(object, function(value, key, object) {
            var mapped = iteratee(value, key, object);
            key = isMapKeys ? mapped : key;
            value = isMapKeys ? value : mapped;
            result[key] = value;
          });
          return result;
        };
      }

      /**
       * Creates a function for `_.padLeft` or `_.padRight`.
       *
       * @private
       * @param {boolean} [fromRight] Specify padding from the right.
       * @returns {Function} Returns the new pad function.
       */
      function createPadDir(fromRight) {
        return function(string, length, chars) {
          string = baseToString(string);
          return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
        };
      }

      /**
       * Creates a `_.partial` or `_.partialRight` function.
       *
       * @private
       * @param {boolean} flag The partial bit flag.
       * @returns {Function} Returns the new partial function.
       */
      function createPartial(flag) {
        var partialFunc = restParam(function(func, partials) {
          var holders = replaceHolders(partials, partialFunc.placeholder);
          return createWrapper(func, flag, undefined, partials, holders);
        });
        return partialFunc;
      }

      /**
       * Creates a function for `_.reduce` or `_.reduceRight`.
       *
       * @private
       * @param {Function} arrayFunc The function to iterate over an array.
       * @param {Function} eachFunc The function to iterate over a collection.
       * @returns {Function} Returns the new each function.
       */
      function createReduce(arrayFunc, eachFunc) {
        return function(collection, iteratee, accumulator, thisArg) {
          var initFromArray = arguments.length < 3;
          return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
            ? arrayFunc(collection, iteratee, accumulator, initFromArray)
            : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
        };
      }

      /**
       * Creates a function that wraps `func` and invokes it with optional `this`
       * binding of, partial application, and currying.
       *
       * @private
       * @param {Function|string} func The function or method name to reference.
       * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
       * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
        var isAry = bitmask & ARY_FLAG,
            isBind = bitmask & BIND_FLAG,
            isBindKey = bitmask & BIND_KEY_FLAG,
            isCurry = bitmask & CURRY_FLAG,
            isCurryBound = bitmask & CURRY_BOUND_FLAG,
            isCurryRight = bitmask & CURRY_RIGHT_FLAG,
            Ctor = isBindKey ? undefined : createCtorWrapper(func);

        function wrapper() {
          // Avoid `arguments` object use disqualifying optimizations by
          // converting it to an array before providing it to other functions.
          var length = arguments.length,
              index = length,
              args = Array(length);

          while (index--) {
            args[index] = arguments[index];
          }
          if (partials) {
            args = composeArgs(args, partials, holders);
          }
          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight);
          }
          if (isCurry || isCurryRight) {
            var placeholder = wrapper.placeholder,
                argsHolders = replaceHolders(args, placeholder);

            length -= argsHolders.length;
            if (length < arity) {
              var newArgPos = argPos ? arrayCopy(argPos) : undefined,
                  newArity = nativeMax(arity - length, 0),
                  newsHolders = isCurry ? argsHolders : undefined,
                  newHoldersRight = isCurry ? undefined : argsHolders,
                  newPartials = isCurry ? args : undefined,
                  newPartialsRight = isCurry ? undefined : args;

              bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
              bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

              if (!isCurryBound) {
                bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
              }
              var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
                  result = createHybridWrapper.apply(undefined, newData);

              if (isLaziable(func)) {
                setData(result, newData);
              }
              result.placeholder = placeholder;
              return result;
            }
          }
          var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;

          if (argPos) {
            args = reorder(args, argPos);
          }
          if (isAry && ary < args.length) {
            args.length = ary;
          }
          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtorWrapper(func);
          }
          return fn.apply(thisBinding, args);
        }
        return wrapper;
      }

      /**
       * Creates the padding required for `string` based on the given `length`.
       * The `chars` string is truncated if the number of characters exceeds `length`.
       *
       * @private
       * @param {string} string The string to create padding for.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the pad for `string`.
       */
      function createPadding(string, length, chars) {
        var strLength = string.length;
        length = +length;

        if (strLength >= length || !nativeIsFinite(length)) {
          return '';
        }
        var padLength = length - strLength;
        chars = chars == null ? ' ' : (chars + '');
        return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
      }

      /**
       * Creates a function that wraps `func` and invokes it with the optional `this`
       * binding of `thisArg` and the `partials` prepended to those provided to
       * the wrapper.
       *
       * @private
       * @param {Function} func The function to partially apply arguments to.
       * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} partials The arguments to prepend to those provided to the new function.
       * @returns {Function} Returns the new bound function.
       */
      function createPartialWrapper(func, bitmask, thisArg, partials) {
        var isBind = bitmask & BIND_FLAG,
            Ctor = createCtorWrapper(func);

        function wrapper() {
          // Avoid `arguments` object use disqualifying optimizations by
          // converting it to an array before providing it `func`.
          var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array(leftLength + argsLength);

          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }
          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }
          var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, args);
        }
        return wrapper;
      }

      /**
       * Creates a `_.ceil`, `_.floor`, or `_.round` function.
       *
       * @private
       * @param {string} methodName The name of the `Math` method to use when rounding.
       * @returns {Function} Returns the new round function.
       */
      function createRound(methodName) {
        var func = Math[methodName];
        return function(number, precision) {
          precision = precision === undefined ? 0 : (+precision || 0);
          if (precision) {
            precision = pow(10, precision);
            return func(number * precision) / precision;
          }
          return func(number);
        };
      }

      /**
       * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
       *
       * @private
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {Function} Returns the new index function.
       */
      function createSortedIndex(retHighest) {
        return function(array, value, iteratee, thisArg) {
          var callback = getCallback(iteratee);
          return (iteratee == null && callback === baseCallback)
            ? binaryIndex(array, value, retHighest)
            : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
        };
      }

      /**
       * Creates a function that either curries or invokes `func` with optional
       * `this` binding and partially applied arguments.
       *
       * @private
       * @param {Function|string} func The function or method name to reference.
       * @param {number} bitmask The bitmask of flags.
       *  The bitmask may be composed of the following flags:
       *     1 - `_.bind`
       *     2 - `_.bindKey`
       *     4 - `_.curry` or `_.curryRight` of a bound function
       *     8 - `_.curry`
       *    16 - `_.curryRight`
       *    32 - `_.partial`
       *    64 - `_.partialRight`
       *   128 - `_.rearg`
       *   256 - `_.ary`
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to be partially applied.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
        var isBindKey = bitmask & BIND_KEY_FLAG;
        if (!isBindKey && typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var length = partials ? partials.length : 0;
        if (!length) {
          bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
          partials = holders = undefined;
        }
        length -= (holders ? holders.length : 0);
        if (bitmask & PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials,
              holdersRight = holders;

          partials = holders = undefined;
        }
        var data = isBindKey ? undefined : getData(func),
            newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

        if (data) {
          mergeData(newData, data);
          bitmask = newData[1];
          arity = newData[9];
        }
        newData[9] = arity == null
          ? (isBindKey ? 0 : func.length)
          : (nativeMax(arity - length, 0) || 0);

        if (bitmask == BIND_FLAG) {
          var result = createBindWrapper(newData[0], newData[2]);
        } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
          result = createPartialWrapper.apply(undefined, newData);
        } else {
          result = createHybridWrapper.apply(undefined, newData);
        }
        var setter = data ? baseSetData : setData;
        return setter(result, newData);
      }

      /**
       * A specialized version of `baseIsEqualDeep` for arrays with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Array} array The array to compare.
       * @param {Array} other The other array to compare.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Function} [customizer] The function to customize comparing arrays.
       * @param {boolean} [isLoose] Specify performing partial comparisons.
       * @param {Array} [stackA] Tracks traversed `value` objects.
       * @param {Array} [stackB] Tracks traversed `other` objects.
       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
       */
      function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
        var index = -1,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
          return false;
        }
        // Ignore non-index properties.
        while (++index < arrLength) {
          var arrValue = array[index],
              othValue = other[index],
              result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

          if (result !== undefined) {
            if (result) {
              continue;
            }
            return false;
          }
          // Recursively compare arrays (susceptible to call stack limits).
          if (isLoose) {
            if (!arraySome(other, function(othValue) {
                  return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
                })) {
              return false;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
            return false;
          }
        }
        return true;
      }

      /**
       * A specialized version of `baseIsEqualDeep` for comparing objects of
       * the same `toStringTag`.
       *
       * **Note:** This function only supports comparing values with tags of
       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {string} tag The `toStringTag` of the objects to compare.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalByTag(object, other, tag) {
        switch (tag) {
          case boolTag:
          case dateTag:
            // Coerce dates and booleans to numbers, dates to milliseconds and booleans
            // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
            return +object == +other;

          case errorTag:
            return object.name == other.name && object.message == other.message;

          case numberTag:
            // Treat `NaN` vs. `NaN` as equal.
            return (object != +object)
              ? other != +other
              : object == +other;

          case regexpTag:
          case stringTag:
            // Coerce regexes to strings and treat strings primitives and string
            // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
            return object == (other + '');
        }
        return false;
      }

      /**
       * A specialized version of `baseIsEqualDeep` for objects with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Function} [customizer] The function to customize comparing values.
       * @param {boolean} [isLoose] Specify performing partial comparisons.
       * @param {Array} [stackA] Tracks traversed `value` objects.
       * @param {Array} [stackB] Tracks traversed `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
        var objProps = keys(object),
            objLength = objProps.length,
            othProps = keys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isLoose) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }
        var skipCtor = isLoose;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key],
              othValue = other[key],
              result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

          // Recursively compare objects (susceptible to call stack limits).
          if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
            return false;
          }
          skipCtor || (skipCtor = key == 'constructor');
        }
        if (!skipCtor) {
          var objCtor = object.constructor,
              othCtor = other.constructor;

          // Non `Object` object instances with different constructors are not equal.
          if (objCtor != othCtor &&
              ('constructor' in object && 'constructor' in other) &&
              !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            return false;
          }
        }
        return true;
      }

      /**
       * Gets the appropriate "callback" function. If the `_.callback` method is
       * customized this function returns the custom method, otherwise it returns
       * the `baseCallback` function. If arguments are provided the chosen function
       * is invoked with them and its result is returned.
       *
       * @private
       * @returns {Function} Returns the chosen function or its result.
       */
      function getCallback(func, thisArg, argCount) {
        var result = lodash.callback || callback;
        result = result === callback ? baseCallback : result;
        return argCount ? result(func, thisArg, argCount) : result;
      }

      /**
       * Gets metadata for `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {*} Returns the metadata for `func`.
       */
      var getData = !metaMap ? noop : function(func) {
        return metaMap.get(func);
      };

      /**
       * Gets the name of `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {string} Returns the function name.
       */
      function getFuncName(func) {
        var result = func.name,
            array = realNames[result],
            length = array ? array.length : 0;

        while (length--) {
          var data = array[length],
              otherFunc = data.func;
          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }
        return result;
      }

      /**
       * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
       * customized this function returns the custom method, otherwise it returns
       * the `baseIndexOf` function. If arguments are provided the chosen function
       * is invoked with them and its result is returned.
       *
       * @private
       * @returns {Function|number} Returns the chosen function or its result.
       */
      function getIndexOf(collection, target, fromIndex) {
        var result = lodash.indexOf || indexOf;
        result = result === indexOf ? baseIndexOf : result;
        return collection ? result(collection, target, fromIndex) : result;
      }

      /**
       * Gets the "length" property value of `object`.
       *
       * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
       * that affects Safari on at least iOS 8.1-8.3 ARM64.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {*} Returns the "length" value.
       */
      var getLength = baseProperty('length');

      /**
       * Gets the propery names, values, and compare flags of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the match data of `object`.
       */
      function getMatchData(object) {
        var result = pairs(object),
            length = result.length;

        while (length--) {
          result[length][2] = isStrictComparable(result[length][1]);
        }
        return result;
      }

      /**
       * Gets the native function at `key` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the method to get.
       * @returns {*} Returns the function if it's native, else `undefined`.
       */
      function getNative(object, key) {
        var value = object == null ? undefined : object[key];
        return isNative(value) ? value : undefined;
      }

      /**
       * Gets the view, applying any `transforms` to the `start` and `end` positions.
       *
       * @private
       * @param {number} start The start of the view.
       * @param {number} end The end of the view.
       * @param {Array} transforms The transformations to apply to the view.
       * @returns {Object} Returns an object containing the `start` and `end`
       *  positions of the view.
       */
      function getView(start, end, transforms) {
        var index = -1,
            length = transforms.length;

        while (++index < length) {
          var data = transforms[index],
              size = data.size;

          switch (data.type) {
            case 'drop':      start += size; break;
            case 'dropRight': end -= size; break;
            case 'take':      end = nativeMin(end, start + size); break;
            case 'takeRight': start = nativeMax(start, end - size); break;
          }
        }
        return { 'start': start, 'end': end };
      }

      /**
       * Initializes an array clone.
       *
       * @private
       * @param {Array} array The array to clone.
       * @returns {Array} Returns the initialized clone.
       */
      function initCloneArray(array) {
        var length = array.length,
            result = new array.constructor(length);

        // Add array properties assigned by `RegExp#exec`.
        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
          result.index = array.index;
          result.input = array.input;
        }
        return result;
      }

      /**
       * Initializes an object clone.
       *
       * @private
       * @param {Object} object The object to clone.
       * @returns {Object} Returns the initialized clone.
       */
      function initCloneObject(object) {
        var Ctor = object.constructor;
        if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
          Ctor = Object;
        }
        return new Ctor;
      }

      /**
       * Initializes an object clone based on its `toStringTag`.
       *
       * **Note:** This function only supports cloning values with tags of
       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
       *
       * @private
       * @param {Object} object The object to clone.
       * @param {string} tag The `toStringTag` of the object to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the initialized clone.
       */
      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag:
            return bufferClone(object);

          case boolTag:
          case dateTag:
            return new Ctor(+object);

          case float32Tag: case float64Tag:
          case int8Tag: case int16Tag: case int32Tag:
          case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
            var buffer = object.buffer;
            return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

          case numberTag:
          case stringTag:
            return new Ctor(object);

          case regexpTag:
            var result = new Ctor(object.source, reFlags.exec(object));
            result.lastIndex = object.lastIndex;
        }
        return result;
      }

      /**
       * Invokes the method at `path` on `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {Array} args The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       */
      function invokePath(object, path, args) {
        if (object != null && !isKey(path, object)) {
          path = toPath(path);
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          path = last(path);
        }
        var func = object == null ? object : object[path];
        return func == null ? undefined : func.apply(object, args);
      }

      /**
       * Checks if `value` is array-like.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
       */
      function isArrayLike(value) {
        return value != null && isLength(getLength(value));
      }

      /**
       * Checks if `value` is a valid array-like index.
       *
       * @private
       * @param {*} value The value to check.
       * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
       * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
       */
      function isIndex(value, length) {
        value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return value > -1 && value % 1 == 0 && value < length;
      }

      /**
       * Checks if the provided arguments are from an iteratee call.
       *
       * @private
       * @param {*} value The potential iteratee value argument.
       * @param {*} index The potential iteratee index or key argument.
       * @param {*} object The potential iteratee object argument.
       * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
       */
      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }
        var type = typeof index;
        if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)) {
          var other = object[index];
          return value === value ? (value === other) : (other !== other);
        }
        return false;
      }

      /**
       * Checks if `value` is a property name and not a property path.
       *
       * @private
       * @param {*} value The value to check.
       * @param {Object} [object] The object to query keys on.
       * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
       */
      function isKey(value, object) {
        var type = typeof value;
        if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
          return true;
        }
        if (isArray(value)) {
          return false;
        }
        var result = !reIsDeepProp.test(value);
        return result || (object != null && value in toObject(object));
      }

      /**
       * Checks if `func` has a lazy counterpart.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
       */
      function isLaziable(func) {
        var funcName = getFuncName(func);
        if (!(funcName in LazyWrapper.prototype)) {
          return false;
        }
        var other = lodash[funcName];
        if (func === other) {
          return true;
        }
        var data = getData(other);
        return !!data && func === data[0];
      }

      /**
       * Checks if `value` is a valid array-like length.
       *
       * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
       */
      function isLength(value) {
        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }

      /**
       * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` if suitable for strict
       *  equality comparisons, else `false`.
       */
      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }

      /**
       * Merges the function metadata of `source` into `data`.
       *
       * Merging metadata reduces the number of wrappers required to invoke a function.
       * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
       * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
       * augment function arguments, making the order in which they are executed important,
       * preventing the merging of metadata. However, we make an exception for a safe
       * common case where curried functions have `_.ary` and or `_.rearg` applied.
       *
       * @private
       * @param {Array} data The destination metadata.
       * @param {Array} source The source metadata.
       * @returns {Array} Returns `data`.
       */
      function mergeData(data, source) {
        var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon = newBitmask < ARY_FLAG;

        var isCombo =
          (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
          (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
          (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

        // Exit early if metadata can't be merged.
        if (!(isCommon || isCombo)) {
          return data;
        }
        // Use source `thisArg` if available.
        if (srcBitmask & BIND_FLAG) {
          data[2] = source[2];
          // Set when currying a bound function.
          newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
        }
        // Compose partial arguments.
        var value = source[3];
        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
        }
        // Compose partial right arguments.
        value = source[5];
        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
        }
        // Use source `argPos` if available.
        value = source[7];
        if (value) {
          data[7] = arrayCopy(value);
        }
        // Use source `ary` if it's smaller.
        if (srcBitmask & ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }
        // Use source `arity` if one is not provided.
        if (data[9] == null) {
          data[9] = source[9];
        }
        // Use source `func` and merge bitmasks.
        data[0] = source[0];
        data[1] = newBitmask;

        return data;
      }

      /**
       * Used by `_.defaultsDeep` to customize its `_.merge` use.
       *
       * @private
       * @param {*} objectValue The destination object property value.
       * @param {*} sourceValue The source object property value.
       * @returns {*} Returns the value to assign to the destination object.
       */
      function mergeDefaults(objectValue, sourceValue) {
        return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
      }

      /**
       * A specialized version of `_.pick` which picks `object` properties specified
       * by `props`.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} props The property names to pick.
       * @returns {Object} Returns the new object.
       */
      function pickByArray(object, props) {
        object = toObject(object);

        var index = -1,
            length = props.length,
            result = {};

        while (++index < length) {
          var key = props[index];
          if (key in object) {
            result[key] = object[key];
          }
        }
        return result;
      }

      /**
       * A specialized version of `_.pick` which picks `object` properties `predicate`
       * returns truthy for.
       *
       * @private
       * @param {Object} object The source object.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Object} Returns the new object.
       */
      function pickByCallback(object, predicate) {
        var result = {};
        baseForIn(object, function(value, key, object) {
          if (predicate(value, key, object)) {
            result[key] = value;
          }
        });
        return result;
      }

      /**
       * Reorder `array` according to the specified indexes where the element at
       * the first index is assigned as the first element, the element at
       * the second index is assigned as the second element, and so on.
       *
       * @private
       * @param {Array} array The array to reorder.
       * @param {Array} indexes The arranged array indexes.
       * @returns {Array} Returns `array`.
       */
      function reorder(array, indexes) {
        var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = arrayCopy(array);

        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
        }
        return array;
      }

      /**
       * Sets metadata for `func`.
       *
       * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
       * period of time, it will trip its breaker and transition to an identity function
       * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
       * for more details.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */
      var setData = (function() {
        var count = 0,
            lastCalled = 0;

        return function(key, value) {
          var stamp = now(),
              remaining = HOT_SPAN - (stamp - lastCalled);

          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return key;
            }
          } else {
            count = 0;
          }
          return baseSetData(key, value);
        };
      }());

      /**
       * A fallback implementation of `Object.keys` which creates an array of the
       * own enumerable property names of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function shimKeys(object) {
        var props = keysIn(object),
            propsLength = props.length,
            length = propsLength && object.length;

        var allowIndexes = !!length && isLength(length) &&
          (isArray(object) || isArguments(object));

        var index = -1,
            result = [];

        while (++index < propsLength) {
          var key = props[index];
          if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * Converts `value` to an array-like object if it's not one.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {Array|Object} Returns the array-like object.
       */
      function toIterable(value) {
        if (value == null) {
          return [];
        }
        if (!isArrayLike(value)) {
          return values(value);
        }
        return isObject(value) ? value : Object(value);
      }

      /**
       * Converts `value` to an object if it's not one.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {Object} Returns the object.
       */
      function toObject(value) {
        return isObject(value) ? value : Object(value);
      }

      /**
       * Converts `value` to property path array if it's not one.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {Array} Returns the property path array.
       */
      function toPath(value) {
        if (isArray(value)) {
          return value;
        }
        var result = [];
        baseToString(value).replace(rePropName, function(match, number, quote, string) {
          result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
        });
        return result;
      }

      /**
       * Creates a clone of `wrapper`.
       *
       * @private
       * @param {Object} wrapper The wrapper to clone.
       * @returns {Object} Returns the cloned wrapper.
       */
      function wrapperClone(wrapper) {
        return wrapper instanceof LazyWrapper
          ? wrapper.clone()
          : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
      }

      /*------------------------------------------------------------------------*/

      /**
       * Creates an array of elements split into groups the length of `size`.
       * If `collection` can't be split evenly, the final chunk will be the remaining
       * elements.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to process.
       * @param {number} [size=1] The length of each chunk.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
       * @returns {Array} Returns the new array containing chunks.
       * @example
       *
       * _.chunk(['a', 'b', 'c', 'd'], 2);
       * // => [['a', 'b'], ['c', 'd']]
       *
       * _.chunk(['a', 'b', 'c', 'd'], 3);
       * // => [['a', 'b', 'c'], ['d']]
       */
      function chunk(array, size, guard) {
        if (guard ? isIterateeCall(array, size, guard) : size == null) {
          size = 1;
        } else {
          size = nativeMax(nativeFloor(size) || 1, 1);
        }
        var index = 0,
            length = array ? array.length : 0,
            resIndex = -1,
            result = Array(nativeCeil(length / size));

        while (index < length) {
          result[++resIndex] = baseSlice(array, index, (index += size));
        }
        return result;
      }

      /**
       * Creates an array with all falsey values removed. The values `false`, `null`,
       * `0`, `""`, `undefined`, and `NaN` are falsey.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to compact.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.compact([0, 1, false, 2, '', 3]);
       * // => [1, 2, 3]
       */
      function compact(array) {
        var index = -1,
            length = array ? array.length : 0,
            resIndex = -1,
            result = [];

        while (++index < length) {
          var value = array[index];
          if (value) {
            result[++resIndex] = value;
          }
        }
        return result;
      }

      /**
       * Creates an array of unique `array` values not included in the other
       * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The arrays of values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.difference([1, 2, 3], [4, 2]);
       * // => [1, 3]
       */
      var difference = restParam(function(array, values) {
        return (isObjectLike(array) && isArrayLike(array))
          ? baseDifference(array, baseFlatten(values, false, true))
          : [];
      });

      /**
       * Creates a slice of `array` with `n` elements dropped from the beginning.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.drop([1, 2, 3]);
       * // => [2, 3]
       *
       * _.drop([1, 2, 3], 2);
       * // => [3]
       *
       * _.drop([1, 2, 3], 5);
       * // => []
       *
       * _.drop([1, 2, 3], 0);
       * // => [1, 2, 3]
       */
      function drop(array, n, guard) {
        var length = array ? array.length : 0;
        if (!length) {
          return [];
        }
        if (guard ? isIterateeCall(array, n, guard) : n == null) {
          n = 1;
        }
        return baseSlice(array, n < 0 ? 0 : n);
      }

      /**
       * Creates a slice of `array` with `n` elements dropped from the end.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.dropRight([1, 2, 3]);
       * // => [1, 2]
       *
       * _.dropRight([1, 2, 3], 2);
       * // => [1]
       *
       * _.dropRight([1, 2, 3], 5);
       * // => []
       *
       * _.dropRight([1, 2, 3], 0);
       * // => [1, 2, 3]
       */
      function dropRight(array, n, guard) {
        var length = array ? array.length : 0;
        if (!length) {
          return [];
        }
        if (guard ? isIterateeCall(array, n, guard) : n == null) {
          n = 1;
        }
        n = length - (+n || 0);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      /**
       * Creates a slice of `array` excluding elements dropped from the end.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * bound to `thisArg` and invoked with three arguments: (value, index, array).
       *
       * If a property name is provided for `predicate` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `predicate` the created `_.matches` style
       * callback returns `true` for elements that match the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function|Object|string} [predicate=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `predicate`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.dropRightWhile([1, 2, 3], function(n) {
       *   return n > 1;
       * });
       * // => [1]
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * // using the `_.matches` callback shorthand
       * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
       * // => ['barney', 'fred']
       *
       * // using the `_.matchesProperty` callback shorthand
       * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
       * // => ['barney']
       *
       * // using the `_.property` callback shorthand
       * _.pluck(_.dropRightWhile(users, 'active'), 'user');
       * // => ['barney', 'fred', 'pebbles']
       */
      function dropRightWhile(array, predicate, thisArg) {
        return (array && array.length)
          ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
          : [];
      }

      /**
       * Creates a slice of `array` excluding elements dropped from the beginning.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * bound to `thisArg` and invoked with three arguments: (value, index, array).
       *
       * If a property name is provided for `predicate` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `predicate` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function|Object|string} [predicate=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `predicate`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.dropWhile([1, 2, 3], function(n) {
       *   return n < 3;
       * });
       * // => [3]
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * // using the `_.matches` callback shorthand
       * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
       * // => ['fred', 'pebbles']
       *
       * // using the `_.matchesProperty` callback shorthand
       * _.pluck(_.dropWhile(users, 'active', false), 'user');
       * // => ['pebbles']
       *
       * // using the `_.property` callback shorthand
       * _.pluck(_.dropWhile(users, 'active'), 'user');
       * // => ['barney', 'fred', 'pebbles']
       */
      function dropWhile(array, predicate, thisArg) {
        return (array && array.length)
          ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
          : [];
      }

      /**
       * Fills elements of `array` with `value` from `start` up to, but not
       * including, `end`.
       *
       * **Note:** This method mutates `array`.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.fill(array, 'a');
       * console.log(array);
       * // => ['a', 'a', 'a']
       *
       * _.fill(Array(3), 2);
       * // => [2, 2, 2]
       *
       * _.fill([4, 6, 8], '*', 1, 2);
       * // => [4, '*', 8]
       */
      function fill(array, value, start, end) {
        var length = array ? array.length : 0;
        if (!length) {
          return [];
        }
        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }
        return baseFill(array, value, start, end);
      }

      /**
       * This method is like `_.find` except that it returns the index of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * If a property name is provided for `predicate` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `predicate` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to search.
       * @param {Function|Object|string} [predicate=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `predicate`.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.findIndex(users, function(chr) {
       *   return chr.user == 'barney';
       * });
       * // => 0
       *
       * // using the `_.matches` callback shorthand
       * _.findIndex(users, { 'user': 'fred', 'active': false });
       * // => 1
       *
       * // using the `_.matchesProperty` callback shorthand
       * _.findIndex(users, 'active', false);
       * // => 0
       *
       * // using the `_.property` callback shorthand
       * _.findIndex(users, 'active');
       * // => 2
       */
      var findIndex = createFindIndex();

      /**
       * This method is like `_.findIndex` except that it iterates over elements
       * of `collection` from right to left.
       *
       * If a property name is provided for `predicate` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `predicate` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to search.
       * @param {Function|Object|string} [predicate=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `predicate`.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.findLastIndex(users, function(chr) {
       *   return chr.user == 'pebbles';
       * });
       * // => 2
       *
       * // using the `_.matches` callback shorthand
       * _.findLastIndex(users, { 'user': 'barney', 'active': true });
       * // => 0
       *
       * // using the `_.matchesProperty` callback shorthand
       * _.findLastIndex(users, 'active', false);
       * // => 2
       *
       * // using the `_.property` callback shorthand
       * _.findLastIndex(users, 'active');
       * // => 0
       */
      var findLastIndex = createFindIndex(true);

      /**
       * Gets the first element of `array`.
       *
       * @static
       * @memberOf _
       * @alias head
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the first element of `array`.
       * @example
       *
       * _.first([1, 2, 3]);
       * // => 1
       *
       * _.first([]);
       * // => undefined
       */
      function first(array) {
        return array ? array[0] : undefined;
      }

      /**
       * Flattens a nested array. If `isDeep` is `true` the array is recursively
       * flattened, otherwise it is only flattened a single level.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to flatten.
       * @param {boolean} [isDeep] Specify a deep flatten.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flatten([1, [2, 3, [4]]]);
       * // => [1, 2, 3, [4]]
       *
       * // using `isDeep`
       * _.flatten([1, [2, 3, [4]]], true);
       * // => [1, 2, 3, 4]
       */
      function flatten(array, isDeep, guard) {
        var length = array ? array.length : 0;
        if (guard && isIterateeCall(array, isDeep, guard)) {
          isDeep = false;
        }
        return length ? baseFlatten(array, isDeep) : [];
      }

      /**
       * Recursively flattens a nested array.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to recursively flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flattenDeep([1, [2, 3, [4]]]);
       * // => [1, 2, 3, 4]
       */
      function flattenDeep(array) {
        var length = array ? array.length : 0;
        return length ? baseFlatten(array, true) : [];
      }

      /**
       * Gets the index at which the first occurrence of `value` is found in `array`
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
       * for equality comparisons. If `fromIndex` is negative, it is used as the offset
       * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
       * performs a faster binary search.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to search.
       * @param {*} value The value to search for.
       * @param {boolean|number} [fromIndex=0] The index to search from or `true`
       *  to perform a binary search on a sorted array.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.indexOf([1, 2, 1, 2], 2);
       * // => 1
       *
       * // using `fromIndex`
       * _.indexOf([1, 2, 1, 2], 2, 2);
       * // => 3
       *
       * // performing a binary search
       * _.indexOf([1, 1, 2, 2], 2, true);
       * // => 2
       */
      function indexOf(array, value, fromIndex) {
        var length = array ? array.length : 0;
        if (!length) {
          return -1;
        }
        if (typeof fromIndex == 'number') {
          fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
        } else if (fromIndex) {
          var index = binaryIndex(array, value);
          if (index < length &&
              (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
            return index;
          }
          return -1;
        }
        return baseIndexOf(array, value, fromIndex || 0);
      }

      /**
       * Gets all but the last element of `array`.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.initial([1, 2, 3]);
       * // => [1, 2]
       */
      function initial(array) {
        return dropRight(array, 1);
      }

      /**
       * Creates an array of unique values that are included in all of the provided
       * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of shared values.
       * @example
       * _.intersection([1, 2], [4, 2], [2, 1]);
       * // => [2]
       */
      var intersection = restParam(function(arrays) {
        var othLength = arrays.length,
            othIndex = othLength,
            caches = Array(length),
            indexOf = getIndexOf(),
            isCommon = indexOf == baseIndexOf,
            result = [];

        while (othIndex--) {
          var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
          caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
        }
        var array = arrays[0],
            index = -1,
            length = array ? array.length : 0,
            seen = caches[0];

        outer:
        while (++index < length) {
          value = array[index];
          if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
            var othIndex = othLength;
            while (--othIndex) {
              var cache = caches[othIndex];
              if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
                continue outer;
              }
            }
            if (seen) {
              seen.push(value);
            }
            result.push(value);
          }
        }
        return result;
      });

      /**
       * Gets the last element of `array`.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the last element of `array`.
       * @example
       *
       * _.last([1, 2, 3]);
       * // => 3
       */
      function last(array) {
        var length = array ? array.length : 0;
        return length ? array[length - 1] : undefined;
      }

      /**
       * This method is like `_.indexOf` except that it iterates over elements of
       * `array` from right to left.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to search.
       * @param {*} value The value to search for.
       * @param {boolean|number} [fromIndex=array.length-1] The index to search from
       *  or `true` to perform a binary search on a sorted array.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.lastIndexOf([1, 2, 1, 2], 2);
       * // => 3
       *
       * // using `fromIndex`
       * _.lastIndexOf([1, 2, 1, 2], 2, 2);
       * // => 1
       *
       * // performing a binary search
       * _.lastIndexOf([1, 1, 2, 2], 2, true);
       * // => 3
       */
      function lastIndexOf(array, value, fromIndex) {
        var length = array ? array.length : 0;
        if (!length) {
          return -1;
        }
        var index = length;
        if (typeof fromIndex == 'number') {
          index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
        } else if (fromIndex) {
          index = binaryIndex(array, value, true) - 1;
          var other = array[index];
          if (value === value ? (value === other) : (other !== other)) {
            return index;
          }
          return -1;
        }
        if (value !== value) {
          return indexOfNaN(array, index, true);
        }
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }

      /**
       * Removes all provided values from `array` using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.without`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...*} [values] The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3, 1, 2, 3];
       *
       * _.pull(array, 2, 3);
       * console.log(array);
       * // => [1, 1]
       */
      function pull() {
        var args = arguments,
            array = args[0];

        if (!(array && array.length)) {
          return array;
        }
        var index = 0,
            indexOf = getIndexOf(),
            length = args.length;

        while (++index < length) {
          var fromIndex = 0,
              value = args[index];

          while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
            splice.call(array, fromIndex, 1);
          }
        }
        return array;
      }

      /**
       * Removes elements from `array` corresponding to the given indexes and returns
       * an array of the removed elements. Indexes may be specified as an array of
       * indexes or as individual arguments.
       *
       * **Note:** Unlike `_.at`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...(number|number[])} [indexes] The indexes of elements to remove,
       *  specified as individual indexes or arrays of indexes.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = [5, 10, 15, 20];
       * var evens = _.pullAt(array, 1, 3);
       *
       * console.log(array);
       * // => [5, 15]
       *
       * console.log(evens);
       * // => [10, 20]
       */
      var pullAt = restParam(function(array, indexes) {
        indexes = baseFlatten(indexes);

        var result = baseAt(array, indexes);
        basePullAt(array, indexes.sort(baseCompareAscending));
        return result;
      });

      /**
       * Removes all elements from `array` that `predicate` returns truthy for
       * and returns an array of the removed elements. The predicate is bound to
       * `thisArg` and invoked with three arguments: (value, index, array).
       *
       * If a property name is provided for `predicate` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `predicate` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * **Note:** Unlike `_.filter`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Function|Object|string} [predicate=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `predicate`.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = [1, 2, 3, 4];
       * var evens = _.remove(array, function(n) {
       *   return n % 2 == 0;
       * });
       *
       * console.log(array);
       * // => [1, 3]
       *
       * console.log(evens);
       * // => [2, 4]
       */
      function remove(array, predicate, thisArg) {
        var result = [];
        if (!(array && array.length)) {
          return result;
        }
        var index = -1,
            indexes = [],
            length = array.length;

        predicate = getCallback(predicate, thisArg, 3);
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result.push(value);
            indexes.push(index);
          }
        }
        basePullAt(array, indexes);
        return result;
      }

      /**
       * Gets all but the first element of `array`.
       *
       * @static
       * @memberOf _
       * @alias tail
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.rest([1, 2, 3]);
       * // => [2, 3]
       */
      function rest(array) {
        return drop(array, 1);
      }

      /**
       * Creates a slice of `array` from `start` up to, but not including, `end`.
       *
       * **Note:** This method is used instead of `Array#slice` to support node
       * lists in IE < 9 and to ensure dense arrays are returned.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */
      function slice(array, start, end) {
        var length = array ? array.length : 0;
        if (!length) {
          return [];
        }
        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        }
        return baseSlice(array, start, end);
      }

      /**
       * Uses a binary search to determine the lowest index at which `value` should
       * be inserted into `array` in order to maintain its sort order. If an iteratee
       * function is provided it is invoked for `value` and each element of `array`
       * to compute their sort ranking. The iteratee is bound to `thisArg` and
       * invoked with one argument; (value).
       *
       * If a property name is provided for `iteratee` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `iteratee` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function|Object|string} [iteratee=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedIndex([30, 50], 40);
       * // => 1
       *
       * _.sortedIndex([4, 4, 5, 5], 5);
       * // => 2
       *
       * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
       *
       * // using an iteratee function
       * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
       *   return this.data[word];
       * }, dict);
       * // => 1
       *
       * // using the `_.property` callback shorthand
       * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
       * // => 1
       */
      var sortedIndex = createSortedIndex();

      /**
       * This method is like `_.sortedIndex` except that it returns the highest
       * index at which `value` should be inserted into `array` in order to
       * maintain its sort order.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function|Object|string} [iteratee=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedLastIndex([4, 4, 5, 5], 5);
       * // => 4
       */
      var sortedLastIndex = createSortedIndex(true);

      /**
       * Creates a slice of `array` with `n` elements taken from the beginning.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.take([1, 2, 3]);
       * // => [1]
       *
       * _.take([1, 2, 3], 2);
       * // => [1, 2]
       *
       * _.take([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.take([1, 2, 3], 0);
       * // => []
       */
      function take(array, n, guard) {
        var length = array ? array.length : 0;
        if (!length) {
          return [];
        }
        if (guard ? isIterateeCall(array, n, guard) : n == null) {
          n = 1;
        }
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      /**
       * Creates a slice of `array` with `n` elements taken from the end.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.takeRight([1, 2, 3]);
       * // => [3]
       *
       * _.takeRight([1, 2, 3], 2);
       * // => [2, 3]
       *
       * _.takeRight([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.takeRight([1, 2, 3], 0);
       * // => []
       */
      function takeRight(array, n, guard) {
        var length = array ? array.length : 0;
        if (!length) {
          return [];
        }
        if (guard ? isIterateeCall(array, n, guard) : n == null) {
          n = 1;
        }
        n = length - (+n || 0);
        return baseSlice(array, n < 0 ? 0 : n);
      }

      /**
       * Creates a slice of `array` with elements taken from the end. Elements are
       * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
       * and invoked with three arguments: (value, index, array).
       *
       * If a property name is provided for `predicate` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `predicate` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function|Object|string} [predicate=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `predicate`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.takeRightWhile([1, 2, 3], function(n) {
       *   return n > 1;
       * });
       * // => [2, 3]
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * // using the `_.matches` callback shorthand
       * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
       * // => ['pebbles']
       *
       * // using the `_.matchesProperty` callback shorthand
       * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
       * // => ['fred', 'pebbles']
       *
       * // using the `_.property` callback shorthand
       * _.pluck(_.takeRightWhile(users, 'active'), 'user');
       * // => []
       */
      function takeRightWhile(array, predicate, thisArg) {
        return (array && array.length)
          ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
          : [];
      }

      /**
       * Creates a slice of `array` with elements taken from the beginning. Elements
       * are taken until `predicate` returns falsey. The predicate is bound to
       * `thisArg` and invoked with three arguments: (value, index, array).
       *
       * If a property name is provided for `predicate` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `predicate` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function|Object|string} [predicate=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `predicate`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.takeWhile([1, 2, 3], function(n) {
       *   return n < 3;
       * });
       * // => [1, 2]
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false},
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * // using the `_.matches` callback shorthand
       * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
       * // => ['barney']
       *
       * // using the `_.matchesProperty` callback shorthand
       * _.pluck(_.takeWhile(users, 'active', false), 'user');
       * // => ['barney', 'fred']
       *
       * // using the `_.property` callback shorthand
       * _.pluck(_.takeWhile(users, 'active'), 'user');
       * // => []
       */
      function takeWhile(array, predicate, thisArg) {
        return (array && array.length)
          ? baseWhile(array, getCallback(predicate, thisArg, 3))
          : [];
      }

      /**
       * Creates an array of unique values, in order, from all of the provided arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.union([1, 2], [4, 2], [2, 1]);
       * // => [1, 2, 4]
       */
      var union = restParam(function(arrays) {
        return baseUniq(baseFlatten(arrays, false, true));
      });

      /**
       * Creates a duplicate-free version of an array, using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
       * for equality comparisons, in which only the first occurence of each element
       * is kept. Providing `true` for `isSorted` performs a faster search algorithm
       * for sorted arrays. If an iteratee function is provided it is invoked for
       * each element in the array to generate the criterion by which uniqueness
       * is computed. The `iteratee` is bound to `thisArg` and invoked with three
       * arguments: (value, index, array).
       *
       * If a property name is provided for `iteratee` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `iteratee` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @alias unique
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {boolean} [isSorted] Specify the array is sorted.
       * @param {Function|Object|string} [iteratee] The function invoked per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {Array} Returns the new duplicate-value-free array.
       * @example
       *
       * _.uniq([2, 1, 2]);
       * // => [2, 1]
       *
       * // using `isSorted`
       * _.uniq([1, 1, 2], true);
       * // => [1, 2]
       *
       * // using an iteratee function
       * _.uniq([1, 2.5, 1.5, 2], function(n) {
       *   return this.floor(n);
       * }, Math);
       * // => [1, 2.5]
       *
       * // using the `_.property` callback shorthand
       * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */
      function uniq(array, isSorted, iteratee, thisArg) {
        var length = array ? array.length : 0;
        if (!length) {
          return [];
        }
        if (isSorted != null && typeof isSorted != 'boolean') {
          thisArg = iteratee;
          iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
          isSorted = false;
        }
        var callback = getCallback();
        if (!(iteratee == null && callback === baseCallback)) {
          iteratee = callback(iteratee, thisArg, 3);
        }
        return (isSorted && getIndexOf() == baseIndexOf)
          ? sortedUniq(array, iteratee)
          : baseUniq(array, iteratee);
      }

      /**
       * This method is like `_.zip` except that it accepts an array of grouped
       * elements and creates an array regrouping the elements to their pre-zip
       * configuration.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
       * // => [['fred', 30, true], ['barney', 40, false]]
       *
       * _.unzip(zipped);
       * // => [['fred', 'barney'], [30, 40], [true, false]]
       */
      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }
        var index = -1,
            length = 0;

        array = arrayFilter(array, function(group) {
          if (isArrayLike(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        var result = Array(length);
        while (++index < length) {
          result[index] = arrayMap(array, baseProperty(index));
        }
        return result;
      }

      /**
       * This method is like `_.unzip` except that it accepts an iteratee to specify
       * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
       * and invoked with four arguments: (accumulator, value, index, group).
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @param {Function} [iteratee] The function to combine regrouped values.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
       * // => [[1, 10, 100], [2, 20, 200]]
       *
       * _.unzipWith(zipped, _.add);
       * // => [3, 30, 300]
       */
      function unzipWith(array, iteratee, thisArg) {
        var length = array ? array.length : 0;
        if (!length) {
          return [];
        }
        var result = unzip(array);
        if (iteratee == null) {
          return result;
        }
        iteratee = bindCallback(iteratee, thisArg, 4);
        return arrayMap(result, function(group) {
          return arrayReduce(group, iteratee, undefined, true);
        });
      }

      /**
       * Creates an array excluding all provided values using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {Array} array The array to filter.
       * @param {...*} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.without([1, 2, 1, 3], 1, 2);
       * // => [3]
       */
      var without = restParam(function(array, values) {
        return isArrayLike(array)
          ? baseDifference(array, values)
          : [];
      });

      /**
       * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
       * of the provided arrays.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of values.
       * @example
       *
       * _.xor([1, 2], [4, 2]);
       * // => [1, 4]
       */
      function xor() {
        var index = -1,
            length = arguments.length;

        while (++index < length) {
          var array = arguments[index];
          if (isArrayLike(array)) {
            var result = result
              ? arrayPush(baseDifference(result, array), baseDifference(array, result))
              : array;
          }
        }
        return result ? baseUniq(result) : [];
      }

      /**
       * Creates an array of grouped elements, the first of which contains the first
       * elements of the given arrays, the second of which contains the second elements
       * of the given arrays, and so on.
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zip(['fred', 'barney'], [30, 40], [true, false]);
       * // => [['fred', 30, true], ['barney', 40, false]]
       */
      var zip = restParam(unzip);

      /**
       * The inverse of `_.pairs`; this method returns an object composed from arrays
       * of property names and values. Provide either a single two dimensional array,
       * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
       * and one of corresponding values.
       *
       * @static
       * @memberOf _
       * @alias object
       * @category Array
       * @param {Array} props The property names.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObject([['fred', 30], ['barney', 40]]);
       * // => { 'fred': 30, 'barney': 40 }
       *
       * _.zipObject(['fred', 'barney'], [30, 40]);
       * // => { 'fred': 30, 'barney': 40 }
       */
      function zipObject(props, values) {
        var index = -1,
            length = props ? props.length : 0,
            result = {};

        if (length && !values && !isArray(props[0])) {
          values = [];
        }
        while (++index < length) {
          var key = props[index];
          if (values) {
            result[key] = values[index];
          } else if (key) {
            result[key[0]] = key[1];
          }
        }
        return result;
      }

      /**
       * This method is like `_.zip` except that it accepts an iteratee to specify
       * how grouped values should be combined. The `iteratee` is bound to `thisArg`
       * and invoked with four arguments: (accumulator, value, index, group).
       *
       * @static
       * @memberOf _
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @param {Function} [iteratee] The function to combine grouped values.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
       * // => [111, 222]
       */
      var zipWith = restParam(function(arrays) {
        var length = arrays.length,
            iteratee = length > 2 ? arrays[length - 2] : undefined,
            thisArg = length > 1 ? arrays[length - 1] : undefined;

        if (length > 2 && typeof iteratee == 'function') {
          length -= 2;
        } else {
          iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
          thisArg = undefined;
        }
        arrays.length = length;
        return unzipWith(arrays, iteratee, thisArg);
      });

      /*------------------------------------------------------------------------*/

      /**
       * Creates a `lodash` object that wraps `value` with explicit method
       * chaining enabled.
       *
       * @static
       * @memberOf _
       * @category Chain
       * @param {*} value The value to wrap.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36 },
       *   { 'user': 'fred',    'age': 40 },
       *   { 'user': 'pebbles', 'age': 1 }
       * ];
       *
       * var youngest = _.chain(users)
       *   .sortBy('age')
       *   .map(function(chr) {
       *     return chr.user + ' is ' + chr.age;
       *   })
       *   .first()
       *   .value();
       * // => 'pebbles is 1'
       */
      function chain(value) {
        var result = lodash(value);
        result.__chain__ = true;
        return result;
      }

      /**
       * This method invokes `interceptor` and returns `value`. The interceptor is
       * bound to `thisArg` and invoked with one argument; (value). The purpose of
       * this method is to "tap into" a method chain in order to perform operations
       * on intermediate results within the chain.
       *
       * @static
       * @memberOf _
       * @category Chain
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @param {*} [thisArg] The `this` binding of `interceptor`.
       * @returns {*} Returns `value`.
       * @example
       *
       * _([1, 2, 3])
       *  .tap(function(array) {
       *    array.pop();
       *  })
       *  .reverse()
       *  .value();
       * // => [2, 1]
       */
      function tap(value, interceptor, thisArg) {
        interceptor.call(thisArg, value);
        return value;
      }

      /**
       * This method is like `_.tap` except that it returns the result of `interceptor`.
       *
       * @static
       * @memberOf _
       * @category Chain
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @param {*} [thisArg] The `this` binding of `interceptor`.
       * @returns {*} Returns the result of `interceptor`.
       * @example
       *
       * _('  abc  ')
       *  .chain()
       *  .trim()
       *  .thru(function(value) {
       *    return [value];
       *  })
       *  .value();
       * // => ['abc']
       */
      function thru(value, interceptor, thisArg) {
        return interceptor.call(thisArg, value);
      }

      /**
       * Enables explicit method chaining on the wrapper object.
       *
       * @name chain
       * @memberOf _
       * @category Chain
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 }
       * ];
       *
       * // without explicit chaining
       * _(users).first();
       * // => { 'user': 'barney', 'age': 36 }
       *
       * // with explicit chaining
       * _(users).chain()
       *   .first()
       *   .pick('user')
       *   .value();
       * // => { 'user': 'barney' }
       */
      function wrapperChain() {
        return chain(this);
      }

      /**
       * Executes the chained sequence and returns the wrapped result.
       *
       * @name commit
       * @memberOf _
       * @category Chain
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2];
       * var wrapped = _(array).push(3);
       *
       * console.log(array);
       * // => [1, 2]
       *
       * wrapped = wrapped.commit();
       * console.log(array);
       * // => [1, 2, 3]
       *
       * wrapped.last();
       * // => 3
       *
       * console.log(array);
       * // => [1, 2, 3]
       */
      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }

      /**
       * Creates a new array joining a wrapped array with any additional arrays
       * and/or values.
       *
       * @name concat
       * @memberOf _
       * @category Chain
       * @param {...*} [values] The values to concatenate.
       * @returns {Array} Returns the new concatenated array.
       * @example
       *
       * var array = [1];
       * var wrapped = _(array).concat(2, [3], [[4]]);
       *
       * console.log(wrapped.value());
       * // => [1, 2, 3, [4]]
       *
       * console.log(array);
       * // => [1]
       */
      var wrapperConcat = restParam(function(values) {
        values = baseFlatten(values);
        return this.thru(function(array) {
          return arrayConcat(isArray(array) ? array : [toObject(array)], values);
        });
      });

      /**
       * Creates a clone of the chained sequence planting `value` as the wrapped value.
       *
       * @name plant
       * @memberOf _
       * @category Chain
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2];
       * var wrapped = _(array).map(function(value) {
       *   return Math.pow(value, 2);
       * });
       *
       * var other = [3, 4];
       * var otherWrapped = wrapped.plant(other);
       *
       * otherWrapped.value();
       * // => [9, 16]
       *
       * wrapped.value();
       * // => [1, 4]
       */
      function wrapperPlant(value) {
        var result,
            parent = this;

        while (parent instanceof baseLodash) {
          var clone = wrapperClone(parent);
          if (result) {
            previous.__wrapped__ = clone;
          } else {
            result = clone;
          }
          var previous = clone;
          parent = parent.__wrapped__;
        }
        previous.__wrapped__ = value;
        return result;
      }

      /**
       * Reverses the wrapped array so the first element becomes the last, the
       * second element becomes the second to last, and so on.
       *
       * **Note:** This method mutates the wrapped array.
       *
       * @name reverse
       * @memberOf _
       * @category Chain
       * @returns {Object} Returns the new reversed `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _(array).reverse().value()
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */
      function wrapperReverse() {
        var value = this.__wrapped__;

        var interceptor = function(value) {
          return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
        };
        if (value instanceof LazyWrapper) {
          var wrapped = value;
          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }
          wrapped = wrapped.reverse();
          wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(wrapped, this.__chain__);
        }
        return this.thru(interceptor);
      }

      /**
       * Produces the result of coercing the unwrapped value to a string.
       *
       * @name toString
       * @memberOf _
       * @category Chain
       * @returns {string} Returns the coerced string value.
       * @example
       *
       * _([1, 2, 3]).toString();
       * // => '1,2,3'
       */
      function wrapperToString() {
        return (this.value() + '');
      }

      /**
       * Executes the chained sequence to extract the unwrapped value.
       *
       * @name value
       * @memberOf _
       * @alias run, toJSON, valueOf
       * @category Chain
       * @returns {*} Returns the resolved unwrapped value.
       * @example
       *
       * _([1, 2, 3]).value();
       * // => [1, 2, 3]
       */
      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Creates an array of elements corresponding to the given keys, or indexes,
       * of `collection`. Keys may be specified as individual arguments or as arrays
       * of keys.
       *
       * @static
       * @memberOf _
       * @category Collection
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {...(number|number[]|string|string[])} [props] The property names
       *  or indexes of elements to pick, specified individually or in arrays.
       * @returns {Array} Returns the new array of picked elements.
       * @example
       *
       * _.at(['a', 'b', 'c'], [0, 2]);
       * // => ['a', 'c']
       *
       * _.at(['barney', 'fred', 'pebbles'], 0, 2);
       * // => ['barney', 'pebbles']
       */
      var at = restParam(function(collection, props) {
        return baseAt(collection, baseFlatten(props));
      });

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` through `iteratee`. The corresponding value
       * of each key is the number of times the key was returned by `iteratee`.
       * The `iteratee` is bound to `thisArg` and invoked with three arguments:
       * (value, index|key, collection).
       *
       * If a property name is provided for `iteratee` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `iteratee` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @category Collection
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function|Object|string} [iteratee=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.countBy([4.3, 6.1, 6.4], function(n) {
       *   return Math.floor(n);
       * });
       * // => { '4': 1, '6': 2 }
       *
       * _.countBy([4.3, 6.1, 6.4], function(n) {
       *   return this.floor(n);
       * }, Math);
       * // => { '4': 1, '6': 2 }
       *
       * _.countBy(['one', 'two', 'three'], 'length');
       * // => { '3': 2, '5': 1 }
       */
      var countBy = createAggregator(function(result, value, key) {
        hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
      });

      /**
       * Checks if `predicate` returns truthy for **all** elements of `collection`.
       * The predicate is bound to `thisArg` and invoked with three arguments:
       * (value, index|key, collection).
       *
       * If a property name is provided for `predicate` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `predicate` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @alias all
       * @category Collection
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function|Object|string} [predicate=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `predicate`.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`.
       * @example
       *
       * _.every([true, 1, null, 'yes'], Boolean);
       * // => false
       *
       * var users = [
       *   { 'user': 'barney', 'active': false },
       *   { 'user': 'fred',   'active': false }
       * ];
       *
       * // using the `_.matches` callback shorthand
       * _.every(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // using the `_.matchesProperty` callback shorthand
       * _.every(users, 'active', false);
       * // => true
       *
       * // using the `_.property` callback shorthand
       * _.every(users, 'active');
       * // => false
       */
      function every(collection, predicate, thisArg) {
        var func = isArray(collection) ? arrayEvery : baseEvery;
        if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
          predicate = undefined;
        }
        if (typeof predicate != 'function' || thisArg !== undefined) {
          predicate = getCallback(predicate, thisArg, 3);
        }
        return func(collection, predicate);
      }

      /**
       * Iterates over elements of `collection`, returning an array of all elements
       * `predicate` returns truthy for. The predicate is bound to `thisArg` and
       * invoked with three arguments: (value, index|key, collection).
       *
       * If a property name is provided for `predicate` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `predicate` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @alias select
       * @category Collection
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function|Object|string} [predicate=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `predicate`.
       * @returns {Array} Returns the new filtered array.
       * @example
       *
       * _.filter([4, 5, 6], function(n) {
       *   return n % 2 == 0;
       * });
       * // => [4, 6]
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // using the `_.matches` callback shorthand
       * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
       * // => ['barney']
       *
       * // using the `_.matchesProperty` callback shorthand
       * _.pluck(_.filter(users, 'active', false), 'user');
       * // => ['fred']
       *
       * // using the `_.property` callback shorthand
       * _.pluck(_.filter(users, 'active'), 'user');
       * // => ['barney']
       */
      function filter(collection, predicate, thisArg) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        predicate = getCallback(predicate, thisArg, 3);
        return func(collection, predicate);
      }

      /**
       * Iterates over elements of `collection`, returning the first element
       * `predicate` returns truthy for. The predicate is bound to `thisArg` and
       * invoked with three arguments: (value, index|key, collection).
       *
       * If a property name is provided for `predicate` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `predicate` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @alias detect
       * @category Collection
       * @param {Array|Object|string} collection The collection to search.
       * @param {Function|Object|string} [predicate=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `predicate`.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': true },
       *   { 'user': 'fred',    'age': 40, 'active': false },
       *   { 'user': 'pebbles', 'age': 1,  'active': true }
       * ];
       *
       * _.result(_.find(users, function(chr) {
       *   return chr.age < 40;
       * }), 'user');
       * // => 'barney'
       *
       * // using the `_.matches` callback shorthand
       * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
       * // => 'pebbles'
       *
       * // using the `_.matchesProperty` callback shorthand
       * _.result(_.find(users, 'active', false), 'user');
       * // => 'fred'
       *
       * // using the `_.property` callback shorthand
       * _.result(_.find(users, 'active'), 'user');
       * // => 'barney'
       */
      var find = createFind(baseEach);

      /**
       * This method is like `_.find` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @category Collection
       * @param {Array|Object|string} collection The collection to search.
       * @param {Function|Object|string} [predicate=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `predicate`.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * _.findLast([1, 2, 3, 4], function(n) {
       *   return n % 2 == 1;
       * });
       * // => 3
       */
      var findLast = createFind(baseEachRight, true);

      /**
       * Performs a deep comparison between each element in `collection` and the
       * source object, returning the first element that has equivalent property
       * values.
       *
       * **Note:** This method supports comparing arrays, booleans, `Date` objects,
       * numbers, `Object` objects, regexes, and strings. Objects are compared by
       * their own, not inherited, enumerable properties. For comparing a single
       * own or inherited property value see `_.matchesProperty`.
       *
       * @static
       * @memberOf _
       * @category Collection
       * @param {Array|Object|string} collection The collection to search.
       * @param {Object} source The object of property values to match.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
       * // => 'barney'
       *
       * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
       * // => 'fred'
       */
      function findWhere(collection, source) {
        return find(collection, baseMatches(source));
      }

      /**
       * Iterates over elements of `collection` invoking `iteratee` for each element.
       * The `iteratee` is bound to `thisArg` and invoked with three arguments:
       * (value, index|key, collection). Iteratee functions may exit iteration early
       * by explicitly returning `false`.
       *
       * **Note:** As with other "Collections" methods, objects with a "length" property
       * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
       * may be used for object iteration.
       *
       * @static
       * @memberOf _
       * @alias each
       * @category Collection
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {Array|Object|string} Returns `collection`.
       * @example
       *
       * _([1, 2]).forEach(function(n) {
       *   console.log(n);
       * }).value();
       * // => logs each value from left to right and returns the array
       *
       * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
       *   console.log(n, key);
       * });
       * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
       */
      var forEach = createForEach(arrayEach, baseEach);

      /**
       * This method is like `_.forEach` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @alias eachRight
       * @category Collection
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {Array|Object|string} Returns `collection`.
       * @example
       *
       * _([1, 2]).forEachRight(function(n) {
       *   console.log(n);
       * }).value();
       * // => logs each value from right to left and returns the array
       */
      var forEachRight = createForEach(arrayEachRight, baseEachRight);

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` through `iteratee`. The corresponding value
       * of each key is an array of the elements responsible for generating the key.
       * The `iteratee` is bound to `thisArg` and invoked with three arguments:
       * (value, index|key, collection).
       *
       * If a property name is provided for `iteratee` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `iteratee` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @category Collection
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function|Object|string} [iteratee=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.groupBy([4.2, 6.1, 6.4], function(n) {
       *   return Math.floor(n);
       * });
       * // => { '4': [4.2], '6': [6.1, 6.4] }
       *
       * _.groupBy([4.2, 6.1, 6.4], function(n) {
       *   return this.floor(n);
       * }, Math);
       * // => { '4': [4.2], '6': [6.1, 6.4] }
       *
       * // using the `_.property` callback shorthand
       * _.groupBy(['one', 'two', 'three'], 'length');
       * // => { '3': ['one', 'two'], '5': ['three'] }
       */
      var groupBy = createAggregator(function(result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          result[key].push(value);
        } else {
          result[key] = [value];
        }
      });

      /**
       * Checks if `value` is in `collection` using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
       * for equality comparisons. If `fromIndex` is negative, it is used as the offset
       * from the end of `collection`.
       *
       * @static
       * @memberOf _
       * @alias contains, include
       * @category Collection
       * @param {Array|Object|string} collection The collection to search.
       * @param {*} target The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
       * @returns {boolean} Returns `true` if a matching element is found, else `false`.
       * @example
       *
       * _.includes([1, 2, 3], 1);
       * // => true
       *
       * _.includes([1, 2, 3], 1, 2);
       * // => false
       *
       * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
       * // => true
       *
       * _.includes('pebbles', 'eb');
       * // => true
       */
      function includes(collection, target, fromIndex, guard) {
        var length = collection ? getLength(collection) : 0;
        if (!isLength(length)) {
          collection = values(collection);
          length = collection.length;
        }
        if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
          fromIndex = 0;
        } else {
          fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
        }
        return (typeof collection == 'string' || !isArray(collection) && isString(collection))
          ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
          : (!!length && getIndexOf(collection, target, fromIndex) > -1);
      }

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` through `iteratee`. The corresponding value
       * of each key is the last element responsible for generating the key. The
       * iteratee function is bound to `thisArg` and invoked with three arguments:
       * (value, index|key, collection).
       *
       * If a property name is provided for `iteratee` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `iteratee` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @category Collection
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function|Object|string} [iteratee=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * var keyData = [
       *   { 'dir': 'left', 'code': 97 },
       *   { 'dir': 'right', 'code': 100 }
       * ];
       *
       * _.indexBy(keyData, 'dir');
       * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
       *
       * _.indexBy(keyData, function(object) {
       *   return String.fromCharCode(object.code);
       * });
       * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
       *
       * _.indexBy(keyData, function(object) {
       *   return this.fromCharCode(object.code);
       * }, String);
       * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
       */
      var indexBy = createAggregator(function(result, value, key) {
        result[key] = value;
      });

      /**
       * Invokes the method at `path` of each element in `collection`, returning
       * an array of the results of each invoked method. Any additional arguments
       * are provided to each invoked method. If `methodName` is a function it is
       * invoked for, and `this` bound to, each element in `collection`.
       *
       * @static
       * @memberOf _
       * @category Collection
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Array|Function|string} path The path of the method to invoke or
       *  the function invoked per iteration.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
       * // => [[1, 5, 7], [1, 2, 3]]
       *
       * _.invoke([123, 456], String.prototype.split, '');
       * // => [['1', '2', '3'], ['4', '5', '6']]
       */
      var invoke = restParam(function(collection, path, args) {
        var index = -1,
            isFunc = typeof path == 'function',
            isProp = isKey(path),
            result = isArrayLike(collection) ? Array(collection.length) : [];

        baseEach(collection, function(value) {
          var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
          result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
        });
        return result;
      });

      /**
       * Creates an array of values by running each element in `collection` through
       * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
       * arguments: (value, index|key, collection).
       *
       * If a property name is provided for `iteratee` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `iteratee` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
       *
       * The guarded methods are:
       * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
       * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
       * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
       * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
       * `sum`, `uniq`, and `words`
       *
       * @static
       * @memberOf _
       * @alias collect
       * @category Collection
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function|Object|string} [iteratee=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {Array} Returns the new mapped array.
       * @example
       *
       * function timesThree(n) {
       *   return n * 3;
       * }
       *
       * _.map([1, 2], timesThree);
       * // => [3, 6]
       *
       * _.map({ 'a': 1, 'b': 2 }, timesThree);
       * // => [3, 6] (iteration order is not guaranteed)
       *
       * var users = [
       *   { 'user': 'barney' },
       *   { 'user': 'fred' }
       * ];
       *
       * // using the `_.property` callback shorthand
       * _.map(users, 'user');
       * // => ['barney', 'fred']
       */
      function map(collection, iteratee, thisArg) {
        var func = isArray(collection) ? arrayMap : baseMap;
        iteratee = getCallback(iteratee, thisArg, 3);
        return func(collection, iteratee);
      }

      /**
       * Creates an array of elements split into two groups, the first of which
       * contains elements `predicate` returns truthy for, while the second of which
       * contains elements `predicate` returns falsey for. The predicate is bound
       * to `thisArg` and invoked with three arguments: (value, index|key, collection).
       *
       * If a property name is provided for `predicate` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `predicate` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @category Collection
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function|Object|string} [predicate=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `predicate`.
       * @returns {Array} Returns the array of grouped elements.
       * @example
       *
       * _.partition([1, 2, 3], function(n) {
       *   return n % 2;
       * });
       * // => [[1, 3], [2]]
       *
       * _.partition([1.2, 2.3, 3.4], function(n) {
       *   return this.floor(n) % 2;
       * }, Math);
       * // => [[1.2, 3.4], [2.3]]
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': false },
       *   { 'user': 'fred',    'age': 40, 'active': true },
       *   { 'user': 'pebbles', 'age': 1,  'active': false }
       * ];
       *
       * var mapper = function(array) {
       *   return _.pluck(array, 'user');
       * };
       *
       * // using the `_.matches` callback shorthand
       * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
       * // => [['pebbles'], ['barney', 'fred']]
       *
       * // using the `_.matchesProperty` callback shorthand
       * _.map(_.partition(users, 'active', false), mapper);
       * // => [['barney', 'pebbles'], ['fred']]
       *
       * // using the `_.property` callback shorthand
       * _.map(_.partition(users, 'active'), mapper);
       * // => [['fred'], ['barney', 'pebbles']]
       */
      var partition = createAggregator(function(result, value, key) {
        result[key ? 0 : 1].push(value);
      }, function() { return [[], []]; });

      /**
       * Gets the property value of `path` from all elements in `collection`.
       *
       * @static
       * @memberOf _
       * @category Collection
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Array|string} path The path of the property to pluck.
       * @returns {Array} Returns the property values.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 }
       * ];
       *
       * _.pluck(users, 'user');
       * // => ['barney', 'fred']
       *
       * var userIndex = _.indexBy(users, 'user');
       * _.pluck(userIndex, 'age');
       * // => [36, 40] (iteration order is not guaranteed)
       */
      function pluck(collection, path) {
        return map(collection, property(path));
      }

      /**
       * Reduces `collection` to a value which is the accumulated result of running
       * each element in `collection` through `iteratee`, where each successive
       * invocation is supplied the return value of the previous. If `accumulator`
       * is not provided the first element of `collection` is used as the initial
       * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
       * (accumulator, value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.reduce`, `_.reduceRight`, and `_.transform`.
       *
       * The guarded methods are:
       * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
       * and `sortByOrder`
       *
       * @static
       * @memberOf _
       * @alias foldl, inject
       * @category Collection
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {*} Returns the accumulated value.
       * @example
       *
       * _.reduce([1, 2], function(total, n) {
       *   return total + n;
       * });
       * // => 3
       *
       * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
       *   result[key] = n * 3;
       *   return result;
       * }, {});
       * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
       */
      var reduce = createReduce(arrayReduce, baseEach);

      /**
       * This method is like `_.reduce` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @alias foldr
       * @category Collection
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {*} Returns the accumulated value.
       * @example
       *
       * var array = [[0, 1], [2, 3], [4, 5]];
       *
       * _.reduceRight(array, function(flattened, other) {
       *   return flattened.concat(other);
       * }, []);
       * // => [4, 5, 2, 3, 0, 1]
       */
      var reduceRight = createReduce(arrayReduceRight, baseEachRight);

      /**
       * The opposite of `_.filter`; this method returns the elements of `collection`
       * that `predicate` does **not** return truthy for.
       *
       * @static
       * @memberOf _
       * @category Collection
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function|Object|string} [predicate=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `predicate`.
       * @returns {Array} Returns the new filtered array.
       * @example
       *
       * _.reject([1, 2, 3, 4], function(n) {
       *   return n % 2 == 0;
       * });
       * // => [1, 3]
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': true }
       * ];
       *
       * // using the `_.matches` callback shorthand
       * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
       * // => ['barney']
       *
       * // using the `_.matchesProperty` callback shorthand
       * _.pluck(_.reject(users, 'active', false), 'user');
       * // => ['fred']
       *
       * // using the `_.property` callback shorthand
       * _.pluck(_.reject(users, 'active'), 'user');
       * // => ['barney']
       */
      function reject(collection, predicate, thisArg) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        predicate = getCallback(predicate, thisArg, 3);
        return func(collection, function(value, index, collection) {
          return !predicate(value, index, collection);
        });
      }

      /**
       * Gets a random element or `n` random elements from a collection.
       *
       * @static
       * @memberOf _
       * @category Collection
       * @param {Array|Object|string} collection The collection to sample.
       * @param {number} [n] The number of elements to sample.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
       * @returns {*} Returns the random sample(s).
       * @example
       *
       * _.sample([1, 2, 3, 4]);
       * // => 2
       *
       * _.sample([1, 2, 3, 4], 2);
       * // => [3, 1]
       */
      function sample(collection, n, guard) {
        if (guard ? isIterateeCall(collection, n, guard) : n == null) {
          collection = toIterable(collection);
          var length = collection.length;
          return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
        }
        var index = -1,
            result = toArray(collection),
            length = result.length,
            lastIndex = length - 1;

        n = nativeMin(n < 0 ? 0 : (+n || 0), length);
        while (++index < n) {
          var rand = baseRandom(index, lastIndex),
              value = result[rand];

          result[rand] = result[index];
          result[index] = value;
        }
        result.length = n;
        return result;
      }

      /**
       * Creates an array of shuffled values, using a version of the
       * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
       *
       * @static
       * @memberOf _
       * @category Collection
       * @param {Array|Object|string} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       * @example
       *
       * _.shuffle([1, 2, 3, 4]);
       * // => [4, 1, 3, 2]
       */
      function shuffle(collection) {
        return sample(collection, POSITIVE_INFINITY);
      }

      /**
       * Gets the size of `collection` by returning its length for array-like
       * values or the number of own enumerable properties for objects.
       *
       * @static
       * @memberOf _
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @returns {number} Returns the size of `collection`.
       * @example
       *
       * _.size([1, 2, 3]);
       * // => 3
       *
       * _.size({ 'a': 1, 'b': 2 });
       * // => 2
       *
       * _.size('pebbles');
       * // => 7
       */
      function size(collection) {
        var length = collection ? getLength(collection) : 0;
        return isLength(length) ? length : keys(collection).length;
      }

      /**
       * Checks if `predicate` returns truthy for **any** element of `collection`.
       * The function returns as soon as it finds a passing value and does not iterate
       * over the entire collection. The predicate is bound to `thisArg` and invoked
       * with three arguments: (value, index|key, collection).
       *
       * If a property name is provided for `predicate` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `predicate` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @alias any
       * @category Collection
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function|Object|string} [predicate=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `predicate`.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       * @example
       *
       * _.some([null, 0, 'yes', false], Boolean);
       * // => true
       *
       * var users = [
       *   { 'user': 'barney', 'active': true },
       *   { 'user': 'fred',   'active': false }
       * ];
       *
       * // using the `_.matches` callback shorthand
       * _.some(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // using the `_.matchesProperty` callback shorthand
       * _.some(users, 'active', false);
       * // => true
       *
       * // using the `_.property` callback shorthand
       * _.some(users, 'active');
       * // => true
       */
      function some(collection, predicate, thisArg) {
        var func = isArray(collection) ? arraySome : baseSome;
        if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
          predicate = undefined;
        }
        if (typeof predicate != 'function' || thisArg !== undefined) {
          predicate = getCallback(predicate, thisArg, 3);
        }
        return func(collection, predicate);
      }

      /**
       * Creates an array of elements, sorted in ascending order by the results of
       * running each element in a collection through `iteratee`. This method performs
       * a stable sort, that is, it preserves the original sort order of equal elements.
       * The `iteratee` is bound to `thisArg` and invoked with three arguments:
       * (value, index|key, collection).
       *
       * If a property name is provided for `iteratee` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `iteratee` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @category Collection
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function|Object|string} [iteratee=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * _.sortBy([1, 2, 3], function(n) {
       *   return Math.sin(n);
       * });
       * // => [3, 1, 2]
       *
       * _.sortBy([1, 2, 3], function(n) {
       *   return this.sin(n);
       * }, Math);
       * // => [3, 1, 2]
       *
       * var users = [
       *   { 'user': 'fred' },
       *   { 'user': 'pebbles' },
       *   { 'user': 'barney' }
       * ];
       *
       * // using the `_.property` callback shorthand
       * _.pluck(_.sortBy(users, 'user'), 'user');
       * // => ['barney', 'fred', 'pebbles']
       */
      function sortBy(collection, iteratee, thisArg) {
        if (collection == null) {
          return [];
        }
        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
          iteratee = undefined;
        }
        var index = -1;
        iteratee = getCallback(iteratee, thisArg, 3);

        var result = baseMap(collection, function(value, key, collection) {
          return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
        });
        return baseSortBy(result, compareAscending);
      }

      /**
       * This method is like `_.sortBy` except that it can sort by multiple iteratees
       * or property names.
       *
       * If a property name is provided for an iteratee the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If an object is provided for an iteratee the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @category Collection
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
       *  The iteratees to sort by, specified as individual values or arrays of values.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 42 },
       *   { 'user': 'barney', 'age': 34 }
       * ];
       *
       * _.map(_.sortByAll(users, ['user', 'age']), _.values);
       * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
       *
       * _.map(_.sortByAll(users, 'user', function(chr) {
       *   return Math.floor(chr.age / 10);
       * }), _.values);
       * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
       */
      var sortByAll = restParam(function(collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var guard = iteratees[2];
        if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
          iteratees.length = 1;
        }
        return baseSortByOrder(collection, baseFlatten(iteratees), []);
      });

      /**
       * This method is like `_.sortByAll` except that it allows specifying the
       * sort orders of the iteratees to sort by. If `orders` is unspecified, all
       * values are sorted in ascending order. Otherwise, a value is sorted in
       * ascending order if its corresponding order is "asc", and descending if "desc".
       *
       * If a property name is provided for an iteratee the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If an object is provided for an iteratee the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @category Collection
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
       * @param {boolean[]} [orders] The sort orders of `iteratees`.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 34 },
       *   { 'user': 'fred',   'age': 42 },
       *   { 'user': 'barney', 'age': 36 }
       * ];
       *
       * // sort by `user` in ascending order and by `age` in descending order
       * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
       * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
       */
      function sortByOrder(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }
        if (guard && isIterateeCall(iteratees, orders, guard)) {
          orders = undefined;
        }
        if (!isArray(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }
        if (!isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }
        return baseSortByOrder(collection, iteratees, orders);
      }

      /**
       * Performs a deep comparison between each element in `collection` and the
       * source object, returning an array of all elements that have equivalent
       * property values.
       *
       * **Note:** This method supports comparing arrays, booleans, `Date` objects,
       * numbers, `Object` objects, regexes, and strings. Objects are compared by
       * their own, not inherited, enumerable properties. For comparing a single
       * own or inherited property value see `_.matchesProperty`.
       *
       * @static
       * @memberOf _
       * @category Collection
       * @param {Array|Object|string} collection The collection to search.
       * @param {Object} source The object of property values to match.
       * @returns {Array} Returns the new filtered array.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
       *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
       * ];
       *
       * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
       * // => ['barney']
       *
       * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
       * // => ['fred']
       */
      function where(collection, source) {
        return filter(collection, baseMatches(source));
      }

      /*------------------------------------------------------------------------*/

      /**
       * Gets the number of milliseconds that have elapsed since the Unix epoch
       * (1 January 1970 00:00:00 UTC).
       *
       * @static
       * @memberOf _
       * @category Date
       * @example
       *
       * _.defer(function(stamp) {
       *   console.log(_.now() - stamp);
       * }, _.now());
       * // => logs the number of milliseconds it took for the deferred function to be invoked
       */
      var now = nativeNow || function() {
        return new Date().getTime();
      };

      /*------------------------------------------------------------------------*/

      /**
       * The opposite of `_.before`; this method creates a function that invokes
       * `func` once it is called `n` or more times.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {number} n The number of calls before `func` is invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var saves = ['profile', 'settings'];
       *
       * var done = _.after(saves.length, function() {
       *   console.log('done saving!');
       * });
       *
       * _.forEach(saves, function(type) {
       *   asyncSave({ 'type': type, 'complete': done });
       * });
       * // => logs 'done saving!' after the two async saves have completed
       */
      function after(n, func) {
        if (typeof func != 'function') {
          if (typeof n == 'function') {
            var temp = n;
            n = func;
            func = temp;
          } else {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
        }
        n = nativeIsFinite(n = +n) ? n : 0;
        return function() {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }

      /**
       * Creates a function that accepts up to `n` arguments ignoring any
       * additional arguments.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @param {number} [n=func.length] The arity cap.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
       * @returns {Function} Returns the new function.
       * @example
       *
       * _.map(['6', '8', '10'], _.ary(parseInt, 1));
       * // => [6, 8, 10]
       */
      function ary(func, n, guard) {
        if (guard && isIterateeCall(func, n, guard)) {
          n = undefined;
        }
        n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
        return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
      }

      /**
       * Creates a function that invokes `func`, with the `this` binding and arguments
       * of the created function, while it is called less than `n` times. Subsequent
       * calls to the created function return the result of the last `func` invocation.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {number} n The number of calls at which `func` is no longer invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * jQuery('#add').on('click', _.before(5, addContactToList));
       * // => allows adding up to 4 contacts to the list
       */
      function before(n, func) {
        var result;
        if (typeof func != 'function') {
          if (typeof n == 'function') {
            var temp = n;
            n = func;
            func = temp;
          } else {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
        }
        return function() {
          if (--n > 0) {
            result = func.apply(this, arguments);
          }
          if (n <= 1) {
            func = undefined;
          }
          return result;
        };
      }

      /**
       * Creates a function that invokes `func` with the `this` binding of `thisArg`
       * and prepends any additional `_.bind` arguments to those provided to the
       * bound function.
       *
       * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for partially applied arguments.
       *
       * **Note:** Unlike native `Function#bind` this method does not set the "length"
       * property of bound functions.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {Function} func The function to bind.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * var greet = function(greeting, punctuation) {
       *   return greeting + ' ' + this.user + punctuation;
       * };
       *
       * var object = { 'user': 'fred' };
       *
       * var bound = _.bind(greet, object, 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * // using placeholders
       * var bound = _.bind(greet, object, _, '!');
       * bound('hi');
       * // => 'hi fred!'
       */
      var bind = restParam(function(func, thisArg, partials) {
        var bitmask = BIND_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, bind.placeholder);
          bitmask |= PARTIAL_FLAG;
        }
        return createWrapper(func, bitmask, thisArg, partials, holders);
      });

      /**
       * Binds methods of an object to the object itself, overwriting the existing
       * method. Method names may be specified as individual arguments or as arrays
       * of method names. If no method names are provided all enumerable function
       * properties, own and inherited, of `object` are bound.
       *
       * **Note:** This method does not set the "length" property of bound functions.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {Object} object The object to bind and assign the bound methods to.
       * @param {...(string|string[])} [methodNames] The object method names to bind,
       *  specified as individual method names or arrays of method names.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var view = {
       *   'label': 'docs',
       *   'onClick': function() {
       *     console.log('clicked ' + this.label);
       *   }
       * };
       *
       * _.bindAll(view);
       * jQuery('#docs').on('click', view.onClick);
       * // => logs 'clicked docs' when the element is clicked
       */
      var bindAll = restParam(function(object, methodNames) {
        methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

        var index = -1,
            length = methodNames.length;

        while (++index < length) {
          var key = methodNames[index];
          object[key] = createWrapper(object[key], BIND_FLAG, object);
        }
        return object;
      });

      /**
       * Creates a function that invokes the method at `object[key]` and prepends
       * any additional `_.bindKey` arguments to those provided to the bound function.
       *
       * This method differs from `_.bind` by allowing bound functions to reference
       * methods that may be redefined or don't yet exist.
       * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
       * for more details.
       *
       * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {Object} object The object the method belongs to.
       * @param {string} key The key of the method.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * var object = {
       *   'user': 'fred',
       *   'greet': function(greeting, punctuation) {
       *     return greeting + ' ' + this.user + punctuation;
       *   }
       * };
       *
       * var bound = _.bindKey(object, 'greet', 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * object.greet = function(greeting, punctuation) {
       *   return greeting + 'ya ' + this.user + punctuation;
       * };
       *
       * bound('!');
       * // => 'hiya fred!'
       *
       * // using placeholders
       * var bound = _.bindKey(object, 'greet', _, '!');
       * bound('hi');
       * // => 'hiya fred!'
       */
      var bindKey = restParam(function(object, key, partials) {
        var bitmask = BIND_FLAG | BIND_KEY_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, bindKey.placeholder);
          bitmask |= PARTIAL_FLAG;
        }
        return createWrapper(key, bitmask, object, partials, holders);
      });

      /**
       * Creates a function that accepts one or more arguments of `func` that when
       * called either invokes `func` returning its result, if all `func` arguments
       * have been provided, or returns a function that accepts one or more of the
       * remaining `func` arguments, and so on. The arity of `func` may be specified
       * if `func.length` is not sufficient.
       *
       * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for provided arguments.
       *
       * **Note:** This method does not set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curry(abc);
       *
       * curried(1)(2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // using placeholders
       * curried(1)(_, 3)(2);
       * // => [1, 2, 3]
       */
      var curry = createCurry(CURRY_FLAG);

      /**
       * This method is like `_.curry` except that arguments are applied to `func`
       * in the manner of `_.partialRight` instead of `_.partial`.
       *
       * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for provided arguments.
       *
       * **Note:** This method does not set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curryRight(abc);
       *
       * curried(3)(2)(1);
       * // => [1, 2, 3]
       *
       * curried(2, 3)(1);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // using placeholders
       * curried(3)(1, _)(2);
       * // => [1, 2, 3]
       */
      var curryRight = createCurry(CURRY_RIGHT_FLAG);

      /**
       * Creates a debounced function that delays invoking `func` until after `wait`
       * milliseconds have elapsed since the last time the debounced function was
       * invoked. The debounced function comes with a `cancel` method to cancel
       * delayed invocations. Provide an options object to indicate that `func`
       * should be invoked on the leading and/or trailing edge of the `wait` timeout.
       * Subsequent calls to the debounced function return the result of the last
       * `func` invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
       * on the trailing edge of the timeout only if the the debounced function is
       * invoked more than once during the `wait` timeout.
       *
       * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
       * for details over the differences between `_.debounce` and `_.throttle`.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {Function} func The function to debounce.
       * @param {number} [wait=0] The number of milliseconds to delay.
       * @param {Object} [options] The options object.
       * @param {boolean} [options.leading=false] Specify invoking on the leading
       *  edge of the timeout.
       * @param {number} [options.maxWait] The maximum time `func` is allowed to be
       *  delayed before it is invoked.
       * @param {boolean} [options.trailing=true] Specify invoking on the trailing
       *  edge of the timeout.
       * @returns {Function} Returns the new debounced function.
       * @example
       *
       * // avoid costly calculations while the window size is in flux
       * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
       *
       * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
       * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
       *   'leading': true,
       *   'trailing': false
       * }));
       *
       * // ensure `batchLog` is invoked once after 1 second of debounced calls
       * var source = new EventSource('/stream');
       * jQuery(source).on('message', _.debounce(batchLog, 250, {
       *   'maxWait': 1000
       * }));
       *
       * // cancel a debounced call
       * var todoChanges = _.debounce(batchLog, 1000);
       * Object.observe(models.todo, todoChanges);
       *
       * Object.observe(models, function(changes) {
       *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
       *     todoChanges.cancel();
       *   }
       * }, ['delete']);
       *
       * // ...at some point `models.todo` is changed
       * models.todo.completed = true;
       *
       * // ...before 1 second has passed `models.todo` is deleted
       * // which cancels the debounced `todoChanges` call
       * delete models.todo;
       */
      function debounce(func, wait, options) {
        var args,
            maxTimeoutId,
            result,
            stamp,
            thisArg,
            timeoutId,
            trailingCall,
            lastCalled = 0,
            maxWait = false,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = wait < 0 ? 0 : (+wait || 0);
        if (options === true) {
          var leading = true;
          trailing = false;
        } else if (isObject(options)) {
          leading = !!options.leading;
          maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        function cancel() {
          if (timeoutId) {
            clearTimeout(timeoutId);
          }
          if (maxTimeoutId) {
            clearTimeout(maxTimeoutId);
          }
          lastCalled = 0;
          maxTimeoutId = timeoutId = trailingCall = undefined;
        }

        function complete(isCalled, id) {
          if (id) {
            clearTimeout(id);
          }
          maxTimeoutId = timeoutId = trailingCall = undefined;
          if (isCalled) {
            lastCalled = now();
            result = func.apply(thisArg, args);
            if (!timeoutId && !maxTimeoutId) {
              args = thisArg = undefined;
            }
          }
        }

        function delayed() {
          var remaining = wait - (now() - stamp);
          if (remaining <= 0 || remaining > wait) {
            complete(trailingCall, maxTimeoutId);
          } else {
            timeoutId = setTimeout(delayed, remaining);
          }
        }

        function maxDelayed() {
          complete(trailing, timeoutId);
        }

        function debounced() {
          args = arguments;
          stamp = now();
          thisArg = this;
          trailingCall = trailing && (timeoutId || !leading);

          if (maxWait === false) {
            var leadingCall = leading && !timeoutId;
          } else {
            if (!maxTimeoutId && !leading) {
              lastCalled = stamp;
            }
            var remaining = maxWait - (stamp - lastCalled),
                isCalled = remaining <= 0 || remaining > maxWait;

            if (isCalled) {
              if (maxTimeoutId) {
                maxTimeoutId = clearTimeout(maxTimeoutId);
              }
              lastCalled = stamp;
              result = func.apply(thisArg, args);
            }
            else if (!maxTimeoutId) {
              maxTimeoutId = setTimeout(maxDelayed, remaining);
            }
          }
          if (isCalled && timeoutId) {
            timeoutId = clearTimeout(timeoutId);
          }
          else if (!timeoutId && wait !== maxWait) {
            timeoutId = setTimeout(delayed, wait);
          }
          if (leadingCall) {
            isCalled = true;
            result = func.apply(thisArg, args);
          }
          if (isCalled && !timeoutId && !maxTimeoutId) {
            args = thisArg = undefined;
          }
          return result;
        }
        debounced.cancel = cancel;
        return debounced;
      }

      /**
       * Defers invoking the `func` until the current call stack has cleared. Any
       * additional arguments are provided to `func` when it is invoked.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {Function} func The function to defer.
       * @param {...*} [args] The arguments to invoke the function with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.defer(function(text) {
       *   console.log(text);
       * }, 'deferred');
       * // logs 'deferred' after one or more milliseconds
       */
      var defer = restParam(function(func, args) {
        return baseDelay(func, 1, args);
      });

      /**
       * Invokes `func` after `wait` milliseconds. Any additional arguments are
       * provided to `func` when it is invoked.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {...*} [args] The arguments to invoke the function with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.delay(function(text) {
       *   console.log(text);
       * }, 1000, 'later');
       * // => logs 'later' after one second
       */
      var delay = restParam(function(func, wait, args) {
        return baseDelay(func, wait, args);
      });

      /**
       * Creates a function that returns the result of invoking the provided
       * functions with the `this` binding of the created function, where each
       * successive invocation is supplied the return value of the previous.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {...Function} [funcs] Functions to invoke.
       * @returns {Function} Returns the new function.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flow(_.add, square);
       * addSquare(1, 2);
       * // => 9
       */
      var flow = createFlow();

      /**
       * This method is like `_.flow` except that it creates a function that
       * invokes the provided functions from right to left.
       *
       * @static
       * @memberOf _
       * @alias backflow, compose
       * @category Function
       * @param {...Function} [funcs] Functions to invoke.
       * @returns {Function} Returns the new function.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flowRight(square, _.add);
       * addSquare(1, 2);
       * // => 9
       */
      var flowRight = createFlow(true);

      /**
       * Creates a function that memoizes the result of `func`. If `resolver` is
       * provided it determines the cache key for storing the result based on the
       * arguments provided to the memoized function. By default, the first argument
       * provided to the memoized function is coerced to a string and used as the
       * cache key. The `func` is invoked with the `this` binding of the memoized
       * function.
       *
       * **Note:** The cache is exposed as the `cache` property on the memoized
       * function. Its creation may be customized by replacing the `_.memoize.Cache`
       * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
       * method interface of `get`, `has`, and `set`.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {Function} func The function to have its output memoized.
       * @param {Function} [resolver] The function to resolve the cache key.
       * @returns {Function} Returns the new memoizing function.
       * @example
       *
       * var upperCase = _.memoize(function(string) {
       *   return string.toUpperCase();
       * });
       *
       * upperCase('fred');
       * // => 'FRED'
       *
       * // modifying the result cache
       * upperCase.cache.set('fred', 'BARNEY');
       * upperCase('fred');
       * // => 'BARNEY'
       *
       * // replacing `_.memoize.Cache`
       * var object = { 'user': 'fred' };
       * var other = { 'user': 'barney' };
       * var identity = _.memoize(_.identity);
       *
       * identity(object);
       * // => { 'user': 'fred' }
       * identity(other);
       * // => { 'user': 'fred' }
       *
       * _.memoize.Cache = WeakMap;
       * var identity = _.memoize(_.identity);
       *
       * identity(object);
       * // => { 'user': 'fred' }
       * identity(other);
       * // => { 'user': 'barney' }
       */
      function memoize(func, resolver) {
        if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result);
          return result;
        };
        memoized.cache = new memoize.Cache;
        return memoized;
      }

      /**
       * Creates a function that runs each argument through a corresponding
       * transform function.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {Function} func The function to wrap.
       * @param {...(Function|Function[])} [transforms] The functions to transform
       * arguments, specified as individual functions or arrays of functions.
       * @returns {Function} Returns the new function.
       * @example
       *
       * function doubled(n) {
       *   return n * 2;
       * }
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var modded = _.modArgs(function(x, y) {
       *   return [x, y];
       * }, square, doubled);
       *
       * modded(1, 2);
       * // => [1, 4]
       *
       * modded(5, 10);
       * // => [25, 20]
       */
      var modArgs = restParam(function(func, transforms) {
        transforms = baseFlatten(transforms);
        if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var length = transforms.length;
        return restParam(function(args) {
          var index = nativeMin(args.length, length);
          while (index--) {
            args[index] = transforms[index](args[index]);
          }
          return func.apply(this, args);
        });
      });

      /**
       * Creates a function that negates the result of the predicate `func`. The
       * `func` predicate is invoked with the `this` binding and arguments of the
       * created function.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {Function} predicate The predicate to negate.
       * @returns {Function} Returns the new function.
       * @example
       *
       * function isEven(n) {
       *   return n % 2 == 0;
       * }
       *
       * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
       * // => [1, 3, 5]
       */
      function negate(predicate) {
        if (typeof predicate != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return function() {
          return !predicate.apply(this, arguments);
        };
      }

      /**
       * Creates a function that is restricted to invoking `func` once. Repeat calls
       * to the function return the value of the first call. The `func` is invoked
       * with the `this` binding and arguments of the created function.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var initialize = _.once(createApplication);
       * initialize();
       * initialize();
       * // `initialize` invokes `createApplication` once
       */
      function once(func) {
        return before(2, func);
      }

      /**
       * Creates a function that invokes `func` with `partial` arguments prepended
       * to those provided to the new function. This method is like `_.bind` except
       * it does **not** alter the `this` binding.
       *
       * The `_.partial.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method does not set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * var greet = function(greeting, name) {
       *   return greeting + ' ' + name;
       * };
       *
       * var sayHelloTo = _.partial(greet, 'hello');
       * sayHelloTo('fred');
       * // => 'hello fred'
       *
       * // using placeholders
       * var greetFred = _.partial(greet, _, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       */
      var partial = createPartial(PARTIAL_FLAG);

      /**
       * This method is like `_.partial` except that partially applied arguments
       * are appended to those provided to the new function.
       *
       * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method does not set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * var greet = function(greeting, name) {
       *   return greeting + ' ' + name;
       * };
       *
       * var greetFred = _.partialRight(greet, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       *
       * // using placeholders
       * var sayHelloTo = _.partialRight(greet, 'hello', _);
       * sayHelloTo('fred');
       * // => 'hello fred'
       */
      var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

      /**
       * Creates a function that invokes `func` with arguments arranged according
       * to the specified indexes where the argument value at the first index is
       * provided as the first argument, the argument value at the second index is
       * provided as the second argument, and so on.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {Function} func The function to rearrange arguments for.
       * @param {...(number|number[])} indexes The arranged argument indexes,
       *  specified as individual indexes or arrays of indexes.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var rearged = _.rearg(function(a, b, c) {
       *   return [a, b, c];
       * }, 2, 0, 1);
       *
       * rearged('b', 'c', 'a')
       * // => ['a', 'b', 'c']
       *
       * var map = _.rearg(_.map, [1, 0]);
       * map(function(n) {
       *   return n * 3;
       * }, [1, 2, 3]);
       * // => [3, 6, 9]
       */
      var rearg = restParam(function(func, indexes) {
        return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
      });

      /**
       * Creates a function that invokes `func` with the `this` binding of the
       * created function and arguments from `start` and beyond provided as an array.
       *
       * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.restParam(function(what, names) {
       *   return what + ' ' + _.initial(names).join(', ') +
       *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
       * });
       *
       * say('hello', 'fred', 'barney', 'pebbles');
       * // => 'hello fred, barney, & pebbles'
       */
      function restParam(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
        return function() {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              rest = Array(length);

          while (++index < length) {
            rest[index] = args[start + index];
          }
          switch (start) {
            case 0: return func.call(this, rest);
            case 1: return func.call(this, args[0], rest);
            case 2: return func.call(this, args[0], args[1], rest);
          }
          var otherArgs = Array(start + 1);
          index = -1;
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = rest;
          return func.apply(this, otherArgs);
        };
      }

      /**
       * Creates a function that invokes `func` with the `this` binding of the created
       * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
       *
       * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {Function} func The function to spread arguments over.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.spread(function(who, what) {
       *   return who + ' says ' + what;
       * });
       *
       * say(['fred', 'hello']);
       * // => 'fred says hello'
       *
       * // with a Promise
       * var numbers = Promise.all([
       *   Promise.resolve(40),
       *   Promise.resolve(36)
       * ]);
       *
       * numbers.then(_.spread(function(x, y) {
       *   return x + y;
       * }));
       * // => a Promise of 76
       */
      function spread(func) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return function(array) {
          return func.apply(this, array);
        };
      }

      /**
       * Creates a throttled function that only invokes `func` at most once per
       * every `wait` milliseconds. The throttled function comes with a `cancel`
       * method to cancel delayed invocations. Provide an options object to indicate
       * that `func` should be invoked on the leading and/or trailing edge of the
       * `wait` timeout. Subsequent calls to the throttled function return the
       * result of the last `func` call.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
       * on the trailing edge of the timeout only if the the throttled function is
       * invoked more than once during the `wait` timeout.
       *
       * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
       * for details over the differences between `_.throttle` and `_.debounce`.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {Function} func The function to throttle.
       * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
       * @param {Object} [options] The options object.
       * @param {boolean} [options.leading=true] Specify invoking on the leading
       *  edge of the timeout.
       * @param {boolean} [options.trailing=true] Specify invoking on the trailing
       *  edge of the timeout.
       * @returns {Function} Returns the new throttled function.
       * @example
       *
       * // avoid excessively updating the position while scrolling
       * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
       *
       * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
       * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
       *   'trailing': false
       * }));
       *
       * // cancel a trailing throttled call
       * jQuery(window).on('popstate', throttled.cancel);
       */
      function throttle(func, wait, options) {
        var leading = true,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (options === false) {
          leading = false;
        } else if (isObject(options)) {
          leading = 'leading' in options ? !!options.leading : leading;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
      }

      /**
       * Creates a function that provides `value` to the wrapper function as its
       * first argument. Any additional arguments provided to the function are
       * appended to those provided to the wrapper function. The wrapper is invoked
       * with the `this` binding of the created function.
       *
       * @static
       * @memberOf _
       * @category Function
       * @param {*} value The value to wrap.
       * @param {Function} wrapper The wrapper function.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var p = _.wrap(_.escape, function(func, text) {
       *   return '<p>' + func(text) + '</p>';
       * });
       *
       * p('fred, barney, & pebbles');
       * // => '<p>fred, barney, &amp; pebbles</p>'
       */
      function wrap(value, wrapper) {
        wrapper = wrapper == null ? identity : wrapper;
        return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
       * otherwise they are assigned by reference. If `customizer` is provided it is
       * invoked to produce the cloned values. If `customizer` returns `undefined`
       * cloning is handled by the method instead. The `customizer` is bound to
       * `thisArg` and invoked with two argument; (value [, index|key, object]).
       *
       * **Note:** This method is loosely based on the
       * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
       * The enumerable properties of `arguments` objects and objects created by
       * constructors other than `Object` are cloned to plain `Object` objects. An
       * empty object is returned for uncloneable values such as functions, DOM nodes,
       * Maps, Sets, and WeakMaps.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @param {Function} [customizer] The function to customize cloning values.
       * @param {*} [thisArg] The `this` binding of `customizer`.
       * @returns {*} Returns the cloned value.
       * @example
       *
       * var users = [
       *   { 'user': 'barney' },
       *   { 'user': 'fred' }
       * ];
       *
       * var shallow = _.clone(users);
       * shallow[0] === users[0];
       * // => true
       *
       * var deep = _.clone(users, true);
       * deep[0] === users[0];
       * // => false
       *
       * // using a customizer callback
       * var el = _.clone(document.body, function(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(false);
       *   }
       * });
       *
       * el === document.body
       * // => false
       * el.nodeName
       * // => BODY
       * el.childNodes.length;
       * // => 0
       */
      function clone(value, isDeep, customizer, thisArg) {
        if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
          isDeep = false;
        }
        else if (typeof isDeep == 'function') {
          thisArg = customizer;
          customizer = isDeep;
          isDeep = false;
        }
        return typeof customizer == 'function'
          ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
          : baseClone(value, isDeep);
      }

      /**
       * Creates a deep clone of `value`. If `customizer` is provided it is invoked
       * to produce the cloned values. If `customizer` returns `undefined` cloning
       * is handled by the method instead. The `customizer` is bound to `thisArg`
       * and invoked with two argument; (value [, index|key, object]).
       *
       * **Note:** This method is loosely based on the
       * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
       * The enumerable properties of `arguments` objects and objects created by
       * constructors other than `Object` are cloned to plain `Object` objects. An
       * empty object is returned for uncloneable values such as functions, DOM nodes,
       * Maps, Sets, and WeakMaps.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to deep clone.
       * @param {Function} [customizer] The function to customize cloning values.
       * @param {*} [thisArg] The `this` binding of `customizer`.
       * @returns {*} Returns the deep cloned value.
       * @example
       *
       * var users = [
       *   { 'user': 'barney' },
       *   { 'user': 'fred' }
       * ];
       *
       * var deep = _.cloneDeep(users);
       * deep[0] === users[0];
       * // => false
       *
       * // using a customizer callback
       * var el = _.cloneDeep(document.body, function(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(true);
       *   }
       * });
       *
       * el === document.body
       * // => false
       * el.nodeName
       * // => BODY
       * el.childNodes.length;
       * // => 20
       */
      function cloneDeep(value, customizer, thisArg) {
        return typeof customizer == 'function'
          ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
          : baseClone(value, true);
      }

      /**
       * Checks if `value` is greater than `other`.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
       * @example
       *
       * _.gt(3, 1);
       * // => true
       *
       * _.gt(3, 3);
       * // => false
       *
       * _.gt(1, 3);
       * // => false
       */
      function gt(value, other) {
        return value > other;
      }

      /**
       * Checks if `value` is greater than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
       * @example
       *
       * _.gte(3, 1);
       * // => true
       *
       * _.gte(3, 3);
       * // => true
       *
       * _.gte(1, 3);
       * // => false
       */
      function gte(value, other) {
        return value >= other;
      }

      /**
       * Checks if `value` is classified as an `arguments` object.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
       * @example
       *
       * _.isArguments(function() { return arguments; }());
       * // => true
       *
       * _.isArguments([1, 2, 3]);
       * // => false
       */
      function isArguments(value) {
        return isObjectLike(value) && isArrayLike(value) &&
          hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
      }

      /**
       * Checks if `value` is classified as an `Array` object.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
       * @example
       *
       * _.isArray([1, 2, 3]);
       * // => true
       *
       * _.isArray(function() { return arguments; }());
       * // => false
       */
      var isArray = nativeIsArray || function(value) {
        return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
      };

      /**
       * Checks if `value` is classified as a boolean primitive or object.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
       * @example
       *
       * _.isBoolean(false);
       * // => true
       *
       * _.isBoolean(null);
       * // => false
       */
      function isBoolean(value) {
        return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
      }

      /**
       * Checks if `value` is classified as a `Date` object.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
       * @example
       *
       * _.isDate(new Date);
       * // => true
       *
       * _.isDate('Mon April 23 2012');
       * // => false
       */
      function isDate(value) {
        return isObjectLike(value) && objToString.call(value) == dateTag;
      }

      /**
       * Checks if `value` is a DOM element.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
       * @example
       *
       * _.isElement(document.body);
       * // => true
       *
       * _.isElement('<body>');
       * // => false
       */
      function isElement(value) {
        return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
      }

      /**
       * Checks if `value` is empty. A value is considered empty unless it is an
       * `arguments` object, array, string, or jQuery-like collection with a length
       * greater than `0` or an object with own enumerable properties.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {Array|Object|string} value The value to inspect.
       * @returns {boolean} Returns `true` if `value` is empty, else `false`.
       * @example
       *
       * _.isEmpty(null);
       * // => true
       *
       * _.isEmpty(true);
       * // => true
       *
       * _.isEmpty(1);
       * // => true
       *
       * _.isEmpty([1, 2, 3]);
       * // => false
       *
       * _.isEmpty({ 'a': 1 });
       * // => false
       */
      function isEmpty(value) {
        if (value == null) {
          return true;
        }
        if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
            (isObjectLike(value) && isFunction(value.splice)))) {
          return !value.length;
        }
        return !keys(value).length;
      }

      /**
       * Performs a deep comparison between two values to determine if they are
       * equivalent. If `customizer` is provided it is invoked to compare values.
       * If `customizer` returns `undefined` comparisons are handled by the method
       * instead. The `customizer` is bound to `thisArg` and invoked with three
       * arguments: (value, other [, index|key]).
       *
       * **Note:** This method supports comparing arrays, booleans, `Date` objects,
       * numbers, `Object` objects, regexes, and strings. Objects are compared by
       * their own, not inherited, enumerable properties. Functions and DOM nodes
       * are **not** supported. Provide a customizer function to extend support
       * for comparing other values.
       *
       * @static
       * @memberOf _
       * @alias eq
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {Function} [customizer] The function to customize value comparisons.
       * @param {*} [thisArg] The `this` binding of `customizer`.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'user': 'fred' };
       * var other = { 'user': 'fred' };
       *
       * object == other;
       * // => false
       *
       * _.isEqual(object, other);
       * // => true
       *
       * // using a customizer callback
       * var array = ['hello', 'goodbye'];
       * var other = ['hi', 'goodbye'];
       *
       * _.isEqual(array, other, function(value, other) {
       *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
       *     return true;
       *   }
       * });
       * // => true
       */
      function isEqual(value, other, customizer, thisArg) {
        customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
        var result = customizer ? customizer(value, other) : undefined;
        return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
      }

      /**
       * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
       * `SyntaxError`, `TypeError`, or `URIError` object.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
       * @example
       *
       * _.isError(new Error);
       * // => true
       *
       * _.isError(Error);
       * // => false
       */
      function isError(value) {
        return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
      }

      /**
       * Checks if `value` is a finite primitive number.
       *
       * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
       * @example
       *
       * _.isFinite(10);
       * // => true
       *
       * _.isFinite('10');
       * // => false
       *
       * _.isFinite(true);
       * // => false
       *
       * _.isFinite(Object(10));
       * // => false
       *
       * _.isFinite(Infinity);
       * // => false
       */
      function isFinite(value) {
        return typeof value == 'number' && nativeIsFinite(value);
      }

      /**
       * Checks if `value` is classified as a `Function` object.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
       * @example
       *
       * _.isFunction(_);
       * // => true
       *
       * _.isFunction(/abc/);
       * // => false
       */
      function isFunction(value) {
        // The use of `Object#toString` avoids issues with the `typeof` operator
        // in older versions of Chrome and Safari which return 'function' for regexes
        // and Safari 8 equivalents which return 'object' for typed array constructors.
        return isObject(value) && objToString.call(value) == funcTag;
      }

      /**
       * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
       * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
       * @example
       *
       * _.isObject({});
       * // => true
       *
       * _.isObject([1, 2, 3]);
       * // => true
       *
       * _.isObject(1);
       * // => false
       */
      function isObject(value) {
        // Avoid a V8 JIT bug in Chrome 19-20.
        // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
        var type = typeof value;
        return !!value && (type == 'object' || type == 'function');
      }

      /**
       * Performs a deep comparison between `object` and `source` to determine if
       * `object` contains equivalent property values. If `customizer` is provided
       * it is invoked to compare values. If `customizer` returns `undefined`
       * comparisons are handled by the method instead. The `customizer` is bound
       * to `thisArg` and invoked with three arguments: (value, other, index|key).
       *
       * **Note:** This method supports comparing properties of arrays, booleans,
       * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
       * and DOM nodes are **not** supported. Provide a customizer function to extend
       * support for comparing other values.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Function} [customizer] The function to customize value comparisons.
       * @param {*} [thisArg] The `this` binding of `customizer`.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * var object = { 'user': 'fred', 'age': 40 };
       *
       * _.isMatch(object, { 'age': 40 });
       * // => true
       *
       * _.isMatch(object, { 'age': 36 });
       * // => false
       *
       * // using a customizer callback
       * var object = { 'greeting': 'hello' };
       * var source = { 'greeting': 'hi' };
       *
       * _.isMatch(object, source, function(value, other) {
       *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
       * });
       * // => true
       */
      function isMatch(object, source, customizer, thisArg) {
        customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
        return baseIsMatch(object, getMatchData(source), customizer);
      }

      /**
       * Checks if `value` is `NaN`.
       *
       * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
       * which returns `true` for `undefined` and other non-numeric values.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
       * @example
       *
       * _.isNaN(NaN);
       * // => true
       *
       * _.isNaN(new Number(NaN));
       * // => true
       *
       * isNaN(undefined);
       * // => true
       *
       * _.isNaN(undefined);
       * // => false
       */
      function isNaN(value) {
        // An `NaN` primitive is the only value that is not equal to itself.
        // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
        return isNumber(value) && value != +value;
      }

      /**
       * Checks if `value` is a native function.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
       * @example
       *
       * _.isNative(Array.prototype.push);
       * // => true
       *
       * _.isNative(_);
       * // => false
       */
      function isNative(value) {
        if (value == null) {
          return false;
        }
        if (isFunction(value)) {
          return reIsNative.test(fnToString.call(value));
        }
        return isObjectLike(value) && reIsHostCtor.test(value);
      }

      /**
       * Checks if `value` is `null`.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
       * @example
       *
       * _.isNull(null);
       * // => true
       *
       * _.isNull(void 0);
       * // => false
       */
      function isNull(value) {
        return value === null;
      }

      /**
       * Checks if `value` is classified as a `Number` primitive or object.
       *
       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
       * as numbers, use the `_.isFinite` method.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
       * @example
       *
       * _.isNumber(8.4);
       * // => true
       *
       * _.isNumber(NaN);
       * // => true
       *
       * _.isNumber('8.4');
       * // => false
       */
      function isNumber(value) {
        return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
      }

      /**
       * Checks if `value` is a plain object, that is, an object created by the
       * `Object` constructor or one with a `[[Prototype]]` of `null`.
       *
       * **Note:** This method assumes objects created by the `Object` constructor
       * have no inherited enumerable properties.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * _.isPlainObject(new Foo);
       * // => false
       *
       * _.isPlainObject([1, 2, 3]);
       * // => false
       *
       * _.isPlainObject({ 'x': 0, 'y': 0 });
       * // => true
       *
       * _.isPlainObject(Object.create(null));
       * // => true
       */
      function isPlainObject(value) {
        var Ctor;

        // Exit early for non `Object` objects.
        if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
            (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
          return false;
        }
        // IE < 9 iterates inherited properties before own properties. If the first
        // iterated property is an object's own property then there are no inherited
        // enumerable properties.
        var result;
        // In most environments an object's own properties are iterated before
        // its inherited properties. If the last iterated property is an object's
        // own property then there are no inherited enumerable properties.
        baseForIn(value, function(subValue, key) {
          result = key;
        });
        return result === undefined || hasOwnProperty.call(value, result);
      }

      /**
       * Checks if `value` is classified as a `RegExp` object.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
       * @example
       *
       * _.isRegExp(/abc/);
       * // => true
       *
       * _.isRegExp('/abc/');
       * // => false
       */
      function isRegExp(value) {
        return isObject(value) && objToString.call(value) == regexpTag;
      }

      /**
       * Checks if `value` is classified as a `String` primitive or object.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
       * @example
       *
       * _.isString('abc');
       * // => true
       *
       * _.isString(1);
       * // => false
       */
      function isString(value) {
        return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
      }

      /**
       * Checks if `value` is classified as a typed array.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
       * @example
       *
       * _.isTypedArray(new Uint8Array);
       * // => true
       *
       * _.isTypedArray([]);
       * // => false
       */
      function isTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
      }

      /**
       * Checks if `value` is `undefined`.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
       * @example
       *
       * _.isUndefined(void 0);
       * // => true
       *
       * _.isUndefined(null);
       * // => false
       */
      function isUndefined(value) {
        return value === undefined;
      }

      /**
       * Checks if `value` is less than `other`.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
       * @example
       *
       * _.lt(1, 3);
       * // => true
       *
       * _.lt(3, 3);
       * // => false
       *
       * _.lt(3, 1);
       * // => false
       */
      function lt(value, other) {
        return value < other;
      }

      /**
       * Checks if `value` is less than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
       * @example
       *
       * _.lte(1, 3);
       * // => true
       *
       * _.lte(3, 3);
       * // => true
       *
       * _.lte(3, 1);
       * // => false
       */
      function lte(value, other) {
        return value <= other;
      }

      /**
       * Converts `value` to an array.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Array} Returns the converted array.
       * @example
       *
       * (function() {
       *   return _.toArray(arguments).slice(1);
       * }(1, 2, 3));
       * // => [2, 3]
       */
      function toArray(value) {
        var length = value ? getLength(value) : 0;
        if (!isLength(length)) {
          return values(value);
        }
        if (!length) {
          return [];
        }
        return arrayCopy(value);
      }

      /**
       * Converts `value` to a plain object flattening inherited enumerable
       * properties of `value` to own properties of the plain object.
       *
       * @static
       * @memberOf _
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Object} Returns the converted plain object.
       * @example
       *
       * function Foo() {
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.assign({ 'a': 1 }, new Foo);
       * // => { 'a': 1, 'b': 2 }
       *
       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
       * // => { 'a': 1, 'b': 2, 'c': 3 }
       */
      function toPlainObject(value) {
        return baseCopy(value, keysIn(value));
      }

      /*------------------------------------------------------------------------*/

      /**
       * Recursively merges own enumerable properties of the source object(s), that
       * don't resolve to `undefined` into the destination object. Subsequent sources
       * overwrite property assignments of previous sources. If `customizer` is
       * provided it is invoked to produce the merged values of the destination and
       * source properties. If `customizer` returns `undefined` merging is handled
       * by the method instead. The `customizer` is bound to `thisArg` and invoked
       * with five arguments: (objectValue, sourceValue, key, object, source).
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @param {*} [thisArg] The `this` binding of `customizer`.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var users = {
       *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
       * };
       *
       * var ages = {
       *   'data': [{ 'age': 36 }, { 'age': 40 }]
       * };
       *
       * _.merge(users, ages);
       * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
       *
       * // using a customizer callback
       * var object = {
       *   'fruits': ['apple'],
       *   'vegetables': ['beet']
       * };
       *
       * var other = {
       *   'fruits': ['banana'],
       *   'vegetables': ['carrot']
       * };
       *
       * _.merge(object, other, function(a, b) {
       *   if (_.isArray(a)) {
       *     return a.concat(b);
       *   }
       * });
       * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
       */
      var merge = createAssigner(baseMerge);

      /**
       * Assigns own enumerable properties of source object(s) to the destination
       * object. Subsequent sources overwrite property assignments of previous sources.
       * If `customizer` is provided it is invoked to produce the assigned values.
       * The `customizer` is bound to `thisArg` and invoked with five arguments:
       * (objectValue, sourceValue, key, object, source).
       *
       * **Note:** This method mutates `object` and is based on
       * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
       *
       * @static
       * @memberOf _
       * @alias extend
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @param {*} [thisArg] The `this` binding of `customizer`.
       * @returns {Object} Returns `object`.
       * @example
       *
       * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
       * // => { 'user': 'fred', 'age': 40 }
       *
       * // using a customizer callback
       * var defaults = _.partialRight(_.assign, function(value, other) {
       *   return _.isUndefined(value) ? other : value;
       * });
       *
       * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
       * // => { 'user': 'barney', 'age': 36 }
       */
      var assign = createAssigner(function(object, source, customizer) {
        return customizer
          ? assignWith(object, source, customizer)
          : baseAssign(object, source);
      });

      /**
       * Creates an object that inherits from the given `prototype` object. If a
       * `properties` object is provided its own enumerable properties are assigned
       * to the created object.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} prototype The object to inherit from.
       * @param {Object} [properties] The properties to assign to the object.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
       * @returns {Object} Returns the new object.
       * @example
       *
       * function Shape() {
       *   this.x = 0;
       *   this.y = 0;
       * }
       *
       * function Circle() {
       *   Shape.call(this);
       * }
       *
       * Circle.prototype = _.create(Shape.prototype, {
       *   'constructor': Circle
       * });
       *
       * var circle = new Circle;
       * circle instanceof Circle;
       * // => true
       *
       * circle instanceof Shape;
       * // => true
       */
      function create(prototype, properties, guard) {
        var result = baseCreate(prototype);
        if (guard && isIterateeCall(prototype, properties, guard)) {
          properties = undefined;
        }
        return properties ? baseAssign(result, properties) : result;
      }

      /**
       * Assigns own enumerable properties of source object(s) to the destination
       * object for all destination properties that resolve to `undefined`. Once a
       * property is set, additional values of the same property are ignored.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @example
       *
       * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
       * // => { 'user': 'barney', 'age': 36 }
       */
      var defaults = createDefaults(assign, assignDefaults);

      /**
       * This method is like `_.defaults` except that it recursively assigns
       * default properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @example
       *
       * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
       * // => { 'user': { 'name': 'barney', 'age': 36 } }
       *
       */
      var defaultsDeep = createDefaults(merge, mergeDefaults);

      /**
       * This method is like `_.find` except that it returns the key of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * If a property name is provided for `predicate` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `predicate` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The object to search.
       * @param {Function|Object|string} [predicate=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `predicate`.
       * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findKey(users, function(chr) {
       *   return chr.age < 40;
       * });
       * // => 'barney' (iteration order is not guaranteed)
       *
       * // using the `_.matches` callback shorthand
       * _.findKey(users, { 'age': 1, 'active': true });
       * // => 'pebbles'
       *
       * // using the `_.matchesProperty` callback shorthand
       * _.findKey(users, 'active', false);
       * // => 'fred'
       *
       * // using the `_.property` callback shorthand
       * _.findKey(users, 'active');
       * // => 'barney'
       */
      var findKey = createFindKey(baseForOwn);

      /**
       * This method is like `_.findKey` except that it iterates over elements of
       * a collection in the opposite order.
       *
       * If a property name is provided for `predicate` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `predicate` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The object to search.
       * @param {Function|Object|string} [predicate=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `predicate`.
       * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findLastKey(users, function(chr) {
       *   return chr.age < 40;
       * });
       * // => returns `pebbles` assuming `_.findKey` returns `barney`
       *
       * // using the `_.matches` callback shorthand
       * _.findLastKey(users, { 'age': 36, 'active': true });
       * // => 'barney'
       *
       * // using the `_.matchesProperty` callback shorthand
       * _.findLastKey(users, 'active', false);
       * // => 'fred'
       *
       * // using the `_.property` callback shorthand
       * _.findLastKey(users, 'active');
       * // => 'pebbles'
       */
      var findLastKey = createFindKey(baseForOwnRight);

      /**
       * Iterates over own and inherited enumerable properties of an object invoking
       * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
       * with three arguments: (value, key, object). Iteratee functions may exit
       * iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {Object} Returns `object`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forIn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
       */
      var forIn = createForIn(baseFor);

      /**
       * This method is like `_.forIn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {Object} Returns `object`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forInRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
       */
      var forInRight = createForIn(baseForRight);

      /**
       * Iterates over own enumerable properties of an object invoking `iteratee`
       * for each property. The `iteratee` is bound to `thisArg` and invoked with
       * three arguments: (value, key, object). Iteratee functions may exit iteration
       * early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {Object} Returns `object`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => logs 'a' and 'b' (iteration order is not guaranteed)
       */
      var forOwn = createForOwn(baseForOwn);

      /**
       * This method is like `_.forOwn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {Object} Returns `object`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwnRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
       */
      var forOwnRight = createForOwn(baseForOwnRight);

      /**
       * Creates an array of function property names from all enumerable properties,
       * own and inherited, of `object`.
       *
       * @static
       * @memberOf _
       * @alias methods
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the new array of property names.
       * @example
       *
       * _.functions(_);
       * // => ['after', 'ary', 'assign', ...]
       */
      function functions(object) {
        return baseFunctions(object, keysIn(object));
      }

      /**
       * Gets the property value at `path` of `object`. If the resolved value is
       * `undefined` the `defaultValue` is used in its place.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.get(object, 'a[0].b.c');
       * // => 3
       *
       * _.get(object, ['a', '0', 'b', 'c']);
       * // => 3
       *
       * _.get(object, 'a.b.c', 'default');
       * // => 'default'
       */
      function get(object, path, defaultValue) {
        var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
        return result === undefined ? defaultValue : result;
      }

      /**
       * Checks if `path` is a direct property.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
       * @example
       *
       * var object = { 'a': { 'b': { 'c': 3 } } };
       *
       * _.has(object, 'a');
       * // => true
       *
       * _.has(object, 'a.b.c');
       * // => true
       *
       * _.has(object, ['a', 'b', 'c']);
       * // => true
       */
      function has(object, path) {
        if (object == null) {
          return false;
        }
        var result = hasOwnProperty.call(object, path);
        if (!result && !isKey(path)) {
          path = toPath(path);
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          if (object == null) {
            return false;
          }
          path = last(path);
          result = hasOwnProperty.call(object, path);
        }
        return result || (isLength(object.length) && isIndex(path, object.length) &&
          (isArray(object) || isArguments(object)));
      }

      /**
       * Creates an object composed of the inverted keys and values of `object`.
       * If `object` contains duplicate values, subsequent values overwrite property
       * assignments of previous values unless `multiValue` is `true`.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The object to invert.
       * @param {boolean} [multiValue] Allow multiple values per key.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invert(object);
       * // => { '1': 'c', '2': 'b' }
       *
       * // with `multiValue`
       * _.invert(object, true);
       * // => { '1': ['a', 'c'], '2': ['b'] }
       */
      function invert(object, multiValue, guard) {
        if (guard && isIterateeCall(object, multiValue, guard)) {
          multiValue = undefined;
        }
        var index = -1,
            props = keys(object),
            length = props.length,
            result = {};

        while (++index < length) {
          var key = props[index],
              value = object[key];

          if (multiValue) {
            if (hasOwnProperty.call(result, value)) {
              result[value].push(key);
            } else {
              result[value] = [key];
            }
          }
          else {
            result[value] = key;
          }
        }
        return result;
      }

      /**
       * Creates an array of the own enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects. See the
       * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
       * for more details.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keys(new Foo);
       * // => ['a', 'b'] (iteration order is not guaranteed)
       *
       * _.keys('hi');
       * // => ['0', '1']
       */
      var keys = !nativeKeys ? shimKeys : function(object) {
        var Ctor = object == null ? undefined : object.constructor;
        if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
            (typeof object != 'function' && isArrayLike(object))) {
          return shimKeys(object);
        }
        return isObject(object) ? nativeKeys(object) : [];
      };

      /**
       * Creates an array of the own and inherited enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keysIn(new Foo);
       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
       */
      function keysIn(object) {
        if (object == null) {
          return [];
        }
        if (!isObject(object)) {
          object = Object(object);
        }
        var length = object.length;
        length = (length && isLength(length) &&
          (isArray(object) || isArguments(object)) && length) || 0;

        var Ctor = object.constructor,
            index = -1,
            isProto = typeof Ctor == 'function' && Ctor.prototype === object,
            result = Array(length),
            skipIndexes = length > 0;

        while (++index < length) {
          result[index] = (index + '');
        }
        for (var key in object) {
          if (!(skipIndexes && isIndex(key, length)) &&
              !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * The opposite of `_.mapValues`; this method creates an object with the
       * same values as `object` and keys generated by running each own enumerable
       * property of `object` through `iteratee`.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function|Object|string} [iteratee=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {Object} Returns the new mapped object.
       * @example
       *
       * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
       *   return key + value;
       * });
       * // => { 'a1': 1, 'b2': 2 }
       */
      var mapKeys = createObjectMapper(true);

      /**
       * Creates an object with the same keys as `object` and values generated by
       * running each own enumerable property of `object` through `iteratee`. The
       * iteratee function is bound to `thisArg` and invoked with three arguments:
       * (value, key, object).
       *
       * If a property name is provided for `iteratee` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `iteratee` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function|Object|string} [iteratee=_.identity] The function invoked
       *  per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {Object} Returns the new mapped object.
       * @example
       *
       * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
       *   return n * 3;
       * });
       * // => { 'a': 3, 'b': 6 }
       *
       * var users = {
       *   'fred':    { 'user': 'fred',    'age': 40 },
       *   'pebbles': { 'user': 'pebbles', 'age': 1 }
       * };
       *
       * // using the `_.property` callback shorthand
       * _.mapValues(users, 'age');
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       */
      var mapValues = createObjectMapper();

      /**
       * The opposite of `_.pick`; this method creates an object composed of the
       * own and inherited enumerable properties of `object` that are not omitted.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {Function|...(string|string[])} [predicate] The function invoked per
       *  iteration or property names to omit, specified as individual property
       *  names or arrays of property names.
       * @param {*} [thisArg] The `this` binding of `predicate`.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'user': 'fred', 'age': 40 };
       *
       * _.omit(object, 'age');
       * // => { 'user': 'fred' }
       *
       * _.omit(object, _.isNumber);
       * // => { 'user': 'fred' }
       */
      var omit = restParam(function(object, props) {
        if (object == null) {
          return {};
        }
        if (typeof props[0] != 'function') {
          var props = arrayMap(baseFlatten(props), String);
          return pickByArray(object, baseDifference(keysIn(object), props));
        }
        var predicate = bindCallback(props[0], props[1], 3);
        return pickByCallback(object, function(value, key, object) {
          return !predicate(value, key, object);
        });
      });

      /**
       * Creates a two dimensional array of the key-value pairs for `object`,
       * e.g. `[[key1, value1], [key2, value2]]`.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the new array of key-value pairs.
       * @example
       *
       * _.pairs({ 'barney': 36, 'fred': 40 });
       * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
       */
      function pairs(object) {
        object = toObject(object);

        var index = -1,
            props = keys(object),
            length = props.length,
            result = Array(length);

        while (++index < length) {
          var key = props[index];
          result[index] = [key, object[key]];
        }
        return result;
      }

      /**
       * Creates an object composed of the picked `object` properties. Property
       * names may be specified as individual arguments or as arrays of property
       * names. If `predicate` is provided it is invoked for each property of `object`
       * picking the properties `predicate` returns truthy for. The predicate is
       * bound to `thisArg` and invoked with three arguments: (value, key, object).
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {Function|...(string|string[])} [predicate] The function invoked per
       *  iteration or property names to pick, specified as individual property
       *  names or arrays of property names.
       * @param {*} [thisArg] The `this` binding of `predicate`.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'user': 'fred', 'age': 40 };
       *
       * _.pick(object, 'user');
       * // => { 'user': 'fred' }
       *
       * _.pick(object, _.isString);
       * // => { 'user': 'fred' }
       */
      var pick = restParam(function(object, props) {
        if (object == null) {
          return {};
        }
        return typeof props[0] == 'function'
          ? pickByCallback(object, bindCallback(props[0], props[1], 3))
          : pickByArray(object, baseFlatten(props));
      });

      /**
       * This method is like `_.get` except that if the resolved value is a function
       * it is invoked with the `this` binding of its parent object and its result
       * is returned.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to resolve.
       * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
       *
       * _.result(object, 'a[0].b.c1');
       * // => 3
       *
       * _.result(object, 'a[0].b.c2');
       * // => 4
       *
       * _.result(object, 'a.b.c', 'default');
       * // => 'default'
       *
       * _.result(object, 'a.b.c', _.constant('default'));
       * // => 'default'
       */
      function result(object, path, defaultValue) {
        var result = object == null ? undefined : object[path];
        if (result === undefined) {
          if (object != null && !isKey(path, object)) {
            path = toPath(path);
            object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
            result = object == null ? undefined : object[last(path)];
          }
          result = result === undefined ? defaultValue : result;
        }
        return isFunction(result) ? result.call(object) : result;
      }

      /**
       * Sets the property value of `path` on `object`. If a portion of `path`
       * does not exist it is created.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The object to augment.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.set(object, 'a[0].b.c', 4);
       * console.log(object.a[0].b.c);
       * // => 4
       *
       * _.set(object, 'x[0].y.z', 5);
       * console.log(object.x[0].y.z);
       * // => 5
       */
      function set(object, path, value) {
        if (object == null) {
          return object;
        }
        var pathKey = (path + '');
        path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

        var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;

        while (nested != null && ++index < length) {
          var key = path[index];
          if (isObject(nested)) {
            if (index == lastIndex) {
              nested[key] = value;
            } else if (nested[key] == null) {
              nested[key] = isIndex(path[index + 1]) ? [] : {};
            }
          }
          nested = nested[key];
        }
        return object;
      }

      /**
       * An alternative to `_.reduce`; this method transforms `object` to a new
       * `accumulator` object which is the result of running each of its own enumerable
       * properties through `iteratee`, with each invocation potentially mutating
       * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
       * with four arguments: (accumulator, value, key, object). Iteratee functions
       * may exit iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Array|Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The custom accumulator value.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {*} Returns the accumulated value.
       * @example
       *
       * _.transform([2, 3, 4], function(result, n) {
       *   result.push(n *= n);
       *   return n % 2 == 0;
       * });
       * // => [4, 9]
       *
       * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
       *   result[key] = n * 3;
       * });
       * // => { 'a': 3, 'b': 6 }
       */
      function transform(object, iteratee, accumulator, thisArg) {
        var isArr = isArray(object) || isTypedArray(object);
        iteratee = getCallback(iteratee, thisArg, 4);

        if (accumulator == null) {
          if (isArr || isObject(object)) {
            var Ctor = object.constructor;
            if (isArr) {
              accumulator = isArray(object) ? new Ctor : [];
            } else {
              accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
            }
          } else {
            accumulator = {};
          }
        }
        (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
          return iteratee(accumulator, value, index, object);
        });
        return accumulator;
      }

      /**
       * Creates an array of the own enumerable property values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.values(new Foo);
       * // => [1, 2] (iteration order is not guaranteed)
       *
       * _.values('hi');
       * // => ['h', 'i']
       */
      function values(object) {
        return baseValues(object, keys(object));
      }

      /**
       * Creates an array of the own and inherited enumerable property values
       * of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.valuesIn(new Foo);
       * // => [1, 2, 3] (iteration order is not guaranteed)
       */
      function valuesIn(object) {
        return baseValues(object, keysIn(object));
      }

      /*------------------------------------------------------------------------*/

      /**
       * Checks if `n` is between `start` and up to but not including, `end`. If
       * `end` is not specified it is set to `start` with `start` then set to `0`.
       *
       * @static
       * @memberOf _
       * @category Number
       * @param {number} n The number to check.
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
       * @example
       *
       * _.inRange(3, 2, 4);
       * // => true
       *
       * _.inRange(4, 8);
       * // => true
       *
       * _.inRange(4, 2);
       * // => false
       *
       * _.inRange(2, 2);
       * // => false
       *
       * _.inRange(1.2, 2);
       * // => true
       *
       * _.inRange(5.2, 4);
       * // => false
       */
      function inRange(value, start, end) {
        start = +start || 0;
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = +end || 0;
        }
        return value >= nativeMin(start, end) && value < nativeMax(start, end);
      }

      /**
       * Produces a random number between `min` and `max` (inclusive). If only one
       * argument is provided a number between `0` and the given number is returned.
       * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
       * number is returned instead of an integer.
       *
       * @static
       * @memberOf _
       * @category Number
       * @param {number} [min=0] The minimum possible value.
       * @param {number} [max=1] The maximum possible value.
       * @param {boolean} [floating] Specify returning a floating-point number.
       * @returns {number} Returns the random number.
       * @example
       *
       * _.random(0, 5);
       * // => an integer between 0 and 5
       *
       * _.random(5);
       * // => also an integer between 0 and 5
       *
       * _.random(5, true);
       * // => a floating-point number between 0 and 5
       *
       * _.random(1.2, 5.2);
       * // => a floating-point number between 1.2 and 5.2
       */
      function random(min, max, floating) {
        if (floating && isIterateeCall(min, max, floating)) {
          max = floating = undefined;
        }
        var noMin = min == null,
            noMax = max == null;

        if (floating == null) {
          if (noMax && typeof min == 'boolean') {
            floating = min;
            min = 1;
          }
          else if (typeof max == 'boolean') {
            floating = max;
            noMax = true;
          }
        }
        if (noMin && noMax) {
          max = 1;
          noMax = false;
        }
        min = +min || 0;
        if (noMax) {
          max = min;
          min = 0;
        } else {
          max = +max || 0;
        }
        if (floating || min % 1 || max % 1) {
          var rand = nativeRandom();
          return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
        }
        return baseRandom(min, max);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the camel cased string.
       * @example
       *
       * _.camelCase('Foo Bar');
       * // => 'fooBar'
       *
       * _.camelCase('--foo-bar');
       * // => 'fooBar'
       *
       * _.camelCase('__foo_bar__');
       * // => 'fooBar'
       */
      var camelCase = createCompounder(function(result, word, index) {
        word = word.toLowerCase();
        return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
      });

      /**
       * Capitalizes the first character of `string`.
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to capitalize.
       * @returns {string} Returns the capitalized string.
       * @example
       *
       * _.capitalize('fred');
       * // => 'Fred'
       */
      function capitalize(string) {
        string = baseToString(string);
        return string && (string.charAt(0).toUpperCase() + string.slice(1));
      }

      /**
       * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
       * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to deburr.
       * @returns {string} Returns the deburred string.
       * @example
       *
       * _.deburr('déjà vu');
       * // => 'deja vu'
       */
      function deburr(string) {
        string = baseToString(string);
        return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
      }

      /**
       * Checks if `string` ends with the given target string.
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to search.
       * @param {string} [target] The string to search for.
       * @param {number} [position=string.length] The position to search from.
       * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
       * @example
       *
       * _.endsWith('abc', 'c');
       * // => true
       *
       * _.endsWith('abc', 'b');
       * // => false
       *
       * _.endsWith('abc', 'b', 2);
       * // => true
       */
      function endsWith(string, target, position) {
        string = baseToString(string);
        target = (target + '');

        var length = string.length;
        position = position === undefined
          ? length
          : nativeMin(position < 0 ? 0 : (+position || 0), length);

        position -= target.length;
        return position >= 0 && string.indexOf(target, position) == position;
      }

      /**
       * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
       * their corresponding HTML entities.
       *
       * **Note:** No other characters are escaped. To escape additional characters
       * use a third-party library like [_he_](https://mths.be/he).
       *
       * Though the ">" character is escaped for symmetry, characters like
       * ">" and "/" don't need escaping in HTML and have no special meaning
       * unless they're part of a tag or unquoted attribute value.
       * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
       * (under "semi-related fun fact") for more details.
       *
       * Backticks are escaped because in Internet Explorer < 9, they can break out
       * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
       * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
       * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
       * for more details.
       *
       * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
       * to reduce XSS vectors.
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escape('fred, barney, & pebbles');
       * // => 'fred, barney, &amp; pebbles'
       */
      function escape(string) {
        // Reset `lastIndex` because in IE < 9 `String#replace` does not.
        string = baseToString(string);
        return (string && reHasUnescapedHtml.test(string))
          ? string.replace(reUnescapedHtml, escapeHtmlChar)
          : string;
      }

      /**
       * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
       * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escapeRegExp('[lodash](https://lodash.com/)');
       * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
       */
      function escapeRegExp(string) {
        string = baseToString(string);
        return (string && reHasRegExpChars.test(string))
          ? string.replace(reRegExpChars, escapeRegExpChar)
          : (string || '(?:)');
      }

      /**
       * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the kebab cased string.
       * @example
       *
       * _.kebabCase('Foo Bar');
       * // => 'foo-bar'
       *
       * _.kebabCase('fooBar');
       * // => 'foo-bar'
       *
       * _.kebabCase('__foo_bar__');
       * // => 'foo-bar'
       */
      var kebabCase = createCompounder(function(result, word, index) {
        return result + (index ? '-' : '') + word.toLowerCase();
      });

      /**
       * Pads `string` on the left and right sides if it's shorter than `length`.
       * Padding characters are truncated if they can't be evenly divided by `length`.
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.pad('abc', 8);
       * // => '  abc   '
       *
       * _.pad('abc', 8, '_-');
       * // => '_-abc_-_'
       *
       * _.pad('abc', 3);
       * // => 'abc'
       */
      function pad(string, length, chars) {
        string = baseToString(string);
        length = +length;

        var strLength = string.length;
        if (strLength >= length || !nativeIsFinite(length)) {
          return string;
        }
        var mid = (length - strLength) / 2,
            leftLength = nativeFloor(mid),
            rightLength = nativeCeil(mid);

        chars = createPadding('', rightLength, chars);
        return chars.slice(0, leftLength) + string + chars;
      }

      /**
       * Pads `string` on the left side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padLeft('abc', 6);
       * // => '   abc'
       *
       * _.padLeft('abc', 6, '_-');
       * // => '_-_abc'
       *
       * _.padLeft('abc', 3);
       * // => 'abc'
       */
      var padLeft = createPadDir();

      /**
       * Pads `string` on the right side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padRight('abc', 6);
       * // => 'abc   '
       *
       * _.padRight('abc', 6, '_-');
       * // => 'abc_-_'
       *
       * _.padRight('abc', 3);
       * // => 'abc'
       */
      var padRight = createPadDir(true);

      /**
       * Converts `string` to an integer of the specified radix. If `radix` is
       * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
       * in which case a `radix` of `16` is used.
       *
       * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
       * of `parseInt`.
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} string The string to convert.
       * @param {number} [radix] The radix to interpret `value` by.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.parseInt('08');
       * // => 8
       *
       * _.map(['6', '08', '10'], _.parseInt);
       * // => [6, 8, 10]
       */
      function parseInt(string, radix, guard) {
        // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
        // Chrome fails to trim leading <BOM> whitespace characters.
        // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
        if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        string = trim(string);
        return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
      }

      /**
       * Repeats the given string `n` times.
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to repeat.
       * @param {number} [n=0] The number of times to repeat the string.
       * @returns {string} Returns the repeated string.
       * @example
       *
       * _.repeat('*', 3);
       * // => '***'
       *
       * _.repeat('abc', 2);
       * // => 'abcabc'
       *
       * _.repeat('abc', 0);
       * // => ''
       */
      function repeat(string, n) {
        var result = '';
        string = baseToString(string);
        n = +n;
        if (n < 1 || !string || !nativeIsFinite(n)) {
          return result;
        }
        // Leverage the exponentiation by squaring algorithm for a faster repeat.
        // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
        do {
          if (n % 2) {
            result += string;
          }
          n = nativeFloor(n / 2);
          string += string;
        } while (n);

        return result;
      }

      /**
       * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the snake cased string.
       * @example
       *
       * _.snakeCase('Foo Bar');
       * // => 'foo_bar'
       *
       * _.snakeCase('fooBar');
       * // => 'foo_bar'
       *
       * _.snakeCase('--foo-bar');
       * // => 'foo_bar'
       */
      var snakeCase = createCompounder(function(result, word, index) {
        return result + (index ? '_' : '') + word.toLowerCase();
      });

      /**
       * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the start cased string.
       * @example
       *
       * _.startCase('--foo-bar');
       * // => 'Foo Bar'
       *
       * _.startCase('fooBar');
       * // => 'Foo Bar'
       *
       * _.startCase('__foo_bar__');
       * // => 'Foo Bar'
       */
      var startCase = createCompounder(function(result, word, index) {
        return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
      });

      /**
       * Checks if `string` starts with the given target string.
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to search.
       * @param {string} [target] The string to search for.
       * @param {number} [position=0] The position to search from.
       * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
       * @example
       *
       * _.startsWith('abc', 'a');
       * // => true
       *
       * _.startsWith('abc', 'b');
       * // => false
       *
       * _.startsWith('abc', 'b', 1);
       * // => true
       */
      function startsWith(string, target, position) {
        string = baseToString(string);
        position = position == null
          ? 0
          : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

        return string.lastIndexOf(target, position) == position;
      }

      /**
       * Creates a compiled template function that can interpolate data properties
       * in "interpolate" delimiters, HTML-escape interpolated data properties in
       * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
       * properties may be accessed as free variables in the template. If a setting
       * object is provided it takes precedence over `_.templateSettings` values.
       *
       * **Note:** In the development build `_.template` utilizes
       * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
       * for easier debugging.
       *
       * For more information on precompiling templates see
       * [lodash's custom builds documentation](https://lodash.com/custom-builds).
       *
       * For more information on Chrome extension sandboxes see
       * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The template string.
       * @param {Object} [options] The options object.
       * @param {RegExp} [options.escape] The HTML "escape" delimiter.
       * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
       * @param {Object} [options.imports] An object to import into the template as free variables.
       * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
       * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
       * @param {string} [options.variable] The data object variable name.
       * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
       * @returns {Function} Returns the compiled template function.
       * @example
       *
       * // using the "interpolate" delimiter to create a compiled template
       * var compiled = _.template('hello <%= user %>!');
       * compiled({ 'user': 'fred' });
       * // => 'hello fred!'
       *
       * // using the HTML "escape" delimiter to escape data property values
       * var compiled = _.template('<b><%- value %></b>');
       * compiled({ 'value': '<script>' });
       * // => '<b>&lt;script&gt;</b>'
       *
       * // using the "evaluate" delimiter to execute JavaScript and generate HTML
       * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // using the internal `print` function in "evaluate" delimiters
       * var compiled = _.template('<% print("hello " + user); %>!');
       * compiled({ 'user': 'barney' });
       * // => 'hello barney!'
       *
       * // using the ES delimiter as an alternative to the default "interpolate" delimiter
       * var compiled = _.template('hello ${ user }!');
       * compiled({ 'user': 'pebbles' });
       * // => 'hello pebbles!'
       *
       * // using custom template delimiters
       * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
       * var compiled = _.template('hello {{ user }}!');
       * compiled({ 'user': 'mustache' });
       * // => 'hello mustache!'
       *
       * // using backslashes to treat delimiters as plain text
       * var compiled = _.template('<%= "\\<%- value %\\>" %>');
       * compiled({ 'value': 'ignored' });
       * // => '<%- value %>'
       *
       * // using the `imports` option to import `jQuery` as `jq`
       * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
       * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // using the `sourceURL` option to specify a custom sourceURL for the template
       * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
       * compiled(data);
       * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
       *
       * // using the `variable` option to ensure a with-statement isn't used in the compiled template
       * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
       * compiled.source;
       * // => function(data) {
       * //   var __t, __p = '';
       * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
       * //   return __p;
       * // }
       *
       * // using the `source` property to inline compiled templates for meaningful
       * // line numbers in error messages and a stack trace
       * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
       *   var JST = {\
       *     "main": ' + _.template(mainText).source + '\
       *   };\
       * ');
       */
      function template(string, options, otherOptions) {
        // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
        // and Laura Doktorova's doT.js (https://github.com/olado/doT).
        var settings = lodash.templateSettings;

        if (otherOptions && isIterateeCall(string, options, otherOptions)) {
          options = otherOptions = undefined;
        }
        string = baseToString(string);
        options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

        var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
            importsKeys = keys(imports),
            importsValues = baseValues(imports, importsKeys);

        var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";

        // Compile the regexp to match each delimiter.
        var reDelimiters = RegExp(
          (options.escape || reNoMatch).source + '|' +
          interpolate.source + '|' +
          (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
          (options.evaluate || reNoMatch).source + '|$'
        , 'g');

        // Use a sourceURL for easier debugging.
        var sourceURL = '//# sourceURL=' +
          ('sourceURL' in options
            ? options.sourceURL
            : ('lodash.templateSources[' + (++templateCounter) + ']')
          ) + '\n';

        string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);

          // Escape characters that can't be included in string literals.
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

          // Replace delimiters with snippets.
          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }
          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }
          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }
          index = offset + match.length;

          // The JS engine embedded in Adobe products requires returning the `match`
          // string in order to produce the correct `offset` value.
          return match;
        });

        source += "';\n";

        // If `variable` is not specified wrap a with-statement around the generated
        // code to add the data object to the top of the scope chain.
        var variable = options.variable;
        if (!variable) {
          source = 'with (obj) {\n' + source + '\n}\n';
        }
        // Cleanup code by stripping empty strings.
        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
          .replace(reEmptyStringMiddle, '$1')
          .replace(reEmptyStringTrailing, '$1;');

        // Frame code as the function body.
        source = 'function(' + (variable || 'obj') + ') {\n' +
          (variable
            ? ''
            : 'obj || (obj = {});\n'
          ) +
          "var __t, __p = ''" +
          (isEscaping
             ? ', __e = _.escape'
             : ''
          ) +
          (isEvaluating
            ? ', __j = Array.prototype.join;\n' +
              "function print() { __p += __j.call(arguments, '') }\n"
            : ';\n'
          ) +
          source +
          'return __p\n}';

        var result = attempt(function() {
          return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
        });

        // Provide the compiled function's source by its `toString` method or
        // the `source` property as a convenience for inlining compiled templates.
        result.source = source;
        if (isError(result)) {
          throw result;
        }
        return result;
      }

      /**
       * Removes leading and trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trim('  abc  ');
       * // => 'abc'
       *
       * _.trim('-_-abc-_-', '_-');
       * // => 'abc'
       *
       * _.map(['  foo  ', '  bar  '], _.trim);
       * // => ['foo', 'bar']
       */
      function trim(string, chars, guard) {
        var value = string;
        string = baseToString(string);
        if (!string) {
          return string;
        }
        if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
          return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
        }
        chars = (chars + '');
        return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
      }

      /**
       * Removes leading whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimLeft('  abc  ');
       * // => 'abc  '
       *
       * _.trimLeft('-_-abc-_-', '_-');
       * // => 'abc-_-'
       */
      function trimLeft(string, chars, guard) {
        var value = string;
        string = baseToString(string);
        if (!string) {
          return string;
        }
        if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
          return string.slice(trimmedLeftIndex(string));
        }
        return string.slice(charsLeftIndex(string, (chars + '')));
      }

      /**
       * Removes trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimRight('  abc  ');
       * // => '  abc'
       *
       * _.trimRight('-_-abc-_-', '_-');
       * // => '-_-abc'
       */
      function trimRight(string, chars, guard) {
        var value = string;
        string = baseToString(string);
        if (!string) {
          return string;
        }
        if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
          return string.slice(0, trimmedRightIndex(string) + 1);
        }
        return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
      }

      /**
       * Truncates `string` if it's longer than the given maximum string length.
       * The last characters of the truncated string are replaced with the omission
       * string which defaults to "...".
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to truncate.
       * @param {Object|number} [options] The options object or maximum string length.
       * @param {number} [options.length=30] The maximum string length.
       * @param {string} [options.omission='...'] The string to indicate text is omitted.
       * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
       * @returns {string} Returns the truncated string.
       * @example
       *
       * _.trunc('hi-diddly-ho there, neighborino');
       * // => 'hi-diddly-ho there, neighbo...'
       *
       * _.trunc('hi-diddly-ho there, neighborino', 24);
       * // => 'hi-diddly-ho there, n...'
       *
       * _.trunc('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': ' '
       * });
       * // => 'hi-diddly-ho there,...'
       *
       * _.trunc('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': /,? +/
       * });
       * // => 'hi-diddly-ho there...'
       *
       * _.trunc('hi-diddly-ho there, neighborino', {
       *   'omission': ' [...]'
       * });
       * // => 'hi-diddly-ho there, neig [...]'
       */
      function trunc(string, options, guard) {
        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined;
        }
        var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;

        if (options != null) {
          if (isObject(options)) {
            var separator = 'separator' in options ? options.separator : separator;
            length = 'length' in options ? (+options.length || 0) : length;
            omission = 'omission' in options ? baseToString(options.omission) : omission;
          } else {
            length = +options || 0;
          }
        }
        string = baseToString(string);
        if (length >= string.length) {
          return string;
        }
        var end = length - omission.length;
        if (end < 1) {
          return omission;
        }
        var result = string.slice(0, end);
        if (separator == null) {
          return result + omission;
        }
        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match,
                newEnd,
                substring = string.slice(0, end);

            if (!separator.global) {
              separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
            }
            separator.lastIndex = 0;
            while ((match = separator.exec(substring))) {
              newEnd = match.index;
            }
            result = result.slice(0, newEnd == null ? end : newEnd);
          }
        } else if (string.indexOf(separator, end) != end) {
          var index = result.lastIndexOf(separator);
          if (index > -1) {
            result = result.slice(0, index);
          }
        }
        return result + omission;
      }

      /**
       * The inverse of `_.escape`; this method converts the HTML entities
       * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
       * corresponding characters.
       *
       * **Note:** No other HTML entities are unescaped. To unescape additional HTML
       * entities use a third-party library like [_he_](https://mths.be/he).
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to unescape.
       * @returns {string} Returns the unescaped string.
       * @example
       *
       * _.unescape('fred, barney, &amp; pebbles');
       * // => 'fred, barney, & pebbles'
       */
      function unescape(string) {
        string = baseToString(string);
        return (string && reHasEscapedHtml.test(string))
          ? string.replace(reEscapedHtml, unescapeHtmlChar)
          : string;
      }

      /**
       * Splits `string` into an array of its words.
       *
       * @static
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {RegExp|string} [pattern] The pattern to match words.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
       * @returns {Array} Returns the words of `string`.
       * @example
       *
       * _.words('fred, barney, & pebbles');
       * // => ['fred', 'barney', 'pebbles']
       *
       * _.words('fred, barney, & pebbles', /[^, ]+/g);
       * // => ['fred', 'barney', '&', 'pebbles']
       */
      function words(string, pattern, guard) {
        if (guard && isIterateeCall(string, pattern, guard)) {
          pattern = undefined;
        }
        string = baseToString(string);
        return string.match(pattern || reWords) || [];
      }

      /*------------------------------------------------------------------------*/

      /**
       * Attempts to invoke `func`, returning either the result or the caught error
       * object. Any additional arguments are provided to `func` when it is invoked.
       *
       * @static
       * @memberOf _
       * @category Utility
       * @param {Function} func The function to attempt.
       * @returns {*} Returns the `func` result or error object.
       * @example
       *
       * // avoid throwing errors for invalid selectors
       * var elements = _.attempt(function(selector) {
       *   return document.querySelectorAll(selector);
       * }, '>_>');
       *
       * if (_.isError(elements)) {
       *   elements = [];
       * }
       */
      var attempt = restParam(function(func, args) {
        try {
          return func.apply(undefined, args);
        } catch(e) {
          return isError(e) ? e : new Error(e);
        }
      });

      /**
       * Creates a function that invokes `func` with the `this` binding of `thisArg`
       * and arguments of the created function. If `func` is a property name the
       * created callback returns the property value for a given element. If `func`
       * is an object the created callback returns `true` for elements that contain
       * the equivalent object properties, otherwise it returns `false`.
       *
       * @static
       * @memberOf _
       * @alias iteratee
       * @category Utility
       * @param {*} [func=_.identity] The value to convert to a callback.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
       * @returns {Function} Returns the callback.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 }
       * ];
       *
       * // wrap to create custom callback shorthands
       * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
       *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
       *   if (!match) {
       *     return callback(func, thisArg);
       *   }
       *   return function(object) {
       *     return match[2] == 'gt'
       *       ? object[match[1]] > match[3]
       *       : object[match[1]] < match[3];
       *   };
       * });
       *
       * _.filter(users, 'age__gt36');
       * // => [{ 'user': 'fred', 'age': 40 }]
       */
      function callback(func, thisArg, guard) {
        if (guard && isIterateeCall(func, thisArg, guard)) {
          thisArg = undefined;
        }
        return isObjectLike(func)
          ? matches(func)
          : baseCallback(func, thisArg);
      }

      /**
       * Creates a function that returns `value`.
       *
       * @static
       * @memberOf _
       * @category Utility
       * @param {*} value The value to return from the new function.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var object = { 'user': 'fred' };
       * var getter = _.constant(object);
       *
       * getter() === object;
       * // => true
       */
      function constant(value) {
        return function() {
          return value;
        };
      }

      /**
       * This method returns the first argument provided to it.
       *
       * @static
       * @memberOf _
       * @category Utility
       * @param {*} value Any value.
       * @returns {*} Returns `value`.
       * @example
       *
       * var object = { 'user': 'fred' };
       *
       * _.identity(object) === object;
       * // => true
       */
      function identity(value) {
        return value;
      }

      /**
       * Creates a function that performs a deep comparison between a given object
       * and `source`, returning `true` if the given object has equivalent property
       * values, else `false`.
       *
       * **Note:** This method supports comparing arrays, booleans, `Date` objects,
       * numbers, `Object` objects, regexes, and strings. Objects are compared by
       * their own, not inherited, enumerable properties. For comparing a single
       * own or inherited property value see `_.matchesProperty`.
       *
       * @static
       * @memberOf _
       * @category Utility
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * _.filter(users, _.matches({ 'age': 40, 'active': false }));
       * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
       */
      function matches(source) {
        return baseMatches(baseClone(source, true));
      }

      /**
       * Creates a function that compares the property value of `path` on a given
       * object to `value`.
       *
       * **Note:** This method supports comparing arrays, booleans, `Date` objects,
       * numbers, `Object` objects, regexes, and strings. Objects are compared by
       * their own, not inherited, enumerable properties.
       *
       * @static
       * @memberOf _
       * @category Utility
       * @param {Array|string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var users = [
       *   { 'user': 'barney' },
       *   { 'user': 'fred' }
       * ];
       *
       * _.find(users, _.matchesProperty('user', 'fred'));
       * // => { 'user': 'fred' }
       */
      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, true));
      }

      /**
       * Creates a function that invokes the method at `path` on a given object.
       * Any additional arguments are provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @category Utility
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': { 'c': _.constant(2) } } },
       *   { 'a': { 'b': { 'c': _.constant(1) } } }
       * ];
       *
       * _.map(objects, _.method('a.b.c'));
       * // => [2, 1]
       *
       * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
       * // => [1, 2]
       */
      var method = restParam(function(path, args) {
        return function(object) {
          return invokePath(object, path, args);
        };
      });

      /**
       * The opposite of `_.method`; this method creates a function that invokes
       * the method at a given path on `object`. Any additional arguments are
       * provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @category Utility
       * @param {Object} object The object to query.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var array = _.times(3, _.constant),
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.methodOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
       * // => [2, 0]
       */
      var methodOf = restParam(function(object, args) {
        return function(path) {
          return invokePath(object, path, args);
        };
      });

      /**
       * Adds all own enumerable function properties of a source object to the
       * destination object. If `object` is a function then methods are added to
       * its prototype as well.
       *
       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
       * avoid conflicts caused by modifying the original.
       *
       * @static
       * @memberOf _
       * @category Utility
       * @param {Function|Object} [object=lodash] The destination object.
       * @param {Object} source The object of functions to add.
       * @param {Object} [options] The options object.
       * @param {boolean} [options.chain=true] Specify whether the functions added
       *  are chainable.
       * @returns {Function|Object} Returns `object`.
       * @example
       *
       * function vowels(string) {
       *   return _.filter(string, function(v) {
       *     return /[aeiou]/i.test(v);
       *   });
       * }
       *
       * _.mixin({ 'vowels': vowels });
       * _.vowels('fred');
       * // => ['e']
       *
       * _('fred').vowels().value();
       * // => ['e']
       *
       * _.mixin({ 'vowels': vowels }, { 'chain': false });
       * _('fred').vowels();
       * // => ['e']
       */
      function mixin(object, source, options) {
        if (options == null) {
          var isObj = isObject(source),
              props = isObj ? keys(source) : undefined,
              methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

          if (!(methodNames ? methodNames.length : isObj)) {
            methodNames = false;
            options = source;
            source = object;
            object = this;
          }
        }
        if (!methodNames) {
          methodNames = baseFunctions(source, keys(source));
        }
        var chain = true,
            index = -1,
            isFunc = isFunction(object),
            length = methodNames.length;

        if (options === false) {
          chain = false;
        } else if (isObject(options) && 'chain' in options) {
          chain = options.chain;
        }
        while (++index < length) {
          var methodName = methodNames[index],
              func = source[methodName];

          object[methodName] = func;
          if (isFunc) {
            object.prototype[methodName] = (function(func) {
              return function() {
                var chainAll = this.__chain__;
                if (chain || chainAll) {
                  var result = object(this.__wrapped__),
                      actions = result.__actions__ = arrayCopy(this.__actions__);

                  actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                  result.__chain__ = chainAll;
                  return result;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }(func));
          }
        }
        return object;
      }

      /**
       * Reverts the `_` variable to its previous value and returns a reference to
       * the `lodash` function.
       *
       * @static
       * @memberOf _
       * @category Utility
       * @returns {Function} Returns the `lodash` function.
       * @example
       *
       * var lodash = _.noConflict();
       */
      function noConflict() {
        root._ = oldDash;
        return this;
      }

      /**
       * A no-operation function that returns `undefined` regardless of the
       * arguments it receives.
       *
       * @static
       * @memberOf _
       * @category Utility
       * @example
       *
       * var object = { 'user': 'fred' };
       *
       * _.noop(object) === undefined;
       * // => true
       */
      function noop() {
        // No operation performed.
      }

      /**
       * Creates a function that returns the property value at `path` on a
       * given object.
       *
       * @static
       * @memberOf _
       * @category Utility
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': { 'c': 2 } } },
       *   { 'a': { 'b': { 'c': 1 } } }
       * ];
       *
       * _.map(objects, _.property('a.b.c'));
       * // => [2, 1]
       *
       * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
       * // => [1, 2]
       */
      function property(path) {
        return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
      }

      /**
       * The opposite of `_.property`; this method creates a function that returns
       * the property value at a given path on `object`.
       *
       * @static
       * @memberOf _
       * @category Utility
       * @param {Object} object The object to query.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var array = [0, 1, 2],
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
       * // => [2, 0]
       */
      function propertyOf(object) {
        return function(path) {
          return baseGet(object, toPath(path), path + '');
        };
      }

      /**
       * Creates an array of numbers (positive and/or negative) progressing from
       * `start` up to, but not including, `end`. If `end` is not specified it is
       * set to `start` with `start` then set to `0`. If `end` is less than `start`
       * a zero-length range is created unless a negative `step` is specified.
       *
       * @static
       * @memberOf _
       * @category Utility
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the new array of numbers.
       * @example
       *
       * _.range(4);
       * // => [0, 1, 2, 3]
       *
       * _.range(1, 5);
       * // => [1, 2, 3, 4]
       *
       * _.range(0, 20, 5);
       * // => [0, 5, 10, 15]
       *
       * _.range(0, -4, -1);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.range(0);
       * // => []
       */
      function range(start, end, step) {
        if (step && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        start = +start || 0;
        step = step == null ? 1 : (+step || 0);

        if (end == null) {
          end = start;
          start = 0;
        } else {
          end = +end || 0;
        }
        // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
        // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
        var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result = Array(length);

        while (++index < length) {
          result[index] = start;
          start += step;
        }
        return result;
      }

      /**
       * Invokes the iteratee function `n` times, returning an array of the results
       * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
       * one argument; (index).
       *
       * @static
       * @memberOf _
       * @category Utility
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
       * // => [3, 6, 4]
       *
       * _.times(3, function(n) {
       *   mage.castSpell(n);
       * });
       * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
       *
       * _.times(3, function(n) {
       *   this.cast(n);
       * }, mage);
       * // => also invokes `mage.castSpell(n)` three times
       */
      function times(n, iteratee, thisArg) {
        n = nativeFloor(n);

        // Exit early to avoid a JSC JIT bug in Safari 8
        // where `Array(0)` is treated as `Array(1)`.
        if (n < 1 || !nativeIsFinite(n)) {
          return [];
        }
        var index = -1,
            result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

        iteratee = bindCallback(iteratee, thisArg, 1);
        while (++index < n) {
          if (index < MAX_ARRAY_LENGTH) {
            result[index] = iteratee(index);
          } else {
            iteratee(index);
          }
        }
        return result;
      }

      /**
       * Generates a unique ID. If `prefix` is provided the ID is appended to it.
       *
       * @static
       * @memberOf _
       * @category Utility
       * @param {string} [prefix] The value to prefix the ID with.
       * @returns {string} Returns the unique ID.
       * @example
       *
       * _.uniqueId('contact_');
       * // => 'contact_104'
       *
       * _.uniqueId();
       * // => '105'
       */
      function uniqueId(prefix) {
        var id = ++idCounter;
        return baseToString(prefix) + id;
      }

      /*------------------------------------------------------------------------*/

      /**
       * Adds two numbers.
       *
       * @static
       * @memberOf _
       * @category Math
       * @param {number} augend The first number to add.
       * @param {number} addend The second number to add.
       * @returns {number} Returns the sum.
       * @example
       *
       * _.add(6, 4);
       * // => 10
       */
      function add(augend, addend) {
        return (+augend || 0) + (+addend || 0);
      }

      /**
       * Calculates `n` rounded up to `precision`.
       *
       * @static
       * @memberOf _
       * @category Math
       * @param {number} n The number to round up.
       * @param {number} [precision=0] The precision to round up to.
       * @returns {number} Returns the rounded up number.
       * @example
       *
       * _.ceil(4.006);
       * // => 5
       *
       * _.ceil(6.004, 2);
       * // => 6.01
       *
       * _.ceil(6040, -2);
       * // => 6100
       */
      var ceil = createRound('ceil');

      /**
       * Calculates `n` rounded down to `precision`.
       *
       * @static
       * @memberOf _
       * @category Math
       * @param {number} n The number to round down.
       * @param {number} [precision=0] The precision to round down to.
       * @returns {number} Returns the rounded down number.
       * @example
       *
       * _.floor(4.006);
       * // => 4
       *
       * _.floor(0.046, 2);
       * // => 0.04
       *
       * _.floor(4060, -2);
       * // => 4000
       */
      var floor = createRound('floor');

      /**
       * Gets the maximum value of `collection`. If `collection` is empty or falsey
       * `-Infinity` is returned. If an iteratee function is provided it is invoked
       * for each value in `collection` to generate the criterion by which the value
       * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
       * arguments: (value, index, collection).
       *
       * If a property name is provided for `iteratee` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `iteratee` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @category Math
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function|Object|string} [iteratee] The function invoked per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * _.max([4, 2, 8, 6]);
       * // => 8
       *
       * _.max([]);
       * // => -Infinity
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 }
       * ];
       *
       * _.max(users, function(chr) {
       *   return chr.age;
       * });
       * // => { 'user': 'fred', 'age': 40 }
       *
       * // using the `_.property` callback shorthand
       * _.max(users, 'age');
       * // => { 'user': 'fred', 'age': 40 }
       */
      var max = createExtremum(gt, NEGATIVE_INFINITY);

      /**
       * Gets the minimum value of `collection`. If `collection` is empty or falsey
       * `Infinity` is returned. If an iteratee function is provided it is invoked
       * for each value in `collection` to generate the criterion by which the value
       * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
       * arguments: (value, index, collection).
       *
       * If a property name is provided for `iteratee` the created `_.property`
       * style callback returns the property value of the given element.
       *
       * If a value is also provided for `thisArg` the created `_.matchesProperty`
       * style callback returns `true` for elements that have a matching property
       * value, else `false`.
       *
       * If an object is provided for `iteratee` the created `_.matches` style
       * callback returns `true` for elements that have the properties of the given
       * object, else `false`.
       *
       * @static
       * @memberOf _
       * @category Math
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function|Object|string} [iteratee] The function invoked per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * _.min([4, 2, 8, 6]);
       * // => 2
       *
       * _.min([]);
       * // => Infinity
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 }
       * ];
       *
       * _.min(users, function(chr) {
       *   return chr.age;
       * });
       * // => { 'user': 'barney', 'age': 36 }
       *
       * // using the `_.property` callback shorthand
       * _.min(users, 'age');
       * // => { 'user': 'barney', 'age': 36 }
       */
      var min = createExtremum(lt, POSITIVE_INFINITY);

      /**
       * Calculates `n` rounded to `precision`.
       *
       * @static
       * @memberOf _
       * @category Math
       * @param {number} n The number to round.
       * @param {number} [precision=0] The precision to round to.
       * @returns {number} Returns the rounded number.
       * @example
       *
       * _.round(4.006);
       * // => 4
       *
       * _.round(4.006, 2);
       * // => 4.01
       *
       * _.round(4060, -2);
       * // => 4100
       */
      var round = createRound('round');

      /**
       * Gets the sum of the values in `collection`.
       *
       * @static
       * @memberOf _
       * @category Math
       * @param {Array|Object|string} collection The collection to iterate over.
       * @param {Function|Object|string} [iteratee] The function invoked per iteration.
       * @param {*} [thisArg] The `this` binding of `iteratee`.
       * @returns {number} Returns the sum.
       * @example
       *
       * _.sum([4, 6]);
       * // => 10
       *
       * _.sum({ 'a': 4, 'b': 6 });
       * // => 10
       *
       * var objects = [
       *   { 'n': 4 },
       *   { 'n': 6 }
       * ];
       *
       * _.sum(objects, function(object) {
       *   return object.n;
       * });
       * // => 10
       *
       * // using the `_.property` callback shorthand
       * _.sum(objects, 'n');
       * // => 10
       */
      function sum(collection, iteratee, thisArg) {
        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
          iteratee = undefined;
        }
        iteratee = getCallback(iteratee, thisArg, 3);
        return iteratee.length == 1
          ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
          : baseSum(collection, iteratee);
      }

      /*------------------------------------------------------------------------*/

      // Ensure wrappers are instances of `baseLodash`.
      lodash.prototype = baseLodash.prototype;

      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;

      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;

      // Add functions to the `Map` cache.
      MapCache.prototype['delete'] = mapDelete;
      MapCache.prototype.get = mapGet;
      MapCache.prototype.has = mapHas;
      MapCache.prototype.set = mapSet;

      // Add functions to the `Set` cache.
      SetCache.prototype.push = cachePush;

      // Assign cache to `_.memoize`.
      memoize.Cache = MapCache;

      // Add functions that return wrapped values when chaining.
      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.callback = callback;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatten = flatten;
      lodash.flattenDeep = flattenDeep;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.functions = functions;
      lodash.groupBy = groupBy;
      lodash.indexBy = indexBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.invert = invert;
      lodash.invoke = invoke;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.modArgs = modArgs;
      lodash.negate = negate;
      lodash.omit = omit;
      lodash.once = once;
      lodash.pairs = pairs;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pluck = pluck;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.restParam = restParam;
      lodash.set = set;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortByAll = sortByAll;
      lodash.sortByOrder = sortByOrder;
      lodash.spread = spread;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.times = times;
      lodash.toArray = toArray;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.union = union;
      lodash.uniq = uniq;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.where = where;
      lodash.without = without;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipWith = zipWith;

      // Add aliases.
      lodash.backflow = flowRight;
      lodash.collect = map;
      lodash.compose = flowRight;
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.extend = assign;
      lodash.iteratee = callback;
      lodash.methods = functions;
      lodash.object = zipObject;
      lodash.select = filter;
      lodash.tail = rest;
      lodash.unique = uniq;

      // Add functions to `lodash.prototype`.
      mixin(lodash, lodash);

      /*------------------------------------------------------------------------*/

      // Add functions that return unwrapped values when chaining.
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.deburr = deburr;
      lodash.endsWith = endsWith;
      lodash.escape = escape;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.findWhere = findWhere;
      lodash.first = first;
      lodash.floor = floor;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isBoolean = isBoolean;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isError = isError;
      lodash.isFinite = isFinite;
      lodash.isFunction = isFunction;
      lodash.isMatch = isMatch;
      lodash.isNaN = isNaN;
      lodash.isNative = isNative;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isString = isString;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.min = min;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padLeft = padLeft;
      lodash.padRight = padRight;
      lodash.parseInt = parseInt;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.sum = sum;
      lodash.template = template;
      lodash.trim = trim;
      lodash.trimLeft = trimLeft;
      lodash.trimRight = trimRight;
      lodash.trunc = trunc;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.words = words;

      // Add aliases.
      lodash.all = every;
      lodash.any = some;
      lodash.contains = includes;
      lodash.eq = isEqual;
      lodash.detect = find;
      lodash.foldl = reduce;
      lodash.foldr = reduceRight;
      lodash.head = first;
      lodash.include = includes;
      lodash.inject = reduce;

      mixin(lodash, (function() {
        var source = {};
        baseForOwn(lodash, function(func, methodName) {
          if (!lodash.prototype[methodName]) {
            source[methodName] = func;
          }
        });
        return source;
      }()), false);

      /*------------------------------------------------------------------------*/

      // Add functions capable of returning wrapped and unwrapped values when chaining.
      lodash.sample = sample;

      lodash.prototype.sample = function(n) {
        if (!this.__chain__ && n == null) {
          return sample(this.value());
        }
        return this.thru(function(value) {
          return sample(value, n);
        });
      };

      /*------------------------------------------------------------------------*/

      /**
       * The semantic version number.
       *
       * @static
       * @memberOf _
       * @type string
       */
      lodash.VERSION = VERSION;

      // Assign default placeholders.
      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
        lodash[methodName].placeholder = lodash;
      });

      // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
      arrayEach(['drop', 'take'], function(methodName, index) {
        LazyWrapper.prototype[methodName] = function(n) {
          var filtered = this.__filtered__;
          if (filtered && !index) {
            return new LazyWrapper(this);
          }
          n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

          var result = this.clone();
          if (filtered) {
            result.__takeCount__ = nativeMin(result.__takeCount__, n);
          } else {
            result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
          }
          return result;
        };

        LazyWrapper.prototype[methodName + 'Right'] = function(n) {
          return this.reverse()[methodName](n).reverse();
        };
      });

      // Add `LazyWrapper` methods that accept an `iteratee` value.
      arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
        var type = index + 1,
            isFilter = type != LAZY_MAP_FLAG;

        LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
          var result = this.clone();
          result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
          result.__filtered__ = result.__filtered__ || isFilter;
          return result;
        };
      });

      // Add `LazyWrapper` methods for `_.first` and `_.last`.
      arrayEach(['first', 'last'], function(methodName, index) {
        var takeName = 'take' + (index ? 'Right' : '');

        LazyWrapper.prototype[methodName] = function() {
          return this[takeName](1).value()[0];
        };
      });

      // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
      arrayEach(['initial', 'rest'], function(methodName, index) {
        var dropName = 'drop' + (index ? '' : 'Right');

        LazyWrapper.prototype[methodName] = function() {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });

      // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
      arrayEach(['pluck', 'where'], function(methodName, index) {
        var operationName = index ? 'filter' : 'map',
            createCallback = index ? baseMatches : property;

        LazyWrapper.prototype[methodName] = function(value) {
          return this[operationName](createCallback(value));
        };
      });

      LazyWrapper.prototype.compact = function() {
        return this.filter(identity);
      };

      LazyWrapper.prototype.reject = function(predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 1);
        return this.filter(function(value) {
          return !predicate(value);
        });
      };

      LazyWrapper.prototype.slice = function(start, end) {
        start = start == null ? 0 : (+start || 0);

        var result = this;
        if (result.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result);
        }
        if (start < 0) {
          result = result.takeRight(-start);
        } else if (start) {
          result = result.drop(start);
        }
        if (end !== undefined) {
          end = (+end || 0);
          result = end < 0 ? result.dropRight(-end) : result.take(end - start);
        }
        return result;
      };

      LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
        return this.reverse().takeWhile(predicate, thisArg).reverse();
      };

      LazyWrapper.prototype.toArray = function() {
        return this.take(POSITIVE_INFINITY);
      };

      // Add `LazyWrapper` methods to `lodash.prototype`.
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
            retUnwrapped = /^(?:first|last)$/.test(methodName),
            lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

        if (!lodashFunc) {
          return;
        }
        lodash.prototype[methodName] = function() {
          var args = retUnwrapped ? [1] : arguments,
              chainAll = this.__chain__,
              value = this.__wrapped__,
              isHybrid = !!this.__actions__.length,
              isLazy = value instanceof LazyWrapper,
              iteratee = args[0],
              useLazy = isLazy || isArray(value);

          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
            // Avoid lazy use if the iteratee has a "length" value other than `1`.
            isLazy = useLazy = false;
          }
          var interceptor = function(value) {
            return (retUnwrapped && chainAll)
              ? lodashFunc(value, 1)[0]
              : lodashFunc.apply(undefined, arrayPush([value], args));
          };

          var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
              onlyLazy = isLazy && !isHybrid;

          if (retUnwrapped && !chainAll) {
            if (onlyLazy) {
              value = value.clone();
              value.__actions__.push(action);
              return func.call(value);
            }
            return lodashFunc.call(undefined, this.value())[0];
          }
          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result = func.apply(value, args);
            result.__actions__.push(action);
            return new LodashWrapper(result, chainAll);
          }
          return this.thru(interceptor);
        };
      });

      // Add `Array` and `String` methods to `lodash.prototype`.
      arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
        var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
            retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

        lodash.prototype[methodName] = function() {
          var args = arguments;
          if (retUnwrapped && !this.__chain__) {
            return func.apply(this.value(), args);
          }
          return this[chainName](function(value) {
            return func.apply(value, args);
          });
        };
      });

      // Map minified function names to their real names.
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var lodashFunc = lodash[methodName];
        if (lodashFunc) {
          var key = lodashFunc.name,
              names = realNames[key] || (realNames[key] = []);

          names.push({ 'name': methodName, 'func': lodashFunc });
        }
      });

      realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

      // Add functions to the lazy wrapper.
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;

      // Add chaining functions to the `lodash` wrapper.
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.concat = wrapperConcat;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toString = wrapperToString;
      lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

      // Add function aliases to the `lodash` wrapper.
      lodash.prototype.collect = lodash.prototype.map;
      lodash.prototype.head = lodash.prototype.first;
      lodash.prototype.select = lodash.prototype.filter;
      lodash.prototype.tail = lodash.prototype.rest;

      return lodash;
    }

    /*--------------------------------------------------------------------------*/

    // Export lodash.
    var _ = runInContext();

    // Some AMD build optimizers like r.js check for condition patterns like the following:
    if (true) {
      // Expose lodash to the global object when an AMD loader is present to avoid
      // errors in cases where lodash is loaded by a script tag and not intended
      // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
      // more details.
      root._ = _;

      // Define as an anonymous module so, through path mapping, it can be
      // referenced as the "underscore" module.
      !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
        return _;
      }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
    // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
    else if (freeExports && freeModule) {
      // Export for Node.js or RingoJS.
      if (moduleExports) {
        (freeModule.exports = _)._ = _;
      }
      // Export for Rhino with CommonJS support.
      else {
        freeExports._ = _;
      }
    }
    else {
      // Export for a browser or Rhino.
      root._ = _;
    }
  }.call(this));

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(77)(module), (function() { return this; }())))

/***/ },
/* 77 */
/***/ function(module, exports) {

  module.exports = function(module) {
    if(!module.webpackPolyfill) {
      module.deprecate = function() {};
      module.paths = [];
      // module.parent = undefined by default
      module.children = [];
      module.webpackPolyfill = 1;
    }
    return module;
  }


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

  // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
  //
  // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
  //
  // Originally from narwhal.js (http://narwhaljs.org)
  // Copyright (c) 2009 Thomas Robinson <280north.com>
  //
  // Permission is hereby granted, free of charge, to any person obtaining a copy
  // of this software and associated documentation files (the 'Software'), to
  // deal in the Software without restriction, including without limitation the
  // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  // sell copies of the Software, and to permit persons to whom the Software is
  // furnished to do so, subject to the following conditions:
  //
  // The above copyright notice and this permission notice shall be included in
  // all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  // when used in node, this will actually load the util module we depend on
  // versus loading the builtin util module as happens otherwise
  // this is a bug in node module loading as far as I am concerned
  var util = __webpack_require__(79);

  var pSlice = Array.prototype.slice;
  var hasOwn = Object.prototype.hasOwnProperty;

  // 1. The assert module provides functions that throw
  // AssertionError's when particular conditions are not met. The
  // assert module must conform to the following interface.

  var assert = module.exports = ok;

  // 2. The AssertionError is defined in assert.
  // new assert.AssertionError({ message: message,
  //                             actual: actual,
  //                             expected: expected })

  assert.AssertionError = function AssertionError(options) {
    this.name = 'AssertionError';
    this.actual = options.actual;
    this.expected = options.expected;
    this.operator = options.operator;
    if (options.message) {
      this.message = options.message;
      this.generatedMessage = false;
    } else {
      this.message = getMessage(this);
      this.generatedMessage = true;
    }
    var stackStartFunction = options.stackStartFunction || fail;

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, stackStartFunction);
    }
    else {
      // non v8 browsers so we can have a stacktrace
      var err = new Error();
      if (err.stack) {
        var out = err.stack;

        // try to strip useless frames
        var fn_name = stackStartFunction.name;
        var idx = out.indexOf('\n' + fn_name);
        if (idx >= 0) {
          // once we have located the function frame
          // we need to strip out everything before it (and its line)
          var next_line = out.indexOf('\n', idx + 1);
          out = out.substring(next_line + 1);
        }

        this.stack = out;
      }
    }
  };

  // assert.AssertionError instanceof Error
  util.inherits(assert.AssertionError, Error);

  function replacer(key, value) {
    if (util.isUndefined(value)) {
      return '' + value;
    }
    if (util.isNumber(value) && !isFinite(value)) {
      return value.toString();
    }
    if (util.isFunction(value) || util.isRegExp(value)) {
      return value.toString();
    }
    return value;
  }

  function truncate(s, n) {
    if (util.isString(s)) {
      return s.length < n ? s : s.slice(0, n);
    } else {
      return s;
    }
  }

  function getMessage(self) {
    return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
           self.operator + ' ' +
           truncate(JSON.stringify(self.expected, replacer), 128);
  }

  // At present only the three keys mentioned above are used and
  // understood by the spec. Implementations or sub modules can pass
  // other keys to the AssertionError's constructor - they will be
  // ignored.

  // 3. All of the following functions must throw an AssertionError
  // when a corresponding condition is not met, with a message that
  // may be undefined if not provided.  All assertion methods provide
  // both the actual and expected values to the assertion error for
  // display purposes.

  function fail(actual, expected, message, operator, stackStartFunction) {
    throw new assert.AssertionError({
      message: message,
      actual: actual,
      expected: expected,
      operator: operator,
      stackStartFunction: stackStartFunction
    });
  }

  // EXTENSION! allows for well behaved errors defined elsewhere.
  assert.fail = fail;

  // 4. Pure assertion tests whether a value is truthy, as determined
  // by !!guard.
  // assert.ok(guard, message_opt);
  // This statement is equivalent to assert.equal(true, !!guard,
  // message_opt);. To test strictly for the value true, use
  // assert.strictEqual(true, guard, message_opt);.

  function ok(value, message) {
    if (!value) fail(value, true, message, '==', assert.ok);
  }
  assert.ok = ok;

  // 5. The equality assertion tests shallow, coercive equality with
  // ==.
  // assert.equal(actual, expected, message_opt);

  assert.equal = function equal(actual, expected, message) {
    if (actual != expected) fail(actual, expected, message, '==', assert.equal);
  };

  // 6. The non-equality assertion tests for whether two objects are not equal
  // with != assert.notEqual(actual, expected, message_opt);

  assert.notEqual = function notEqual(actual, expected, message) {
    if (actual == expected) {
      fail(actual, expected, message, '!=', assert.notEqual);
    }
  };

  // 7. The equivalence assertion tests a deep equality relation.
  // assert.deepEqual(actual, expected, message_opt);

  assert.deepEqual = function deepEqual(actual, expected, message) {
    if (!_deepEqual(actual, expected)) {
      fail(actual, expected, message, 'deepEqual', assert.deepEqual);
    }
  };

  function _deepEqual(actual, expected) {
    // 7.1. All identical values are equivalent, as determined by ===.
    if (actual === expected) {
      return true;

    } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
      if (actual.length != expected.length) return false;

      for (var i = 0; i < actual.length; i++) {
        if (actual[i] !== expected[i]) return false;
      }

      return true;

    // 7.2. If the expected value is a Date object, the actual value is
    // equivalent if it is also a Date object that refers to the same time.
    } else if (util.isDate(actual) && util.isDate(expected)) {
      return actual.getTime() === expected.getTime();

    // 7.3 If the expected value is a RegExp object, the actual value is
    // equivalent if it is also a RegExp object with the same source and
    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
    } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
      return actual.source === expected.source &&
             actual.global === expected.global &&
             actual.multiline === expected.multiline &&
             actual.lastIndex === expected.lastIndex &&
             actual.ignoreCase === expected.ignoreCase;

    // 7.4. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
    } else if (!util.isObject(actual) && !util.isObject(expected)) {
      return actual == expected;

    // 7.5 For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
    } else {
      return objEquiv(actual, expected);
    }
  }

  function isArguments(object) {
    return Object.prototype.toString.call(object) == '[object Arguments]';
  }

  function objEquiv(a, b) {
    if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
      return false;
    // an identical 'prototype' property.
    if (a.prototype !== b.prototype) return false;
    // if one is a primitive, the other must be same
    if (util.isPrimitive(a) || util.isPrimitive(b)) {
      return a === b;
    }
    var aIsArgs = isArguments(a),
        bIsArgs = isArguments(b);
    if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
      return false;
    if (aIsArgs) {
      a = pSlice.call(a);
      b = pSlice.call(b);
      return _deepEqual(a, b);
    }
    var ka = objectKeys(a),
        kb = objectKeys(b),
        key, i;
    // having the same number of owned properties (keys incorporates
    // hasOwnProperty)
    if (ka.length != kb.length)
      return false;
    //the same set of keys (although not necessarily the same order),
    ka.sort();
    kb.sort();
    //~~~cheap key test
    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] != kb[i])
        return false;
    }
    //equivalent values for every corresponding key, and
    //~~~possibly expensive deep test
    for (i = ka.length - 1; i >= 0; i--) {
      key = ka[i];
      if (!_deepEqual(a[key], b[key])) return false;
    }
    return true;
  }

  // 8. The non-equivalence assertion tests for any deep inequality.
  // assert.notDeepEqual(actual, expected, message_opt);

  assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
    if (_deepEqual(actual, expected)) {
      fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
    }
  };

  // 9. The strict equality assertion tests strict equality, as determined by ===.
  // assert.strictEqual(actual, expected, message_opt);

  assert.strictEqual = function strictEqual(actual, expected, message) {
    if (actual !== expected) {
      fail(actual, expected, message, '===', assert.strictEqual);
    }
  };

  // 10. The strict non-equality assertion tests for strict inequality, as
  // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

  assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
    if (actual === expected) {
      fail(actual, expected, message, '!==', assert.notStrictEqual);
    }
  };

  function expectedException(actual, expected) {
    if (!actual || !expected) {
      return false;
    }

    if (Object.prototype.toString.call(expected) == '[object RegExp]') {
      return expected.test(actual);
    } else if (actual instanceof expected) {
      return true;
    } else if (expected.call({}, actual) === true) {
      return true;
    }

    return false;
  }

  function _throws(shouldThrow, block, expected, message) {
    var actual;

    if (util.isString(expected)) {
      message = expected;
      expected = null;
    }

    try {
      block();
    } catch (e) {
      actual = e;
    }

    message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
              (message ? ' ' + message : '.');

    if (shouldThrow && !actual) {
      fail(actual, expected, 'Missing expected exception' + message);
    }

    if (!shouldThrow && expectedException(actual, expected)) {
      fail(actual, expected, 'Got unwanted exception' + message);
    }

    if ((shouldThrow && actual && expected &&
        !expectedException(actual, expected)) || (!shouldThrow && actual)) {
      throw actual;
    }
  }

  // 11. Expected to throw an error:
  // assert.throws(block, Error_opt, message_opt);

  assert.throws = function(block, /*optional*/error, /*optional*/message) {
    _throws.apply(this, [true].concat(pSlice.call(arguments)));
  };

  // EXTENSION! This is annoying to write outside this module.
  assert.doesNotThrow = function(block, /*optional*/message) {
    _throws.apply(this, [false].concat(pSlice.call(arguments)));
  };

  assert.ifError = function(err) { if (err) {throw err;}};

  var objectKeys = Object.keys || function (obj) {
    var keys = [];
    for (var key in obj) {
      if (hasOwn.call(obj, key)) keys.push(key);
    }
    return keys;
  };


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  var formatRegExp = /%[sdj%]/g;
  exports.format = function(f) {
    if (!isString(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }
      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
      if (x === '%%') return '%';
      if (i >= len) return x;
      switch (x) {
        case '%s': return String(args[i++]);
        case '%d': return Number(args[i++]);
        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }
        default:
          return x;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }
    return str;
  };


  // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  exports.deprecate = function(fn, msg) {
    // Allow for deprecating things in the process of starting up.
    if (isUndefined(global.process)) {
      return function() {
        return exports.deprecate(fn, msg).apply(this, arguments);
      };
    }

    if (process.noDeprecation === true) {
      return fn;
    }

    var warned = false;
    function deprecated() {
      if (!warned) {
        if (process.throwDeprecation) {
          throw new Error(msg);
        } else if (process.traceDeprecation) {
          console.trace(msg);
        } else {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }

    return deprecated;
  };


  var debugs = {};
  var debugEnviron;
  exports.debuglog = function(set) {
    if (isUndefined(debugEnviron))
      debugEnviron = process.env.NODE_DEBUG || '';
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = process.pid;
        debugs[set] = function() {
          var msg = exports.format.apply(exports, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function() {};
      }
    }
    return debugs[set];
  };


  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */
  /* legacy: obj, showHidden, depth, colors*/
  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      exports._extend(ctx, opts);
    }
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }
  exports.inspect = inspect;


  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  inspect.colors = {
    'bold' : [1, 22],
    'italic' : [3, 23],
    'underline' : [4, 24],
    'inverse' : [7, 27],
    'white' : [37, 39],
    'grey' : [90, 39],
    'black' : [30, 39],
    'blue' : [34, 39],
    'cyan' : [36, 39],
    'green' : [32, 39],
    'magenta' : [35, 39],
    'red' : [31, 39],
    'yellow' : [33, 39]
  };

  // Don't use 'blue' not visible on cmd.exe
  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };


  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str +
             '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }


  function stylizeNoColor(str, styleType) {
    return str;
  }


  function arrayToHash(array) {
    var hash = {};

    array.forEach(function(val, idx) {
      hash[val] = true;
    });

    return hash;
  }


  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect &&
        value &&
        isFunction(value.inspect) &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== exports.inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }

    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }

    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value)
        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '', array = false, braces = ['{', '}'];

    // Make Array say that they are Array
    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    }

    // Make functions say that they are functions
    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    // Make RegExps say that they are RegExps
    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    // Make error with message first say the error
    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }


  function formatPrimitive(ctx, value) {
    if (isUndefined(value))
      return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value))
      return ctx.stylize('' + value, 'number');
    if (isBoolean(value))
      return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if (isNull(value))
      return ctx.stylize('null', 'null');
  }


  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }


  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            key, true));
      }
    });
    return output;
  }


  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function(line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function(line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'")
                   .replace(/\\"/g, '"')
                   .replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }


  function reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
      numLinesEst++;
      if (cur.indexOf('\n') >= 0) numLinesEst++;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] +
             (base === '' ? '' : base + '\n ') +
             ' ' +
             output.join(',\n  ') +
             ' ' +
             braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }


  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  function isArray(ar) {
    return Array.isArray(ar);
  }
  exports.isArray = isArray;

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }
  exports.isBoolean = isBoolean;

  function isNull(arg) {
    return arg === null;
  }
  exports.isNull = isNull;

  function isNullOrUndefined(arg) {
    return arg == null;
  }
  exports.isNullOrUndefined = isNullOrUndefined;

  function isNumber(arg) {
    return typeof arg === 'number';
  }
  exports.isNumber = isNumber;

  function isString(arg) {
    return typeof arg === 'string';
  }
  exports.isString = isString;

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }
  exports.isSymbol = isSymbol;

  function isUndefined(arg) {
    return arg === void 0;
  }
  exports.isUndefined = isUndefined;

  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }
  exports.isRegExp = isRegExp;

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  exports.isObject = isObject;

  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }
  exports.isDate = isDate;

  function isError(e) {
    return isObject(e) &&
        (objectToString(e) === '[object Error]' || e instanceof Error);
  }
  exports.isError = isError;

  function isFunction(arg) {
    return typeof arg === 'function';
  }
  exports.isFunction = isFunction;

  function isPrimitive(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }
  exports.isPrimitive = isPrimitive;

  exports.isBuffer = __webpack_require__(81);

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }


  function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
  }


  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                'Oct', 'Nov', 'Dec'];

  // 26 Feb 16:19:34
  function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())].join(':');
    return [d.getDate(), months[d.getMonth()], time].join(' ');
  }


  // log is just a thin wrapper to console.log that prepends a timestamp
  exports.log = function() {
    console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
  };


  /**
   * Inherit the prototype methods from one constructor into another.
   *
   * The Function.prototype.inherits from lang.js rewritten as a standalone
   * function (not on Function.prototype). NOTE: If this file is to be loaded
   * during bootstrapping this function needs to be rewritten using some native
   * functions as prototype setup using normal JavaScript does not work as
   * expected during bootstrapping (see mirror.js in r114903).
   *
   * @param {function} ctor Constructor function which needs to inherit the
   *     prototype.
   * @param {function} superCtor Constructor function to inherit prototype from.
   */
  exports.inherits = __webpack_require__(82);

  exports._extend = function(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;

    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  };

  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(80)))

/***/ },
/* 80 */
/***/ function(module, exports) {

  // shim for using process in browser

  var process = module.exports = {};
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = setTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      clearTimeout(timeout);
  }

  process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          setTimeout(drainQueue, 0);
      }
  };

  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  process.title = 'browser';
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = ''; // empty string to avoid regexp issues
  process.versions = {};

  function noop() {}

  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;

  process.binding = function (name) {
      throw new Error('process.binding is not supported');
  };

  process.cwd = function () { return '/' };
  process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
  };
  process.umask = function() { return 0; };


/***/ },
/* 81 */
/***/ function(module, exports) {

  module.exports = function isBuffer(arg) {
    return arg && typeof arg === 'object'
      && typeof arg.copy === 'function'
      && typeof arg.fill === 'function'
      && typeof arg.readUInt8 === 'function';
  }

/***/ },
/* 82 */
/***/ function(module, exports) {

  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }


/***/ },
/* 83 */
/***/ function(module, exports) {

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  function EventEmitter() {
    this._events = this._events || {};
    this._maxListeners = this._maxListeners || undefined;
  }
  module.exports = EventEmitter;

  // Backwards-compat with node 0.10.x
  EventEmitter.EventEmitter = EventEmitter;

  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  EventEmitter.defaultMaxListeners = 10;

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter.prototype.setMaxListeners = function(n) {
    if (!isNumber(n) || n < 0 || isNaN(n))
      throw TypeError('n must be a positive number');
    this._maxListeners = n;
    return this;
  };

  EventEmitter.prototype.emit = function(type) {
    var er, handler, len, args, i, listeners;

    if (!this._events)
      this._events = {};

    // If there is no 'error' event listener then throw.
    if (type === 'error') {
      if (!this._events.error ||
          (isObject(this._events.error) && !this._events.error.length)) {
        er = arguments[1];
        if (er instanceof Error) {
          throw er; // Unhandled 'error' event
        }
        throw TypeError('Uncaught, unspecified "error" event.');
      }
    }

    handler = this._events[type];

    if (isUndefined(handler))
      return false;

    if (isFunction(handler)) {
      switch (arguments.length) {
        // fast cases
        case 1:
          handler.call(this);
          break;
        case 2:
          handler.call(this, arguments[1]);
          break;
        case 3:
          handler.call(this, arguments[1], arguments[2]);
          break;
        // slower
        default:
          args = Array.prototype.slice.call(arguments, 1);
          handler.apply(this, args);
      }
    } else if (isObject(handler)) {
      args = Array.prototype.slice.call(arguments, 1);
      listeners = handler.slice();
      len = listeners.length;
      for (i = 0; i < len; i++)
        listeners[i].apply(this, args);
    }

    return true;
  };

  EventEmitter.prototype.addListener = function(type, listener) {
    var m;

    if (!isFunction(listener))
      throw TypeError('listener must be a function');

    if (!this._events)
      this._events = {};

    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (this._events.newListener)
      this.emit('newListener', type,
                isFunction(listener.listener) ?
                listener.listener : listener);

    if (!this._events[type])
      // Optimize the case of one listener. Don't need the extra array object.
      this._events[type] = listener;
    else if (isObject(this._events[type]))
      // If we've already got an array, just append.
      this._events[type].push(listener);
    else
      // Adding the second element, need to change to array.
      this._events[type] = [this._events[type], listener];

    // Check for listener leak
    if (isObject(this._events[type]) && !this._events[type].warned) {
      if (!isUndefined(this._maxListeners)) {
        m = this._maxListeners;
      } else {
        m = EventEmitter.defaultMaxListeners;
      }

      if (m && m > 0 && this._events[type].length > m) {
        this._events[type].warned = true;
        console.error('(node) warning: possible EventEmitter memory ' +
                      'leak detected. %d listeners added. ' +
                      'Use emitter.setMaxListeners() to increase limit.',
                      this._events[type].length);
        if (typeof console.trace === 'function') {
          // not supported in IE 10
          console.trace();
        }
      }
    }

    return this;
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.once = function(type, listener) {
    if (!isFunction(listener))
      throw TypeError('listener must be a function');

    var fired = false;

    function g() {
      this.removeListener(type, g);

      if (!fired) {
        fired = true;
        listener.apply(this, arguments);
      }
    }

    g.listener = listener;
    this.on(type, g);

    return this;
  };

  // emits a 'removeListener' event iff the listener was removed
  EventEmitter.prototype.removeListener = function(type, listener) {
    var list, position, length, i;

    if (!isFunction(listener))
      throw TypeError('listener must be a function');

    if (!this._events || !this._events[type])
      return this;

    list = this._events[type];
    length = list.length;
    position = -1;

    if (list === listener ||
        (isFunction(list.listener) && list.listener === listener)) {
      delete this._events[type];
      if (this._events.removeListener)
        this.emit('removeListener', type, listener);

    } else if (isObject(list)) {
      for (i = length; i-- > 0;) {
        if (list[i] === listener ||
            (list[i].listener && list[i].listener === listener)) {
          position = i;
          break;
        }
      }

      if (position < 0)
        return this;

      if (list.length === 1) {
        list.length = 0;
        delete this._events[type];
      } else {
        list.splice(position, 1);
      }

      if (this._events.removeListener)
        this.emit('removeListener', type, listener);
    }

    return this;
  };

  EventEmitter.prototype.removeAllListeners = function(type) {
    var key, listeners;

    if (!this._events)
      return this;

    // not listening for removeListener, no need to emit
    if (!this._events.removeListener) {
      if (arguments.length === 0)
        this._events = {};
      else if (this._events[type])
        delete this._events[type];
      return this;
    }

    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
      for (key in this._events) {
        if (key === 'removeListener') continue;
        this.removeAllListeners(key);
      }
      this.removeAllListeners('removeListener');
      this._events = {};
      return this;
    }

    listeners = this._events[type];

    if (isFunction(listeners)) {
      this.removeListener(type, listeners);
    } else if (listeners) {
      // LIFO order
      while (listeners.length)
        this.removeListener(type, listeners[listeners.length - 1]);
    }
    delete this._events[type];

    return this;
  };

  EventEmitter.prototype.listeners = function(type) {
    var ret;
    if (!this._events || !this._events[type])
      ret = [];
    else if (isFunction(this._events[type]))
      ret = [this._events[type]];
    else
      ret = this._events[type].slice();
    return ret;
  };

  EventEmitter.prototype.listenerCount = function(type) {
    if (this._events) {
      var evlistener = this._events[type];

      if (isFunction(evlistener))
        return 1;
      else if (evlistener)
        return evlistener.length;
    }
    return 0;
  };

  EventEmitter.listenerCount = function(emitter, type) {
    return emitter.listenerCount(type);
  };

  function isFunction(arg) {
    return typeof arg === 'function';
  }

  function isNumber(arg) {
    return typeof arg === 'number';
  }

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isUndefined(arg) {
    return arg === void 0;
  }


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {

  'use strict';
  var _ = __webpack_require__(76);

  function isISOCode(currency) {
    return (/^[A-Z0-9]{3}$/.test(currency)
    );
  }

  function isHexCurrency(currency) {
    return (/[A-Fa-f0-9]{40}/.test(currency)
    );
  }

  function getISOCode(hexCurrency) {
    var bytes = new Buffer(hexCurrency, 'hex');
    if (_.every(bytes, function (octet) {
      return octet === 0;
    })) {
      return 'XRP';
    }
    if (!_.every(bytes, function (octet, i) {
      return octet === 0 || i >= 12 && i <= 14;
    })) {
      return null;
    }
    var code = String.fromCharCode(bytes[12]) + String.fromCharCode(bytes[13]) + String.fromCharCode(bytes[14]);
    return isISOCode(code) ? code : null;
  }

  function normalizeCurrency(currency) {
    if (isISOCode(currency.toUpperCase())) {
      return currency.toUpperCase();
    } else if (isHexCurrency(currency)) {
      var code = getISOCode(currency);
      return code === null ? currency.toUpperCase() : code;
    }
    throw new Error('invalid currency');
  }

  function toHexCurrency(currency) {
    if (isISOCode(currency)) {
      var bytes = new Buffer(20);
      bytes.fill(0);
      if (currency !== 'XRP') {
        bytes[12] = currency.charCodeAt(0);
        bytes[13] = currency.charCodeAt(1);
        bytes[14] = currency.charCodeAt(2);
      }
      return bytes.toString('hex').toUpperCase();
    } else if (isHexCurrency(currency)) {
      return currency.toUpperCase();
    }
    throw new Error('invalid currency');
  }

  function isValidCurrency(currency) {
    return isISOCode(currency.toUpperCase()) || isHexCurrency(currency);
  }

  exports.normalizeCurrency = normalizeCurrency;
  exports.isValidCurrency = isValidCurrency;
  exports.toHexCurrency = toHexCurrency;
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85).Buffer))

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */
  /* eslint-disable no-proto */

  'use strict'

  var base64 = __webpack_require__(86)
  var ieee754 = __webpack_require__(87)
  var isArray = __webpack_require__(88)

  exports.Buffer = Buffer
  exports.SlowBuffer = SlowBuffer
  exports.INSPECT_MAX_BYTES = 50
  Buffer.poolSize = 8192 // not used by this implementation

  var rootParent = {}

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
   *     on objects.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
    ? global.TYPED_ARRAY_SUPPORT
    : typedArraySupport()

  function typedArraySupport () {
    function Bar () {}
    try {
      var arr = new Uint8Array(1)
      arr.foo = function () { return 42 }
      arr.constructor = Bar
      return arr.foo() === 42 && // typed array instances can be augmented
          arr.constructor === Bar && // constructor can be set
          typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
          arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
    } catch (e) {
      return false
    }
  }

  function kMaxLength () {
    return Buffer.TYPED_ARRAY_SUPPORT
      ? 0x7fffffff
      : 0x3fffffff
  }

  /**
   * Class: Buffer
   * =============
   *
   * The Buffer constructor returns instances of `Uint8Array` that are augmented
   * with function properties for all the node `Buffer` API functions. We use
   * `Uint8Array` so that square bracket notation works as expected -- it returns
   * a single octet.
   *
   * By augmenting the instances, we can avoid modifying the `Uint8Array`
   * prototype.
   */
  function Buffer (arg) {
    if (!(this instanceof Buffer)) {
      // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
      if (arguments.length > 1) return new Buffer(arg, arguments[1])
      return new Buffer(arg)
    }

    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      this.length = 0
      this.parent = undefined
    }

    // Common case.
    if (typeof arg === 'number') {
      return fromNumber(this, arg)
    }

    // Slightly less common case.
    if (typeof arg === 'string') {
      return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
    }

    // Unusual.
    return fromObject(this, arg)
  }

  function fromNumber (that, length) {
    that = allocate(that, length < 0 ? 0 : checked(length) | 0)
    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < length; i++) {
        that[i] = 0
      }
    }
    return that
  }

  function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

    // Assumption: byteLength() return value is always < kMaxLength.
    var length = byteLength(string, encoding) | 0
    that = allocate(that, length)

    that.write(string, encoding)
    return that
  }

  function fromObject (that, object) {
    if (Buffer.isBuffer(object)) return fromBuffer(that, object)

    if (isArray(object)) return fromArray(that, object)

    if (object == null) {
      throw new TypeError('must start with number, buffer, array or string')
    }

    if (typeof ArrayBuffer !== 'undefined') {
      if (object.buffer instanceof ArrayBuffer) {
        return fromTypedArray(that, object)
      }
      if (object instanceof ArrayBuffer) {
        return fromArrayBuffer(that, object)
      }
    }

    if (object.length) return fromArrayLike(that, object)

    return fromJsonObject(that, object)
  }

  function fromBuffer (that, buffer) {
    var length = checked(buffer.length) | 0
    that = allocate(that, length)
    buffer.copy(that, 0, 0, length)
    return that
  }

  function fromArray (that, array) {
    var length = checked(array.length) | 0
    that = allocate(that, length)
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255
    }
    return that
  }

  // Duplicate of fromArray() to keep fromArray() monomorphic.
  function fromTypedArray (that, array) {
    var length = checked(array.length) | 0
    that = allocate(that, length)
    // Truncating the elements is probably not what people expect from typed
    // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
    // of the old Buffer constructor.
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255
    }
    return that
  }

  function fromArrayBuffer (that, array) {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      array.byteLength
      that = Buffer._augment(new Uint8Array(array))
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromTypedArray(that, new Uint8Array(array))
    }
    return that
  }

  function fromArrayLike (that, array) {
    var length = checked(array.length) | 0
    that = allocate(that, length)
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255
    }
    return that
  }

  // Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
  // Returns a zero-length buffer for inputs that don't conform to the spec.
  function fromJsonObject (that, object) {
    var array
    var length = 0

    if (object.type === 'Buffer' && isArray(object.data)) {
      array = object.data
      length = checked(array.length) | 0
    }
    that = allocate(that, length)

    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255
    }
    return that
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype
    Buffer.__proto__ = Uint8Array
  } else {
    // pre-set for values that may exist in the future
    Buffer.prototype.length = undefined
    Buffer.prototype.parent = undefined
  }

  function allocate (that, length) {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = Buffer._augment(new Uint8Array(length))
      that.__proto__ = Buffer.prototype
    } else {
      // Fallback: Return an object instance of the Buffer class
      that.length = length
      that._isBuffer = true
    }

    var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
    if (fromPool) that.parent = rootParent

    return that
  }

  function checked (length) {
    // Note: cannot use `length < kMaxLength` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
  }

  function SlowBuffer (subject, encoding) {
    if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

    var buf = new Buffer(subject, encoding)
    delete buf.parent
    return buf
  }

  Buffer.isBuffer = function isBuffer (b) {
    return !!(b != null && b._isBuffer)
  }

  Buffer.compare = function compare (a, b) {
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) return 0

    var x = a.length
    var y = b.length

    var i = 0
    var len = Math.min(x, y)
    while (i < len) {
      if (a[i] !== b[i]) break

      ++i
    }

    if (i !== len) {
      x = a[i]
      y = b[i]
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  }

  Buffer.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'binary':
      case 'base64':
      case 'raw':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  }

  Buffer.concat = function concat (list, length) {
    if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

    if (list.length === 0) {
      return new Buffer(0)
    }

    var i
    if (length === undefined) {
      length = 0
      for (i = 0; i < list.length; i++) {
        length += list[i].length
      }
    }

    var buf = new Buffer(length)
    var pos = 0
    for (i = 0; i < list.length; i++) {
      var item = list[i]
      item.copy(buf, pos)
      pos += item.length
    }
    return buf
  }

  function byteLength (string, encoding) {
    if (typeof string !== 'string') string = '' + string

    var len = string.length
    if (len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'binary':
        // Deprecated
        case 'raw':
        case 'raws':
          return len
        case 'utf8':
        case 'utf-8':
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) return utf8ToBytes(string).length // assume utf8
          encoding = ('' + encoding).toLowerCase()
          loweredCase = true
      }
    }
  }
  Buffer.byteLength = byteLength

  function slowToString (encoding, start, end) {
    var loweredCase = false

    start = start | 0
    end = end === undefined || end === Infinity ? this.length : end | 0

    if (!encoding) encoding = 'utf8'
    if (start < 0) start = 0
    if (end > this.length) end = this.length
    if (end <= start) return ''

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'binary':
          return binarySlice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase()
          loweredCase = true
      }
    }
  }

  Buffer.prototype.toString = function toString () {
    var length = this.length | 0
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  }

  Buffer.prototype.equals = function equals (b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer.compare(this, b) === 0
  }

  Buffer.prototype.inspect = function inspect () {
    var str = ''
    var max = exports.INSPECT_MAX_BYTES
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
      if (this.length > max) str += ' ... '
    }
    return '<Buffer ' + str + '>'
  }

  Buffer.prototype.compare = function compare (b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return 0
    return Buffer.compare(this, b)
  }

  Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
    if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
    else if (byteOffset < -0x80000000) byteOffset = -0x80000000
    byteOffset >>= 0

    if (this.length === 0) return -1
    if (byteOffset >= this.length) return -1

    // Negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

    if (typeof val === 'string') {
      if (val.length === 0) return -1 // special case: looking for empty string always fails
      return String.prototype.indexOf.call(this, val, byteOffset)
    }
    if (Buffer.isBuffer(val)) {
      return arrayIndexOf(this, val, byteOffset)
    }
    if (typeof val === 'number') {
      if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
        return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
      }
      return arrayIndexOf(this, [ val ], byteOffset)
    }

    function arrayIndexOf (arr, val, byteOffset) {
      var foundIndex = -1
      for (var i = 0; byteOffset + i < arr.length; i++) {
        if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
          if (foundIndex === -1) foundIndex = i
          if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
        } else {
          foundIndex = -1
        }
      }
      return -1
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  // `get` is deprecated
  Buffer.prototype.get = function get (offset) {
    console.log('.get() is deprecated. Access using array indexes instead.')
    return this.readUInt8(offset)
  }

  // `set` is deprecated
  Buffer.prototype.set = function set (v, offset) {
    console.log('.set() is deprecated. Access using array indexes instead.')
    return this.writeUInt8(v, offset)
  }

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0
    var remaining = buf.length - offset
    if (!length) {
      length = remaining
    } else {
      length = Number(length)
      if (length > remaining) {
        length = remaining
      }
    }

    // must be an even number of digits
    var strLen = string.length
    if (strLen % 2 !== 0) throw new Error('Invalid hex string')

    if (length > strLen / 2) {
      length = strLen / 2
    }
    for (var i = 0; i < length; i++) {
      var parsed = parseInt(string.substr(i * 2, 2), 16)
      if (isNaN(parsed)) throw new Error('Invalid hex string')
      buf[offset + i] = parsed
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function binaryWrite (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8'
      length = this.length
      offset = 0
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset
      length = this.length
      offset = 0
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0
      if (isFinite(length)) {
        length = length | 0
        if (encoding === undefined) encoding = 'utf8'
      } else {
        encoding = length
        length = undefined
      }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      var swap = encoding
      encoding = offset
      offset = length | 0
      length = swap
    }

    var remaining = this.length - offset
    if (length === undefined || length > remaining) length = remaining

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8'

    var loweredCase = false
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'binary':
          return binaryWrite(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase()
          loweredCase = true
      }
    }
  }

  Buffer.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  }

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf)
    } else {
      return base64.fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end)
    var res = []

    var i = start
    while (i < end) {
      var firstByte = buf[i]
      var codePoint = null
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte
            }
            break
          case 2:
            secondByte = buf[i + 1]
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint
              }
            }
            break
          case 3:
            secondByte = buf[i + 1]
            thirdByte = buf[i + 2]
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint
              }
            }
            break
          case 4:
            secondByte = buf[i + 1]
            thirdByte = buf[i + 2]
            fourthByte = buf[i + 3]
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD
        bytesPerSequence = 1
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000
        res.push(codePoint >>> 10 & 0x3FF | 0xD800)
        codePoint = 0xDC00 | codePoint & 0x3FF
      }

      res.push(codePoint)
      i += bytesPerSequence
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = ''
    var i = 0
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      )
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = ''
    end = Math.min(buf.length, end)

    for (var i = start; i < end; i++) {
      ret += String.fromCharCode(buf[i] & 0x7F)
    }
    return ret
  }

  function binarySlice (buf, start, end) {
    var ret = ''
    end = Math.min(buf.length, end)

    for (var i = start; i < end; i++) {
      ret += String.fromCharCode(buf[i])
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length

    if (!start || start < 0) start = 0
    if (!end || end < 0 || end > len) end = len

    var out = ''
    for (var i = start; i < end; i++) {
      out += toHex(buf[i])
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end)
    var res = ''
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
    }
    return res
  }

  Buffer.prototype.slice = function slice (start, end) {
    var len = this.length
    start = ~~start
    end = end === undefined ? len : ~~end

    if (start < 0) {
      start += len
      if (start < 0) start = 0
    } else if (start > len) {
      start = len
    }

    if (end < 0) {
      end += len
      if (end < 0) end = 0
    } else if (end > len) {
      end = len
    }

    if (end < start) end = start

    var newBuf
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      newBuf = Buffer._augment(this.subarray(start, end))
    } else {
      var sliceLen = end - start
      newBuf = new Buffer(sliceLen, undefined)
      for (var i = 0; i < sliceLen; i++) {
        newBuf[i] = this[i + start]
      }
    }

    if (newBuf.length) newBuf.parent = this.parent || this

    return newBuf
  }

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)

    var val = this[offset]
    var mul = 1
    var i = 0
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul
    }

    return val
  }

  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length)
    }

    var val = this[offset + --byteLength]
    var mul = 1
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul
    }

    return val
  }

  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length)
    return this[offset]
  }

  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    return this[offset] | (this[offset + 1] << 8)
  }

  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    return (this[offset] << 8) | this[offset + 1]
  }

  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  }

  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  }

  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)

    var val = this[offset]
    var mul = 1
    var i = 0
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul
    }
    mul *= 0x80

    if (val >= mul) val -= Math.pow(2, 8 * byteLength)

    return val
  }

  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)

    var i = byteLength
    var mul = 1
    var val = this[offset + --i]
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul
    }
    mul *= 0x80

    if (val >= mul) val -= Math.pow(2, 8 * byteLength)

    return val
  }

  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length)
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  }

  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    var val = this[offset] | (this[offset + 1] << 8)
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  }

  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length)
    var val = this[offset + 1] | (this[offset] << 8)
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  }

  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  }

  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  }

  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)
    return ieee754.read(this, offset, true, 23, 4)
  }

  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length)
    return ieee754.read(this, offset, false, 23, 4)
  }

  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length)
    return ieee754.read(this, offset, true, 52, 8)
  }

  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length)
    return ieee754.read(this, offset, false, 52, 8)
  }

  function checkInt (buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('value is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('index out of range')
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

    var mul = 1
    var i = 0
    this[offset] = value & 0xFF
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    byteLength = byteLength | 0
    if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

    var i = byteLength - 1
    var mul = 1
    this[offset + i] = value & 0xFF
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
    this[offset] = (value & 0xff)
    return offset + 1
  }

  function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
        (littleEndian ? i : 1 - i) * 8
    }
  }

  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
    } else {
      objectWriteUInt16(this, value, offset, true)
    }
    return offset + 2
  }

  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8)
      this[offset + 1] = (value & 0xff)
    } else {
      objectWriteUInt16(this, value, offset, false)
    }
    return offset + 2
  }

  function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
    }
  }

  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24)
      this[offset + 2] = (value >>> 16)
      this[offset + 1] = (value >>> 8)
      this[offset] = (value & 0xff)
    } else {
      objectWriteUInt32(this, value, offset, true)
    }
    return offset + 4
  }

  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24)
      this[offset + 1] = (value >>> 16)
      this[offset + 2] = (value >>> 8)
      this[offset + 3] = (value & 0xff)
    } else {
      objectWriteUInt32(this, value, offset, false)
    }
    return offset + 4
  }

  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1)

      checkInt(this, value, offset, byteLength, limit - 1, -limit)
    }

    var i = 0
    var mul = 1
    var sub = value < 0 ? 1 : 0
    this[offset] = value & 0xFF
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1)

      checkInt(this, value, offset, byteLength, limit - 1, -limit)
    }

    var i = byteLength - 1
    var mul = 1
    var sub = value < 0 ? 1 : 0
    this[offset + i] = value & 0xFF
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
    }

    return offset + byteLength
  }

  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
    if (value < 0) value = 0xff + value + 1
    this[offset] = (value & 0xff)
    return offset + 1
  }

  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
    } else {
      objectWriteUInt16(this, value, offset, true)
    }
    return offset + 2
  }

  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8)
      this[offset + 1] = (value & 0xff)
    } else {
      objectWriteUInt16(this, value, offset, false)
    }
    return offset + 2
  }

  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff)
      this[offset + 1] = (value >>> 8)
      this[offset + 2] = (value >>> 16)
      this[offset + 3] = (value >>> 24)
    } else {
      objectWriteUInt32(this, value, offset, true)
    }
    return offset + 4
  }

  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value
    offset = offset | 0
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
    if (value < 0) value = 0xffffffff + value + 1
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24)
      this[offset + 1] = (value >>> 16)
      this[offset + 2] = (value >>> 8)
      this[offset + 3] = (value & 0xff)
    } else {
      objectWriteUInt32(this, value, offset, false)
    }
    return offset + 4
  }

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (value > max || value < min) throw new RangeError('value is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('index out of range')
    if (offset < 0) throw new RangeError('index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
    }
    ieee754.write(buf, value, offset, littleEndian, 23, 4)
    return offset + 4
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  }

  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  }

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
    }
    ieee754.write(buf, value, offset, littleEndian, 52, 8)
    return offset + 8
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  }

  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  }

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0
    if (!end && end !== 0) end = this.length
    if (targetStart >= target.length) targetStart = target.length
    if (!targetStart) targetStart = 0
    if (end > 0 && end < start) end = start

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start
    }

    var len = end - start
    var i

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; i--) {
        target[i + targetStart] = this[i + start]
      }
    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; i++) {
        target[i + targetStart] = this[i + start]
      }
    } else {
      target._set(this.subarray(start, start + len), targetStart)
    }

    return len
  }

  // fill(value, start=0, end=buffer.length)
  Buffer.prototype.fill = function fill (value, start, end) {
    if (!value) value = 0
    if (!start) start = 0
    if (!end) end = this.length

    if (end < start) throw new RangeError('end < start')

    // Fill 0 bytes; we're done
    if (end === start) return
    if (this.length === 0) return

    if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
    if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

    var i
    if (typeof value === 'number') {
      for (i = start; i < end; i++) {
        this[i] = value
      }
    } else {
      var bytes = utf8ToBytes(value.toString())
      var len = bytes.length
      for (i = start; i < end; i++) {
        this[i] = bytes[i % len]
      }
    }

    return this
  }

  /**
   * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
   * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
   */
  Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
    if (typeof Uint8Array !== 'undefined') {
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        return (new Buffer(this)).buffer
      } else {
        var buf = new Uint8Array(this.length)
        for (var i = 0, len = buf.length; i < len; i += 1) {
          buf[i] = this[i]
        }
        return buf.buffer
      }
    } else {
      throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
    }
  }

  // HELPER FUNCTIONS
  // ================

  var BP = Buffer.prototype

  /**
   * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
   */
  Buffer._augment = function _augment (arr) {
    arr.constructor = Buffer
    arr._isBuffer = true

    // save reference to original Uint8Array set method before overwriting
    arr._set = arr.set

    // deprecated
    arr.get = BP.get
    arr.set = BP.set

    arr.write = BP.write
    arr.toString = BP.toString
    arr.toLocaleString = BP.toString
    arr.toJSON = BP.toJSON
    arr.equals = BP.equals
    arr.compare = BP.compare
    arr.indexOf = BP.indexOf
    arr.copy = BP.copy
    arr.slice = BP.slice
    arr.readUIntLE = BP.readUIntLE
    arr.readUIntBE = BP.readUIntBE
    arr.readUInt8 = BP.readUInt8
    arr.readUInt16LE = BP.readUInt16LE
    arr.readUInt16BE = BP.readUInt16BE
    arr.readUInt32LE = BP.readUInt32LE
    arr.readUInt32BE = BP.readUInt32BE
    arr.readIntLE = BP.readIntLE
    arr.readIntBE = BP.readIntBE
    arr.readInt8 = BP.readInt8
    arr.readInt16LE = BP.readInt16LE
    arr.readInt16BE = BP.readInt16BE
    arr.readInt32LE = BP.readInt32LE
    arr.readInt32BE = BP.readInt32BE
    arr.readFloatLE = BP.readFloatLE
    arr.readFloatBE = BP.readFloatBE
    arr.readDoubleLE = BP.readDoubleLE
    arr.readDoubleBE = BP.readDoubleBE
    arr.writeUInt8 = BP.writeUInt8
    arr.writeUIntLE = BP.writeUIntLE
    arr.writeUIntBE = BP.writeUIntBE
    arr.writeUInt16LE = BP.writeUInt16LE
    arr.writeUInt16BE = BP.writeUInt16BE
    arr.writeUInt32LE = BP.writeUInt32LE
    arr.writeUInt32BE = BP.writeUInt32BE
    arr.writeIntLE = BP.writeIntLE
    arr.writeIntBE = BP.writeIntBE
    arr.writeInt8 = BP.writeInt8
    arr.writeInt16LE = BP.writeInt16LE
    arr.writeInt16BE = BP.writeInt16BE
    arr.writeInt32LE = BP.writeInt32LE
    arr.writeInt32BE = BP.writeInt32BE
    arr.writeFloatLE = BP.writeFloatLE
    arr.writeFloatBE = BP.writeFloatBE
    arr.writeDoubleLE = BP.writeDoubleLE
    arr.writeDoubleBE = BP.writeDoubleBE
    arr.fill = BP.fill
    arr.inspect = BP.inspect
    arr.toArrayBuffer = BP.toArrayBuffer

    return arr
  }

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '')
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '='
    }
    return str
  }

  function stringtrim (str) {
    if (str.trim) return str.trim()
    return str.replace(/^\s+|\s+$/g, '')
  }

  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes (string, units) {
    units = units || Infinity
    var codePoint
    var length = string.length
    var leadSurrogate = null
    var bytes = []

    for (var i = 0; i < length; i++) {
      codePoint = string.charCodeAt(i)

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            continue
          }

          // valid lead
          leadSurrogate = codePoint

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          leadSurrogate = codePoint
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
      }

      leadSurrogate = null

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint)
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        )
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        )
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        )
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = []
    for (var i = 0; i < str.length; i++) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF)
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo
    var byteArray = []
    for (var i = 0; i < str.length; i++) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i)
      hi = c >> 8
      lo = c % 256
      byteArray.push(lo)
      byteArray.push(hi)
    }

    return byteArray
  }

  function base64ToBytes (str) {
    return base64.toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; i++) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i]
    }
    return i
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85).Buffer, (function() { return this; }())))

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

  var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

  ;(function (exports) {
    'use strict';

    var Arr = (typeof Uint8Array !== 'undefined')
      ? Uint8Array
      : Array

    var PLUS   = '+'.charCodeAt(0)
    var SLASH  = '/'.charCodeAt(0)
    var NUMBER = '0'.charCodeAt(0)
    var LOWER  = 'a'.charCodeAt(0)
    var UPPER  = 'A'.charCodeAt(0)
    var PLUS_URL_SAFE = '-'.charCodeAt(0)
    var SLASH_URL_SAFE = '_'.charCodeAt(0)

    function decode (elt) {
      var code = elt.charCodeAt(0)
      if (code === PLUS ||
          code === PLUS_URL_SAFE)
        return 62 // '+'
      if (code === SLASH ||
          code === SLASH_URL_SAFE)
        return 63 // '/'
      if (code < NUMBER)
        return -1 //no match
      if (code < NUMBER + 10)
        return code - NUMBER + 26 + 26
      if (code < UPPER + 26)
        return code - UPPER
      if (code < LOWER + 26)
        return code - LOWER + 26
    }

    function b64ToByteArray (b64) {
      var i, j, l, tmp, placeHolders, arr

      if (b64.length % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // the number of equal signs (place holders)
      // if there are two placeholders, than the two characters before it
      // represent one byte
      // if there is only one, then the three characters before it represent 2 bytes
      // this is just a cheap hack to not do indexOf twice
      var len = b64.length
      placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

      // base64 is 4/3 + up to two characters of the original data
      arr = new Arr(b64.length * 3 / 4 - placeHolders)

      // if there are placeholders, only get up to the last complete 4 chars
      l = placeHolders > 0 ? b64.length - 4 : b64.length

      var L = 0

      function push (v) {
        arr[L++] = v
      }

      for (i = 0, j = 0; i < l; i += 4, j += 3) {
        tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
        push((tmp & 0xFF0000) >> 16)
        push((tmp & 0xFF00) >> 8)
        push(tmp & 0xFF)
      }

      if (placeHolders === 2) {
        tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
        push(tmp & 0xFF)
      } else if (placeHolders === 1) {
        tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
        push((tmp >> 8) & 0xFF)
        push(tmp & 0xFF)
      }

      return arr
    }

    function uint8ToBase64 (uint8) {
      var i,
        extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
        output = "",
        temp, length

      function encode (num) {
        return lookup.charAt(num)
      }

      function tripletToBase64 (num) {
        return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
      }

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
        temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
        output += tripletToBase64(temp)
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      switch (extraBytes) {
        case 1:
          temp = uint8[uint8.length - 1]
          output += encode(temp >> 2)
          output += encode((temp << 4) & 0x3F)
          output += '=='
          break
        case 2:
          temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
          output += encode(temp >> 10)
          output += encode((temp >> 4) & 0x3F)
          output += encode((temp << 2) & 0x3F)
          output += '='
          break
      }

      return output
    }

    exports.toByteArray = b64ToByteArray
    exports.fromByteArray = uint8ToBase64
  }( false ? (this.base64js = {}) : exports))


/***/ },
/* 87 */
/***/ function(module, exports) {

  exports.read = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m
    var eLen = nBytes * 8 - mLen - 1
    var eMax = (1 << eLen) - 1
    var eBias = eMax >> 1
    var nBits = -7
    var i = isLE ? (nBytes - 1) : 0
    var d = isLE ? -1 : 1
    var s = buffer[offset + i]

    i += d

    e = s & ((1 << (-nBits)) - 1)
    s >>= (-nBits)
    nBits += eLen
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1)
    e >>= (-nBits)
    nBits += mLen
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen)
      e = e - eBias
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }

  exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c
    var eLen = nBytes * 8 - mLen - 1
    var eMax = (1 << eLen) - 1
    var eBias = eMax >> 1
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
    var i = isLE ? 0 : (nBytes - 1)
    var d = isLE ? 1 : -1
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

    value = Math.abs(value)

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0
      e = eMax
    } else {
      e = Math.floor(Math.log(value) / Math.LN2)
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--
        c *= 2
      }
      if (e + eBias >= 1) {
        value += rt / c
      } else {
        value += rt * Math.pow(2, 1 - eBias)
      }
      if (value * c >= 2) {
        e++
        c /= 2
      }

      if (e + eBias >= eMax) {
        m = 0
        e = eMax
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen)
        e = e + eBias
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
        e = 0
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m
    eLen += mLen
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128
  }


/***/ },
/* 88 */
/***/ function(module, exports) {

  var toString = {}.toString;

  module.exports = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {



  'use strict';

  var _createClass = __webpack_require__(27)['default'];

  var _classCallCheck = __webpack_require__(30)['default'];

  var _Promise = __webpack_require__(31)['default'];

  var _ = __webpack_require__(76);
  var assert = __webpack_require__(78);
  var Utils = __webpack_require__(90);

  var _require = __webpack_require__(182);

  var IOUValue = _require.IOUValue;

  function assertValidNumber(number, message) {
    assert(!_.isNull(number) && !isNaN(number), message);
  }

  function assertValidLegOneOffer(legOneOffer, message) {
    assert(legOneOffer);
    assert.strictEqual(typeof legOneOffer, 'object', message);
    assert.strictEqual(typeof legOneOffer.TakerPays, 'object', message);
    assertValidNumber(legOneOffer.TakerGets, message);
  }

  var ZERO_VALUE = new IOUValue('0');

  var AutobridgeCalculator = (function () {
    function AutobridgeCalculator(currencyGets, currencyPays, legOneOffers, legTwoOffers, issuerGets, issuerPays) {
      _classCallCheck(this, AutobridgeCalculator);

      this._currencyGets = currencyGets;
      this._currencyPays = currencyPays;
      this._issuerGets = issuerGets;
      this._issuerPays = issuerPays;
      this.legOneOffers = _.cloneDeep(legOneOffers);
      this.legTwoOffers = _.cloneDeep(legTwoOffers);

      this._ownerFundsLeftover = {};
    }

    /**
     * Calculates an ordered array of autobridged offers by quality
     *
     * @return {Array}
     */

    _createClass(AutobridgeCalculator, [{
      key: 'calculate',
      value: function calculate() {
        var _this = this;

        var legOnePointer = 0;
        var legTwoPointer = 0;

        var offersAutobridged = [];

        this._ownerFundsLeftover = {};

        return new _Promise(function (resolve) {
          _this._calculateInternal(legOnePointer, legTwoPointer, offersAutobridged, resolve);
        });
      }
    }, {
      key: '_calculateInternal',
      value: function _calculateInternal(legOnePointer_, legTwoPointer_, offersAutobridged, resolve) {

        var legOnePointer = legOnePointer_;
        var legTwoPointer = legTwoPointer_;

        var startTime = Date.now();

        while (this.legOneOffers[legOnePointer] && this.legTwoOffers[legTwoPointer]) {
          // manually implement cooperative multitasking that yields after 30ms
          // of execution so user's browser stays responsive
          var lasted = Date.now() - startTime;
          if (lasted > 30) {
            setTimeout(this._calculateInternal.bind(this, legOnePointer, legTwoPointer, offersAutobridged, resolve), 0);

            return;
          }

          var legOneOffer = this.legOneOffers[legOnePointer];
          var legTwoOffer = this.legTwoOffers[legTwoPointer];
          var leftoverFunds = this._getLeftoverOwnerFunds(legOneOffer.Account);
          var autobridgedOffer = undefined;

          if (legOneOffer.Account === legTwoOffer.Account) {
            this._unclampLegOneOwnerFunds(legOneOffer);
          } else if (!legOneOffer.is_fully_funded && !leftoverFunds.isZero()) {
            this._adjustLegOneFundedAmount(legOneOffer);
          }

          var legOneTakerGetsFunded = this._getOfferTakerGetsFunded(legOneOffer);
          var legTwoTakerPaysFunded = this._getOfferTakerPaysFunded(legTwoOffer);

          if (legOneTakerGetsFunded.isZero()) {
            legOnePointer++;

            continue;
          }

          if (legTwoTakerPaysFunded.isZero()) {
            legTwoPointer++;

            continue;
          }

          var compared = legOneTakerGetsFunded.comparedTo(legTwoTakerPaysFunded);
          if (compared > 0) {
            autobridgedOffer = this._getAutobridgedOfferWithClampedLegOne(legOneOffer, legTwoOffer);

            legTwoPointer++;
          } else if (compared < 0) {
            autobridgedOffer = this._getAutobridgedOfferWithClampedLegTwo(legOneOffer, legTwoOffer);

            legOnePointer++;
          } else {
            autobridgedOffer = this._getAutobridgedOfferWithoutClamps(legOneOffer, legTwoOffer);

            legOnePointer++;
            legTwoPointer++;
          }

          // calculate quality from leg qualities
          var legOneQuality = new IOUValue(legOneOffer.quality);
          var legTwoQuality = new IOUValue(legTwoOffer.quality);
          autobridgedOffer.quality = legOneQuality.multiply(legTwoQuality).toFixed();
          autobridgedOffer.BookDirectory = Utils.convertOfferQualityToHexFromText(autobridgedOffer.quality);
          autobridgedOffer.qualityHex = autobridgedOffer.BookDirectory;

          offersAutobridged.push(autobridgedOffer);
        }

        resolve(offersAutobridged);
      }

      /**
      * In this case, the output from leg one and the input to leg two are the
      * same. We do not need to clamp either.
      * @param {Object} legOneOffer
      * @param {Object} legTwoOffer
      *
      * @return {Object}
      */

    }, {
      key: '_getAutobridgedOfferWithoutClamps',
      value: function _getAutobridgedOfferWithoutClamps(legOneOffer, legTwoOffer) {
        var autobridgedTakerGets = this._getOfferTakerGetsFunded(legTwoOffer);
        var autobridgedTakerPays = this._getOfferTakerPaysFunded(legOneOffer);

        return this._formatAutobridgedOffer(autobridgedTakerGets, autobridgedTakerPays);
      }

      /**
       * In this case, the input from leg two is greater than the output to leg one.
       * Therefore, we must effectively clamp leg two input to leg one output.
       *
       * @param {Object} legOneOffer
       * @param {Object} legTwoOffer
       *
       * @return {Object}
       */

    }, {
      key: '_getAutobridgedOfferWithClampedLegTwo',
      value: function _getAutobridgedOfferWithClampedLegTwo(legOneOffer, legTwoOffer) {
        var legOneTakerGetsFunded = this._getOfferTakerGetsFunded(legOneOffer);
        var legTwoTakerPaysFunded = this._getOfferTakerPaysFunded(legTwoOffer);
        var legTwoQuality = new IOUValue(legTwoOffer.quality);

        var autobridgedTakerGets = legOneTakerGetsFunded.divide(legTwoQuality);
        var autobridgedTakerPays = this._getOfferTakerPaysFunded(legOneOffer);

        // Update funded amount since leg two offer was not completely consumed
        legTwoOffer.taker_gets_funded = this._getOfferTakerGetsFunded(legTwoOffer).subtract(autobridgedTakerGets).toFixed();
        legTwoOffer.taker_pays_funded = legTwoTakerPaysFunded.subtract(legOneTakerGetsFunded).toFixed();

        return this._formatAutobridgedOffer(autobridgedTakerGets, autobridgedTakerPays);
      }

      /**
       * In this case, the output from leg one is greater than the input to leg two.
       * Therefore, we must effectively clamp leg one output to leg two input.
       *
       * @param {Object} legOneOffer
       * @param {Object} legTwoOffer
       *
       * @return {Object}
       */

    }, {
      key: '_getAutobridgedOfferWithClampedLegOne',
      value: function _getAutobridgedOfferWithClampedLegOne(legOneOffer, legTwoOffer) {
        var legOneTakerGetsFunded = this._getOfferTakerGetsFunded(legOneOffer);
        var legTwoTakerPaysFunded = this._getOfferTakerPaysFunded(legTwoOffer);
        var legOneQuality = new IOUValue(legOneOffer.quality);

        var autobridgedTakerGets = this._getOfferTakerGetsFunded(legTwoOffer);
        var autobridgedTakerPays = legTwoTakerPaysFunded.multiply(legOneQuality);

        if (legOneOffer.Account === legTwoOffer.Account) {
          var legOneTakerGets = this._getOfferTakerGets(legOneOffer);
          var updatedTakerGets = legOneTakerGets.subtract(legTwoTakerPaysFunded);

          this._setLegOneTakerGets(legOneOffer, updatedTakerGets);

          this._clampLegOneOwnerFunds(legOneOffer);
        } else {
          // Update funded amount since leg one offer was not completely consumed
          var updatedTakerGetsFunded = legOneTakerGetsFunded.subtract(legTwoTakerPaysFunded);

          this._setLegOneTakerGetsFunded(legOneOffer, updatedTakerGetsFunded);
        }

        return this._formatAutobridgedOffer(autobridgedTakerGets, autobridgedTakerPays);
      }

      /**
       * Format an autobridged offer and compute synthetic values (e.g. quality)
       *
       * @param {IOUValue} takerGets
       * @param {IOUValue} takerPays
       *
       * @return {Object}
       */

    }, {
      key: '_formatAutobridgedOffer',
      value: function _formatAutobridgedOffer(takerGets, takerPays) {
        assert(takerGets instanceof IOUValue, 'Autobridged taker gets is invalid');
        assert(takerPays instanceof IOUValue, 'Autobridged taker pays is invalid');

        var autobridgedOffer = {};

        autobridgedOffer.TakerGets = {
          value: takerGets.toFixed(),
          currency: this._currencyGets,
          issuer: this._issuerGets
        };

        autobridgedOffer.TakerPays = {
          value: takerPays.toFixed(),
          currency: this._currencyPays,
          issuer: this._issuerPays
        };

        autobridgedOffer.taker_gets_funded = autobridgedOffer.TakerGets.value;
        autobridgedOffer.taker_pays_funded = autobridgedOffer.TakerPays.value;
        autobridgedOffer.autobridged = true;

        return autobridgedOffer;
      }

      /**
       * Apply clamp back on leg one offer after a round of autobridge calculation
       * completes. We must reapply clamps that have been removed because we cannot
       * guarantee that the next offer from leg two will also be from the same
       * account.
       *
       * When we reapply, it could happen that the amount of TakerGets left after
       * the autobridge calculation is less than the original funded amount. In this
       * case, we have extra funds we can use towards unfunded offers with worse
       * quality by the same owner.
       *
       * @param {Object} legOneOffer - IOU:XRP offer
       */

    }, {
      key: '_clampLegOneOwnerFunds',
      value: function _clampLegOneOwnerFunds(legOneOffer) {
        assertValidLegOneOffer(legOneOffer, 'Leg one offer is invalid');

        var takerGets = this._getOfferTakerGets(legOneOffer);

        if (takerGets.comparedTo(legOneOffer.initTakerGetsFunded) > 0) {
          // After clamping, TakerGets is still greater than initial funded amount
          this._setLegOneTakerGetsFunded(legOneOffer, legOneOffer.initTakerGetsFunded);
        } else {
          var updatedLeftover = legOneOffer.initTakerGetsFunded.subtract(takerGets);

          this._setLegOneTakerGetsFunded(legOneOffer, takerGets);
          this._addLeftoverOwnerFunds(legOneOffer.Account, updatedLeftover);
        }
      }

      /**
       * Add funds to account's leftover funds
       *
       * @param {String} account
       * @param {IOUValue} amount
       *
       * @return {IOUValue}
       */

    }, {
      key: '_addLeftoverOwnerFunds',
      value: function _addLeftoverOwnerFunds(account, amount) {
        assert(amount instanceof IOUValue, 'Amount is invalid');

        this._ownerFundsLeftover[account] = this._getLeftoverOwnerFunds(account).add(amount);

        return this._ownerFundsLeftover[account];
      }

      /**
       * Remove funds clamp on leg one offer. This is necessary when the two offers
       * are owned by the same account. In this case, it doesn't matter if offer one
       * is not fully funded. Leg one out goes to leg two in and since its the same
       * account, an infinite amount can flow.
       *
       * @param {Object} legOneOffer - IOU:XRP offer
       */

    }, {
      key: '_unclampLegOneOwnerFunds',
      value: function _unclampLegOneOwnerFunds(legOneOffer) {
        assertValidLegOneOffer(legOneOffer, 'Leg one offer is invalid');

        legOneOffer.initTakerGetsFunded = this._getOfferTakerGetsFunded(legOneOffer);

        this._setLegOneTakerGetsFunded(legOneOffer, this._getOfferTakerGets(legOneOffer));
      }

      /**
       * Set taker gets amount for a IOU:XRP offer. Also calculates taker pays
       * using offer quality
       *
       * @param {Object} legOneOffer - IOU:XRP offer
       * @param {IOUValue} takerGets
       */

    }, {
      key: '_setLegOneTakerGets',
      value: function _setLegOneTakerGets(legOneOffer, takerGets) {
        assertValidLegOneOffer(legOneOffer, 'Leg one offer is invalid');
        assert(takerGets instanceof IOUValue, 'Taker gets funded is invalid');

        var legOneQuality = new IOUValue(legOneOffer.quality);

        legOneOffer.TakerGets = takerGets.toFixed();
        var value = takerGets.multiply(legOneQuality);
        legOneOffer.TakerPays = {
          currency: this._currencyPays,
          issuer: this._issuerPays,
          value: value.toFixed()
        };
      }

      /**
       * Set taker gets funded amount for a IOU:XRP offer. Also calculates taker
       * pays funded using offer quality and updates is_fully_funded flag
       *
       * @param {Object} legOneOffer - IOU:XRP offer
       * @param {IOUValue} takerGetsFunded
       */

    }, {
      key: '_setLegOneTakerGetsFunded',
      value: function _setLegOneTakerGetsFunded(legOneOffer, takerGetsFunded) {
        assertValidLegOneOffer(legOneOffer, 'Leg one offer is invalid');
        assert(takerGetsFunded instanceof IOUValue, 'Taker gets funded is invalid');

        legOneOffer.taker_gets_funded = takerGetsFunded.toFixed();
        legOneOffer.taker_pays_funded = takerGetsFunded.multiply(new IOUValue(legOneOffer.quality)).toFixed();

        if (legOneOffer.taker_gets_funded === legOneOffer.TakerGets.value) {
          legOneOffer.is_fully_funded = true;
        }
      }

      /**
       * Increase leg one offer funded amount with extra funds found after applying
       * clamp.
       *
       * @param {Object} legOneOffer - IOU:XRP offer
       */

    }, {
      key: '_adjustLegOneFundedAmount',
      value: function _adjustLegOneFundedAmount(legOneOffer) {
        assertValidLegOneOffer(legOneOffer, 'Leg one offer is invalid');
        assert(!legOneOffer.is_fully_funded, 'Leg one offer cannot be fully funded');

        var fundedSum = this._getOfferTakerGetsFunded(legOneOffer).add(this._getLeftoverOwnerFunds(legOneOffer.Account));

        if (fundedSum.comparedTo(this._getOfferTakerGets(legOneOffer)) >= 0) {
          // There are enough extra funds to fully fund the offer
          var legOneTakerGets = this._getOfferTakerGets(legOneOffer);
          var updatedLeftover = fundedSum.subtract(legOneTakerGets);

          this._setLegOneTakerGetsFunded(legOneOffer, legOneTakerGets);
          this._setLeftoverOwnerFunds(legOneOffer.Account, updatedLeftover);
        } else {
          // There are not enough extra funds to fully fund the offer
          this._setLegOneTakerGetsFunded(legOneOffer, fundedSum);
          this._resetOwnerFundsLeftover(legOneOffer.Account);
        }
      }

      /**
       * Reset owner funds leftovers for an account to 0
       *
       * @param {String} account
       *
       * @return {IOUValue}
       */

    }, {
      key: '_resetOwnerFundsLeftover',
      value: function _resetOwnerFundsLeftover(account) {
        this._ownerFundsLeftover[account] = ZERO_VALUE;

        return this._ownerFundsLeftover[account];
      }

      /**
       * Set account's leftover funds
       *
       * @param {String} account
       * @param {IOUValue} amount
       */

    }, {
      key: '_setLeftoverOwnerFunds',
      value: function _setLeftoverOwnerFunds(account, amount) {
        assert(amount instanceof IOUValue, 'Amount is invalid');

        this._ownerFundsLeftover[account] = amount;
      }

      /**
       * Retrieve leftover funds found after clamping leg one by account
       *
       * @param {String} account
       *
       * @return {IOUValue}
       */

    }, {
      key: '_getLeftoverOwnerFunds',
      value: function _getLeftoverOwnerFunds(account) {
        var amount = this._ownerFundsLeftover[account];

        if (!amount) {
          amount = ZERO_VALUE;
        }

        return amount;
      }
    }, {
      key: '_getOfferTakerGetsFunded',
      value: function _getOfferTakerGetsFunded(offer) {
        assertValidNumber(offer.taker_gets_funded, 'Taker gets funded is invalid');
        return new IOUValue(offer.taker_gets_funded);
      }
    }, {
      key: '_getOfferTakerPaysFunded',
      value: function _getOfferTakerPaysFunded(offer) {
        assertValidNumber(offer.taker_pays_funded, 'Taker pays funded is invalid');
        return new IOUValue(offer.taker_pays_funded);
      }
    }, {
      key: '_getOfferTakerGets',
      value: function _getOfferTakerGets(offer) {
        assert(typeof offer, 'object', 'Offer is invalid');
        return new IOUValue(Utils.getValueFromRippledAmount(offer.TakerGets));
      }
    }]);

    return AutobridgeCalculator;
  })();

  exports.AutobridgeCalculator = AutobridgeCalculator;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {



  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  var _ = __webpack_require__(76);
  var binary = __webpack_require__(91);
  var OrderBookUtils = {};

  /**
   * Formats an offer quality amount to a hex that can be parsed by
   * Amount.parse_quality
   *
   * @param {String} quality
   *
   * @return {String}
   */

  OrderBookUtils.convertOfferQualityToHexFromText = function (quality) {
    return binary.encodeQuality(quality);
  };

  var NODE_TYPES = ['CreatedNode', 'ModifiedNode', 'DeletedNode'];

  /**
   * @param {Object} node
   * @api private
   */

  function getNodeType(node) {
    var result = null;

    for (var i = 0; i < NODE_TYPES.length; i++) {
      var type = NODE_TYPES[i];
      if (node.hasOwnProperty(type)) {
        result = type;
        break;
      }
    }

    return result;
  }

  function rippledAmountToCurrencyString(amount) {
    return typeof amount === 'string' ? 'XRP' : amount.currency + '/' + (amount.issuer ? amount.issuer : '');
  }

  OrderBookUtils.getValueFromRippledAmount = function (amount) {
    return typeof amount === 'string' ? amount : amount.value;
  };

  OrderBookUtils.getAffectedNodes = function (meta, filter) {
    if (!Array.isArray(meta.AffectedNodes)) {
      // throw new Error('Metadata missing AffectedNodes');
      return [];
    }

    var nodes = [];

    meta.AffectedNodes.forEach(function (rawNode) {
      var result = {};
      result.nodeType = getNodeType(rawNode);
      if (result.nodeType) {
        var _node = rawNode[result.nodeType];
        result.diffType = result.nodeType;
        result.entryType = _node.LedgerEntryType;
        result.ledgerIndex = _node.LedgerIndex;
        result.fields = _.extend({}, _node.PreviousFields, _node.NewFields, _node.FinalFields);
        result.fieldsPrev = _node.PreviousFields || {};
        result.fieldsNew = _node.NewFields || {};
        result.fieldsFinal = _node.FinalFields || {};

        if (result.entryType === 'Offer') {
          var gets = rippledAmountToCurrencyString(result.fields.TakerGets);
          var pays = rippledAmountToCurrencyString(result.fields.TakerPays);

          var key = gets + ':' + pays;

          result.bookKey = key;
        }

        nodes.push(result);
      }
    });

    if (typeof filter === 'object') {
      return nodes.filter(function (node) {
        if (filter.nodeType && filter.nodeType !== node.nodeType) {
          return false;
        }
        if (filter.entryType && filter.entryType !== node.entryType) {
          return false;
        }
        if (filter.bookKey && filter.bookKey !== node.bookKey) {
          return false;
        }
        return true;
      });
    }

    return nodes;
  };

  module.exports = OrderBookUtils;

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var assert = __webpack_require__(78);
  var coreTypes = __webpack_require__(92);
  var quality = coreTypes.quality;
  var _coreTypes$binary = coreTypes.binary;
  var bytesToHex = _coreTypes$binary.bytesToHex;
  var signingData = _coreTypes$binary.signingData;
  var multiSigningData = _coreTypes$binary.multiSigningData;
  var binaryToJSON = _coreTypes$binary.binaryToJSON;
  var serializeObject = _coreTypes$binary.serializeObject;

  function decode(binary) {
    assert(typeof binary === 'string', 'binary must be a hex string');
    return binaryToJSON(binary);
  }

  function encode(json) {
    assert(typeof json === 'object');
    return bytesToHex(serializeObject(json));
  }

  function encodeForSigning(json) {
    assert(typeof json === 'object');
    return bytesToHex(signingData(json));
  }

  function encodeForMultisigning(json, signer) {
    assert(typeof json === 'object');
    assert.equal(json.SigningPubKey, '');
    return bytesToHex(multiSigningData(json, signer));
  }

  function encodeQuality(value) {
    assert(typeof value === 'string');
    return bytesToHex(quality.encode(value));
  }

  function decodeQuality(value) {
    assert(typeof value === 'string');
    return quality.decode(value).toString();
  }

  module.exports = {
    decode: decode,
    encode: encode,
    encodeForSigning: encodeForSigning,
    encodeForMultisigning: encodeForMultisigning,
    encodeQuality: encodeQuality,
    decodeQuality: decodeQuality
  };

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _ = __webpack_require__(76);
  var enums = __webpack_require__(93);
  var Field = enums.Field;

  var types = __webpack_require__(105);
  var binary = __webpack_require__(144);

  var _require = __webpack_require__(178);

  var ShaMap = _require.ShaMap;

  var ledgerHashes = __webpack_require__(179);
  var hashes = __webpack_require__(147);
  var quality = __webpack_require__(180);
  var signing = __webpack_require__(181);

  var _require2 = __webpack_require__(145);

  var HashPrefix = _require2.HashPrefix;

  module.exports = _.assign({
    hashes: _.assign({}, hashes, ledgerHashes),
    binary: binary,
    enums: enums,
    signing: signing,
    quality: quality,
    Field: Field,
    HashPrefix: HashPrefix,
    ShaMap: ShaMap
  }, types);

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _slicedToArray = __webpack_require__(94)['default'];

  var assert = __webpack_require__(78);
  var _ = __webpack_require__(76);

  var _require = __webpack_require__(101);

  var parseBytes = _require.parseBytes;
  var serializeUIntN = _require.serializeUIntN;

  var makeClass = __webpack_require__(102);
  var enums = __webpack_require__(104);

  function transformWith(func, obj) {
    return _.transform(obj, func);
  }

  function biMap(obj, valueKey) {
    return _.transform(obj, function (result, value, key) {
      result[key] = value;
      result[value[valueKey]] = value;
    });
  }

  var EnumType = makeClass({
    EnumType: function EnumType(definition) {
      _.assign(this, definition);
      // At minimum
      assert(this.bytes instanceof Uint8Array);
      assert(typeof this.ordinal === 'number');
      assert(typeof this.name === 'string');
    },
    toString: function toString() {
      return this.name;
    },
    toJSON: function toJSON() {
      return this.name;
    },
    toBytesSink: function toBytesSink(sink) {
      sink.put(this.bytes);
    },
    statics: {
      ordinalByteWidth: 1,
      fromParser: function fromParser(parser) {
        return this.from(parser.readUIntN(this.ordinalByteWidth));
      },
      from: function from(val) {
        var ret = val instanceof this ? val : this[val];
        if (!ret) {
          throw new Error(val + ' is not a valid name or ordinal for ' + this.enumName);
        }
        return ret;
      },
      valuesByName: function valuesByName() {
        var _this = this;

        return _.transform(this.initVals, function (result, ordinal, name) {
          var bytes = serializeUIntN(ordinal, _this.ordinalByteWidth);
          var type = new _this({ name: name, ordinal: ordinal, bytes: bytes });
          result[name] = type;
        });
      },
      init: function init() {
        var mapped = this.valuesByName();
        _.assign(this, biMap(mapped, 'ordinal'));
        this.values = _.values(mapped);
        return this;
      }
    }
  });

  function makeEnum(name, definition) {
    return makeClass({
      inherits: EnumType,
      statics: _.assign(definition, { enumName: name })
    });
  }

  function makeEnums(to, definition, name) {
    to[name] = makeEnum(name, definition);
  }

  var Enums = transformWith(makeEnums, {
    Type: {
      initVals: enums.TYPES
    },
    LedgerEntryType: {
      initVals: enums.LEDGER_ENTRY_TYPES, ordinalByteWidth: 2
    },
    TransactionType: {
      initVals: enums.TRANSACTION_TYPES, ordinalByteWidth: 2
    },
    TransactionResult: {
      initVals: enums.TRANSACTION_RESULTS, ordinalByteWidth: 1
    }
  });

  Enums.Field = makeClass({
    inherits: EnumType,
    statics: {
      enumName: 'Field',
      initVals: enums.FIELDS,
      valuesByName: function valuesByName() {
        var _this2 = this;

        var fields = _.map(this.initVals, function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2);

          var name = _ref2[0];
          var definition = _ref2[1];

          var type = Enums.Type[definition.type];
          var bytes = _this2.header(type.ordinal, definition.nth);
          var ordinal = type.ordinal << 16 | definition.nth;
          var extra = { ordinal: ordinal, name: name, type: type, bytes: bytes };
          return new _this2(_.assign(definition, extra));
        });
        return _.indexBy(fields, 'name');
      },
      header: function header(type, nth) {
        var name = nth;
        var header = [];
        var push = header.push.bind(header);
        if (type < 16) {
          if (name < 16) {
            push(type << 4 | name);
          } else {
            push(type << 4, name);
          }
        } else if (name < 16) {
          push(name, type);
        } else {
          push(0, type, name);
        }
        return parseBytes(header, Uint8Array);
      }
    }
  });

  module.exports = Enums;

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _getIterator = __webpack_require__(95)["default"];

  var _isIterable = __webpack_require__(98)["default"];

  exports["default"] = (function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = _getIterator(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (_isIterable(Object(arr))) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  })();

  exports.__esModule = true;

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(96), __esModule: true };

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(50);
  __webpack_require__(34);
  module.exports = __webpack_require__(97);

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

  var anObject = __webpack_require__(26)
    , get      = __webpack_require__(61);
  module.exports = __webpack_require__(14).getIterator = function(it){
    var iterFn = get(it);
    if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
    return anObject(iterFn.call(it));
  };

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(99), __esModule: true };

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(50);
  __webpack_require__(34);
  module.exports = __webpack_require__(100);

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

  var classof   = __webpack_require__(55)
    , ITERATOR  = __webpack_require__(47)('iterator')
    , Iterators = __webpack_require__(44);
  module.exports = __webpack_require__(14).isIterable = function(it){
    var O = Object(it);
    return O[ITERATOR] !== undefined
      || '@@iterator' in O
      || Iterators.hasOwnProperty(classof(O));
  };

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var assert = __webpack_require__(78);

  function signum(a, b) {
    return a < b ? -1 : a === b ? 0 : 1;
  }

  var hexLookup = (function () {
    var res = {};
    var reverse = res.reverse = new Array(256);
    for (var i = 0; i < 16; i++) {
      var char = i.toString(16).toUpperCase();
      res[char] = i;

      for (var j = 0; j < 16; j++) {
        var char2 = j.toString(16).toUpperCase();
        var byte = (i << 4) + j;
        var byteHex = char + char2;
        res[byteHex] = byte;
        reverse[byte] = byteHex;
      }
    }
    return res;
  })();

  var reverseHexLookup = hexLookup.reverse;

  function bytesToHex(sequence) {
    var buf = Array(sequence.length);
    for (var i = sequence.length - 1; i >= 0; i--) {
      buf[i] = reverseHexLookup[sequence[i]];
    }
    return buf.join('');
  }

  function byteForHex(hex) {
    var byte = hexLookup[hex];
    if (byte === undefined) {
      throw new Error('`' + hex + '` is not a valid hex representation of a byte');
    }
    return byte;
  }

  function parseBytes(val) {
    var Output = arguments.length <= 1 || arguments[1] === undefined ? Array : arguments[1];

    if (!val || val.length === undefined) {
      throw new Error(val + ' is not a sequence');
    }

    if (typeof val === 'string') {
      var start = val.length % 2;
      var _res = new Output((val.length + start) / 2);
      for (var i = val.length, to = _res.length - 1; to >= start; i -= 2, to--) {
        _res[to] = byteForHex(val.slice(i - 2, i));
      }
      if (start === 1) {
        _res[0] = byteForHex(val[0]);
      }
      return _res;
    } else if (val instanceof Output) {
      return val;
    } else if (Output === Uint8Array) {
      return new Output(val);
    }
    var res = new Output(val.length);
    for (var i = val.length - 1; i >= 0; i--) {
      res[i] = val[i];
    }
    return res;
  }

  function serializeUIntN(val, width) {
    var newBytes = new Uint8Array(width);
    var lastIx = width - 1;
    for (var i = 0; i < width; i++) {
      newBytes[lastIx - i] = val >>> i * 8 & 0xff;
    }
    return newBytes;
  }

  function compareBytes(a, b) {
    assert(a.length === b.length);
    for (var i = 0; i < a.length; i++) {
      var cmp = signum(a[i], b[i]);
      if (cmp !== 0) {
        return cmp;
      }
    }
    return 0;
  }

  function slice(val) {
    var startIx = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
    var endIx = arguments.length <= 2 || arguments[2] === undefined ? val.length : arguments[2];
    var Output = arguments.length <= 3 || arguments[3] === undefined ? val.constructor : arguments[3];
    return (function () {
      /* eslint-disable no-param-reassign*/
      if (startIx < 0) {
        startIx += val.length;
      }
      if (endIx < 0) {
        endIx += val.length;
      }
      /* eslint-enable no-param-reassign*/
      var len = endIx - startIx;
      var res = new Output(len);
      for (var i = endIx - 1; i >= startIx; i--) {
        res[i - startIx] = val[i];
      }
      return res;
    })();
  }

  module.exports = {
    parseBytes: parseBytes,
    bytesToHex: bytesToHex,
    slice: slice,
    compareBytes: compareBytes,
    serializeUIntN: serializeUIntN
  };

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _Object$keys = __webpack_require__(72)['default'];

  var _ = __webpack_require__(76);
  var inherits = __webpack_require__(103);

  function forEach(obj, func) {
    _Object$keys(obj || {}).forEach(function (k) {
      func(obj[k], k);
    });
  }

  function ensureArray(val) {
    return Array.isArray(val) ? val : [val];
  }

  module.exports = function makeClass(klass_, definition_) {
    var definition = definition_ || klass_;
    var klass = typeof klass_ === 'function' ? klass_ : null;
    if (klass === null) {
      for (var k in definition) {
        if (k[0].match(/[A-Z]/)) {
          klass = definition[k];
          break;
        }
      }
    }
    var parent = definition.inherits;
    if (parent) {
      if (klass === null) {
        klass = function () {
          parent.apply(this, arguments);
        };
      }
      inherits(klass, parent);
      _.defaults(klass, parent);
    }
    if (klass === null) {
      klass = function () {};
    }
    var proto = klass.prototype;
    function addFunc(original, name, wrapper) {
      proto[name] = wrapper || original;
    }
    (definition.getters || []).forEach(function (k) {
      var key = '_' + k;
      proto[k] = function () {
        return this[key];
      };
    });
    forEach(definition.virtuals, function (f, n) {
      addFunc(f, n, function () {
        throw new Error('unimplemented');
      });
    });
    forEach(definition.methods, addFunc);
    forEach(definition, function (f, n) {
      if (_.isFunction(f) && f !== klass) {
        addFunc(f, n);
      }
    });
    _.assign(klass, definition.statics);
    if (typeof klass.init === 'function') {
      klass.init();
    }
    forEach(definition.cached, function (f, n) {
      var key = '_' + n;
      addFunc(f, n, function () {
        var value = this[key];
        if (value === undefined) {
          value = this[key] = f.call(this);
        }
        return value;
      });
    });
    if (definition.mixins) {
      (function () {
        var mixins = {};
        // Right-most in the list win
        ensureArray(definition.mixins).reverse().forEach(function (o) {
          _.defaults(mixins, o);
        });
        _.defaults(proto, mixins);
      })();
    }

    return klass;
  };

/***/ },
/* 103 */
/***/ function(module, exports) {

  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }


/***/ },
/* 104 */
/***/ function(module, exports) {

  module.exports = {
    "TYPES": {
      "Validation": 10003,
      "Done": -1,
      "Hash128": 4,
      "Blob": 7,
      "AccountID": 8,
      "Amount": 6,
      "Hash256": 5,
      "UInt8": 16,
      "Vector256": 19,
      "STObject": 14,
      "Unknown": -2,
      "Transaction": 10001,
      "Hash160": 17,
      "PathSet": 18,
      "LedgerEntry": 10002,
      "UInt16": 1,
      "NotPresent": 0,
      "UInt64": 3,
      "UInt32": 2,
      "STArray": 15
    },
    "LEDGER_ENTRY_TYPES": {
      "Ticket": 84,
      "LedgerHashes": 104,
      "EnabledAmendments": 102,
      "SignerList": 83,
      "Offer": 111,
      "AccountRoot": 97,
      "RippleState": 114,
      "FeeSettings": 115,
      "DirectoryNode": 100,
      "GeneratorMap": 103,
      "Contract": 99,
      "Invalid": -1
    },
    "FIELDS": [
      [
        "Generic",
        {
          "nth": 0,
          "isVLEncoded": false,
          "bytes": "E0",
          "isSerialized": false,
          "isSigningField": false,
          "type": "Unknown"
        }
      ],
      [
        "Invalid",
        {
          "nth": -1,
          "isVLEncoded": false,
          "bytes": "FF",
          "isSerialized": false,
          "isSigningField": false,
          "type": "Unknown"
        }
      ],
      [
        "LedgerEntryType",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "11",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt16"
        }
      ],
      [
        "TransactionType",
        {
          "nth": 2,
          "isVLEncoded": false,
          "bytes": "12",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt16"
        }
      ],
      [
        "SignerWeight",
        {
          "nth": 3,
          "isVLEncoded": false,
          "bytes": "13",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt16"
        }
      ],
      [
        "Flags",
        {
          "nth": 2,
          "isVLEncoded": false,
          "bytes": "22",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "SourceTag",
        {
          "nth": 3,
          "isVLEncoded": false,
          "bytes": "23",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "Sequence",
        {
          "nth": 4,
          "isVLEncoded": false,
          "bytes": "24",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "PreviousTxnLgrSeq",
        {
          "nth": 5,
          "isVLEncoded": false,
          "bytes": "25",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "LedgerSequence",
        {
          "nth": 6,
          "isVLEncoded": false,
          "bytes": "26",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "CloseTime",
        {
          "nth": 7,
          "isVLEncoded": false,
          "bytes": "27",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "ParentCloseTime",
        {
          "nth": 8,
          "isVLEncoded": false,
          "bytes": "28",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "SigningTime",
        {
          "nth": 9,
          "isVLEncoded": false,
          "bytes": "29",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "Expiration",
        {
          "nth": 10,
          "isVLEncoded": false,
          "bytes": "2A",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "TransferRate",
        {
          "nth": 11,
          "isVLEncoded": false,
          "bytes": "2B",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "WalletSize",
        {
          "nth": 12,
          "isVLEncoded": false,
          "bytes": "2C",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "OwnerCount",
        {
          "nth": 13,
          "isVLEncoded": false,
          "bytes": "2D",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "DestinationTag",
        {
          "nth": 14,
          "isVLEncoded": false,
          "bytes": "2E",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "HighQualityIn",
        {
          "nth": 16,
          "isVLEncoded": false,
          "bytes": "2010",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "HighQualityOut",
        {
          "nth": 17,
          "isVLEncoded": false,
          "bytes": "2011",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "LowQualityIn",
        {
          "nth": 18,
          "isVLEncoded": false,
          "bytes": "2012",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "LowQualityOut",
        {
          "nth": 19,
          "isVLEncoded": false,
          "bytes": "2013",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "QualityIn",
        {
          "nth": 20,
          "isVLEncoded": false,
          "bytes": "2014",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "QualityOut",
        {
          "nth": 21,
          "isVLEncoded": false,
          "bytes": "2015",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "StampEscrow",
        {
          "nth": 22,
          "isVLEncoded": false,
          "bytes": "2016",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "BondAmount",
        {
          "nth": 23,
          "isVLEncoded": false,
          "bytes": "2017",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "LoadFee",
        {
          "nth": 24,
          "isVLEncoded": false,
          "bytes": "2018",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "OfferSequence",
        {
          "nth": 25,
          "isVLEncoded": false,
          "bytes": "2019",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "FirstLedgerSequence",
        {
          "nth": 26,
          "isVLEncoded": false,
          "bytes": "201A",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "LastLedgerSequence",
        {
          "nth": 27,
          "isVLEncoded": false,
          "bytes": "201B",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "TransactionIndex",
        {
          "nth": 28,
          "isVLEncoded": false,
          "bytes": "201C",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "OperationLimit",
        {
          "nth": 29,
          "isVLEncoded": false,
          "bytes": "201D",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "ReferenceFeeUnits",
        {
          "nth": 30,
          "isVLEncoded": false,
          "bytes": "201E",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "ReserveBase",
        {
          "nth": 31,
          "isVLEncoded": false,
          "bytes": "201F",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "ReserveIncrement",
        {
          "nth": 32,
          "isVLEncoded": false,
          "bytes": "2020",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "SetFlag",
        {
          "nth": 33,
          "isVLEncoded": false,
          "bytes": "2021",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "ClearFlag",
        {
          "nth": 34,
          "isVLEncoded": false,
          "bytes": "2022",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "SignerQuorum",
        {
          "nth": 35,
          "isVLEncoded": false,
          "bytes": "2023",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "CancelAfter",
        {
          "nth": 36,
          "isVLEncoded": false,
          "bytes": "2024",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "FinishAfter",
        {
          "nth": 37,
          "isVLEncoded": false,
          "bytes": "2025",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt32"
        }
      ],
      [
        "IndexNext",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "31",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt64"
        }
      ],
      [
        "IndexPrevious",
        {
          "nth": 2,
          "isVLEncoded": false,
          "bytes": "32",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt64"
        }
      ],
      [
        "BookNode",
        {
          "nth": 3,
          "isVLEncoded": false,
          "bytes": "33",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt64"
        }
      ],
      [
        "OwnerNode",
        {
          "nth": 4,
          "isVLEncoded": false,
          "bytes": "34",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt64"
        }
      ],
      [
        "BaseFee",
        {
          "nth": 5,
          "isVLEncoded": false,
          "bytes": "35",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt64"
        }
      ],
      [
        "ExchangeRate",
        {
          "nth": 6,
          "isVLEncoded": false,
          "bytes": "36",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt64"
        }
      ],
      [
        "LowNode",
        {
          "nth": 7,
          "isVLEncoded": false,
          "bytes": "37",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt64"
        }
      ],
      [
        "HighNode",
        {
          "nth": 8,
          "isVLEncoded": false,
          "bytes": "38",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt64"
        }
      ],
      [
        "EmailHash",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "41",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash128"
        }
      ],
      [
        "LedgerHash",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "51",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "ParentHash",
        {
          "nth": 2,
          "isVLEncoded": false,
          "bytes": "52",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "TransactionHash",
        {
          "nth": 3,
          "isVLEncoded": false,
          "bytes": "53",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "AccountHash",
        {
          "nth": 4,
          "isVLEncoded": false,
          "bytes": "54",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "PreviousTxnID",
        {
          "nth": 5,
          "isVLEncoded": false,
          "bytes": "55",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "LedgerIndex",
        {
          "nth": 6,
          "isVLEncoded": false,
          "bytes": "56",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "WalletLocator",
        {
          "nth": 7,
          "isVLEncoded": false,
          "bytes": "57",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "RootIndex",
        {
          "nth": 8,
          "isVLEncoded": false,
          "bytes": "58",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "AccountTxnID",
        {
          "nth": 9,
          "isVLEncoded": false,
          "bytes": "59",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "BookDirectory",
        {
          "nth": 16,
          "isVLEncoded": false,
          "bytes": "5010",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "InvoiceID",
        {
          "nth": 17,
          "isVLEncoded": false,
          "bytes": "5011",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "Nickname",
        {
          "nth": 18,
          "isVLEncoded": false,
          "bytes": "5012",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "Amendment",
        {
          "nth": 19,
          "isVLEncoded": false,
          "bytes": "5013",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "TicketID",
        {
          "nth": 20,
          "isVLEncoded": false,
          "bytes": "5014",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "Digest",
        {
          "nth": 21,
          "isVLEncoded": false,
          "bytes": "5015",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash256"
        }
      ],
      [
        "hash",
        {
          "nth": 257,
          "isVLEncoded": false,
          "bytes": "5001",
          "isSerialized": false,
          "isSigningField": false,
          "type": "Hash256"
        }
      ],
      [
        "index",
        {
          "nth": 258,
          "isVLEncoded": false,
          "bytes": "5002",
          "isSerialized": false,
          "isSigningField": false,
          "type": "Hash256"
        }
      ],
      [
        "Amount",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "61",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "Balance",
        {
          "nth": 2,
          "isVLEncoded": false,
          "bytes": "62",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "LimitAmount",
        {
          "nth": 3,
          "isVLEncoded": false,
          "bytes": "63",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "TakerPays",
        {
          "nth": 4,
          "isVLEncoded": false,
          "bytes": "64",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "TakerGets",
        {
          "nth": 5,
          "isVLEncoded": false,
          "bytes": "65",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "LowLimit",
        {
          "nth": 6,
          "isVLEncoded": false,
          "bytes": "66",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "HighLimit",
        {
          "nth": 7,
          "isVLEncoded": false,
          "bytes": "67",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "Fee",
        {
          "nth": 8,
          "isVLEncoded": false,
          "bytes": "68",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "SendMax",
        {
          "nth": 9,
          "isVLEncoded": false,
          "bytes": "69",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "DeliverMin",
        {
          "nth": 10,
          "isVLEncoded": false,
          "bytes": "6A",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "MinimumOffer",
        {
          "nth": 16,
          "isVLEncoded": false,
          "bytes": "6010",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "RippleEscrow",
        {
          "nth": 17,
          "isVLEncoded": false,
          "bytes": "6011",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "DeliveredAmount",
        {
          "nth": 18,
          "isVLEncoded": false,
          "bytes": "6012",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Amount"
        }
      ],
      [
        "taker_gets_funded",
        {
          "nth": 258,
          "isVLEncoded": false,
          "bytes": "6002",
          "isSerialized": false,
          "isSigningField": false,
          "type": "Amount"
        }
      ],
      [
        "taker_pays_funded",
        {
          "nth": 259,
          "isVLEncoded": false,
          "bytes": "6003",
          "isSerialized": false,
          "isSigningField": false,
          "type": "Amount"
        }
      ],
      [
        "PublicKey",
        {
          "nth": 1,
          "isVLEncoded": true,
          "bytes": "71",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "MessageKey",
        {
          "nth": 2,
          "isVLEncoded": true,
          "bytes": "72",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "SigningPubKey",
        {
          "nth": 3,
          "isVLEncoded": true,
          "bytes": "73",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "TxnSignature",
        {
          "nth": 4,
          "isVLEncoded": true,
          "bytes": "74",
          "isSerialized": true,
          "isSigningField": false,
          "type": "Blob"
        }
      ],
      [
        "Generator",
        {
          "nth": 5,
          "isVLEncoded": true,
          "bytes": "75",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "Signature",
        {
          "nth": 6,
          "isVLEncoded": true,
          "bytes": "76",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "Domain",
        {
          "nth": 7,
          "isVLEncoded": true,
          "bytes": "77",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "FundCode",
        {
          "nth": 8,
          "isVLEncoded": true,
          "bytes": "78",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "RemoveCode",
        {
          "nth": 9,
          "isVLEncoded": true,
          "bytes": "79",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "ExpireCode",
        {
          "nth": 10,
          "isVLEncoded": true,
          "bytes": "7A",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "CreateCode",
        {
          "nth": 11,
          "isVLEncoded": true,
          "bytes": "7B",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "MemoType",
        {
          "nth": 12,
          "isVLEncoded": true,
          "bytes": "7C",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "MemoData",
        {
          "nth": 13,
          "isVLEncoded": true,
          "bytes": "7D",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "MemoFormat",
        {
          "nth": 14,
          "isVLEncoded": true,
          "bytes": "7E",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "Proof",
        {
          "nth": 17,
          "isVLEncoded": true,
          "bytes": "7011",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Blob"
        }
      ],
      [
        "Account",
        {
          "nth": 1,
          "isVLEncoded": true,
          "bytes": "81",
          "isSerialized": true,
          "isSigningField": true,
          "type": "AccountID"
        }
      ],
      [
        "Owner",
        {
          "nth": 2,
          "isVLEncoded": true,
          "bytes": "82",
          "isSerialized": true,
          "isSigningField": true,
          "type": "AccountID"
        }
      ],
      [
        "Destination",
        {
          "nth": 3,
          "isVLEncoded": true,
          "bytes": "83",
          "isSerialized": true,
          "isSigningField": true,
          "type": "AccountID"
        }
      ],
      [
        "Issuer",
        {
          "nth": 4,
          "isVLEncoded": true,
          "bytes": "84",
          "isSerialized": true,
          "isSigningField": true,
          "type": "AccountID"
        }
      ],
      [
        "Target",
        {
          "nth": 7,
          "isVLEncoded": true,
          "bytes": "87",
          "isSerialized": true,
          "isSigningField": true,
          "type": "AccountID"
        }
      ],
      [
        "RegularKey",
        {
          "nth": 8,
          "isVLEncoded": true,
          "bytes": "88",
          "isSerialized": true,
          "isSigningField": true,
          "type": "AccountID"
        }
      ],
      [
        "ObjectEndMarker",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "E1",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "TransactionMetaData",
        {
          "nth": 2,
          "isVLEncoded": false,
          "bytes": "E2",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "CreatedNode",
        {
          "nth": 3,
          "isVLEncoded": false,
          "bytes": "E3",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "DeletedNode",
        {
          "nth": 4,
          "isVLEncoded": false,
          "bytes": "E4",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "ModifiedNode",
        {
          "nth": 5,
          "isVLEncoded": false,
          "bytes": "E5",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "PreviousFields",
        {
          "nth": 6,
          "isVLEncoded": false,
          "bytes": "E6",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "FinalFields",
        {
          "nth": 7,
          "isVLEncoded": false,
          "bytes": "E7",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "NewFields",
        {
          "nth": 8,
          "isVLEncoded": false,
          "bytes": "E8",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "TemplateEntry",
        {
          "nth": 9,
          "isVLEncoded": false,
          "bytes": "E9",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "Memo",
        {
          "nth": 10,
          "isVLEncoded": false,
          "bytes": "EA",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "SignerEntry",
        {
          "nth": 11,
          "isVLEncoded": false,
          "bytes": "EB",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "Signer",
        {
          "nth": 16,
          "isVLEncoded": false,
          "bytes": "E010",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STObject"
        }
      ],
      [
        "ArrayEndMarker",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "F1",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STArray"
        }
      ],
      [
        "Signers",
        {
          "nth": 3,
          "isVLEncoded": false,
          "bytes": "F3",
          "isSerialized": true,
          "isSigningField": false,
          "type": "STArray"
        }
      ],
      [
        "SignerEntries",
        {
          "nth": 4,
          "isVLEncoded": false,
          "bytes": "F4",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STArray"
        }
      ],
      [
        "Template",
        {
          "nth": 5,
          "isVLEncoded": false,
          "bytes": "F5",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STArray"
        }
      ],
      [
        "Necessary",
        {
          "nth": 6,
          "isVLEncoded": false,
          "bytes": "F6",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STArray"
        }
      ],
      [
        "Sufficient",
        {
          "nth": 7,
          "isVLEncoded": false,
          "bytes": "F7",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STArray"
        }
      ],
      [
        "AffectedNodes",
        {
          "nth": 8,
          "isVLEncoded": false,
          "bytes": "F8",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STArray"
        }
      ],
      [
        "Memos",
        {
          "nth": 9,
          "isVLEncoded": false,
          "bytes": "F9",
          "isSerialized": true,
          "isSigningField": true,
          "type": "STArray"
        }
      ],
      [
        "CloseResolution",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "0110",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt8"
        }
      ],
      [
        "Method",
        {
          "nth": 2,
          "isVLEncoded": false,
          "bytes": "0210",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt8"
        }
      ],
      [
        "TransactionResult",
        {
          "nth": 3,
          "isVLEncoded": false,
          "bytes": "0310",
          "isSerialized": true,
          "isSigningField": true,
          "type": "UInt8"
        }
      ],
      [
        "TakerPaysCurrency",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "0111",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash160"
        }
      ],
      [
        "TakerPaysIssuer",
        {
          "nth": 2,
          "isVLEncoded": false,
          "bytes": "0211",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash160"
        }
      ],
      [
        "TakerGetsCurrency",
        {
          "nth": 3,
          "isVLEncoded": false,
          "bytes": "0311",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash160"
        }
      ],
      [
        "TakerGetsIssuer",
        {
          "nth": 4,
          "isVLEncoded": false,
          "bytes": "0411",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Hash160"
        }
      ],
      [
        "Paths",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "0112",
          "isSerialized": true,
          "isSigningField": true,
          "type": "PathSet"
        }
      ],
      [
        "Indexes",
        {
          "nth": 1,
          "isVLEncoded": true,
          "bytes": "0113",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Vector256"
        }
      ],
      [
        "Hashes",
        {
          "nth": 2,
          "isVLEncoded": true,
          "bytes": "0213",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Vector256"
        }
      ],
      [
        "Features",
        {
          "nth": 3,
          "isVLEncoded": true,
          "bytes": "0313",
          "isSerialized": true,
          "isSigningField": true,
          "type": "Vector256"
        }
      ],
      [
        "Transaction",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "0111",
          "isSerialized": false,
          "isSigningField": false,
          "type": "Transaction"
        }
      ],
      [
        "LedgerEntry",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "0112",
          "isSerialized": false,
          "isSigningField": false,
          "type": "LedgerEntry"
        }
      ],
      [
        "Validation",
        {
          "nth": 1,
          "isVLEncoded": false,
          "bytes": "0113",
          "isSerialized": false,
          "isSigningField": false,
          "type": "Validation"
        }
      ]
    ],
    "date-generated": "Fri Sep 11 11:35:38 ICT 2015",
    "TRANSACTION_RESULTS": {
      "tecINSUFFICIENT_RESERVE": 141,
      "telNO_DST_PARTIAL": -393,
      "tecUNFUNDED_PAYMENT": 104,
      "tecNO_TARGET": 138,
      "temBAD_SRC_ACCOUNT": -281,
      "tefPAST_SEQ": -189,
      "terNO_ACCOUNT": -96,
      "temREDUNDANT": -275,
      "tefCREATED": -194,
      "temDST_IS_SRC": -279,
      "terRETRY": -99,
      "temINVALID_FLAG": -276,
      "temBAD_SEND_XRP_LIMIT": -288,
      "terNO_LINE": -94,
      "tefBAD_AUTH": -196,
      "temBAD_EXPIRATION": -295,
      "tecNO_ISSUER": 133,
      "temBAD_SEND_XRP_NO_DIRECT": -286,
      "temBAD_SEND_XRP_PATHS": -284,
      "tefBAD_LEDGER": -195,
      "tefNO_AUTH_REQUIRED": -190,
      "tecINSUF_RESERVE_LINE": 122,
      "terOWNERS": -93,
      "tecNO_REGULAR_KEY": 131,
      "tecINSUFF_FEE": 136,
      "tecNO_ALTERNATIVE_KEY": 130,
      "tecNO_ENTRY": 140,
      "terLAST": -91,
      "terNO_RIPPLE": -90,
      "tecNO_PERMISSION": 139,
      "tecNEED_MASTER_KEY": 142,
      "temBAD_FEE": -294,
      "terPRE_SEQ": -92,
      "tecOVERSIZE": 145,
      "tefMASTER_DISABLED": -187,
      "temBAD_CURRENCY": -296,
      "tefDST_TAG_NEEDED": -193,
      "tecUNFUNDED_ADD": 102,
      "tecOWNERS": 132,
      "tecNO_LINE_REDUNDANT": 127,
      "temBAD_SIGNATURE": -282,
      "tefFAILURE": -199,
      "telBAD_PATH_COUNT": -397,
      "temBAD_TRANSFER_RATE": -280,
      "tefWRONG_PRIOR": -188,
      "tecNO_DST": 124,
      "tecNO_AUTH": 134,
      "telBAD_DOMAIN": -398,
      "temBAD_AMOUNT": -298,
      "temBAD_AUTH_MASTER": -297,
      "temBAD_LIMIT": -292,
      "temBAD_ISSUER": -293,
      "tecNO_DST_INSUF_XRP": 125,
      "tecPATH_PARTIAL": 101,
      "telBAD_PUBLIC_KEY": -396,
      "tefBAD_ADD_AUTH": -197,
      "tecDST_TAG_NEEDED": 143,
      "temBAD_OFFER": -291,
      "temBAD_SEND_XRP_PARTIAL": -285,
      "temDST_NEEDED": -278,
      "tefALREADY": -198,
      "tecUNFUNDED": 129,
      "tecNO_LINE": 135,
      "tecFROZEN": 137,
      "temUNCERTAIN": -272,
      "tecFAILED_PROCESSING": 105,
      "telLOCAL_ERROR": -399,
      "temREDUNDANT_SEND_MAX": -274,
      "tefINTERNAL": -191,
      "temBAD_PATH_LOOP": -289,
      "tecPATH_DRY": 128,
      "tefEXCEPTION": -192,
      "tecDIR_FULL": 121,
      "tecUNFUNDED_OFFER": 103,
      "temRIPPLE_EMPTY": -273,
      "telINSUF_FEE_P": -394,
      "temBAD_SEQUENCE": -283,
      "tefMAX_LEDGER": -186,
      "terFUNDS_SPENT": -98,
      "temBAD_SEND_XRP_MAX": -287,
      "telFAILED_PROCESSING": -395,
      "terINSUF_FEE_B": -97,
      "tecCLAIM": 100,
      "tesSUCCESS": 0,
      "temBAD_PATH": -290,
      "temMALFORMED": -299,
      "temUNKNOWN": -271,
      "tecINTERNAL": 144,
      "temINVALID": -277,
      "tecINSUF_RESERVE_OFFER": 123,
      "tecNO_LINE_INSUF_RESERVE": 126,
      "terNO_AUTH": -95
    },
    "TRANSACTION_TYPES": {
      "OfferCancel": 8,
      "EnableAmendment": 100,
      "SetFee": 101,
      "SetRegularKey": 5,
      "TicketCreate": 10,
      "TicketCancel": 11,
      "NickNameSet": 6,
      "TrustSet": 20,
      "Payment": 0,
      "AccountSet": 3,
      "OfferCreate": 7,
      "SignerListSet": 12,
      "Contract": 9,
      "SuspendedPaymentCreate": 1,
      "SuspendedPaymentFinish": 2,
      "SuspendedPaymentCancel": 4,
      "Invalid": -1
    }
  };

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var enums = __webpack_require__(93);
  var Field = enums.Field;

  var _require = __webpack_require__(106);

  var AccountID = _require.AccountID;

  var _require2 = __webpack_require__(123);

  var Amount = _require2.Amount;

  var _require3 = __webpack_require__(134);

  var Blob = _require3.Blob;

  var _require4 = __webpack_require__(131);

  var Currency = _require4.Currency;

  var _require5 = __webpack_require__(135);

  var Hash128 = _require5.Hash128;

  var _require6 = __webpack_require__(119);

  var Hash160 = _require6.Hash160;

  var _require7 = __webpack_require__(136);

  var Hash256 = _require7.Hash256;

  var _require8 = __webpack_require__(137);

  var PathSet = _require8.PathSet;

  var _require9 = __webpack_require__(138);

  var STArray = _require9.STArray;

  var _require10 = __webpack_require__(139);

  var STObject = _require10.STObject;

  var _require11 = __webpack_require__(140);

  var UInt16 = _require11.UInt16;

  var _require12 = __webpack_require__(141);

  var UInt32 = _require12.UInt32;

  var _require13 = __webpack_require__(132);

  var UInt64 = _require13.UInt64;

  var _require14 = __webpack_require__(142);

  var UInt8 = _require14.UInt8;

  var _require15 = __webpack_require__(143);

  var Vector256 = _require15.Vector256;

  var coreTypes = {
    AccountID: AccountID,
    Amount: Amount,
    Blob: Blob,
    Currency: Currency,
    Hash128: Hash128,
    Hash160: Hash160,
    Hash256: Hash256,
    PathSet: PathSet,
    STArray: STArray,
    STObject: STObject,
    UInt8: UInt8,
    UInt16: UInt16,
    UInt32: UInt32,
    UInt64: UInt64,
    Vector256: Vector256
  };

  Field.values.forEach(function (field) {
    field.associatedType = coreTypes[field.type];
  });

  Field.TransactionType.associatedType = enums.TransactionType;
  Field.TransactionResult.associatedType = enums.TransactionResult;
  Field.LedgerEntryType.associatedType = enums.LedgerEntryType;

  module.exports = coreTypes;

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(107);

  var decodeAccountID = _require.decodeAccountID;
  var encodeAccountID = _require.encodeAccountID;

  var _require2 = __webpack_require__(119);

  var Hash160 = _require2.Hash160;

  var AccountID = makeClass({
    AccountID: function AccountID(bytes) {
      Hash160.call(this, bytes);
    },
    inherits: Hash160,
    statics: {
      from: function from(value) {
        return value instanceof this ? value : /^r/.test(value) ? this.fromBase58(value) : new this(value);
      },
      cache: {},
      fromCache: function fromCache(base58) {
        var cached = this.cache[base58];
        if (!cached) {
          cached = this.cache[base58] = this.fromBase58(base58);
        }
        return cached;
      },
      fromBase58: function fromBase58(value) {
        var acc = new this(decodeAccountID(value));
        acc._toBase58 = value;
        return acc;
      }
    },
    toJSON: function toJSON() {
      return this.toBase58();
    },
    cached: {
      toBase58: function toBase58() {
        return encodeAccountID(this._bytes);
      }
    }
  });

  module.exports = {
    AccountID: AccountID
  };

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var hashjs = __webpack_require__(108);
  var apiFactory = __webpack_require__(115);

  var NODE_PUBLIC = 28;
  var NODE_PRIVATE = 32;
  var ACCOUNT_ID = 0;
  var FAMILY_SEED = 33;
  var ED25519_SEED = [0x01, 0xE1, 0x4B];

  module.exports = apiFactory({
    sha256: function(bytes) {
      return hashjs.sha256().update(bytes).digest();
    },
    defaultAlphabet: 'ripple',
    codecMethods: {
      EdSeed: {
        expectedLength: 16,
        version: ED25519_SEED
      },
      Seed: {
        // TODO: Use a map, not a parallel array
        versionTypes: ['ed25519', 'secp256k1'],
        versions: [ED25519_SEED, FAMILY_SEED],
        expectedLength: 16
      },
      AccountID: {version: ACCOUNT_ID, expectedLength: 20},
      Address: {version: ACCOUNT_ID, expectedLength: 20},
      NodePublic: {version: NODE_PUBLIC, expectedLength: 33},
      NodePrivate: {version: NODE_PRIVATE, expectedLength: 32},
      K256Seed: {version: FAMILY_SEED, expectedLength: 16}}
  });


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

  var hash = exports;

  hash.utils = __webpack_require__(109);
  hash.common = __webpack_require__(111);
  hash.sha = __webpack_require__(112);
  hash.ripemd = __webpack_require__(113);
  hash.hmac = __webpack_require__(114);

  // Proxy hash functions to the main object
  hash.sha1 = hash.sha.sha1;
  hash.sha256 = hash.sha.sha256;
  hash.sha224 = hash.sha.sha224;
  hash.sha384 = hash.sha.sha384;
  hash.sha512 = hash.sha.sha512;
  hash.ripemd160 = hash.ripemd.ripemd160;


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

  var utils = exports;
  var inherits = __webpack_require__(110);

  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === 'string') {
      if (!enc) {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      } else if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    } else {
      for (var i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
    }
    return res;
  }
  utils.toArray = toArray;

  function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  utils.toHex = toHex;

  function htonl(w) {
    var res = (w >>> 24) |
              ((w >>> 8) & 0xff00) |
              ((w << 8) & 0xff0000) |
              ((w & 0xff) << 24);
    return res >>> 0;
  }
  utils.htonl = htonl;

  function toHex32(msg, endian) {
    var res = '';
    for (var i = 0; i < msg.length; i++) {
      var w = msg[i];
      if (endian === 'little')
        w = htonl(w);
      res += zero8(w.toString(16));
    }
    return res;
  }
  utils.toHex32 = toHex32;

  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  utils.zero2 = zero2;

  function zero8(word) {
    if (word.length === 7)
      return '0' + word;
    else if (word.length === 6)
      return '00' + word;
    else if (word.length === 5)
      return '000' + word;
    else if (word.length === 4)
      return '0000' + word;
    else if (word.length === 3)
      return '00000' + word;
    else if (word.length === 2)
      return '000000' + word;
    else if (word.length === 1)
      return '0000000' + word;
    else
      return word;
  }
  utils.zero8 = zero8;

  function join32(msg, start, end, endian) {
    var len = end - start;
    assert(len % 4 === 0);
    var res = new Array(len / 4);
    for (var i = 0, k = start; i < res.length; i++, k += 4) {
      var w;
      if (endian === 'big')
        w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
      else
        w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
      res[i] = w >>> 0;
    }
    return res;
  }
  utils.join32 = join32;

  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
      var m = msg[i];
      if (endian === 'big') {
        res[k] = m >>> 24;
        res[k + 1] = (m >>> 16) & 0xff;
        res[k + 2] = (m >>> 8) & 0xff;
        res[k + 3] = m & 0xff;
      } else {
        res[k + 3] = m >>> 24;
        res[k + 2] = (m >>> 16) & 0xff;
        res[k + 1] = (m >>> 8) & 0xff;
        res[k] = m & 0xff;
      }
    }
    return res;
  }
  utils.split32 = split32;

  function rotr32(w, b) {
    return (w >>> b) | (w << (32 - b));
  }
  utils.rotr32 = rotr32;

  function rotl32(w, b) {
    return (w << b) | (w >>> (32 - b));
  }
  utils.rotl32 = rotl32;

  function sum32(a, b) {
    return (a + b) >>> 0;
  }
  utils.sum32 = sum32;

  function sum32_3(a, b, c) {
    return (a + b + c) >>> 0;
  }
  utils.sum32_3 = sum32_3;

  function sum32_4(a, b, c, d) {
    return (a + b + c + d) >>> 0;
  }
  utils.sum32_4 = sum32_4;

  function sum32_5(a, b, c, d, e) {
    return (a + b + c + d + e) >>> 0;
  }
  utils.sum32_5 = sum32_5;

  function assert(cond, msg) {
    if (!cond)
      throw new Error(msg || 'Assertion failed');
  }
  utils.assert = assert;

  utils.inherits = inherits;

  function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];

    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  exports.sum64 = sum64;

  function sum64_hi(ah, al, bh, bl) {
    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  };
  exports.sum64_hi = sum64_hi;

  function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  };
  exports.sum64_lo = sum64_lo;

  function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;

    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  };
  exports.sum64_4_hi = sum64_4_hi;

  function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  };
  exports.sum64_4_lo = sum64_4_lo;

  function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = (lo + el) >>> 0;
    carry += lo < el ? 1 : 0;

    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  };
  exports.sum64_5_hi = sum64_5_hi;

  function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;

    return lo >>> 0;
  };
  exports.sum64_5_lo = sum64_5_lo;

  function rotr64_hi(ah, al, num) {
    var r = (al << (32 - num)) | (ah >>> num);
    return r >>> 0;
  };
  exports.rotr64_hi = rotr64_hi;

  function rotr64_lo(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  };
  exports.rotr64_lo = rotr64_lo;

  function shr64_hi(ah, al, num) {
    return ah >>> num;
  };
  exports.shr64_hi = shr64_hi;

  function shr64_lo(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  };
  exports.shr64_lo = shr64_lo;


/***/ },
/* 110 */
/***/ function(module, exports) {

  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

  var hash = __webpack_require__(108);
  var utils = hash.utils;
  var assert = utils.assert;

  function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';

    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  exports.BlockHash = BlockHash;

  BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;

    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
      msg = this.pending;

      // Process pending data in blocks
      var r = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r, msg.length);
      if (this.pending.length === 0)
        this.pending = null;

      msg = utils.join32(msg, 0, msg.length - r, this.endian);
      for (var i = 0; i < msg.length; i += this._delta32)
        this._update(msg, i, i + this._delta32);
    }

    return this;
  };

  BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert(this.pending === null);

    return this._digest(enc);
  };

  BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - ((len + this.padLength) % bytes);
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for (var i = 1; i < k; i++)
      res[i] = 0;

    // Append length
    len <<= 3;
    if (this.endian === 'big') {
      for (var t = 8; t < this.padLength; t++)
        res[i++] = 0;

      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = len & 0xff;
    } else {
      res[i++] = len & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;

      for (var t = 8; t < this.padLength; t++)
        res[i++] = 0;
    }

    return res;
  };


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

  var hash = __webpack_require__(108);
  var utils = hash.utils;
  var assert = utils.assert;

  var rotr32 = utils.rotr32;
  var rotl32 = utils.rotl32;
  var sum32 = utils.sum32;
  var sum32_4 = utils.sum32_4;
  var sum32_5 = utils.sum32_5;
  var rotr64_hi = utils.rotr64_hi;
  var rotr64_lo = utils.rotr64_lo;
  var shr64_hi = utils.shr64_hi;
  var shr64_lo = utils.shr64_lo;
  var sum64 = utils.sum64;
  var sum64_hi = utils.sum64_hi;
  var sum64_lo = utils.sum64_lo;
  var sum64_4_hi = utils.sum64_4_hi;
  var sum64_4_lo = utils.sum64_4_lo;
  var sum64_5_hi = utils.sum64_5_hi;
  var sum64_5_lo = utils.sum64_5_lo;
  var BlockHash = hash.common.BlockHash;

  var sha256_K = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
  ];

  var sha512_K = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  ];

  var sha1_K = [
    0x5A827999, 0x6ED9EBA1,
    0x8F1BBCDC, 0xCA62C1D6
  ];

  function SHA256() {
    if (!(this instanceof SHA256))
      return new SHA256();

    BlockHash.call(this);
    this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
               0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];
    this.k = sha256_K;
    this.W = new Array(64);
  }
  utils.inherits(SHA256, BlockHash);
  exports.sha256 = SHA256;

  SHA256.blockSize = 512;
  SHA256.outSize = 256;
  SHA256.hmacStrength = 192;
  SHA256.padLength = 64;

  SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i++)
      W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];

    assert(this.k.length === W.length);
    for (var i = 0; i < W.length; i++) {
      var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
      var T2 = sum32(s0_256(a), maj32(a, b, c));
      h = g;
      g = f;
      f = e;
      e = sum32(d, T1);
      d = c;
      c = b;
      b = a;
      a = sum32(T1, T2);
    }

    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
    this.h[5] = sum32(this.h[5], f);
    this.h[6] = sum32(this.h[6], g);
    this.h[7] = sum32(this.h[7], h);
  };

  SHA256.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'big');
    else
      return utils.split32(this.h, 'big');
  };

  function SHA224() {
    if (!(this instanceof SHA224))
      return new SHA224();

    SHA256.call(this);
    this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
               0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
  }
  utils.inherits(SHA224, SHA256);
  exports.sha224 = SHA224;

  SHA224.blockSize = 512;
  SHA224.outSize = 224;
  SHA224.hmacStrength = 192;
  SHA224.padLength = 64;

  SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === 'hex')
      return utils.toHex32(this.h.slice(0, 7), 'big');
    else
      return utils.split32(this.h.slice(0, 7), 'big');
  };

  function SHA512() {
    if (!(this instanceof SHA512))
      return new SHA512();

    BlockHash.call(this);
    this.h = [ 0x6a09e667, 0xf3bcc908,
               0xbb67ae85, 0x84caa73b,
               0x3c6ef372, 0xfe94f82b,
               0xa54ff53a, 0x5f1d36f1,
               0x510e527f, 0xade682d1,
               0x9b05688c, 0x2b3e6c1f,
               0x1f83d9ab, 0xfb41bd6b,
               0x5be0cd19, 0x137e2179 ];
    this.k = sha512_K;
    this.W = new Array(160);
  }
  utils.inherits(SHA512, BlockHash);
  exports.sha512 = SHA512;

  SHA512.blockSize = 1024;
  SHA512.outSize = 512;
  SHA512.hmacStrength = 192;
  SHA512.padLength = 128;

  SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;

    // 32 x 32bit words
    for (var i = 0; i < 32; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i += 2) {
      var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
      var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
      var c1_hi = W[i - 14];  // i - 7
      var c1_lo = W[i - 13];
      var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
      var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
      var c3_hi = W[i - 32];  // i - 16
      var c3_lo = W[i - 31];

      W[i] = sum64_4_hi(c0_hi, c0_lo,
                        c1_hi, c1_lo,
                        c2_hi, c2_lo,
                        c3_hi, c3_lo);
      W[i + 1] = sum64_4_lo(c0_hi, c0_lo,
                            c1_hi, c1_lo,
                            c2_hi, c2_lo,
                            c3_hi, c3_lo);
    }
  };

  SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);

    var W = this.W;

    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];

    assert(this.k.length === W.length);
    for (var i = 0; i < W.length; i += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = this.k[i];
      var c3_lo = this.k[i + 1];
      var c4_hi = W[i];
      var c4_lo = W[i + 1];

      var T1_hi = sum64_5_hi(c0_hi, c0_lo,
                             c1_hi, c1_lo,
                             c2_hi, c2_lo,
                             c3_hi, c3_lo,
                             c4_hi, c4_lo);
      var T1_lo = sum64_5_lo(c0_hi, c0_lo,
                             c1_hi, c1_lo,
                             c2_hi, c2_lo,
                             c3_hi, c3_lo,
                             c4_hi, c4_lo);

      var c0_hi = s0_512_hi(ah, al);
      var c0_lo = s0_512_lo(ah, al);
      var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
      var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

      var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

      hh = gh;
      hl = gl;

      gh = fh;
      gl = fl;

      fh = eh;
      fl = el;

      eh = sum64_hi(dh, dl, T1_hi, T1_lo);
      el = sum64_lo(dl, dl, T1_hi, T1_lo);

      dh = ch;
      dl = cl;

      ch = bh;
      cl = bl;

      bh = ah;
      bl = al;

      ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }

    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
  };

  SHA512.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'big');
    else
      return utils.split32(this.h, 'big');
  };

  function SHA384() {
    if (!(this instanceof SHA384))
      return new SHA384();

    SHA512.call(this);
    this.h = [ 0xcbbb9d5d, 0xc1059ed8,
               0x629a292a, 0x367cd507,
               0x9159015a, 0x3070dd17,
               0x152fecd8, 0xf70e5939,
               0x67332667, 0xffc00b31,
               0x8eb44a87, 0x68581511,
               0xdb0c2e0d, 0x64f98fa7,
               0x47b5481d, 0xbefa4fa4 ];
  }
  utils.inherits(SHA384, SHA512);
  exports.sha384 = SHA384;

  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;

  SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h.slice(0, 12), 'big');
    else
      return utils.split32(this.h.slice(0, 12), 'big');
  };

  function SHA1() {
    if (!(this instanceof SHA1))
      return new SHA1();

    BlockHash.call(this);
    this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,
               0x10325476, 0xc3d2e1f0 ];
    this.W = new Array(80);
  }

  utils.inherits(SHA1, BlockHash);
  exports.sha1 = SHA1;

  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;

  SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];

    for(; i < W.length; i++)
      W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];

    for (var i = 0; i < W.length; i++) {
      var s = ~~(i / 20);
      var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
      e = d;
      d = c;
      c = rotl32(b, 30);
      b = a;
      a = t;
    }

    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
  };

  SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'big');
    else
      return utils.split32(this.h, 'big');
  };

  function ch32(x, y, z) {
    return (x & y) ^ ((~x) & z);
  }

  function maj32(x, y, z) {
    return (x & y) ^ (x & z) ^ (y & z);
  }

  function p32(x, y, z) {
    return x ^ y ^ z;
  }

  function s0_256(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
  }

  function s1_256(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
  }

  function g0_256(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
  }

  function g1_256(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
  }

  function ft_1(s, x, y, z) {
    if (s === 0)
      return ch32(x, y, z);
    if (s === 1 || s === 3)
      return p32(x, y, z);
    if (s === 2)
      return maj32(x, y, z);
  }

  function ch64_hi(xh, xl, yh, yl, zh, zl) {
    var r = (xh & yh) ^ ((~xh) & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ ((~xl) & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function maj64_hi(xh, xl, yh, yl, zh, zl) {
    var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2);  // 34
    var c2_hi = rotr64_hi(xl, xh, 7);  // 39

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2);  // 34
    var c2_lo = rotr64_lo(xl, xh, 7);  // 39

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9);  // 41

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9);  // 41

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29);  // 61
    var c2_hi = shr64_hi(xh, xl, 6);

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29);  // 61
    var c2_lo = shr64_lo(xh, xl, 6);

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

  var hash = __webpack_require__(108);
  var utils = hash.utils;

  var rotl32 = utils.rotl32;
  var sum32 = utils.sum32;
  var sum32_3 = utils.sum32_3;
  var sum32_4 = utils.sum32_4;
  var BlockHash = hash.common.BlockHash;

  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();

    BlockHash.call(this);

    this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
    this.endian = 'little';
  }
  utils.inherits(RIPEMD160, BlockHash);
  exports.ripemd160 = RIPEMD160;

  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;

  RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for (var j = 0; j < 80; j++) {
      var T = sum32(
        rotl32(
          sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
          s[j]),
        E);
      A = E;
      E = D;
      D = rotl32(C, 10);
      C = B;
      B = T;
      T = sum32(
        rotl32(
          sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
          sh[j]),
        Eh);
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32(Ch, 10);
      Ch = Bh;
      Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
  };

  RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'little');
    else
      return utils.split32(this.h, 'little');
  };

  function f(j, x, y, z) {
    if (j <= 15)
      return x ^ y ^ z;
    else if (j <= 31)
      return (x & y) | ((~x) & z);
    else if (j <= 47)
      return (x | (~y)) ^ z;
    else if (j <= 63)
      return (x & z) | (y & (~z));
    else
      return x ^ (y | (~z));
  }

  function K(j) {
    if (j <= 15)
      return 0x00000000;
    else if (j <= 31)
      return 0x5a827999;
    else if (j <= 47)
      return 0x6ed9eba1;
    else if (j <= 63)
      return 0x8f1bbcdc;
    else
      return 0xa953fd4e;
  }

  function Kh(j) {
    if (j <= 15)
      return 0x50a28be6;
    else if (j <= 31)
      return 0x5c4dd124;
    else if (j <= 47)
      return 0x6d703ef3;
    else if (j <= 63)
      return 0x7a6d76e9;
    else
      return 0x00000000;
  }

  var r = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  ];

  var rh = [
    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  ];

  var s = [
    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  ];

  var sh = [
    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  ];


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

  var hmac = exports;

  var hash = __webpack_require__(108);
  var utils = hash.utils;
  var assert = utils.assert;

  function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac))
      return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;

    this._init(utils.toArray(key, enc));
  }
  module.exports = Hmac;

  Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize)
      key = new this.Hash().update(key).digest();
    assert(key.length <= this.blockSize);

    // Add padding to key
    for (var i = key.length; i < this.blockSize; i++)
      key.push(0);

    for (var i = 0; i < key.length; i++)
      key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);

    // 0x36 ^ 0x5c = 0x6a
    for (var i = 0; i < key.length; i++)
      key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
  };

  Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };

  Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var codecFactory = __webpack_require__(116);

  var ALPHABETS = {
    bitcoin: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz',
    ripple: 'rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz',
    tipple: 'RPShNAF39wBUDnEGHJKLM4pQrsT7VWXYZ2bcdeCg65jkm8ofqi1tuvaxyz',
    stellar: 'gsphnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCr65jkm8oFqi1tuvAxyz'
  };

  function addMethods(codecMethods, api) {
    function addVersion(name, opts) {
      function add(operation) {
        var encode = operation === 'encode';
        var func = api[operation + name] = function (arg, arg2) {
          var params = opts;
          if (arg2 && encode) {
            params = {
              expectedLength: opts.expectedLength,
              version: opts.versions[opts.versionTypes.indexOf(arg2)]
            };
          }
          return api[operation](arg, params);
        };
        return func;
      }
      var decode = add('decode');
      add('encode');
      api['isValid' + name] = function (arg) {
        try {
          decode(arg);
        } catch (e) {
          return false;
        }
        return true;
      };
    }
    for (var k in codecMethods) {
      addVersion(k, codecMethods[k]);
    }
    return api;
  }

  function buildCodecsMap(alphabets, Codec) {
    var codecs = {};
    for (var _name in ALPHABETS) {
      codecs[_name] = new Codec(ALPHABETS[_name]);
    }if (alphabets !== ALPHABETS) {
      for (var _name2 in alphabets) {
        codecs[_name2] = new Codec(alphabets[_name2]);
      }
    }
    return codecs;
  }

  function apiFactory(options) {
    var _options$alphabets = options.alphabets;
    var alphabets = _options$alphabets === undefined ? ALPHABETS : _options$alphabets;
    var _options$codecMethods = options.codecMethods;
    var codecMethods = _options$codecMethods === undefined ? {} : _options$codecMethods;
    var _options$defaultAlphabet = options.defaultAlphabet;
    var defaultAlphabet = _options$defaultAlphabet === undefined ? Object.keys(alphabets)[0] : _options$defaultAlphabet;

    var Codec = codecFactory(options);
    var codecs = buildCodecsMap(alphabets, Codec);

    return addMethods(codecMethods, {
      Codec: Codec,
      codecs: codecs,
      decode: function decode(string) {
        var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
        var _opts$alphabet = opts.alphabet;
        var alphabet = _opts$alphabet === undefined ? defaultAlphabet : _opts$alphabet;

        return codecs[alphabet].decode(string, opts);
      },
      encode: function encode(bytes) {
        var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
        var _opts$alphabet2 = opts.alphabet;
        var alphabet = _opts$alphabet2 === undefined ? defaultAlphabet : _opts$alphabet2;

        return codecs[alphabet].encode(bytes, opts);
      }
    });
  }

  module.exports = apiFactory;

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var baseCodec = __webpack_require__(117);

  var _require = __webpack_require__(118);

  var seqEqual = _require.seqEqual;
  var concatArgs = _require.concatArgs;
  var isSet = _require.isSet;

  /* --------------------------------- ENCODER -------------------------------- */

  function codecFactory(injected) {

    /* eslint-disable indent */
    var sha256 = injected.sha256;

    var AddressCodec = (function () {
      /* eslint-enable indent */

      function AddressCodec(alphabet) {
        _classCallCheck(this, AddressCodec);

        this.alphabet = alphabet;
        this.codec = baseCodec(alphabet);
        this.base = alphabet.length;
      }

      /* eslint-disable indent */

      _createClass(AddressCodec, [{
        key: 'encode',
        value: function encode(bytes) {
          var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
          var version = opts.version;

          return isSet(version) ? this.encodeVersioned(bytes, version, opts.expectedLength) : opts.checked ? this.encodeChecked(bytes) : this.encodeRaw(bytes);
        }
      }, {
        key: 'decode',
        value: function decode(string) {
          var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
          var version = opts.version;
          var versions = opts.versions;

          return isSet(versions) ? this.decodeMultiVersioned(string, versions, opts.expectedLength, opts.versionTypes) : isSet(version) ? this.decodeVersioned(string, version, opts.expectedLength) : opts.checked ? this.decodeChecked(string) : this.decodeRaw(string);
        }
      }, {
        key: 'encodeRaw',
        value: function encodeRaw(bytes) {
          return this.codec.encode(bytes);
        }
      }, {
        key: 'decodeRaw',
        value: function decodeRaw(string) {
          return this.codec.decode(string);
        }
      }, {
        key: 'encodeChecked',
        value: function encodeChecked(buffer) {
          var check = sha256(sha256(buffer)).slice(0, 4);
          return this.encodeRaw(concatArgs(buffer, check));
        }
      }, {
        key: 'decodeChecked',
        value: function decodeChecked(encoded) {
          var buf = this.decodeRaw(encoded);
          if (buf.length < 5) {
            throw new Error('invalid_input_size');
          }
          if (!this.verifyCheckSum(buf)) {
            throw new Error('checksum_invalid');
          }
          return buf.slice(0, -4);
        }
      }, {
        key: 'encodeVersioned',
        value: function encodeVersioned(bytes, version, expectedLength) {
          if (expectedLength && bytes.length !== expectedLength) {
            throw new Error('unexpected_payload_length');
          }
          return this.encodeChecked(concatArgs(version, bytes));
        }
      }, {
        key: 'decodeVersioned',
        value: function decodeVersioned(string, version, expectedLength) {
          return this.decodeMultiVersioned(string, [version], expectedLength).bytes;
        }

        /**
        * @param {String} encoded - base58 checksum encoded data string
        * @param {Array} possibleVersions - array of possible versions.
        *                                   Each element could be a single byte or an
        *                                   array of bytes.
        * @param {Number} [expectedLength] - of decoded bytes minus checksum
        *
        * @param {Array} [types] - parrallel array of names matching possibleVersions
        *
        * @return {Object} -
        */
      }, {
        key: 'decodeMultiVersioned',
        value: function decodeMultiVersioned(encoded, possibleVersions, expectedLength, types) {
          var withoutSum = this.decodeChecked(encoded);
          var ret = { version: null, bytes: null };

          if (possibleVersions.length > 1 && !expectedLength) {
            throw new Error('must pass expectedLengthgth > 1 possibleVersions');
          }

          var versionLenGuess = possibleVersions[0].length || 1; // Number.length
          var payloadLength = expectedLength || withoutSum.length - versionLenGuess;
          var versionBytes = withoutSum.slice(0, -payloadLength);
          var payload = withoutSum.slice(-payloadLength);

          var foundVersion = possibleVersions.some(function (version, i) {
            var asArray = Array.isArray(version) ? version : [version];
            if (seqEqual(versionBytes, asArray)) {
              ret.version = version;
              ret.bytes = payload;
              if (types) {
                ret.type = types[i];
              }
              return true;
            }
          });

          if (!foundVersion) {
            throw new Error('version_invalid');
          }
          if (expectedLength && ret.bytes.length !== expectedLength) {
            throw new Error('unexpected_payload_length');
          }

          return ret;
        }
      }, {
        key: 'verifyCheckSum',
        value: function verifyCheckSum(bytes) {
          var computed = sha256(sha256(bytes.slice(0, -4))).slice(0, 4);
          var checksum = bytes.slice(-4);
          return seqEqual(computed, checksum);
        }

        /**
        * @param {String} desiredPrefix - desired prefix when base58 encoded with
        *                                 checksum
        * @param {Number} payloadLength - number of bytes encoded not incl checksum
        * @return {Array} version
        */
      }, {
        key: 'findPrefix',
        value: function findPrefix(desiredPrefix, payloadLength) {
          if (this.base !== 58) {
            throw new Error('Only works for base58');
          }
          var totalLength = payloadLength + 4; // for checksum
          var chars = Math.log(Math.pow(256, totalLength)) / Math.log(this.base);
          // (x, x.8] -> x+1, (x.8, x+1) -> x+2
          var requiredChars = Math.ceil(chars + 0.2);
          var padding = this.alphabet[Math.floor(this.alphabet.length / 2) - 1];
          var template = desiredPrefix + new Array(requiredChars + 1).join(padding);
          var bytes = this.decodeRaw(template);
          var version = bytes.slice(0, -totalLength);
          return version;
        }
      }]);

      return AddressCodec;
    })();

    return AddressCodec;
    /* eslint-enable indent */
  }
  /* ------------------------------- END ENCODER ------------------------------ */

  module.exports = codecFactory;

/***/ },
/* 117 */
/***/ function(module, exports) {

  // base-x encoding
  // Forked from https://github.com/cryptocoinjs/bs58
  // Originally written by Mike Hearn for BitcoinJ
  // Copyright (c) 2011 Google Inc
  // Ported to JavaScript by Stefan Thomas
  // Merged Buffer refactorings from base58-native by Stephen Pair
  // Copyright (c) 2013 BitPay Inc

  module.exports = function base (ALPHABET) {
    var ALPHABET_MAP = {}
    var BASE = ALPHABET.length
    var LEADER = ALPHABET.charAt(0)

    // pre-compute lookup table
    for (var i = 0; i < ALPHABET.length; i++) {
      ALPHABET_MAP[ALPHABET.charAt(i)] = i
    }

    function encode (buffer) {
      if (buffer.length === 0) return ''

      var i, j
      var digits = [0]

      for (i = 0; i < buffer.length; i++) {
        for (j = 0; j < digits.length; j++) digits[j] <<= 8

        digits[0] += buffer[i]

        var carry = 0
        for (j = 0; j < digits.length; ++j) {
          digits[j] += carry

          carry = (digits[j] / BASE) | 0
          digits[j] %= BASE
        }

        while (carry) {
          digits.push(carry % BASE)

          carry = (carry / BASE) | 0
        }
      }

      // deal with leading zeros
      for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) {
        digits.push(0)
      }

      // convert digits to a string
      var str = ''
      for (i = digits.length - 1; i >= 0; i--) {
        str += ALPHABET[digits[i]]
      }

      return str
    }

    function decode (string) {
      if (string.length === 0) return []

      var i, j
      var bytes = [0]

      for (i = 0; i < string.length; i++) {
        var c = string[i]
        if (!(c in ALPHABET_MAP)) throw new Error('Non-base' + BASE + ' character')

        for (j = 0; j < bytes.length; j++) bytes[j] *= BASE
        bytes[0] += ALPHABET_MAP[c]

        var carry = 0
        for (j = 0; j < bytes.length; ++j) {
          bytes[j] += carry

          carry = bytes[j] >> 8
          bytes[j] &= 0xff
        }

        while (carry) {
          bytes.push(carry & 0xff)

          carry >>= 8
        }
      }

      // deal with leading zeros
      for (i = 0; string[i] === LEADER && i < string.length - 1; i++) {
        bytes.push(0)
      }

      return bytes.reverse()
    }

    return {
      encode: encode,
      decode: decode
    }
  }


/***/ },
/* 118 */
/***/ function(module, exports) {

  'use strict';

  function seqEqual(arr1, arr2) {
    if (arr1.length !== arr2.length) {
      return false;
    }

    for (var i = 0; i < arr1.length; i++) {
      if (arr1[i] !== arr2[i]) {
        return false;
      }
    }
    return true;
  }

  function isSequence(val) {
    return val.length !== undefined;
  }

  /**
  * Concatenates all `arguments` into a single array. Each argument can be either
  * a single element or a sequence, which has a `length` property and supports
  * element retrieval via sequence[ix].
  *
  * > concatArgs(1, [2, 3], new Buffer([4,5]), new Uint8Array([6, 7]));
  *  [1,2,3,4,5,6,7]
  *
  * @return {Array} - concatenated arguments
  */
  function concatArgs() {
    var ret = [];

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    args.forEach(function (arg) {
      if (isSequence(arg)) {
        for (var j = 0; j < arg.length; j++) {
          ret.push(arg[j]);
        }
      } else {
        ret.push(arg);
      }
    });
    return ret;
  }

  function isSet(o) {
    return o !== null && o !== undefined;
  }

  module.exports = {
    seqEqual: seqEqual,
    concatArgs: concatArgs,
    isSet: isSet
  };

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(120);

  var Hash = _require.Hash;

  var Hash160 = makeClass({
    inherits: Hash,
    statics: { width: 20 }
  });

  module.exports = {
    Hash160: Hash160
  };

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var assert = __webpack_require__(78);
  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(121);

  var Comparable = _require.Comparable;
  var SerializedType = _require.SerializedType;

  var _require2 = __webpack_require__(101);

  var compareBytes = _require2.compareBytes;
  var parseBytes = _require2.parseBytes;

  var Hash = makeClass({
    Hash: function Hash(bytes) {
      var width = this.constructor.width;
      this._bytes = bytes ? parseBytes(bytes, Uint8Array) : new Uint8Array(width);
      assert.equal(this._bytes.length, width);
    },
    mixins: [Comparable, SerializedType],
    statics: {
      width: NaN,
      from: function from(value) {
        if (value instanceof this) {
          return value;
        }
        return new this(parseBytes(value));
      },
      fromParser: function fromParser(parser, hint) {
        return new this(parser.read(hint || this.width));
      }
    },
    compareTo: function compareTo(other) {
      return compareBytes(this._bytes, this.constructor.from(other)._bytes);
    },
    toString: function toString() {
      return this.toHex();
    },
    nibblet: function nibblet(depth) {
      var byte_ix = depth > 0 ? depth / 2 | 0 : 0;
      var b = this._bytes[byte_ix];
      if (depth % 2 === 0) {
        b = (b & 0xF0) >>> 4;
      } else {
        b = b & 0x0F;
      }
      return b;
    }
  });

  module.exports = {
    Hash: Hash
  };

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _require = __webpack_require__(101);

  var bytesToHex = _require.bytesToHex;
  var slice = _require.slice;

  var _require2 = __webpack_require__(122);

  var BytesList = _require2.BytesList;

  var Comparable = {
    lt: function lt(other) {
      return this.compareTo(other) < 0;
    },
    eq: function eq(other) {
      return this.compareTo(other) === 0;
    },
    gt: function gt(other) {
      return this.compareTo(other) > 0;
    },
    gte: function gte(other) {
      return this.compareTo(other) > -1;
    },
    lte: function lte(other) {
      return this.compareTo(other) < 1;
    }
  };

  var SerializedType = {
    toBytesSink: function toBytesSink(sink) {
      sink.put(this._bytes);
    },
    toHex: function toHex() {
      return bytesToHex(this.toBytes());
    },
    toBytes: function toBytes() {
      if (this._bytes) {
        return slice(this._bytes);
      }
      var bl = new BytesList();
      this.toBytesSink(bl);
      return bl.toBytes();
    },
    toJSON: function toJSON() {
      return this.toHex();
    },
    toString: function toString() {
      return this.toHex();
    }
  };

  function ensureArrayLikeIs(Type, arrayLike) {
    return {
      withChildren: function withChildren(Child) {
        if (arrayLike instanceof Type) {
          return arrayLike;
        }
        var obj = new Type();
        for (var i = 0; i < arrayLike.length; i++) {
          obj.push(Child.from(arrayLike[i]));
        }
        return obj;
      }
    };
  }

  module.exports = {
    ensureArrayLikeIs: ensureArrayLikeIs,
    SerializedType: SerializedType,
    Comparable: Comparable
  };

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var assert = __webpack_require__(78);

  var _require = __webpack_require__(101);

  var parseBytes = _require.parseBytes;
  var bytesToHex = _require.bytesToHex;

  var makeClass = __webpack_require__(102);

  var _require2 = __webpack_require__(93);

  var Type = _require2.Type;
  var Field = _require2.Field;

  var BytesSink = {
    put: function put() /* bytesSequence */{
      // any hex string or any object with a `length` and where 0 <= [ix] <= 255
    }
  };

  var BytesList = makeClass({
    implementing: BytesSink,
    BytesList: function BytesList() {
      this.arrays = [];
      this.length = 0;
    },
    put: function put(bytesArg) {
      var bytes = parseBytes(bytesArg, Uint8Array);
      this.length += bytes.length;
      this.arrays.push(bytes);
      return this;
    },
    toBytesSink: function toBytesSink(sink) {
      this.arrays.forEach(function (arr) {
        sink.put(arr);
      });
    },
    toBytes: function toBytes() {
      var concatenated = new Uint8Array(this.length);
      var pointer = 0;
      this.arrays.forEach(function (arr) {
        concatenated.set(arr, pointer);
        pointer += arr.length;
      });
      return concatenated;
    },
    toHex: function toHex() {
      return bytesToHex(this.toBytes());
    }
  });

  var BinarySerializer = makeClass({
    BinarySerializer: function BinarySerializer(sink) {
      this.sink = sink;
    },
    write: function write(value) {
      value.toBytesSink(this.sink);
    },
    put: function put(bytes) {
      this.sink.put(bytes);
    },
    writeType: function writeType(type, value) {
      this.write(type.from(value));
    },
    writeBytesList: function writeBytesList(bl) {
      bl.toBytesSink(this.sink);
    },
    encodeVL: function encodeVL(len) {
      var length = len;
      var lenBytes = new Uint8Array(4);
      if (length <= 192) {
        lenBytes[0] = length;
        return lenBytes.subarray(0, 1);
      } else if (length <= 12480) {
        length -= 193;
        lenBytes[0] = 193 + (length >>> 8);
        lenBytes[1] = length & 0xff;
        return lenBytes.subarray(0, 2);
      } else if (length <= 918744) {
        length -= 12481;
        lenBytes[0] = 241 + (length >>> 16);
        lenBytes[1] = length >> 8 & 0xff;
        lenBytes[2] = length & 0xff;
        return lenBytes.subarray(0, 3);
      }
      throw new Error('Overflow error');
    },
    writeFieldAndValue: function writeFieldAndValue(field, _value) {
      var sink = this.sink;
      var value = field.associatedType.from(_value);
      assert(value.toBytesSink, field);
      sink.put(field.bytes);

      if (field.isVLEncoded) {
        this.writeLengthEncoded(value);
      } else {
        value.toBytesSink(sink);
        if (field.type === Type.STObject) {
          sink.put(Field.ObjectEndMarker.bytes);
        } else if (field.type === Type.STArray) {
          sink.put(Field.ArrayEndMarker.bytes);
        }
      }
    },
    writeLengthEncoded: function writeLengthEncoded(value) {
      var bytes = new BytesList();
      value.toBytesSink(bytes);
      this.put(this.encodeVL(bytes.length));
      this.writeBytesList(bytes);
    }
  });

  module.exports = {
    BytesList: BytesList,
    BinarySerializer: BinarySerializer
  };

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _toConsumableArray = __webpack_require__(124)['default'];

  var _bind = __webpack_require__(128)['default'];

  var _ = __webpack_require__(76);
  var assert = __webpack_require__(78);
  var BN = __webpack_require__(129);
  var Decimal = __webpack_require__(130);
  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(121);

  var SerializedType = _require.SerializedType;

  var _require2 = __webpack_require__(101);

  var bytesToHex = _require2.bytesToHex;

  var _require3 = __webpack_require__(131);

  var Currency = _require3.Currency;

  var _require4 = __webpack_require__(106);

  var AccountID = _require4.AccountID;

  var _require5 = __webpack_require__(132);

  var UInt64 = _require5.UInt64;

  Decimal.config({
    toExpPos: 32,
    toExpNeg: -32
  });

  function isDefined(val) {
    return !_.isUndefined(val);
  }

  var parsers = {
    string: function string(str) {
      return [new Decimal(str).dividedBy('1e6'), Currency.XRP];
    },
    object: function object(_object) {
      assert(isDefined(_object.currency), 'currency must be defined');
      assert(isDefined(_object.issuer), 'issuer must be defined');
      return [new Decimal(_object.value), Currency.from(_object.currency), AccountID.from(_object.issuer)];
    }
  };

  var Amount = makeClass({
    Amount: function Amount(value, currency, issuer) {
      this.value = value || new Decimal('0');
      this.currency = currency || Currency.XRP;
      this.issuer = issuer || null;
    },
    mixins: SerializedType,
    statics: {
      from: function from(value) {
        if (value instanceof this) {
          return value;
        }
        var parser = parsers[typeof value];
        if (parser) {
          return new (_bind.apply(this, [null].concat(_toConsumableArray(parser(value)))))();
        }
        throw new Error('unsupported value: ' + value);
      },
      fromParser: function fromParser(parser) {
        var mantissa = parser.read(8);
        var b1 = mantissa[0];
        var b2 = mantissa[1];

        var isIOU = b1 & 0x80;
        var isPositive = b1 & 0x40;
        var sign = isPositive ? '+' : '-';

        if (isIOU) {
          mantissa[0] = 0;
          var currency = parser.readType(Currency);
          var issuer = parser.readType(AccountID);
          var exponent = ((b1 & 0x3F) << 2) + ((b2 & 0xff) >> 6) - 97;
          mantissa[1] &= 0x3F;
          // decimal.js won't accept e notation with hex
          var value = new Decimal(sign + bytesToHex(mantissa), 16).times('1e' + exponent);
          return new this(value, currency, issuer);
        }

        mantissa[0] &= 0x3F;
        var drops = new Decimal(sign + bytesToHex(mantissa), 16);
        var xrpValue = drops.dividedBy('1e6');
        return new this(xrpValue, Currency.XRP);
      }
    },
    isNative: function isNative() {
      return this.currency.isNative();
    },
    mantissa: function mantissa() {
      return new UInt64(new BN(this.value.times('1e' + -this.exponent()).abs().toString()));
    },
    isZero: function isZero() {
      return this.value.isZero();
    },
    exponent: function exponent() {
      return this.isNative() ? -6 : this.value.e - 15;
    },
    valueString: function valueString() {
      return (this.isNative() ? this.value.times('1e6') : this.value).toString();
    },
    toBytesSink: function toBytesSink(sink) {
      var isNative = this.isNative();
      var notNegative = !this.value.isNegative();
      var mantissa = this.mantissa().toBytes();

      if (isNative) {
        mantissa[0] |= notNegative ? 0x40 : 0;
        sink.put(mantissa);
      } else {
        mantissa[0] |= 0x80;
        if (!this.isZero()) {
          if (notNegative) {
            mantissa[0] |= 0x40;
          }
          var exponent = this.value.e - 15;
          var exponentByte = 97 + exponent;
          mantissa[0] |= exponentByte >>> 2;
          mantissa[1] |= (exponentByte & 0x03) << 6;
        }
        sink.put(mantissa);
        this.currency.toBytesSink(sink);
        this.issuer.toBytesSink(sink);
      }
    },
    toJSON: function toJSON() {
      var valueString = this.valueString();
      if (this.isNative()) {
        return valueString;
      }
      return {
        value: valueString,
        currency: this.currency.toJSON(),
        issuer: this.issuer.toJSON()
      };
    }
  });

  module.exports = {
    Amount: Amount
  };

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";

  var _Array$from = __webpack_require__(125)["default"];

  exports["default"] = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    } else {
      return _Array$from(arr);
    }
  };

  exports.__esModule = true;

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(126), __esModule: true };

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

  __webpack_require__(34);
  __webpack_require__(127);
  module.exports = __webpack_require__(14).Array.from;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var ctx         = __webpack_require__(15)
    , $export     = __webpack_require__(12)
    , toObject    = __webpack_require__(75)
    , call        = __webpack_require__(58)
    , isArrayIter = __webpack_require__(59)
    , toLength    = __webpack_require__(60)
    , getIterFn   = __webpack_require__(61);
  $export($export.S + $export.F * !__webpack_require__(71)(function(iter){ Array.from(iter); }), 'Array', {
    // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
    from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
      var O       = toObject(arrayLike)
        , C       = typeof this == 'function' ? this : Array
        , $$      = arguments
        , $$len   = $$.length
        , mapfn   = $$len > 1 ? $$[1] : undefined
        , mapping = mapfn !== undefined
        , index   = 0
        , iterFn  = getIterFn(O)
        , length, result, step, iterator;
      if(mapping)mapfn = ctx(mapfn, $$len > 2 ? $$[2] : undefined, 2);
      // if object isn't iterable or it's array with default iterator - use simple case
      if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
        for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
          result[index] = mapping ? call(iterator, mapfn, [step.value, index], true) : step.value;
        }
      } else {
        length = toLength(O.length);
        for(result = new C(length); length > index; index++){
          result[index] = mapping ? mapfn(O[index], index) : O[index];
        }
      }
      result.length = index;
      return result;
    }
  });


/***/ },
/* 128 */
/***/ function(module, exports) {

  "use strict";

  exports["default"] = Function.prototype.bind;
  exports.__esModule = true;

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {

  'use strict';

  // Utils

  function assert(val, msg) {
    if (!val)
      throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN(number, base, endian) {
    // May be `new BN(bn)` ?
    if (number !== null &&
        typeof number === 'object' &&
        Array.isArray(number.words)) {
      return number;
    }

    this.sign = false;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (base === 'le' || base === 'be') {
      endian = base;
      base = 10;
    }

    if (number !== null)
      this._init(number || 0, base || 10, endian || 'be');
  }
  if (typeof module === 'object')
    module.exports = BN;
  else
    exports.BN = BN;

  BN.BN = BN;
  BN.wordSize = 26;

  BN.max = function max(left, right) {
    if (left.cmp(right) > 0)
      return left;
    else
      return right;
  };

  BN.min = function min(left, right) {
    if (left.cmp(right) < 0)
      return left;
    else
      return right;
  };

  BN.prototype._init = function init(number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    } else if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }
    if (base === 'hex')
      base = 16;
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-')
      start++;

    if (base === 16)
      this._parseHex(number, start);
    else
      this._parseBase(number, base, start);

    if (number[0] === '-')
      this.sign = true;

    this.strip();

    if (endian !== 'le')
      return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber(number, base, endian) {
    if (number < 0) {
      this.sign = true;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le')
      return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray(number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++)
      this.words[i] = 0;

    var off = 0;
    if (endian === 'be') {
      for (var i = number.length - 1, j = 0; i >= 0; i -= 3) {
        var w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (var i = 0, j = 0; i < number.length; i += 3) {
        var w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex(str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54)
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      else if (c >= 17 && c <= 22)
        r |= c - 17 + 0xa;

      // '0' - '9'
      else
        r |= c & 0xf;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex(number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++)
      this.words[i] = 0;

    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (var i = number.length - 6, j = 0; i >= start; i -= 6) {
      var w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      var w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase(str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49)
        r += c - 49 + 0xa;

      // 'A'
      else if (c >= 17)
        r += c - 17 + 0xa;

      // '0' - '9'
      else
        r += c;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase(number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)
      limbLen++;
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000)
        this.words[0] += word;
      else
        this._iaddn(word);
    }

    if (mod !== 0) {
      var pow = 1;
      var word = parseBase(number, i, number.length, base);

      for (var i = 0; i < mod; i++)
        pow *= base;
      this.imuln(pow);
      if (this.words[0] + word < 0x4000000)
        this.words[0] += word;
      else
        this._iaddn(word);
    }
  };

  BN.prototype.copy = function copy(dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++)
      dest.words[i] = this.words[i];
    dest.length = this.length;
    dest.sign = this.sign;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone() {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip() {
    while (this.length > 1 && this.words[this.length - 1] === 0)
      this.length--;
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign() {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0)
      this.sign = false;
    return this;
  };

  BN.prototype.inspect = function inspect() {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString(base, padding) {
    base = base || 10;
    var padding = padding | 0 || 1;
    if (base === 16 || base === 'hex') {
      var out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1)
          out = zeros[6 - word.length] + word + out;
        else
          out = word + out;
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0)
        out = carry.toString(16) + out;
      while (out.length % padding !== 0)
        out = '0' + out;
      if (this.sign)
        out = '-' + out;
      return out;
    } else if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      var out = '';
      var c = this.clone();
      c.sign = false;
      while (c.cmpn(0) !== 0) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (c.cmpn(0) !== 0)
          out = zeros[groupSize - r.length] + r + out;
        else
          out = r + out;
      }
      if (this.cmpn(0) === 0)
        out = '0' + out;
      while (out.length % padding !== 0)
        out = '0' + out;
      if (this.sign)
        out = '-' + out;
      return out;
    } else {
      assert(false, 'Base should be between 2 and 36');
    }
  };

  BN.prototype.toJSON = function toJSON() {
    return this.toString(16);
  };

  BN.prototype.toArray = function toArray(endian, length) {
    this.strip();
    var littleEndian = endian === 'le';
    var res = new Array(this.byteLength());
    res[0] = 0;

    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (var i = 0; q.cmpn(0) !== 0; i++) {
        var b = q.andln(0xff);
        q.iushrn(8);

        res[res.length - i - 1] = b;
      }
    } else {
      for (var i = 0; q.cmpn(0) !== 0; i++) {
        var b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }
    }

    if (length) {
      assert(res.length <= length, 'byte array longer than desired length');

      while (res.length < length) {
        if (littleEndian)
          res.push(0);
        else
          res.unshift(0);
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits(w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits(w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits(w) {
    // Short-cut
    if (w === 0)
      return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0)
      r++;
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength() {
    var hi = 0;
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray(num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits() {
    if (this.cmpn(0) === 0)
      return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26)
        break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength() {
    return Math.ceil(this.bitLength() / 8);
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg() {
    if (this.cmpn(0) === 0)
      return this.clone();

    var r = this.clone();
    r.sign = !this.sign;
    return r;
  };


  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor(num) {
    while (this.length < num.length)
      this.words[this.length++] = 0;

    for (var i = 0; i < num.length; i++)
      this.words[i] = this.words[i] | num.words[i];

    return this.strip();
  };

  BN.prototype.ior = function ior(num) {
    assert(!this.sign && !num.sign);
    return this.iuor(num);
  };


  // Or `num` with `this`
  BN.prototype.or = function or(num) {
    if (this.length > num.length)
      return this.clone().ior(num);
    else
      return num.clone().ior(this);
  };

  BN.prototype.uor = function uor(num) {
    if (this.length > num.length)
      return this.clone().iuor(num);
    else
      return num.clone().iuor(this);
  };


  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand(num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length)
      b = num;
    else
      b = this;

    for (var i = 0; i < b.length; i++)
      this.words[i] = this.words[i] & num.words[i];

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand(num) {
    assert(!this.sign && !num.sign);
    return this.iuand(num);
  };


  // And `num` with `this`
  BN.prototype.and = function and(num) {
    if (this.length > num.length)
      return this.clone().iand(num);
    else
      return num.clone().iand(this);
  };

  BN.prototype.uand = function uand(num) {
    if (this.length > num.length)
      return this.clone().iuand(num);
    else
      return num.clone().iuand(this);
  };


  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor(num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++)
      this.words[i] = a.words[i] ^ b.words[i];

    if (this !== a)
      for (; i < a.length; i++)
        this.words[i] = a.words[i];

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor(num) {
    assert(!this.sign && !num.sign);
    return this.iuxor(num);
  };


  // Xor `num` with `this`
  BN.prototype.xor = function xor(num) {
    if (this.length > num.length)
      return this.clone().ixor(num);
    else
      return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor(num) {
    if (this.length > num.length)
      return this.clone().iuxor(num);
    else
      return num.clone().iuxor(this);
  };


  // Set `bit` of `this`
  BN.prototype.setn = function setn(bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    while (this.length <= off)
      this.words[this.length++] = 0;

    if (val)
      this.words[off] = this.words[off] | (1 << wbit);
    else
      this.words[off] = this.words[off] & ~(1 << wbit);

    return this.strip();
  };


  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd(num) {
    // negative + positive
    if (this.sign && !num.sign) {
      this.sign = false;
      var r = this.isub(num);
      this.sign = !this.sign;
      return this._normSign();

    // positive + negative
    } else if (!this.sign && num.sign) {
      num.sign = false;
      var r = this.isub(num);
      num.sign = true;
      return r._normSign();
    }

    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      var r = a.words[i] + b.words[i] + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      var r = a.words[i] + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++)
        this.words[i] = a.words[i];
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add(num) {
    if (num.sign && !this.sign) {
      num.sign = false;
      var res = this.sub(num);
      num.sign = true;
      return res;
    } else if (!num.sign && this.sign) {
      this.sign = false;
      var res = num.sub(this);
      this.sign = true;
      return res;
    }

    if (this.length > num.length)
      return this.clone().iadd(num);
    else
      return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub(num) {
    // this - (-num) = this + num
    if (num.sign) {
      num.sign = false;
      var r = this.iadd(num);
      num.sign = true;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.sign) {
      this.sign = false;
      this.iadd(num);
      this.sign = true;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.sign = false;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a;
    var b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      var r = a.words[i] - b.words[i] + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      var r = a.words[i] + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this)
      for (; i < a.length; i++)
        this.words[i] = a.words[i];
    this.length = Math.max(this.length, i);

    if (a !== this)
      this.sign = true;

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub(num) {
    return this.clone().isub(num);
  };

  /*
  // NOTE: This could be potentionally used to generate loop-less multiplications
  function _genCombMulTo(alen, blen) {
    var len = alen + blen - 1;
    var src = [
      'var a = this.words, b = num.words, o = out.words, c = 0, w, ' +
          'mask = 0x3ffffff, shift = 0x4000000;',
      'out.length = ' + len + ';'
    ];
    for (var k = 0; k < len; k++) {
      var minJ = Math.max(0, k - alen + 1);
      var maxJ = Math.min(k, blen - 1);

      for (var j = minJ; j <= maxJ; j++) {
        var i = k - j;
        var mul = 'a[' + i + '] * b[' + j + ']';

        if (j === minJ) {
          src.push('w = ' + mul + ' + c;');
          src.push('c = (w / shift) | 0;');
        } else {
          src.push('w += ' + mul + ';');
          src.push('c += (w / shift) | 0;');
        }
        src.push('w &= mask;');
      }
      src.push('o[' + k + '] = w;');
    }
    src.push('if (c !== 0) {',
             '  o[' + k + '] = c;',
             '  out.length++;',
             '}',
             'return out;');

    return src.join('\n');
  }
  */

  BN.prototype._smallMulTo = function _smallMulTo(num, out) {
    out.sign = num.sign !== this.sign;
    out.length = this.length + num.length;

    var carry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = this.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;
      }
      out.words[k] = rword;
      carry = ncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  };

  BN.prototype._bigMulTo = function _bigMulTo(num, out) {
    out.sign = num.sign !== this.sign;
    out.length = this.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = this.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  };

  BN.prototype.mulTo = function mulTo(num, out) {
    var res;
    if (this.length + num.length < 63)
      res = this._smallMulTo(num, out);
    else
      res = this._bigMulTo(num, out);
    return res;
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul(num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul(num) {
    if (this.cmpn(0) === 0 || num.cmpn(0) === 0) {
      this.words[0] = 0;
      this.length = 1;
      return this;
    }

    var tlen = this.length;
    var nlen = num.length;

    this.sign = num.sign !== this.sign;
    this.length = this.length + num.length;
    this.words[this.length - 1] = 0;

    for (var k = this.length - 2; k >= 0; k--) {
      // Sum all words with the same `i + j = k` and accumulate `carry`,
      // note that carry could be >= 0x3ffffff
      var carry = 0;
      var rword = 0;
      var maxJ = Math.min(k, nlen - 1);
      for (var j = Math.max(0, k - tlen + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = this.words[i];
        var b = num.words[j];
        var r = a * b;

        var lo = r & 0x3ffffff;
        carry += (r / 0x4000000) | 0;
        lo += rword;
        rword = lo & 0x3ffffff;
        carry += lo >>> 26;
      }
      this.words[k] = rword;
      this.words[k + 1] += carry;
      carry = 0;
    }

    // Propagate overflows
    var carry = 0;
    for (var i = 1; i < this.length; i++) {
      var w = this.words[i] + carry;
      this.words[i] = w & 0x3ffffff;
      carry = w >>> 26;
    }

    return this.strip();
  };

  BN.prototype.imuln = function imuln(num) {
    assert(typeof num === 'number');

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = this.words[i] * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln(num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr() {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr() {
    return this.mul(this);
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow(num) {
    var w = toBitArray(num);
    if (w.length === 0)
      return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr())
      if (w[i] !== 0)
        break;

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0)
          continue;
        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);

    if (r !== 0) {
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = (this.words[i] - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }
      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (var i = this.length - 1; i >= 0; i--)
        this.words[i + s] = this.words[i];
      for (var i = 0; i < s; i++)
        this.words[i] = 0;
      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln(bits) {
    // TODO(indutny): implement me
    assert(!this.sign);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn(bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint)
      h = (hint - (hint % 26)) / 26;
    else
      h = 0;

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++)
        maskedWords.words[i] = this.words[i];
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (var i = 0; i < this.length; i++)
        this.words[i] = this.words[i + s];
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (var i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i];
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0)
      maskedWords.words[maskedWords.length++] = carry;

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    this.strip();

    return this;
  };

  BN.prototype.ishrn = function ishrn(bits, hint, extended) {
    // TODO(indutny): implement me
    assert(!this.sign);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln(bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln(bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn(bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn(bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn(bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      return false;
    }

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(!this.sign, 'imaskn works only with positive numbers');

    if (r !== 0)
      s++;
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn(bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn(num) {
    assert(typeof num === 'number');
    if (num < 0)
      return this.isubn(-num);

    // Possible sign change
    if (this.sign) {
      if (this.length === 1 && this.words[0] < num) {
        this.words[0] = num - this.words[0];
        this.sign = false;
        return this;
      }

      this.sign = false;
      this.isubn(num);
      this.sign = true;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn(num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1)
        this.words[i + 1] = 1;
      else
        this.words[i + 1]++;
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn(num) {
    assert(typeof num === 'number');
    if (num < 0)
      return this.iaddn(-num);

    if (this.sign) {
      this.sign = false;
      this.iaddn(num);
      this.sign = true;
      return this;
    }

    this.words[0] -= num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] < 0; i++) {
      this.words[i] += 0x4000000;
      this.words[i + 1] -= 1;
    }

    return this.strip();
  };

  BN.prototype.addn = function addn(num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn(num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs() {
    this.sign = false;

    return this;
  };

  BN.prototype.abs = function abs() {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
    // Bigger storage is needed
    var len = num.length + shift;
    var i;
    if (this.words.length < len) {
      var t = new Array(len);
      for (var i = 0; i < this.length; i++)
        t[i] = this.words[i];
      this.words = t;
    } else {
      i = this.length;
    }

    // Zeroify rest
    this.length = Math.max(this.length, len);
    for (; i < this.length; i++)
      this.words[i] = 0;

    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var w = this.words[i + shift] + carry;
      var right = num.words[i] * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      var w = this.words[i + shift] + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0)
      return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = -this.words[i] + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.sign = true;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv(num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1];
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1];
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++)
        q.words[i] = 0;
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (!diff.sign) {
      a = diff;
      if (q)
        q.words[m] = 1;
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = a.words[b.length + j] * 0x4000000 + a.words[b.length + j - 1];

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.sign) {
        qj--;
        a.sign = false;
        a._ishlnsubmul(b, 1, j);
        if (a.cmpn(0) !== 0)
          a.sign = !a.sign;
      }
      if (q)
        q.words[j] = qj;
    }
    if (q)
      q.strip();
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0)
      a.iushrn(shift);
    return { div: q ? q : null, mod: a };
  };

  BN.prototype.divmod = function divmod(num, mode, positive) {
    assert(num.cmpn(0) !== 0);

    if (this.sign && !num.sign) {
      var res = this.neg().divmod(num, mode);
      var div;
      var mod;
      if (mode !== 'mod')
        div = res.div.neg();
      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.neg)
          mod = mod.add(num);
      }
      return {
        div: div,
        mod: mod
      };
    } else if (!this.sign && num.sign) {
      var res = this.divmod(num.neg(), mode);
      var div;
      if (mode !== 'mod')
        div = res.div.neg();
      return { div: div, mod: res.mod };
    } else if (this.sign && num.sign) {
      var res = this.neg().divmod(num.neg(), mode);
      var mod;
      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.neg)
          mod = mod.isub(num);
      }
      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0)
      return { div: new BN(0), mod: this };

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div')
        return { div: this.divn(num.words[0]), mod: null };
      else if (mode === 'mod')
        return { div: null, mod: new BN(this.modn(num.words[0])) };
      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div(num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod(num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod(num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound(num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.cmpn(0) === 0)
      return dm.div;

    var mod = dm.div.sign ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0)
      return dm.div;

    // Round up
    return dm.div.sign ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn(num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--)
      acc = (p * acc + this.words[i]) % num;

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn(num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = this.words[i] + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn(num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd(p) {
    assert(!p.sign);
    assert(p.cmpn(0) !== 0);

    var x = this;
    var y = p.clone();

    if (x.sign)
      x = x.umod(p);
    else
      x = x.clone();

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (x.cmpn(0) !== 0) {
      while (x.isEven()) {
        x.iushrn(1);
        if (A.isEven() && B.isEven()) {
          A.iushrn(1);
          B.iushrn(1);
        } else {
          A.iadd(yp).iushrn(1);
          B.isub(xp).iushrn(1);
        }
      }

      while (y.isEven()) {
        y.iushrn(1);
        if (C.isEven() && D.isEven()) {
          C.iushrn(1);
          D.iushrn(1);
        } else {
          C.iadd(yp).iushrn(1);
          D.isub(xp).iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp(p) {
    assert(!p.sign);
    assert(p.cmpn(0) !== 0);

    var a = this;
    var b = p.clone();

    if (a.sign)
      a = a.umod(p);
    else
      a = a.clone();

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      while (a.isEven()) {
        a.iushrn(1);
        if (x1.isEven())
          x1.iushrn(1);
        else
          x1.iadd(delta).iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
        if (x2.isEven())
          x2.iushrn(1);
        else
          x2.iadd(delta).iushrn(1);
      }
      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0)
      res = x1;
    else
      res = x2;

    if (res.cmpn(0) < 0)
      res.iadd(p);

    return res;
  };

  BN.prototype.gcd = function gcd(num) {
    if (this.cmpn(0) === 0)
      return num.clone();
    if (num.cmpn(0) === 0)
      return this.clone();

    var a = this.clone();
    var b = num.clone();
    a.sign = false;
    b.sign = false;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven())
        a.iushrn(1);
      while (b.isEven())
        b.iushrn(1);

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm(num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven() {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd() {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln(num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn(bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      for (var i = this.length; i < s + 1; i++)
        this.words[i] = 0;
      this.words[s] |= q;
      this.length = s + 1;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i];
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.cmpn = function cmpn(num) {
    var sign = num < 0;
    if (sign)
      num = -num;

    if (this.sign && !sign)
      return -1;
    else if (!this.sign && sign)
      return 1;

    num &= 0x3ffffff;
    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      var w = this.words[0];
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.sign)
      res = -res;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp(num) {
    if (this.sign && !num.sign)
      return -1;
    else if (!this.sign && num.sign)
      return 1;

    var res = this.ucmp(num);
    if (this.sign)
      return -res;
    else
      return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp(num) {
    // At this point both numbers have the same sign
    if (this.length > num.length)
      return 1;
    else if (this.length < num.length)
      return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i];
      var b = num.words[i];

      if (a === b)
        continue;
      if (a < b)
        res = -1;
      else if (a > b)
        res = 1;
      break;
    }
    return res;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red(num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(!this.sign, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed() {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed(ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd(num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd(num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub(num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub(num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl(num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.ushl(this, num);
  };

  BN.prototype.redMul = function redMul(num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul(num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr() {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr() {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt() {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm() {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg() {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow(num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime(name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp() {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce(num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split(input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK(num) {
    return num.imul(this.k);
  };

  function K256() {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split(input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++)
      output.words[i] = input.words[i];
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (var i = 10; i < input.length; i++) {
      var next = input.words[i];
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    input.words[i - 10] = prev >>> 22;
    input.length -= 9;
  };

  K256.prototype.imulK = function imulK(num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var hi;
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i];
      hi = w * 0x40;
      lo += w * 0x3d1;
      hi += (lo / 0x4000000) | 0;
      lo &= 0x3ffffff;

      num.words[i] = lo;

      lo = hi;
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0)
        num.length--;
    }
    return num;
  };

  function P224() {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192() {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519() {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK(num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = num.words[i] * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0)
      num.words[num.length++] = carry;
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime(name) {
    // Cached version of prime
    if (primes[name])
      return primes[name];

    var prime;
    if (name === 'k256')
      prime = new K256();
    else if (name === 'p224')
      prime = new P224();
    else if (name === 'p192')
      prime = new P192();
    else if (name === 'p25519')
      prime = new P25519();
    else
      throw new Error('Unknown prime ' + name);
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red(m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1(a) {
    assert(!a.sign, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2(a, b) {
    assert(!a.sign && !b.sign, 'red works only with positives');
    assert(a.red && a.red === b.red,
           'red works only with red numbers');
  };

  Red.prototype.imod = function imod(a) {
    if (this.prime)
      return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg(a) {
    var r = a.clone();
    r.sign = !r.sign;
    return r.iadd(this.m)._forceRed(this);
  };

  Red.prototype.add = function add(a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0)
      res.isub(this.m);
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd(a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0)
      res.isub(this.m);
    return res;
  };

  Red.prototype.sub = function sub(a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0)
      res.iadd(this.m);
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub(a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0)
      res.iadd(this.m);
    return res;
  };

  Red.prototype.shl = function shl(a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul(a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul(a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr(a) {
    return this.imul(a, a);
  };

  Red.prototype.sqr = function sqr(a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt(a) {
    if (a.cmpn(0) === 0)
      return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      var r = this.pow(a, pow);
      return r;
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (q.cmpn(0) !== 0 && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(q.cmpn(0) !== 0);

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);
    while (this.pow(z, lpow).cmp(nOne) !== 0)
      z.redIAdd(nOne);

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++)
        tmp = tmp.redSqr();
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm(a) {
    var inv = a._invmp(this.m);
    if (inv.sign) {
      inv.sign = false;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow(a, num) {
    var w = toBitArray(num);
    if (w.length === 0)
      return new BN(1);

    // Skip leading zeroes
    var res = a;
    for (var i = 0; i < w.length; i++, res = this.sqr(res))
      if (w[i] !== 0)
        break;

    if (++i < w.length) {
      for (var q = this.sqr(res); i < w.length; i++, q = this.sqr(q)) {
        if (w[i] === 0)
          continue;
        res = this.mul(res, q);
      }
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo(num) {
    var r = num.umod(this.m);
    if (r === num)
      return r.clone();
    else
      return r;
  };

  Red.prototype.convertFrom = function convertFrom(num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont(num) {
    return new Mont(num);
  };

  function Mont(m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0)
      this.shift += 26 - (this.shift % 26);
    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo(num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom(num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul(a, b) {
    if (a.cmpn(0) === 0 || b.cmpn(0) === 0) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0)
      res = u.isub(this.m);
    else if (u.cmpn(0) < 0)
      res = u.iadd(this.m);

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul(a, b) {
    if (a.cmpn(0) === 0 || b.cmpn(0) === 0)
      return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0)
      res = u.isub(this.m);
    else if (u.cmpn(0) < 0)
      res = u.iadd(this.m);

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm(a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };

  })(typeof module === 'undefined' || module, this);

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(77)(module)))

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

  var __WEBPACK_AMD_DEFINE_RESULT__;/*! decimal.js v4.0.3 https://github.com/MikeMcl/decimal.js/LICENCE */
  ;(function (global) {
      'use strict';


      /*
       *  decimal.js v4.0.3
       *  An arbitrary-precision Decimal type for JavaScript.
       *  https://github.com/MikeMcl/decimal.js
       *  Copyright (c) 2014 Michael Mclaughlin <M8ch88l@gmail.com>
       *  MIT Expat Licence
       */


      var convertBase, decimal, noConflict,
          crypto = global['crypto'],
          external = true,
          id = 0,
          mathfloor = Math.floor,
          mathpow = Math.pow,
          outOfRange,
          toString = Object.prototype.toString,
          BASE = 1e7,
          LOGBASE = 7,
          NUMERALS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
          P = {},

          /*
           The maximum exponent magnitude.
           The limit on the value of toExpNeg, toExpPos, minE and maxE.
           */
          EXP_LIMIT = 9e15,                      // 0 to 9e15

          /*
           The limit on the value of precision, and on the argument to toDecimalPlaces,
           toExponential, toFixed, toFormat, toPrecision and toSignificantDigits.
           */
          MAX_DIGITS = 1E9,                      // 0 to 1e+9

          /*
           To decide whether or not to calculate x.pow(integer y) using the 'exponentiation by
           squaring' algorithm or by exp(y*ln(x)), the number of significant digits of x is multiplied
           by y. If this number is less than INT_POW_LIMIT then the former algorithm is used.
           */
          INT_POW_LIMIT = 3000,                  // 0 to 5000

          // The natural logarithm of 10 (1025 digits).
          LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058';


      // Decimal prototype methods


      /*
       * Return a new Decimal whose value is the absolute value of this Decimal.
       *
       */
      P['absoluteValue'] = P['abs'] = function () {
          var x = new this['constructor'](this);

          if ( x['s'] < 0 ) {
              x['s'] = 1;
          }

          return rnd(x);
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in
       * the direction of positive Infinity.
       *
       */
      P['ceil'] = function () {

          return rnd( new this['constructor'](this), this['e'] + 1, 2 );
      };


      /*
       * Return
       *   1    if the value of this Decimal is greater than the value of Decimal(y, b),
       *  -1    if the value of this Decimal is less than the value of Decimal(y, b),
       *   0    if they have the same value,
       *  null  if the value of either Decimal is NaN.
       *
       */
      P['comparedTo'] = P['cmp'] = function ( y, b ) {
          var a,
              x = this,
              xc = x['c'],
              yc = ( id = -id, y = new x['constructor']( y, b ), y['c'] ),
              i = x['s'],
              j = y['s'],
              k = x['e'],
              l = y['e'];

          // Either NaN?
          if ( !i || !j ) {
              return null;
          }

          a = xc && !xc[0];
          b = yc && !yc[0];

          // Either zero?
          if ( a || b ) {
              return a ? b ? 0 : -j : i;
          }

          // Signs differ?
          if ( i != j ) {
              return i;
          }

          a = i < 0;

          // Either Infinity?
          if ( !xc || !yc ) {
              return k == l ? 0 : !xc ^ a ? 1 : -1;
          }

          // Compare exponents.
          if ( k != l ) {
              return k > l ^ a ? 1 : -1;
          }

          // Compare digit by digit.
          for ( i = -1,
                j = ( k = xc.length ) < ( l = yc.length ) ? k : l;
                ++i < j; ) {

              if ( xc[i] != yc[i] ) {
                  return xc[i] > yc[i] ^ a ? 1 : -1;
              }
          }

          // Compare lengths.
          return k == l ? 0 : k > l ^ a ? 1 : -1;
      };


      /*
       * Return the number of decimal places of the value of this Decimal.
       *
       */
       P['decimalPlaces'] = P['dp'] = function () {
          var c, v,
              n = null;

          if ( c = this['c'] ) {
              n = ( ( v = c.length - 1 ) - mathfloor( this['e'] / LOGBASE ) ) * LOGBASE;

              if ( v = c[v] ) {

                  // Subtract the number of trailing zeros of the last number.
                  for ( ; v % 10 == 0; v /= 10, n-- );
              }

              if ( n < 0 ) {
                  n = 0;
              }
          }

          return n;
      };


      /*
       *  n / 0 = I
       *  n / N = N
       *  n / I = 0
       *  0 / n = 0
       *  0 / 0 = N
       *  0 / N = N
       *  0 / I = 0
       *  N / n = N
       *  N / 0 = N
       *  N / N = N
       *  N / I = N
       *  I / n = I
       *  I / 0 = I
       *  I / N = N
       *  I / I = N
       *
       * Return a new Decimal whose value is the value of this Decimal divided by Decimal(y, b),
       * rounded to precision significant digits using rounding mode rounding.
       *
       */
      P['dividedBy'] = P['div'] = function ( y, b ) {
          id = 2;

          return div( this, new this['constructor']( y, b ) );
      };


      /*
       * Return a new Decimal whose value is the integer part of dividing the value of this Decimal by
       * the value of Decimal(y, b), rounded to precision significant digits using rounding mode
       * rounding.
       *
       */
      P['dividedToIntegerBy'] = P['divToInt'] = function ( y, b ) {
          var x = this,
              Decimal = x['constructor'];
          id = 18;

          return rnd(
            div( x, new Decimal( y, b ), 0, 1, 1 ), Decimal['precision'], Decimal['rounding']
          );
      };


      /*
       * Return true if the value of this Decimal is equal to the value of Decimal(n, b), otherwise
       * return false.
       *
       */
      P['equals'] = P['eq'] = function ( n, b ) {
          id = 3;

          return this['cmp']( n, b ) === 0;
      };


      /*
       * Return a new Decimal whose value is the exponential of the value of this Decimal, i.e. the
       * base e raised to the power the value of this Decimal, rounded to precision significant digits
       * using rounding mode rounding.
       *
       */
      P['exponential'] = P['exp'] = function () {

          return exp(this);
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in
       * the direction of negative Infinity.
       *
       */
      P['floor'] = function () {

          return rnd( new this['constructor'](this), this['e'] + 1, 3 );
      };


      /*
       * Return true if the value of this Decimal is greater than the value of Decimal(n, b), otherwise
       * return false.
       *
       */
      P['greaterThan'] = P['gt'] = function ( n, b ) {
          id = 4;

          return this['cmp']( n, b ) > 0;
      };


      /*
       * Return true if the value of this Decimal is greater than or equal to the value of
       * Decimal(n, b), otherwise return false.
       *
       */
      P['greaterThanOrEqualTo'] = P['gte'] = function ( n, b ) {
          id = 5;
          b = this['cmp']( n, b );

          return b == 1 || b === 0;
      };


      /*
       * Return true if the value of this Decimal is a finite number, otherwise return false.
       *
       */
      P['isFinite'] = function () {

          return !!this['c'];
      };


      /*
       * Return true if the value of this Decimal is an integer, otherwise return false.
       *
       */
      P['isInteger'] = P['isInt'] = function () {

          return !!this['c'] && mathfloor( this['e'] / LOGBASE ) > this['c'].length - 2;
      };


      /*
       * Return true if the value of this Decimal is NaN, otherwise return false.
       *
       */
      P['isNaN'] = function () {

          return !this['s'];
      };


      /*
       * Return true if the value of this Decimal is negative, otherwise return false.
       *
       */
      P['isNegative'] = P['isNeg'] = function () {

          return this['s'] < 0;
      };


      /*
       * Return true if the value of this Decimal is 0 or -0, otherwise return false.
       *
       */
      P['isZero'] = function () {

          return !!this['c'] && this['c'][0] == 0;
      };


      /*
       * Return true if the value of this Decimal is less than Decimal(n, b), otherwise return false.
       *
       */
      P['lessThan'] = P['lt'] = function ( n, b ) {
          id = 6;

          return this['cmp']( n, b ) < 0;
      };


      /*
       * Return true if the value of this Decimal is less than or equal to Decimal(n, b), otherwise
       * return false.
       *
       */
      P['lessThanOrEqualTo'] = P['lte'] = function ( n, b ) {
          id = 7;
          b = this['cmp']( n, b );

          return b == -1 || b === 0;
      };


      /*
       * Return the logarithm of the value of this Decimal to the specified base, rounded
       * to precision significant digits using rounding mode rounding.
       *
       * If no base is specified, return log[10](arg).
       *
       * log[base](arg) = ln(arg) / ln(base)
       *
       * The result will always be correctly rounded if the base of the log is 2 or 10, and
       * 'almost always' if not:
       *
       * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
       * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
       * between the result and the correctly rounded result will be one ulp (unit in the last place).
       *
       * log[-b](a)       = NaN
       * log[0](a)        = NaN
       * log[1](a)        = NaN
       * log[NaN](a)      = NaN
       * log[Infinity](a) = NaN
       * log[b](0)        = -Infinity
       * log[b](-0)       = -Infinity
       * log[b](-a)       = NaN
       * log[b](1)        = 0
       * log[b](Infinity) = Infinity
       * log[b](NaN)      = NaN
       *
       * [base] {number|string|Decimal} The base of the logarithm.
       * [b] {number} The base of base.
       *
       */
      P['logarithm'] = P['log'] = function ( base, b ) {
          var base10, c, denom, i, inf, num, sd, sd10, r,
              arg = this,
              Decimal = arg['constructor'],
              pr = Decimal['precision'],
              rm = Decimal['rounding'],
              guard = 5;

          // Default base is 10.
          if ( base == null ) {
              base = new Decimal(10);
              base10 = true;
          } else {
              id = 15;
              base = new Decimal( base, b );
              c = base['c'];

              // If base < 0 or +-Infinity/NaN or 0 or 1.
              if ( base['s'] < 0 || !c || !c[0] || !base['e'] && c[0] == 1 && c.length == 1 ) {

                  return new Decimal(NaN);
              }
              base10 = base['eq'](10);
          }
          c = arg['c'];

          // If arg < 0 or +-Infinity/NaN or 0 or 1.
          if ( arg['s'] < 0 || !c || !c[0] || !arg['e'] && c[0] == 1 && c.length == 1 ) {

              return new Decimal( c && !c[0] ? -1 / 0 : arg['s'] != 1 ? NaN : c ? 0 : 1 / 0 );
          }

          /*
            The result will have an infinite decimal expansion if base is 10 and arg is not an
            integer power of 10...
           */
          inf = base10 && ( i = c[0], c.length > 1 || i != 1 && i != 10 &&
            i != 1e2 && i != 1e3 && i != 1e4 && i != 1e5 && i != 1e6 );
              /*
              // or if base last digit's evenness is not the same as arg last digit's evenness...
              // (FAILS when e.g. base.c[0] = 10 and c[0] = 1)
              || ( base['c'][ base['c'].length - 1 ] & 1 ) != ( c[ c.length - 1 ] & 1 )
                // or if base is 2 and there is more than one 1 in arg in base 2.
                // (SLOWS the method down significantly)
                || base['eq'](2) && arg.toString(2).replace( /[^1]+/g, '' ) != '1';
               */

          external = false;
          sd = pr + guard;
          sd10 = sd + 10;

          num = ln( arg, sd );

          if (base10) {

              if ( sd10 > LN10.length ) {
                  ifExceptionsThrow( Decimal, 1, sd10, 'log' );
              }
              denom = new Decimal( LN10.slice( 0, sd10 ) );
          } else {
              denom = ln( base, sd );
          }

          // The result will have 5 rounding digits.
          r = div( num, denom, sd, 1 );

          /*
           If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
           calculate 10 further digits.

           If the result is known to have an infinite decimal expansion, repeat this until it is
           clear that the result is above or below the boundary. Otherwise, if after calculating
           the 10 further digits, the last 14 are nines, round up and assume the result is exact.
           Also assume the result is exact if the last 14 are zero.

           Example of a result that will be incorrectly rounded:
           log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
           The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7,
           but it will be given as 2.6 as there are 15 zeros immediately after the requested
           decimal place, so the exact result would be assumed to be 2.6, which rounded using
           ROUND_CEIL to 1 decimal place is still 2.6.
           */
          if ( checkRoundingDigits( r['c'], i = pr, rm ) ) {

              do {
                  sd += 10;
                  num = ln( arg, sd );

                  if (base10) {
                      sd10 = sd + 10;

                      if ( sd10 > LN10.length ) {
                          ifExceptionsThrow( Decimal, 1, sd10, 'log' );
                      }
                      denom = new Decimal( LN10.slice( 0, sd10 ) );
                  } else {
                      denom = ln( base, sd );
                  }

                  r = div( num, denom, sd, 1 );

                  if ( !inf ) {

                      // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
                      if ( +coefficientToString( r['c'] ).slice( i + 1, i + 15 ) + 1 == 1e14 ) {
                          r = rnd( r, pr + 1, 0 );
                      }

                      break;
                  }
              } while ( checkRoundingDigits( r['c'], i += 10, rm ) );
          }
          external = true;

          return rnd( r, pr, rm );
      };


      /*
       *  n - 0 = n
       *  n - N = N
       *  n - I = -I
       *  0 - n = -n
       *  0 - 0 = 0
       *  0 - N = N
       *  0 - I = -I
       *  N - n = N
       *  N - 0 = N
       *  N - N = N
       *  N - I = N
       *  I - n = I
       *  I - 0 = I
       *  I - N = N
       *  I - I = N
       *
       * Return a new Decimal whose value is the value of this Decimal minus Decimal(y, b), rounded
       * to precision significant digits using rounding mode rounding.
       *
       */
      P['minus'] = function ( y, b ) {
          var t, i, j, xLTy,
              x = this,
              Decimal = x['constructor'],
              a = x['s'];

          id = 8;
          y = new Decimal( y, b );
          b = y['s'];

          // Either NaN?
          if ( !a || !b ) {

              return new Decimal(NaN);
          }

          // Signs differ?
          if ( a != b ) {
              y['s'] = -b;

              return x['plus'](y);
          }

          var xc = x['c'],
              yc = y['c'],
              e = mathfloor( y['e'] / LOGBASE ),
              k = mathfloor( x['e'] / LOGBASE ),
              pr = Decimal['precision'],
              rm = Decimal['rounding'];

          if ( !k || !e ) {

              // Either Infinity?
              if ( !xc || !yc ) {

                  return xc ? ( y['s'] = -b, y ) : new Decimal( yc ? x : NaN );
              }

              // Either zero?
              if ( !xc[0] || !yc[0] ) {

                  // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                  x = yc[0] ? ( y['s'] = -b, y ) : new Decimal( xc[0] ? x :

                    // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                    rm == 3 ? -0 : 0 );

                  return external ? rnd( x, pr, rm ) : x;
              }
          }

          xc = xc.slice();
          i = xc.length;

          // Determine which is the bigger number. Prepend zeros to equalise exponents.
          if ( a = k - e ) {

              if ( xLTy = a < 0 ) {
                  a = -a;
                  t = xc;
                  i = yc.length;
              } else {
                  e = k;
                  t = yc;
              }

              if ( ( k = Math.ceil( pr / LOGBASE ) ) > i ) {
                  i = k;
              }

              /*
               Numbers with massively different exponents would result in a massive number of
               zeros needing to be prepended, but this can be avoided while still ensuring correct
               rounding by limiting the number of zeros to max( pr, i ) + 2, where pr is precision and
               i is the length of the coefficient of whichever is greater, x or y.
               */
              if ( a > ( i += 2 ) ) {
                  a = i;
                  t.length = 1;
              }

              t.reverse();
              for ( b = a; b--; t.push(0) );
              t.reverse();
          } else {
              // Exponents equal. Check digits.

              if ( xLTy = i < ( j = yc.length ) ) {
                  j = i;
              }

              for ( a = b = 0; b < j; b++ ) {

                  if ( xc[b] != yc[b] ) {
                      xLTy = xc[b] < yc[b];

                      break;
                  }
              }
          }

          // x < y? Point xc to the array of the bigger number.
          if ( xLTy ) {
              t = xc, xc = yc, yc = t;
              y['s'] = -y['s'];
          }

          /*
           Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only
           needs to start at yc length.
           */
          if ( ( b = -( ( j = xc.length ) - yc.length ) ) > 0 ) {

              for ( ; b--; xc[j++] = 0 );
          }

          // Subtract yc from xc.
          for ( k = BASE - 1, b = yc.length; b > a; ) {

              if ( xc[--b] < yc[b] ) {

                  for ( i = b; i && !xc[--i]; xc[i] = k );
                  --xc[i];
                  xc[b] += BASE;
              }
              xc[b] -= yc[b];
          }

          // Remove trailing zeros.
          for ( ; xc[--j] == 0; xc.pop() );

          // Remove leading zeros and adjust exponent accordingly.
          for ( ; xc[0] == 0; xc.shift(), --e );

          if ( !xc[0] ) {

              // Zero.
              xc = [ e = 0 ];

              // Following IEEE 754 (2008) 6.3, n - n = -0 when rounding towards -Infinity.
              y['s'] = rm == 3 ? -1 : 1;
          }

          y['c'] = xc;

          // Get the number of digits of xc[0].
          for ( a = 1, b = xc[0]; b >= 10; b /= 10, a++ );
          y['e'] = a + e * LOGBASE - 1;

          return external ? rnd( y, pr, rm ) : y;
      };


      /*
       *   n % 0 =  N
       *   n % N =  N
       *   n % I =  n
       *   0 % n =  0
       *  -0 % n = -0
       *   0 % 0 =  N
       *   0 % N =  N
       *   0 % I =  0
       *   N % n =  N
       *   N % 0 =  N
       *   N % N =  N
       *   N % I =  N
       *   I % n =  N
       *   I % 0 =  N
       *   I % N =  N
       *   I % I =  N
       *
       * Return a new Decimal whose value is the value of this Decimal modulo Decimal(y, b), rounded
       * to precision significant digits using rounding mode rounding.
       *
       * The result depends on the modulo mode.
       *
       */
      P['modulo'] = P['mod'] = function ( y, b ) {
          var n, q,
              x = this,
              Decimal = x['constructor'],
              m = Decimal['modulo'];

          id = 9;
          y = new Decimal( y, b );
          b = y['s'];
          n = !x['c'] || !b || y['c'] && !y['c'][0];

          /*
           Return NaN if x is Infinity or NaN, or y is NaN or zero, else return x if y is Infinity
           or x is zero.
           */
          if ( n || !y['c'] || x['c'] && !x['c'][0] ) {

              return n
                ? new Decimal(NaN)
                : rnd( new Decimal(x), Decimal['precision'], Decimal['rounding'] );
          }

          external = false;

          if ( m == 9 ) {

              // Euclidian division: q = sign(y) * floor(x / abs(y))
              // r = x - qy    where  0 <= r < abs(y)
              y['s'] = 1;
              q = div( x, y, 0, 3, 1 );
              y['s'] = b;
              q['s'] *= b;
          } else {
              q = div( x, y, 0, m, 1 );
          }

          q = q['times'](y);
          external = true;

          return x['minus'](q);
      };


      /*
       * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
       * rounded to precision significant digits using rounding mode rounding.
       *
       */
      P['naturalLogarithm'] = P['ln'] = function () {

          return ln(this);
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if
       * multiplied by -1.
       *
       */
      P['negated'] = P['neg'] = function () {
          var x = new this['constructor'](this);
          x['s'] = -x['s'] || null;

          return rnd(x);
      };


      /*
       *  n + 0 = n
       *  n + N = N
       *  n + I = I
       *  0 + n = n
       *  0 + 0 = 0
       *  0 + N = N
       *  0 + I = I
       *  N + n = N
       *  N + 0 = N
       *  N + N = N
       *  N + I = N
       *  I + n = I
       *  I + 0 = I
       *  I + N = N
       *  I + I = I
       *
       * Return a new Decimal whose value is the value of this Decimal plus Decimal(y, b), rounded
       * to precision significant digits using rounding mode rounding.
       *
       */
      P['plus'] = function ( y, b ) {
          var t,
              x = this,
              Decimal = x['constructor'],
              a = x['s'];

          id = 10;
          y = new Decimal( y, b );
          b = y['s'];

          // Either NaN?
          if ( !a || !b ) {

              return new Decimal(NaN);
          }

          // Signs differ?
          if ( a != b ) {
              y['s'] = -b;

              return x['minus'](y);
          }

          var xc = x['c'],
              yc = y['c'],
              e = mathfloor( y['e'] / LOGBASE ),
              k = mathfloor( x['e'] / LOGBASE ),
              pr = Decimal['precision'],
              rm = Decimal['rounding'];

          if ( !k || !e ) {

              // Either Infinity?
              if ( !xc || !yc ) {

                  // Return +-Infinity.
                  return new Decimal( a / 0 );
              }

              // Either zero?
              if ( !xc[0] || !yc[0] ) {

                  // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                  x = yc[0] ? y : new Decimal( xc[0] ? x : a * 0 );

                  return external ? rnd( x, pr, rm ) : x;
              }
          }

          xc = xc.slice();

          // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
          if ( a = k - e ) {

              if ( a < 0 ) {
                  a = -a;
                  t = xc;
                  b = yc.length;
              } else {
                  e = k;
                  t = yc;
                  b = xc.length;
              }

              if ( ( k = Math.ceil( pr / LOGBASE ) ) > b ) {
                  b = k;
              }

              // Limit number of zeros prepended to max( pr, b ) + 1.
              if ( a > ++b ) {
                  a = b;
                  t.length = 1;
              }

              for ( t.reverse(); a--; t.push(0) );
              t.reverse();
          }

          // Point xc to the longer array.
          if ( xc.length - yc.length < 0 ) {
              t = yc, yc = xc, xc = t;
          }

          // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.
          for ( a = yc.length, b = 0, k = BASE; a; xc[a] %= k ) {
              b = ( xc[--a] = xc[a] + yc[a] + b ) / k | 0;
          }

          if (b) {
              xc.unshift(b);
              ++e;
          }

          // Remove trailing zeros.
          for ( a = xc.length; xc[--a] == 0; xc.pop() );

          // No need to check for zero, as +x + +y != 0 && -x + -y != 0

          y['c'] = xc;

          // Get the number of digits of xc[0].
          for ( a = 1, b = xc[0]; b >= 10; b /= 10, a++ );
          y['e'] = a + e * LOGBASE - 1;

          return external ? rnd( y, pr, rm ) : y;
      };


      /*
       * Return the number of significant digits of this Decimal.
       *
       * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
       *
       */
      P['precision'] = P['sd'] = function (z) {
          var n = null,
              x = this;

          if ( z != n && z !== !!z && z !== 1 && z !== 0 ) {

              // 'precision() argument not a boolean or binary digit: {z}'
              ifExceptionsThrow( x['constructor'], 'argument', z, 'precision', 1 );
          }

          if ( x['c'] ) {
              n = getCoeffLength( x['c'] );

              if ( z && x['e'] + 1 > n ) {
                  n = x['e'] + 1;
              }
          }

          return n;
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
       * rounding mode rounding.
       *
       */
      P['round'] = function () {
          var x = this,
              Decimal = x['constructor'];

          return rnd( new Decimal(x), x['e'] + 1, Decimal['rounding'] );
      };


      /*
       *  sqrt(-n) =  N
       *  sqrt( N) =  N
       *  sqrt(-I) =  N
       *  sqrt( I) =  I
       *  sqrt( 0) =  0
       *  sqrt(-0) = -0
       *
       * Return a new Decimal whose value is the square root of this Decimal, rounded to precision
       * significant digits using rounding mode rounding.
       *
       */
      P['squareRoot'] = P['sqrt'] = function () {
          var m, n, sd, r, rep, t,
              x = this,
              c = x['c'],
              s = x['s'],
              e = x['e'],
              Decimal = x['constructor'],
              half = new Decimal(0.5);

          // Negative/NaN/Infinity/zero?
          if ( s !== 1 || !c || !c[0] ) {

              return new Decimal( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );
          }

          external = false;

          // Initial estimate.
          s = Math.sqrt( +x );

          /*
           Math.sqrt underflow/overflow?
           Pass x to Math.sqrt as integer, then adjust the exponent of the result.
           */
          if ( s == 0 || s == 1 / 0 ) {
              n = coefficientToString(c);

              if ( ( n.length + e ) % 2 == 0 ) {
                  n += '0';
              }

              s = Math.sqrt(n);
              e = mathfloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );

              if ( s == 1 / 0 ) {
                  n = '1e' + e;
              } else {
                  n = s.toExponential();
                  n = n.slice( 0, n.indexOf('e') + 1 ) + e;
              }

              r = new Decimal(n);
          } else {
              r = new Decimal( s.toString() );
          }

          sd = ( e = Decimal['precision'] ) + 3;

          // Newton-Raphson iteration.
          for ( ; ; ) {
              t = r;
              r = half['times']( t['plus']( div( x, t, sd + 2, 1 ) ) );

              if ( coefficientToString( t['c'] ).slice( 0, sd ) ===
                  ( n = coefficientToString( r['c'] ) ).slice( 0, sd ) ) {
                  n = n.slice( sd - 3, sd + 1 );

                  /*
                   The 4th rounding digit may be in error by -1 so if the 4 rounding digits are
                   9999 or 4999 (i.e. approaching a rounding boundary) continue the iteration.
                   */
                  if ( n == '9999' || !rep && n == '4999' ) {

                      /*
                       On the first iteration only, check to see if rounding up gives the exact result
                       as the nines may infinitely repeat.
                       */
                      if ( !rep ) {
                          rnd( t, e + 1, 0 );

                          if ( t['times'](t)['eq'](x) ) {
                              r = t;

                              break;
                          }
                      }
                      sd += 4;
                      rep = 1;
                  } else {

                      /*
                       If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
                       If not, then there are further digits and m will be truthy.
                       */
                      if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {

                          // Truncate to the first rounding digit.
                          rnd( r, e + 1, 1 );
                          m = !r['times'](r)['eq'](x);
                      }

                      break;
                  }
              }
          }
          external = true;

          return rnd( r, e, Decimal['rounding'], m );
      };


      /*
       *  n * 0 = 0
       *  n * N = N
       *  n * I = I
       *  0 * n = 0
       *  0 * 0 = 0
       *  0 * N = N
       *  0 * I = N
       *  N * n = N
       *  N * 0 = N
       *  N * N = N
       *  N * I = N
       *  I * n = I
       *  I * 0 = N
       *  I * N = N
       *  I * I = I
       *
       * Return a new Decimal whose value is this Decimal times Decimal(y), rounded to precision
       * significant digits using rounding mode rounding.
       *
       */
      P['times'] = function ( y, b ) {
          var c, e,
              x = this,
              Decimal = x['constructor'],
              xc = x['c'],
              yc = ( id = 11, y = new Decimal( y, b ), y['c'] ),
              i = mathfloor( x['e'] / LOGBASE ),
              j = mathfloor( y['e'] / LOGBASE ),
              a = x['s'];

          b = y['s'];

          y['s'] = a == b ? 1 : -1;

          // Either NaN/Infinity/0?
          if ( !i && ( !xc || !xc[0] ) || !j && ( !yc || !yc[0] ) ) {

              // Either NaN?
              return new Decimal( !a || !b ||

                // x is 0 and y is Infinity  or y is 0 and x is Infinity?
                xc && !xc[0] && !yc || yc && !yc[0] && !xc

                  // Return NaN.
                  ? NaN

                  // Either Infinity?
                  : !xc || !yc

                    // Return +-Infinity.
                    ? y['s'] / 0

                    // x or y is 0. Return +-0.
                    : y['s'] * 0 );
          }

          e = i + j;
          a = xc.length;
          b = yc.length;

          if ( a < b ) {

              // Swap.
              c = xc, xc = yc, yc = c;
              j = a, a = b, b = j;
          }

          for ( j = a + b, c = []; j--; c.push(0) );

          // Multiply!
          for ( i = b - 1; i > -1; i-- ) {
              b = 0;

              for ( j = a + i; j > i; ) {
                    b = c[j] + yc[i] * xc[j - i - 1] + b;
                    c[j--] = b % BASE | 0;
                    b = b / BASE | 0;
              }
              c[j] = ( c[j] + b ) % BASE | 0;
          }

          if (b) {
              ++e;
          } else if ( !c[0] ) {

              // Remove leading zero.
              c.shift();
          }

          // Remove trailing zeros.
          for ( j = c.length; !c[--j]; c.pop() );
          y['c'] = c;

          // Get the number of digits of c[0].
          for ( a = 1, b = c[0]; b >= 10; b /= 10, a++ );
          y['e'] = a + e * LOGBASE - 1;

          return external ? rnd( y, Decimal['precision'], Decimal['rounding'] ) : y;
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of dp
       * decimal places using rounding mode rm or rounding if rm is omitted.
       *
       * If dp is omitted, return a new Decimal whose value is the value of this Decimal.
       *
       * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * 'toDP() dp out of range: {dp}'
       * 'toDP() dp not an integer: {dp}'
       * 'toDP() rounding mode not an integer: {rm}'
       * 'toDP() rounding mode out of range: {rm}'
       *
       */
      P['toDecimalPlaces'] = P['toDP'] = function ( dp, rm ) {
          var x = this;
          x = new x['constructor'](x);

          return dp == null || !checkArg( x, dp, 'toDP' )
            ? x
            : rnd( x, ( dp | 0 ) + x['e'] + 1, checkRM( x, rm, 'toDP' ) );
      };


      /*
       * Return a string representing the value of this Decimal in exponential notation rounded to dp
       * fixed decimal places using rounding mode rounding.
       *
       * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * errors true: Throw if dp and rm are not undefined, null or integers in range.
       * errors false: Ignore dp and rm if not numbers or not in range, and truncate non-integers.
       *
       * 'toExponential() dp not an integer: {dp}'
       * 'toExponential() dp out of range: {dp}'
       * 'toExponential() rounding mode not an integer: {rm}'
       * 'toExponential() rounding mode out of range: {rm}'
       *
       */
      P['toExponential'] = function ( dp, rm ) {
          var x = this;

          return x['c']
            ? format( x, dp != null && checkArg( x, dp, 'toExponential' ) ? dp | 0 : null,
              dp != null && checkRM( x, rm, 'toExponential' ), 1 )
            : x.toString();
      };


      /*
       * Return a string representing the value of this Decimal in normal (fixed-point) notation to
       * dp fixed decimal places and rounded using rounding mode rm or rounding if rm is omitted.
       *
       * Note: as with JS numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
       *
       * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * errors true: Throw if dp and rm are not undefined, null or integers in range.
       * errors false: Ignore dp and rm if not numbers or not in range, and truncate non-integers.
       *
       * 'toFixed() dp not an integer: {dp}'
       * 'toFixed() dp out of range: {dp}'
       * 'toFixed() rounding mode not an integer: {rm}'
       * 'toFixed() rounding mode out of range: {rm}'
       *
       */
      P['toFixed'] = function ( dp, rm ) {
          var str,
              x = this,
              Decimal = x['constructor'],
              neg = Decimal['toExpNeg'],
              pos = Decimal['toExpPos'];

          if ( dp != null ) {
              dp = checkArg( x, dp, str = 'toFixed' ) ? x['e'] + ( dp | 0 ) : null;
              rm = checkRM( x, rm, str );
          }

          // Prevent toString returning exponential notation;
          Decimal['toExpNeg'] = -( Decimal['toExpPos'] = 1 / 0 );

          if ( dp == null || !x['c'] ) {
              str = x.toString();
          } else {
              str = format( x, dp, rm );

              // (-0).toFixed() is '0', but (-0.1).toFixed() is '-0'.
              // (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
              if ( x['s'] < 0 && x['c'] ) {

                  // As e.g. (-0).toFixed(3), will wrongly be returned as -0.000 from toString.
                  if ( !x['c'][0] ) {
                      str = str.replace( '-', '' );

                  // As e.g. -0.5 if rounded to -0 will cause toString to omit the minus sign.
                  } else if ( str.indexOf('-') < 0 ) {
                      str = '-' + str;
                  }
              }
          }
          Decimal['toExpNeg'] = neg;
          Decimal['toExpPos'] = pos;

          return str;
      };


      /*
       * Return a string representing the value of this Decimal in fixed-point notation to dp decimal
       * places, rounded using rounding mode rm or Decimal.rounding if rm is omitted, and formatted
       * according to the following properties of the Decimal.format object.
       *
       *  Decimal.format = {
       *      decimalSeparator : '.',
       *      groupSeparator : ',',
       *      groupSize : 3,
       *      secondaryGroupSize : 0,
       *      fractionGroupSeparator : '\xA0',    // non-breaking space
       *      fractionGroupSize : 0
       *  };
       *
       * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive
       *
       * (If dp or rm are invalid the error message will give the offending method call as toFixed.)
       *
       */
      P['toFormat'] = function( dp, rm ) {
          var x = this;

          if ( !x['c'] ) {
              return x.toString();
          }

          var i,
              isNeg = x['s'] < 0,
              f = x['constructor']['format'],
              groupSeparator = f['groupSeparator'],
              g1 = +f['groupSize'],
              g2 = +f['secondaryGroupSize'],
              arr = x.toFixed( dp, rm ).split('.'),
              intPart = arr[0],
              fractionPart = arr[1],
              intDigits = isNeg ? intPart.slice(1) : intPart,
              len = intDigits.length;

          if (g2) {
              len -= ( i = g1, g1 = g2, g2 = i );
          }

          if ( g1 > 0 && len > 0 ) {
              i = len % g1 || g1;
              intPart = intDigits.substr( 0, i );

              for ( ; i < len; i += g1 ) {
                  intPart += groupSeparator + intDigits.substr( i, g1 );
              }

              if ( g2 > 0 ) {
                  intPart += groupSeparator + intDigits.slice(i);
              }

              if (isNeg) {
                  intPart = '-' + intPart;
              }
          }

          return fractionPart
            ? intPart + f['decimalSeparator'] + ( ( g2 = +f['fractionGroupSize'] )
              ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),
                '$&' + f['fractionGroupSeparator'] )
              : fractionPart )
            : intPart;
      };


      /*
       * Return a string array representing the value of this Decimal as a simple fraction with an
       * integer numerator and an integer denominator.
       *
       * The denominator will be a positive non-zero value less than or equal to the specified
       * maximum denominator. If a maximum denominator is not specified, the denominator will be
       * the lowest value necessary to represent the number exactly.
       *
       * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
       *
       */
      P['toFraction'] = function (maxD) {
          var d0, d2, e, frac, n, n0, p, q,
              x = this,
              Decimal = x['constructor'],
              n1 = d0 = new Decimal( Decimal['ONE'] ),
              d1 = n0 = new Decimal(0),
              xc = x['c'],
              d = new Decimal(d1);

          // NaN, Infinity.
          if ( !xc ) {

              return x.toString();
          }

          e = d['e'] = getCoeffLength(xc) - x['e'] - 1;
          d['c'][0] = mathpow( 10, ( p = e % LOGBASE ) < 0 ? LOGBASE + p : p );

          // If maxD is undefined or null...
          if ( maxD == null ||

               // or NaN...
               ( !( id = 12, n = new Decimal(maxD) )['s'] ||

                 // or less than 1, or Infinity...
                 ( outOfRange = n['cmp'](n1) < 0 || !n['c'] ) ||

                   // or not an integer...
                   ( Decimal['errors'] && mathfloor( n['e'] / LOGBASE ) < n['c'].length - 1 ) ) &&

                     // 'toFraction() max denominator not an integer: {maxD}'
                     // 'toFraction() max denominator out of range: {maxD}'
                     !ifExceptionsThrow( Decimal, 'max denominator', maxD, 'toFraction', 0 ) ||

                       // or greater than the maximum denominator needed to specify the value exactly.
                       ( maxD = n )['cmp'](d) > 0 ) {

              // d is 10**e, n1 is 1.
              maxD = e > 0 ? d : n1;
          }

          external = false;
          n = new Decimal( coefficientToString(xc) );
          p = Decimal['precision'];
          Decimal['precision'] = e = xc.length * LOGBASE * 2;

          for ( ; ; )  {
              q = div( n, d, 0, 1, 1 );
              d2 = d0['plus']( q['times'](d1) );

              if ( d2['cmp'](maxD) == 1 ) {

                  break;
              }
              d0 = d1;
              d1 = d2;

              n1 = n0['plus']( q['times']( d2 = n1 ) );
              n0 = d2;

              d = n['minus']( q['times']( d2 = d ) );
              n = d2;
          }

          d2 = div( maxD['minus'](d0), d1, 0, 1, 1 );
          n0 = n0['plus']( d2['times'](n1) );
          d0 = d0['plus']( d2['times'](d1) );
          n0['s'] = n1['s'] = x['s'];

          // Determine which fraction is closer to x, n0/d0 or n1/d1?
          frac = div( n1, d1, e, 1 )['minus'](x)['abs']()['cmp'](
                 div( n0, d0, e, 1 )['minus'](x)['abs']() ) < 1
            ? [ n1 + '', d1 + '' ]
            : [ n0 + '', d0 + '' ];

          external = true;
          Decimal['precision'] = p;

          return frac;
      };


      /*
       * Returns a new Decimal whose value is the nearest multiple of the magnitude of n to the value
       * of this Decimal.
       *
       * If the value of this Decimal is equidistant from two multiples of n, the rounding mode rm,
       * or rounding if rm is omitted or is null or undefined, determines the direction of the
       * nearest multiple.
       *
       * In the context of this method, rounding mode 4 (ROUND_HALF_UP) is the same as rounding mode 0
       * (ROUND_UP), and so on.
       *
       * The return value will always have the same sign as this Decimal, unless either this Decimal
       * or n is NaN, in which case the return value will be also be NaN.
       *
       * The return value is not rounded to precision significant digits.
       *
       * n {number|string|Decimal} The magnitude to round to a multiple of.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * 'toNearest() rounding mode not an integer: {rm}'
       * 'toNearest() rounding mode out of range: {rm}'
       *
       */
      P['toNearest'] = function ( n, rm ) {
          var x = this,
              Decimal = x['constructor'];

          x = new Decimal(x);

          if ( n == null ) {
              n = new Decimal( Decimal['ONE'] );
              rm = Decimal['rounding'];
          } else {
              id = 17;
              n = new Decimal(n);
              rm = checkRM( x, rm, 'toNearest' );
          }

          // If n is finite...
          if ( n['c'] ) {

             // If x is finite...
              if ( x['c'] ) {

                  if ( n['c'][0] ) {
                      external = false;
                      x = div( x, n, 0, rm < 4 ? [4, 5, 7, 8][rm] : rm, 1 )['times'](n);
                      external = true;
                      rnd(x);
                  } else {
                      x['c'] = [ x['e'] = 0 ];
                  }
              }

          // n is NaN or +-Infinity. If x is not NaN...
          } else if ( x['s'] ) {

              // If n is +-Infinity...
              if ( n['s'] ) {
                  n['s'] = x['s'];
              }
              x = n;
          }

          return x;
      };


      /*
       * Return the value of this Decimal converted to a number primitive.
       *
       */
      P['toNumber'] = function () {
          var x = this;

          // Ensure zero has correct sign.
          return +x || ( x['s'] ? 0 * x['s'] : NaN );
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal raised to the power
       * Decimal(y, b), rounded to precision significant digits using rounding mode rounding.
       *
       * ECMAScript compliant.
       *
       *   x is any value, including NaN.
       *   n is any number, including �Infinity unless stated.
       *
       *   pow( x, NaN )                           = NaN
       *   pow( x, �0 )                            = 1

       *   pow( NaN, nonzero )                     = NaN
       *   pow( abs(n) > 1, +Infinity )            = +Infinity
       *   pow( abs(n) > 1, -Infinity )            = +0
       *   pow( abs(n) == 1, �Infinity )           = NaN
       *   pow( abs(n) < 1, +Infinity )            = +0
       *   pow( abs(n) < 1, -Infinity )            = +Infinity
       *   pow( +Infinity, n > 0 )                 = +Infinity
       *   pow( +Infinity, n < 0 )                 = +0
       *   pow( -Infinity, odd integer > 0 )       = -Infinity
       *   pow( -Infinity, even integer > 0 )      = +Infinity
       *   pow( -Infinity, odd integer < 0 )       = -0
       *   pow( -Infinity, even integer < 0 )      = +0
       *   pow( +0, n > 0 )                        = +0
       *   pow( +0, n < 0 )                        = +Infinity
       *   pow( -0, odd integer > 0 )              = -0
       *   pow( -0, even integer > 0 )             = +0
       *   pow( -0, odd integer < 0 )              = -Infinity
       *   pow( -0, even integer < 0 )             = +Infinity
       *   pow( finite n < 0, finite non-integer ) = NaN
       *
       * For non-integer and larger exponents pow(x, y) is calculated using
       *
       *   x^y = exp(y*ln(x))
       *
       * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
       * probability of an incorrectly rounded result
       * P( [49]9{14} | [50]0{14} ) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
       * i.e. 1 in 250,000,000,000,000
       *
       * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
       *
       * y {number|string|Decimal} The power to which to raise this Decimal.
       * [b] {number} The base of y.
       *
       */
      P['toPower'] = P['pow'] = function ( y, b ) {
          var a, e, n, r,
              x = this,
              Decimal = x['constructor'],
              s = x['s'],
              yN = +( id = 13, y = new Decimal( y, b ) ),
              i = yN < 0 ? -yN : yN,
              pr = Decimal['precision'],
              rm = Decimal['rounding'];

          // Handle +-Infinity, NaN and +-0.
          if ( !x['c'] || !y['c'] || ( n = !x['c'][0] ) || !y['c'][0] ) {

              // valueOf -0 is 0, so check for 0 then multiply it by the sign.
              return new Decimal( mathpow( n ? s * 0 : +x, yN ) );
          }

          x = new Decimal(x);
          a = x['c'].length;

          // if x == 1
          if ( !x['e'] && x['c'][0] == x['s'] && a == 1 ) {

              return x;
          }

          b = y['c'].length - 1;

          // if y == 1
          if ( !y['e'] && y['c'][0] == y['s'] && !b ) {
              r = rnd( x, pr, rm );
          } else {
              e = mathfloor( y['e'] / LOGBASE );
              n = e >= b;

              // If y is not an integer and x is negative, return NaN.
              if ( !n && s < 0 ) {
                  r = new Decimal(NaN);
              } else {

                  /*
                   If the approximate number of significant digits of x multiplied by abs(y) is less
                   than INT_POW_LIMIT use the 'exponentiation by squaring' algorithm.
                   */
                  if ( n && a * LOGBASE * i < INT_POW_LIMIT ) {
                      r = intPow( Decimal, x, i );

                      if ( y['s'] < 0 ) {

                          return Decimal['ONE']['div'](r);
                      }
                  } else {

                      // Result is negative if x is negative and the last digit of integer y is odd.
                      s = s < 0 && y['c'][ Math.max( e, b ) ] & 1 ? -1 : 1;

                      b = mathpow( +x, yN );

                      /*
                       Estimate result exponent.
                       x^y = 10^e,  where e = y * log10(x)
                       log10(x) = log10(x_significand) + x_exponent
                       log10(x_significand) = ln(x_significand) / ln(10)
                       */
                      e = b == 0 || !isFinite(b)
                        ? mathfloor( yN * ( Math.log( '0.' + coefficientToString( x['c'] ) ) /
                          Math.LN10 + x['e'] + 1 ) )
                        : new Decimal( b + '' )['e'];

                      // Estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e:-1

                      // Overflow/underflow?
                      if ( e > Decimal['maxE'] + 1 || e < Decimal['minE'] - 1 ) {

                          return new Decimal( e > 0 ? s / 0 : 0 );
                      }

                      external = false;
                      Decimal['rounding'] = x['s'] = 1;

                      /*
                       Estimate extra digits needed from ln(x) to ensure five correct rounding digits
                       in result (i was unnecessary before max exponent was extended?).
                       Example of failure before i was introduced: (precision: 10),
                       new Decimal(2.32456).pow('2087987436534566.46411')
                       should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
                       */
                      i = Math.min( 12, ( e + '' ).length );

                      // r = x^y = exp(y*ln(x))
                      r = exp( y['times']( ln( x, pr + i ) ), pr );

                      // Truncate to the required precision plus five rounding digits.
                      r = rnd( r, pr + 5, 1 );

                      /*
                       If the rounding digits are [49]9999 or [50]0000 increase the precision by 10
                       and recalculate the result.
                       */
                      if ( checkRoundingDigits( r['c'], pr, rm ) ) {
                          e = pr + 10;

                          // Truncate to the increased precision plus five rounding digits.
                          r = rnd( exp( y['times']( ln( x, e + i ) ), e ), e + 5, 1 );

                          /*
                            Check for 14 nines from the 2nd rounding digit (the first rounding digit
                            may be 4 or 9).
                           */
                          if ( +coefficientToString( r['c'] ).slice( pr + 1, pr + 15 ) + 1 == 1e14 ) {
                              r = rnd( r, pr + 1, 0 );
                          }
                      }

                      r['s'] = s;
                      external = true;
                      Decimal['rounding'] = rm;
                  }

                  r = rnd( r, pr, rm );
              }
          }

          return r;
      };


      /*
       * Return a string representing the value of this Decimal rounded to sd significant digits
       * using rounding mode rounding.
       *
       * Return exponential notation if sd is less than the number of digits necessary to represent
       * the integer part of the value in normal notation.
       *
       * sd {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * errors true: Throw if sd and rm are not undefined, null or integers in range.
       * errors false: Ignore sd and rm if not numbers or not in range, and truncate non-integers.
       *
       * 'toPrecision() sd not an integer: {sd}'
       * 'toPrecision() sd out of range: {sd}'
       * 'toPrecision() rounding mode not an integer: {rm}'
       * 'toPrecision() rounding mode out of range: {rm}'
       *
       */
      P['toPrecision'] = function ( sd, rm ) {
          var x = this;

          return sd != null && checkArg( x, sd, 'toPrecision', 1 ) && x['c']
            ? format( x, --sd | 0, checkRM( x, rm, 'toPrecision' ), 2 )
            : x.toString();
      };


      /*
       * Return a new Decimal whose value is this Decimal rounded to a maximum of d significant
       * digits using rounding mode rm, or to precision and rounding respectively if omitted.
       *
       * [d] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
       * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
       *
       * 'toSD() digits out of range: {d}'
       * 'toSD() digits not an integer: {d}'
       * 'toSD() rounding mode not an integer: {rm}'
       * 'toSD() rounding mode out of range: {rm}'
       *
       */
      P['toSignificantDigits'] = P['toSD'] = function ( d, rm ) {
          var x = this,
              Decimal = x['constructor'];

          x = new Decimal(x);

          return d == null || !checkArg( x, d, 'toSD', 1 )
            ? rnd( x, Decimal['precision'], Decimal['rounding'] )
            : rnd( x, d | 0, checkRM( x, rm, 'toSD' ) );
      };


      /*
       * Return a string representing the value of this Decimal in base b, or base 10 if b is
       * omitted. If a base is specified, including base 10, round to precision significant digits
       * using rounding mode rounding.
       *
       * Return exponential notation if a base is not specified, and this Decimal has a positive
       * exponent equal to or greater than toExpPos, or a negative exponent equal to or less than
       * toExpNeg.
       *
       * [b] {number} Base. Integer, 2 to 64 inclusive.
       *
       */
      P['toString'] = function (b) {
          var u, str, strL,
              x = this,
              Decimal = x['constructor'],
              xe = x['e'];

          // Infinity or NaN?
          if ( xe === null ) {
              str = x['s'] ? 'Infinity' : 'NaN';

          // Exponential format?
          } else if ( b === u && ( xe <= Decimal['toExpNeg'] || xe >= Decimal['toExpPos'] ) ) {

              return format( x, null, Decimal['rounding'], 1 );
          } else {
              str = coefficientToString( x['c'] );

              // Negative exponent?
              if ( xe < 0 ) {

                  // Prepend zeros.
                  for ( ; ++xe; str = '0' + str );
                  str = '0.' + str;

              // Positive exponent?
              } else if ( strL = str.length, xe > 0 ) {

                  if ( ++xe > strL ) {

                      // Append zeros.
                      for ( xe -= strL; xe-- ; str += '0' );

                  } else if ( xe < strL ) {
                      str = str.slice( 0, xe ) + '.' + str.slice(xe);
                  }

              // Exponent zero.
              } else {
                  u = str.charAt(0);

                  if ( strL > 1 ) {
                      str = u + '.' + str.slice(1);

                  // Avoid '-0'
                  } else if ( u == '0' ) {

                      return u;
                  }
              }

              if ( b != null ) {

                  if ( !( outOfRange = !( b >= 2 && b < 65 ) ) &&
                    ( b == (b | 0) || !Decimal['errors'] ) ) {
                      str = convertBase( Decimal, str, b | 0, 10, x['s'] );

                      // Avoid '-0'
                      if ( str == '0' ) {

                          return str;
                      }
                  } else {

                      // 'toString() base not an integer: {b}'
                      // 'toString() base out of range: {b}'
                      ifExceptionsThrow( Decimal, 'base', b, 'toString', 0 );
                  }
              }
          }

          return x['s'] < 0 ? '-' + str : str;
      };


      /*
       * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
       *
       */
      P['truncated'] = P['trunc'] = function () {

          return rnd( new this['constructor'](this), this['e'] + 1, 1 );
      };


      /*
       * Return as toString, but do not accept a base argument.
       *
       * Ensures that JSON.stringify() uses toString for serialization.
       *
       */
      P['valueOf'] = P['toJSON'] = function () {

          return this.toString();
      };


      /*
      // Add aliases to match BigDecimal method names.
      P['add'] = P['plus'];
      P['subtract'] = P['minus'];
      P['multiply'] = P['times'];
      P['divide'] = P['div'];
      P['remainder'] = P['mod'];
      P['compareTo'] = P['cmp'];
      P['negate'] = P['neg'];
       */


      // Private functions for Decimal.prototype methods.


      /*
       *  coefficientToString
       *  checkRoundingDigits
       *  checkRM
       *  checkArg
       *  convertBase
       *  div
       *  exp
       *  format
       *  getCoeffLength
       *  ifExceptionsThrow
       *  intPow
       *  ln
       *  rnd
       */


      function coefficientToString(a) {
          var s, z,
              i = 1,
              j = a.length,
              r = a[0] + '';

          for ( ; i < j; i++ ) {
              s = a[i] + '';

              for ( z = LOGBASE - s.length; z--; ) {
                  s = '0' + s;
              }

              r += s;
          }

          // '0'
          for ( j = r.length; r.charCodeAt(--j) === 48; );

          return r.slice( 0, j + 1 || 1 );
      }


      /*
       * Check 5 rounding digits if repeating is null, 4 otherwise.
       * repeating == null if caller is log or pow,
       * repeating != null if caller is ln or exp.
       *
       *
       // Previous, much simpler implementation when coefficient was base 10.
       function checkRoundingDigits( c, i, rm, repeating ) {
           return ( !repeating && rm > 3 && c[i] == 4 ||
             ( repeating || rm < 4 ) && c[i] == 9 ) && c[i + 1] == 9 && c[i + 2] == 9 &&
               c[i + 3] == 9 && ( repeating != null || c[i + 4] == 9 ) ||
                 repeating == null && ( c[i] == 5 || !c[i] ) && !c[i + 1] && !c[i + 2] &&
                   !c[i + 3] && !c[i + 4];
       }
       */
      function checkRoundingDigits( c, i, rm, repeating ) {
          var ci, k, n, r, rd;

          // Get the length of the first element of the array c.
          for ( k = 1, n = c[0]; n >= 10; n /= 10, k++ );

          n = i - k;

          // Is the rounding digit in the first element of c?
          if ( n < 0 ) {
              n += LOGBASE;
              ci = 0;
          } else {
              ci = Math.ceil( ( n + 1 ) / LOGBASE );
              n %= LOGBASE;
          }

          k = mathpow( 10, LOGBASE - n );
          rd = c[ci] % k | 0;

          if ( repeating == null ) {

              if ( n < 3 ) {

                  if ( n == 0 ) {
                      rd = rd / 100 | 0;
                  } else if ( n == 1 ) {
                      rd = rd / 10 | 0;
                  }

                  r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
              } else {
                  r = ( rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2 ) &&
                      ( c[ci + 1] / k / 100 | 0 ) == mathpow( 10, n - 2 ) - 1 ||
                          ( rd == k / 2 || rd == 0 ) && ( c[ci + 1] / k / 100 | 0 ) == 0;
              }
          } else {

              if ( n < 4 ) {

                  if ( n == 0 ) {
                      rd = rd / 1000 | 0;
                  } else if ( n == 1 ) {
                      rd = rd / 100 | 0;
                  } else if ( n == 2 ) {
                      rd = rd / 10 | 0;
                  }

                  r = ( repeating || rm < 4 ) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
              } else {
                  r = ( ( repeating || rm < 4 ) && rd + 1 == k ||
                  ( !repeating && rm > 3 ) && rd + 1 == k / 2 ) &&
                      ( c[ci + 1] / k / 1000 | 0 ) == mathpow( 10, n - 3 ) - 1;
              }
          }

          return r;
      }


      /*
       * Check and return rounding mode. If rm is invalid, return rounding mode rounding.
       */
      function checkRM( x, rm, method ) {
          var Decimal = x['constructor'];

          return rm == null || ( ( outOfRange = rm < 0 || rm > 8 ) ||
            rm !== 0 && ( Decimal['errors'] ? parseInt : parseFloat )(rm) != rm ) &&
              !ifExceptionsThrow( Decimal, 'rounding mode', rm, method, 0 )
                ? Decimal['rounding'] : rm | 0;
      }


      /*
       * Check that argument n is in range, return true or false.
       */
      function checkArg( x, n, method, min ) {
          var Decimal = x['constructor'];

          return !( outOfRange = n < ( min || 0 ) || n >= MAX_DIGITS + 1 ) &&

            /*
             * Include 'n === 0' because Opera has 'parseFloat(-0) == -0' as false
             * despite having 'parseFloat(-0) === -0 && parseFloat('-0') === -0 && 0 == -0' as true.
             */
            ( n === 0 || ( Decimal['errors'] ? parseInt : parseFloat )(n) == n ) ||
              ifExceptionsThrow( Decimal, 'argument', n, method, 0 );
      }


      /*
       * Convert a numeric string of baseIn to a numeric string of baseOut.
       */
      convertBase = (function () {

          /*
           * Convert string of baseIn to an array of numbers of baseOut.
           * Eg. convertBase('255', 10, 16) returns [15, 15].
           * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
           */
          function toBaseOut( str, baseIn, baseOut ) {
              var j,
                  arr = [0],
                  arrL,
                  i = 0,
                  strL = str.length;

              for ( ; i < strL; ) {
                  for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );
                  arr[ j = 0 ] += NUMERALS.indexOf( str.charAt( i++ ) );

                  for ( ; j < arr.length; j++ ) {

                      if ( arr[j] > baseOut - 1 ) {

                          if ( arr[j + 1] == null ) {
                              arr[j + 1] = 0;
                          }
                          arr[j + 1] += arr[j] / baseOut | 0;
                          arr[j] %= baseOut;
                      }
                  }
              }

              return arr.reverse();
          }

          return function ( Decimal, str, baseOut, baseIn, sign ) {
              var e, j, r, x, xc, y,
                  i = str.indexOf( '.' ),
                  pr = Decimal['precision'],
                  rm = Decimal['rounding'];

              if ( baseIn < 37 ) {
                  str = str.toLowerCase();
              }

              // Non-integer.
              if ( i >= 0 ) {
                  str = str.replace( '.', '' );
                  y = new Decimal(baseIn);
                  x = intPow( Decimal, y, str.length - i );

                  /*
                   Convert str as if an integer, then divide the result by its base raised to a power
                   such that the fraction part will be restored.
                   Use toFixed to avoid possible exponential notation.
                   */
                  y['c'] = toBaseOut( x.toFixed(), 10, baseOut );
                  y['e'] = y['c'].length;
              }

              // Convert the number as integer.
              xc = toBaseOut( str, baseIn, baseOut );
              e = j = xc.length;

              // Remove trailing zeros.
              for ( ; xc[--j] == 0; xc.pop() );

              if ( !xc[0] ) {

                  return '0';
              }

              if ( i < 0 ) {
                  e--;
              } else {
                  x['c'] = xc;
                  x['e'] = e;

                  // sign is needed for correct rounding.
                  x['s'] = sign;
                  x = div( x, y, pr, rm, 0, baseOut );
                  xc = x['c'];
                  r = x['r'];
                  e = x['e'];
              }

              // The rounding digit, i.e. the digit after the digit that may be rounded up.
              i = xc[pr];
              j = baseOut / 2;
              r = r || xc[pr + 1] != null;

              if ( rm < 4
                ? ( i != null || r ) && ( rm == 0 || rm == ( sign < 0 ? 3 : 2 ) )
                : i > j || i == j && ( rm == 4 || r || rm == 6 && xc[pr - 1] & 1 ||
                  rm == ( sign < 0 ? 8 : 7 ) ) ) {

                  xc.length = pr;

                  // Rounding up may mean the previous digit has to be rounded up and so on.
                  for ( --baseOut; ++xc[--pr] > baseOut; ) {
                      xc[pr] = 0;

                      if ( !pr ) {
                          ++e;
                          xc.unshift(1);
                      }
                  }
              } else {
                  xc.length = pr;
              }

              // Determine trailing zeros.
              for ( j = xc.length; !xc[--j]; );

              // E.g. [4, 11, 15] becomes 4bf.
              for ( i = 0, str = ''; i <= j; str += NUMERALS.charAt( xc[i++] ) );

              // Negative exponent?
              if ( e < 0 ) {

                  // Prepend zeros.
                  for ( ; ++e; str = '0' + str );

                  str = '0.' + str;

              // Positive exponent?
              } else {
                  i = str.length;

                  if ( ++e > i ) {

                      // Append zeros.
                      for ( e -= i; e-- ; str += '0' );

                  } else if ( e < i ) {
                      str = str.slice( 0, e ) + '.' + str.slice(e);
                  }
              }

              // No negative numbers: the caller will add the sign.
              return str;
          };
      })();



      /*
       * Perform division in the specified base. Called by div and convertBase.
       */
      var div = ( function () {

          // Assumes non-zero x and k, and hence non-zero result.
          function multiplyInteger( x, k, base ) {
              var temp,
                  carry = 0,
                  i = x.length;

              for ( x = x.slice(); i--; ) {
                  temp = x[i] * k + carry;
                  x[i] = temp % base | 0;
                  carry = temp / base | 0;
              }

              if (carry) {
                  x.unshift(carry);
              }

              return x;
          }

          function compare( a, b, aL, bL ) {
              var i, cmp;

              if ( aL != bL ) {
                  cmp = aL > bL ? 1 : -1;
              } else {

                  for ( i = cmp = 0; i < aL; i++ ) {

                      if ( a[i] != b[i] ) {
                          cmp = a[i] > b[i] ? 1 : -1;

                          break;
                      }
                  }
              }

              return cmp;
          }

          function subtract( a, b, aL, base ) {
              var i = 0;

              // Subtract b from a.
              for ( ; aL--; ) {
                  a[aL] -= i;
                  i = a[aL] < b[aL] ? 1 : 0;
                  a[aL] = i * base + a[aL] - b[aL];
              }

              // Remove leading zeros.
              for ( ; !a[0] && a.length > 1; a.shift() );
          }

          // x: dividend, y: divisor.
          return function ( x, y, pr, rm, dp, base ) {
              var cmp, e, i, logbase, more, n, prod, prodL, q, qc, rem, remL, rem0, t, xi, xL, yc0,
                  yL, yz,
                  Decimal = x['constructor'],
                  s = x['s'] == y['s'] ? 1 : -1,
                  xc = x['c'],
                  yc = y['c'];

              // Either NaN, Infinity or 0?
              if ( !xc || !xc[0] || !yc || !yc[0] ) {

                  return new Decimal(

                    // Return NaN if either NaN, or both Infinity or 0.
                    !x['s'] || !y['s'] || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :

                      // Return +-0 if x is 0 or y is +-Infinity, or return +-Infinity as y is 0.
                      xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                  );
              }

              if (base) {
                  logbase = 1;
                  e = x['e'] - y['e'];
              } else {
                  base = BASE;
                  logbase = LOGBASE;
                  e = mathfloor( x['e'] / logbase ) - mathfloor( y['e'] / logbase );
              }

              yL = yc.length;
              xL = xc.length;
              q = new Decimal(s);
              qc = q['c'] = [];

              // Result exponent may be one less then the current value of e.
              // The coefficients of the Decimals from convertBase may have trailing zeros.
              for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );

              if ( yc[i] > ( xc[i] || 0 ) ) {
                  e--;
              }

              if ( pr == null ) {
                  s = pr = Decimal['precision'];
                  rm = Decimal['rounding'];
              } else if (dp) {
                  s = pr + ( x['e'] - y['e'] ) + 1;
              } else {
                  s = pr;
              }

              if ( s < 0 ) {
                  qc.push(1);
                  more = true;
              } else {

                  // Convert base 10 decimal places to base 1e7 decimal places.
                  s = s / logbase + 2 | 0;
                  i = 0;

                  // divisor < 1e7
                  if ( yL == 1 ) {
                      n = 0;
                      yc = yc[0];
                      s++;

                      // 'n' is the carry.
                      for ( ; ( i < xL || n ) && s--; i++ ) {
                          t = n * base + ( xc[i] || 0 );
                          qc[i] = t / yc | 0;
                          n = t % yc | 0;
                      }

                      more = n || i < xL;

                  // divisor >= 1e7
                  } else {

                      // Normalise xc and yc so highest order digit of yc is >= base/2
                      n = base / ( yc[0] + 1 ) | 0;

                      if ( n > 1 ) {
                          yc = multiplyInteger( yc, n, base );
                          xc = multiplyInteger( xc, n, base );
                          yL = yc.length;
                          xL = xc.length;
                      }

                      xi = yL;
                      rem = xc.slice( 0, yL );
                      remL = rem.length;

                      // Add zeros to make remainder as long as divisor.
                      for ( ; remL < yL; rem[remL++] = 0 );

                      yz = yc.slice();
                      yz.unshift(0);
                      yc0 = yc[0];

                      if ( yc[1] >= base / 2 ) {
                          yc0++;
                      }

                      do {
                          n = 0;

                          // Compare divisor and remainder.
                          cmp = compare( yc, rem, yL, remL );

                          // If divisor < remainder.
                          if ( cmp < 0 ) {

                              // Calculate trial digit, n.
                              rem0 = rem[0];

                              if ( yL != remL ) {
                                  rem0 = rem0 * base + ( rem[1] || 0 );
                              }

                              // n will be how many times the divisor goes into the current remainder.
                              n = rem0 / yc0 | 0;

                              /*
                                Algorithm:
                                1. product = divisor * trial digit (n)
                                2. if product > remainder: product -= divisor, n--
                                3. remainder -= product
                                4. if product was < remainder at 2:
                                  5. compare new remainder and divisor
                                  6. If remainder > divisor: remainder -= divisor, n++
                              */

                              if ( n > 1 ) {

                                  if ( n >= base ) {
                                      n = base - 1;
                                  }

                                  // product = divisor * trial digit.
                                  prod = multiplyInteger( yc, n, base );
                                  prodL = prod.length;
                                  remL = rem.length;

                                  // Compare product and remainder.
                                  cmp = compare( prod, rem, prodL, remL );

                                  // product > remainder.
                                  if ( cmp == 1 ) {
                                      n--;

                                      // Subtract divisor from product.
                                      subtract( prod, yL < prodL ? yz : yc, prodL, base );
                                  }
                              } else {

                                  // cmp is -1.
                                  // If n is 0, there is no need to compare yc and rem again below, so change cmp to 1 to avoid it.
                                  // If n is 1 there IS a need to compare yc and rem again below.
                                  if ( n == 0 ) {
                                      cmp = n = 1;
                                  }
                                  prod = yc.slice();
                              }
                              prodL = prod.length;

                              if ( prodL < remL ) {
                                  prod.unshift(0);
                              }

                              // Subtract product from remainder.
                              subtract( rem, prod, remL, base );

                              // If product was < previous remainder.
                              if ( cmp == -1 ) {
                                  remL = rem.length;

                                  // Compare divisor and new remainder.
                                  cmp = compare( yc, rem, yL, remL );

                                  // If divisor < new remainder, subtract divisor from remainder.
                                  if ( cmp < 1 ) {
                                      n++;

                                      // Subtract divisor from remainder.
                                      subtract( rem, yL < remL ? yz : yc, remL, base );
                                  }
                              }

                              remL = rem.length;

                          } else if ( cmp === 0 ) {
                              n++;
                              rem = [0];
                          }    // if cmp === 1, n will be 0

                          // Add the next digit, n, to the result array.
                          qc[i++] = n;

                          // Update the remainder.
                          if ( cmp && rem[0] ) {
                              rem[remL++] = xc[xi] || 0;
                          } else {
                              rem = [ xc[xi] ];
                              remL = 1;
                          }

                      } while ( ( xi++ < xL || rem[0] != null ) && s-- );

                      more = rem[0] != null;
                  }

                  // Leading zero?
                  if ( !qc[0] ) {
                      qc.shift();
                  }
              }

              // If div is being used for base conversion.
              if ( logbase == 1 ) {
                  q['e'] = e;
                  q['r'] = +more;
              } else {

                  // To calculate q.e, first get the number of digits of qc[0].
                  for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );
                  q['e'] = i + e * logbase - 1;

                  rnd( q, dp ? pr + q['e'] + 1 : pr, rm, more );
              }

              return q;
          };
      })();


      /*
       * Taylor/Maclaurin series.
       *
       * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
       *
       * Argument reduction:
       *   Repeat x = x / 32, k += 5, until |x| < 0.1
       *   exp(x) = exp(x / 2^k)^(2^k)
       *
       * Previously, the argument was initially reduced by
       * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
       * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
       * found to be slower than just dividing repeatedly by 32 as above.
       *
       * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
       * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
       * ( Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324 )
       *
       *  exp(Infinity)  = Infinity
       *  exp(-Infinity) = 0
       *  exp(NaN)       = NaN
       *  exp(+-0)       = 1
       *
       *  exp(x) is non-terminating for any finite, non-zero x.
       *
       *  The result will always be correctly rounded.
       *
       */
      function exp( x, pr ) {
          var denom, guard, j, pow, sd, sum, t,
              rep = 0,
              i = 0,
              k = 0,
              Decimal = x['constructor'],
              one = Decimal['ONE'],
              rm = Decimal['rounding'],
              precision = Decimal['precision'];

          // 0/NaN/Infinity?
          if ( !x['c'] || !x['c'][0] || x['e'] > 17 ) {

              return new Decimal( x['c']
                ? !x['c'][0] ? one : x['s'] < 0 ? 0 : 1 / 0
                : x['s'] ? x['s'] < 0 ? 0 : x : NaN );
          }

          if ( pr == null ) {

              /*
               Estimate result exponent.
               e^x = 10^j, where j = x * log10(e) and
               log10(e) = ln(e) / ln(10) = 1 / ln(10),
               so j = x / ln(10)
              j = mathfloor( x / Math.LN10 );

              // Overflow/underflow? Estimate may be +-1 of true value.
              if ( j > Decimal['maxE'] + 1 || j < Decimal['minE'] - 1 ) {

                  return new Decimal( j > 0 ? 1 / 0 : 0 );
              }
               */

              external = false;
              sd = precision;
          } else {
              sd = pr;
          }

          t = new Decimal(0.03125);

          // while abs(x) >= 0.1
          while ( x['e'] > -2 ) {

              // x = x / 2^5
              x = x['times'](t);
              k += 5;
          }

          /*
           Use 2 * log10(2^k) + 5 to estimate the increase in precision necessary to ensure the first
           4 rounding digits are correct.
           */
          guard = Math.log( mathpow( 2, k ) ) / Math.LN10 * 2 + 5 | 0;
          sd += guard;

          denom = pow = sum = new Decimal(one);
          Decimal['precision'] = sd;

          for ( ; ; ) {
              pow = rnd( pow['times'](x), sd, 1 );
              denom = denom['times'](++i);
              t = sum['plus']( div( pow, denom, sd, 1 ) );

              if ( coefficientToString( t['c'] ).slice( 0, sd ) ===
                   coefficientToString( sum['c'] ).slice( 0, sd ) ) {
                  j = k;

                  while ( j-- ) {
                      sum = rnd( sum['times'](sum), sd, 1 );
                  }

                  /*
                   Check to see if the first 4 rounding digits are [49]999.
                   If so, repeat the summation with a higher precision, otherwise
                   E.g. with precision: 18, rounding: 1
                   exp(18.404272462595034083567793919843761) = 98372560.1229999999
                                             when it should be 98372560.123

                   sd - guard is the index of first rounding digit.
                   */
                  if ( pr == null ) {

                      if ( rep < 3 && checkRoundingDigits( sum['c'], sd - guard, rm, rep ) ) {
                          Decimal['precision'] = sd += 10;
                          denom = pow = t = new Decimal(one);
                          i = 0;
                          rep++;
                      } else {

                          return rnd( sum, Decimal['precision'] = precision, rm, external = true );
                      }
                  } else {
                      Decimal['precision'] = precision;

                      return sum;
                  }
              }
              sum = t;
          }
      }


      /*
       * Return a string representing the value of Decimal n in normal or exponential notation
       * rounded to the specified decimal places or significant digits.
       * Called by toString, toExponential (k is 1), toFixed, and toPrecision (k is 2).
       * i is the index (with the value in normal notation) of the digit that may be rounded up.
       * j is the rounding mode, then the number of digits required including fraction-part trailing
       * zeros.
       */
      function format( n, i, j, k ) {
          var s, z,
              Decimal = n['constructor'],
              e = ( n = new Decimal(n) )['e'];

          // i == null when toExponential(no arg), or toString() when x >= toExpPos etc.
          if ( i == null ) {
              j = 0;
          } else {
              rnd( n, ++i, j );

              // If toFixed, n['e'] may have changed if the value was rounded up.
              j = k ? i : i + n['e'] - e;
          }

          e = n['e'];
          s = coefficientToString( n['c'] );

          /*
           toPrecision returns exponential notation if the number of significant digits specified
           is less than the number of digits necessary to represent the integer part of the value
           in normal notation.
           */

          // Exponential notation.
          if ( k == 1 || k == 2 && ( i <= e || e <= Decimal['toExpNeg'] ) ) {

              // Append zeros?
              for ( ; s.length < j; s += '0' );

              if ( s.length > 1 ) {
                  s = s.charAt(0) + '.' + s.slice(1);
              }

              s += ( e < 0 ? 'e' : 'e+' ) + e;

          // Normal notation.
          } else {
              k = s.length;

              // Negative exponent?
              if ( e < 0 ) {
                  z = j - k;

                  // Prepend zeros.
                  for ( ; ++e; s = '0' + s );
                  s = '0.' + s;

              // Positive exponent?
              } else {

                  if ( ++e > k ) {
                      z = j - e;

                      // Append zeros.
                      for ( e -= k; e-- ; s += '0' );

                      if ( z > 0 ) {
                          s += '.';
                      }

                  } else {
                      z = j - k;

                      if ( e < k ) {
                          s = s.slice( 0, e ) + '.' + s.slice(e);
                      } else if ( z > 0 ) {
                          s += '.';
                      }
                  }
              }

              // Append more zeros?
              if ( z > 0 ) {

                  for ( ; z--; s += '0' );
              }
          }

          return n['s'] < 0 && n['c'][0] ? '-' + s : s;
      }


      function getCoeffLength(c) {
          var v = c.length - 1,
              n = v * LOGBASE + 1;

          if ( v = c[v] ) {

              // Subtract the number of trailing zeros of the last number.
              for ( ; v % 10 == 0; v /= 10, n-- );

              // Add the number of digits of the first number.
              for ( v = c[0]; v >= 10; v /= 10, n++ );
          }

          return n;
      }


      /*
       * Assemble error messages. Throw Decimal Errors.
       */
      function ifExceptionsThrow( Decimal, message, arg, method, more ) {

          if ( Decimal['errors'] ) {
              var error = new Error( ( method || [
                'new Decimal', 'cmp', 'div', 'eq', 'gt', 'gte', 'lt', 'lte', 'minus', 'mod',
                'plus', 'times', 'toFraction', 'pow', 'random', 'log', 'sqrt', 'toNearest', 'divToInt'
                ][ id ? id < 0 ? -id : id : 1 / id < 0 ? 1 : 0 ] ) + '() ' + ( [
                'number type has more than 15 significant digits', 'LN10 out of digits' ][message]
                || message + ( [ outOfRange ? ' out of range' : ' not an integer',
                ' not a boolean or binary digit' ][more] || '' ) ) + ': ' + arg
              );
              error['name'] = 'Decimal Error';
              outOfRange = id = 0;

              throw error;
          }
      }




      /*
       * Use 'exponentiation by squaring' for small integers. Called by convertBase and pow.
       */
      function intPow( Decimal, x, i ) {
          var r = new Decimal( Decimal['ONE'] );

          for ( external = false; ; ) {

              if ( i & 1 ) {
                  r = r['times'](x);
              }
              i >>= 1;

              if ( !i ) {

                  break;
              }
              x = x['times'](x);
          }
          external = true;

          return r;
      }


      /*
       *  ln(-n)        = NaN
       *  ln(0)         = -Infinity
       *  ln(-0)        = -Infinity
       *  ln(1)         = 0
       *  ln(Infinity)  = Infinity
       *  ln(-Infinity) = NaN
       *  ln(NaN)       = NaN
       *
       *  ln(n) (n != 1) is non-terminating.
       *
       */
      function ln( y, pr ) {
          var c, c0, denom, e, num, rep, sd, sum, t, x1, x2,
              n = 1,
              guard = 10,
              x = y,
              xc = x['c'],
              Decimal = x['constructor'],
              one = Decimal['ONE'],
              rm = Decimal['rounding'],
              precision = Decimal['precision'];

          // x < 0 or +-Infinity/NaN or 0 or 1.
          if ( x['s'] < 0 || !xc || !xc[0] || !x['e'] && xc[0] == 1 && xc.length == 1 ) {

              return new Decimal( xc && !xc[0] ? -1 / 0 : x['s'] != 1 ? NaN : xc ? 0 : x );
          }

          if ( pr == null ) {
              external = false;
              sd = precision;
          } else {
              sd = pr;
          }

          Decimal['precision'] = sd += guard;

          c = coefficientToString(xc);
          c0 = c.charAt(0);

          if ( Math.abs( e = x['e'] ) < 1.5e15 ) {

              /*
               Argument reduction.
               The series converges faster the closer the argument is to 1, so using
               ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
               multiply the argument by itself until the leading digits of the significand are 7, 8,
               9, 10, 11, 12 or 13, recording the number of multiplications so the sum of the series
               can later be divided by this number, then separate out the power of 10 using
               ln(a*10^b) = ln(a) + b*ln(10).
               */

              // max n is 21 ( gives 0.9, 1.0 or 1.1 ) ( 9e15 / 21 = 4.2e14 ).
              //while ( c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1 ) {
              // max n is 6 ( gives 0.7 - 1.3 )
              while ( c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3 ) {
                  x = x['times'](y);
                  c = coefficientToString( x['c'] );
                  c0 = c.charAt(0);
                  n++;
              }

              e = x['e'];

              if ( c0 > 1 ) {
                  x = new Decimal( '0.' + c );
                  e++;
              } else {
                  x = new Decimal( c0 + '.' + c.slice(1) );
              }
          } else {

              /*
               The argument reduction method above may result in overflow if the argument y is a
               massive number with exponent >= 1500000000000000 ( 9e15 / 6 = 1.5e15 ), so instead
               recall this function using ln(x*10^e) = ln(x) + e*ln(10).
               */
              x = new Decimal( c0 + '.' + c.slice(1) );

              if ( sd + 2 > LN10.length ) {
                  ifExceptionsThrow( Decimal, 1, sd + 2, 'ln' );
              }

              x = ln( x, sd - guard )['plus'](
                  new Decimal( LN10.slice( 0, sd + 2 ) )['times']( e + '' )
              );

              Decimal['precision'] = precision;

              return pr == null ? rnd( x, precision, rm, external = true ) : x;
          }

          // x1 is x reduced to a value near 1.
          x1 = x;

          /*
           Taylor series.
           ln(y) = ln( (1 + x)/(1 - x) ) = 2( x + x^3/3 + x^5/5 + x^7/7 + ... )
           where
           x = (y - 1)/(y + 1)              ( |x| < 1 )
           */
          sum = num = x = div( x['minus'](one), x['plus'](one), sd, 1 );
          x2 = rnd( x['times'](x), sd, 1 );
          denom = 3;

          for ( ; ; ) {
              num = rnd( num['times'](x2), sd, 1 );
              t = sum['plus']( div( num, new Decimal(denom), sd, 1 ) );

              if ( coefficientToString( t['c'] ).slice( 0, sd ) ===
                   coefficientToString( sum['c'] ).slice( 0, sd ) ) {
                  sum = sum['times'](2);

                  /*
                   Reverse the argument reduction. Check that e is not 0 because, as well as
                   preventing an unnecessary calculation, -0 + 0 = +0 and to ensure correct
                   rounding later -0 needs to stay -0.
                   */
                  if ( e !== 0 ) {

                      if ( sd + 2 > LN10.length ) {
                          ifExceptionsThrow( Decimal, 1, sd + 2, 'ln' );
                      }

                      sum = sum['plus'](
                          new Decimal( LN10.slice( 0, sd + 2 ) )['times']( e + '' )
                      );
                  }

                  sum = div( sum, new Decimal(n), sd, 1 );

                  /*
                   Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
                   been repeated previously) and the first 4 rounding digits 9999?

                   If so, restart the summation with a higher precision, otherwise
                   e.g. with precision: 12, rounding: 1
                   ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.

                   sd - guard is the index of first rounding digit.
                   */
                  if ( pr == null ) {

                      if ( checkRoundingDigits( sum['c'], sd - guard, rm, rep ) ) {
                          Decimal['precision'] = sd += guard;
                          t = num = x = div( x1['minus'](one), x1['plus'](one), sd, 1 );
                          x2 = rnd( x['times'](x), sd, 1 );
                          denom = rep = 1;
                      } else {

                          return rnd( sum, Decimal['precision'] = precision, rm, external = true );
                      }
                  } else {
                      Decimal['precision'] = precision;

                      return sum;
                  }
              }

              sum = t;
              denom += 2;
          }
      }


      /*
       * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
       */
       function rnd( x, sd, rm, r ) {
          var digits, i, j, k, n, rd, xc, xci,
              Decimal = x['constructor'];

          // Don't round if sd is null or undefined.
          out: if ( sd != null ) {

              // Infinity/NaN.
              if ( !( xc = x['c'] ) ) {

                  return x;
              }

              /*
               rd, the rounding digit, i.e. the digit after the digit that may be rounded up,
               n, a base 1e7 number, the element of xc containing rd,
               xci, the index of n within xc,
               digits, the number of digits of n,
               i, what would be the index of rd within n if all the numbers were 7 digits long (i.e. they had leading zeros)
               j, if > 0, the actual index of rd within n (if < 0, rd is a leading zero),
               nLeadingZeros, the number of leading zeros n would have if it were 7 digits long.
               */

              // Get the length of the first element of the coefficient array xc.
              for ( digits = 1, k = xc[0]; k >= 10; k /= 10, digits++ );

              i = sd - digits;

              // Is the rounding digit in the first element of xc?
              if ( i < 0 ) {
                  i += LOGBASE;
                  j = sd;
                  n = xc[ xci = 0 ];

                  // Get the rounding digit at index j of n.
                  rd = n / mathpow( 10, digits - j - 1 ) % 10 | 0;
              } else {
                  xci = Math.ceil( ( i + 1 ) / LOGBASE );

                  if ( xci >= xc.length ) {

                      if (r) {

                          // Needed by exp, ln and sqrt.
                          for ( ; xc.length <= xci; xc.push(0) );

                          n = rd = 0;
                          digits = 1;
                          i %= LOGBASE;
                          j = i - LOGBASE + 1;
                      } else {

                        break out;
                      }
                  } else {
                      n = k = xc[xci];

                      // Get the number of digits of n.
                      for ( digits = 1; k >= 10; k /= 10, digits++ );

                      // Get the index of rd within n.
                      i %= LOGBASE;

                      // Get the index of rd within n, adjusted for leading zeros.
                      // The number of leading zeros of n is given by LOGBASE - digits.
                      j = i - LOGBASE + digits;

                      // Get the rounding digit at index j of n.
                      // Floor using Math.floor instead of | 0 as rd may be outside int range.
                      rd = j < 0 ? 0 : mathfloor( n / mathpow( 10, digits - j - 1 ) % 10 );
                  }
              }

              r = r || sd < 0 ||
                // Are there any non-zero digits after the rounding digit?
                xc[xci + 1] != null || ( j < 0 ? n : n % mathpow( 10, digits - j - 1 ) );

              /*
               The expression  n % mathpow( 10, digits - j - 1 )  returns all the digits of n to the
               right of the digit at (left-to-right) index j,
               e.g. if n is 908714 and j is 2, the expression will give 714.
               */

              r = rm < 4
                ? ( rd || r ) && ( rm == 0 || rm == ( x['s'] < 0 ? 3 : 2 ) )
                : rd > 5 || rd == 5 && ( rm == 4 || r ||
                  // Check whether the digit to the left of the rounding digit is odd.
                  rm == 6 && ( ( i > 0 ? j > 0 ? n / mathpow( 10, digits - j ) : 0 : xc[xci - 1] ) % 10 ) & 1 ||
                    rm == ( x['s'] < 0 ? 8 : 7 ) );

              if ( sd < 1 || !xc[0] ) {
                  xc.length = 0;

                  if (r) {

                      // Convert sd to decimal places.
                      sd -= x['e'] + 1;

                      // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                      xc[0] = mathpow( 10, ( LOGBASE - sd % LOGBASE ) % LOGBASE );
                      x['e'] = -sd || 0;
                  } else {

                      // Zero.
                      xc[0] = x['e'] = 0;
                  }

                  return x;
              }

              // Remove excess digits.

              if ( i == 0 ) {
                  xc.length = xci;
                  k = 1;
                  xci--;
              } else {
                  xc.length = xci + 1;
                  k = mathpow( 10, LOGBASE - i );

                  // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                  // j > 0 means i > number of leading zeros of n.
                  xc[xci] = j > 0 ? ( n / mathpow( 10, digits - j ) % mathpow( 10, j ) | 0 ) * k : 0;
              }

              // Round up?
              if (r) {

                  for ( ; ; ) {

                      // Is the digit to be rounded up in the first element of xc?
                      if ( xci == 0 ) {

                          // i will be the length of xc[0] before k is added.
                          for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );

                          j = xc[0] += k;

                          for ( k = 1; j >= 10; j /= 10, k++ );

                          // if i != k the length has increased.
                          if ( i != k ) {
                              x['e']++;

                              if ( xc[0] == BASE ) {
                                  xc[0] = 1;
                              }
                          }

                          break;
                      } else {
                          xc[xci] += k;

                          if ( xc[xci] != BASE ) {

                              break;
                          }

                          xc[xci--] = 0;
                          k = 1;
                      }
                  }
              }

              // Remove trailing zeros.
              for ( i = xc.length; xc[--i] === 0; xc.pop() );
          }

          if (external) {

              // Overflow?
              if ( x['e'] > Decimal['maxE'] ) {

                  // Infinity.
                  x['c'] = x['e'] = null;

              // Underflow?
              } else if ( x['e'] < Decimal['minE'] ) {

                  // Zero.
                  x['c'] = [ x['e'] = 0 ];
              }
          }

          return x;
      }


      decimal = (function () {


          // Private functions used by static Decimal methods.


          /*
           *  The following emulations or wrappers of Math object functions are currently
           *  commented-out and not in the public API.
           *
           *  abs
           *  acos
           *  asin
           *  atan
           *  atan2
           *  ceil
           *  cos
           *  floor
           *  round
           *  sin
           *  tan
           *  trunc
           */


          /*
           * Return a new Decimal whose value is the absolute value of n.
           *
           * n {number|string|Decimal}
           *
          function abs(n) { return new this(n)['abs']() }
           */


          /*
           * Return a new Decimal whose value is the arccosine in radians of n.
           *
           * n {number|string|Decimal}
           *
          function acos(n) { return new this( Math.acos(n) + '' ) }
           */


          /*
           * Return a new Decimal whose value is the arcsine in radians of n.
           *
           * n {number|string|Decimal}
           *
          function asin(n) { return new this( Math.asin(n) + '' ) }
           */


          /*
           * Return a new Decimal whose value is the arctangent in radians of n.
           *
           * n {number|string|Decimal}
           *
          function atan(n) { return new this( Math.atan(n) + '' ) }
           */


          /*
           * Return a new Decimal whose value is the arctangent in radians of y/x in the range
           * -PI to PI (inclusive).
           *
           * y {number|string|Decimal} The y-coordinate.
           * x {number|string|Decimal} The x-coordinate.
           *
          function atan2( y, x ) { return new this( Math.atan2( y, x ) + '' ) }
           */


          /*
           * Return a new Decimal whose value is n round to an integer using ROUND_CEIL.
           *
           * n {number|string|Decimal}
           *
          function ceil(n) { return new this(n)['ceil']() }
           */


          /*
           * Configure global settings for a Decimal constructor.
           *
           * obj is an object with any of the following properties,
           *
           *   precision  {number}
           *   rounding   {number}
           *   toExpNeg   {number}
           *   toExpPos   {number}
           *   minE       {number}
           *   maxE       {number}
           *   errors     {boolean|number}
           *   crypto     {boolean|number}
           *   modulo     {number}
           *
           *   format     {object}     See Decimal.prototype.toFormat
           *      decimalSeparator       {string}
           *      groupSeparator         {string}
           *      groupSize              {number}
           *      secondaryGroupSize     {number}
           *      fractionGroupSeparator {string}
           *      fractionGroupSize      {number}
           *
           *   A format object will replace the existing Decimal.format object without any property
           *   checking.
           *
           * E.g.
           *   Decimal.config({ precision: 20, rounding: 4 })
           *
           */
          function config(obj) {
              var p, u, v,
                  Decimal = this,
                  c = 'config',
                  parse = Decimal['errors'] ? parseInt : parseFloat;

              if ( obj == u || typeof obj != 'object' &&
                // 'config() object expected: {obj}'
                !ifExceptionsThrow( Decimal, 'object expected', obj, c ) ) {

                  return Decimal;
              }

              // precision {number} Integer, 1 to MAX_DIGITS inclusive.
              if ( ( v = obj[ p = 'precision' ] ) != u ) {

                  if ( !( outOfRange = v < 1 || v > MAX_DIGITS ) && parse(v) == v ) {
                      Decimal[p] = v | 0;
                  } else {

                      // 'config() precision not an integer: {v}'
                      // 'config() precision out of range: {v}'
                      ifExceptionsThrow( Decimal, p, v, c, 0 );
                  }
              }

              // rounding {number} Integer, 0 to 8 inclusive.
              if ( ( v = obj[ p = 'rounding' ] ) != u ) {

                  if ( !( outOfRange = v < 0 || v > 8 ) && parse(v) == v ) {
                      Decimal[p] = v | 0;
                  } else {

                      // 'config() rounding not an integer: {v}'
                      // 'config() rounding out of range: {v}'
                      ifExceptionsThrow( Decimal, p, v, c, 0 );
                  }
              }

              // toExpNeg {number} Integer, -EXP_LIMIT to 0 inclusive.
              if ( ( v = obj[ p = 'toExpNeg' ] ) != u ) {

                  if ( !( outOfRange = v < -EXP_LIMIT || v > 0 ) && parse(v) == v ) {
                      Decimal[p] = mathfloor(v);
                  } else {

                      // 'config() toExpNeg not an integer: {v}'
                      // 'config() toExpNeg out of range: {v}'
                      ifExceptionsThrow( Decimal, p, v, c, 0 );
                  }
              }

              // toExpPos {number} Integer, 0 to EXP_LIMIT inclusive.
              if ( ( v = obj[ p = 'toExpPos' ] ) != u ) {

                  if ( !( outOfRange = v < 0 || v > EXP_LIMIT ) && parse(v) == v ) {
                      Decimal[p] = mathfloor(v);
                  } else {

                      // 'config() toExpPos not an integer: {v}'
                      // 'config() toExpPos out of range: {v}'
                      ifExceptionsThrow( Decimal, p, v, c, 0 );
                  }
              }

               // minE {number} Integer, -EXP_LIMIT to 0 inclusive.
              if ( ( v = obj[ p = 'minE' ] ) != u ) {

                  if ( !( outOfRange = v < -EXP_LIMIT || v > 0 ) && parse(v) == v ) {
                      Decimal[p] = mathfloor(v);
                  } else {

                      // 'config() minE not an integer: {v}'
                      // 'config() minE out of range: {v}'
                      ifExceptionsThrow( Decimal, p, v, c, 0 );
                  }
              }

              // maxE {number} Integer, 0 to EXP_LIMIT inclusive.
              if ( ( v = obj[ p = 'maxE' ] ) != u ) {

                  if ( !( outOfRange = v < 0 || v > EXP_LIMIT ) && parse(v) == v ) {
                      Decimal[p] = mathfloor(v);
                  } else {

                      // 'config() maxE not an integer: {v}'
                      // 'config() maxE out of range: {v}'
                      ifExceptionsThrow( Decimal, p, v, c, 0 );
                  }
              }

              // errors {boolean|number} true, false, 1 or 0.
              if ( ( v = obj[ p = 'errors' ] ) != u ) {

                  if ( v === !!v || v === 1 || v === 0 ) {
                      outOfRange = id = 0;
                      Decimal[p] = !!v;
                  } else {

                      // 'config() errors not a boolean or binary digit: {v}'
                      ifExceptionsThrow( Decimal, p, v, c, 1 );
                  }
              }

              // crypto {boolean|number} true, false, 1 or 0.
              if ( ( v = obj[ p = 'crypto' ] ) != u ) {

                  if ( v === !!v || v === 1 || v === 0 ) {
                      Decimal[p] = !!( v && crypto && typeof crypto == 'object' );
                  } else {

                      // 'config() crypto not a boolean or binary digit: {v}'
                      ifExceptionsThrow( Decimal, p, v, c, 1 );
                  }
              }

              // modulo {number} Integer, 0 to 9 inclusive.
              if ( ( v = obj[ p = 'modulo' ] ) != u ) {

                  if ( !( outOfRange = v < 0 || v > 9 ) && parse(v) == v ) {
                      Decimal[p] = v | 0;
                  } else {

                      // 'config() modulo not an integer: {v}'
                      // 'config() modulo out of range: {v}'
                      ifExceptionsThrow( Decimal, p, v, c, 0 );
                  }
              }

              // format {object}
              if ( ( obj = obj[ p = 'format' ] ) != u ) {

                  if ( typeof obj == 'object' ) {
                      Decimal[p] = obj;
                  } else {

                      // 'config() format object expected: {obj}'
                      ifExceptionsThrow( Decimal, 'format object expected', obj, c );
                  }
              }

              return Decimal;
          }


          /*
           * Return a new Decimal whose value is the cosine of n.
           *
           * n {number|string|Decimal} A number given in radians.
           *
          function cos(n) { return new this( Math.cos(n) + '' ) }
           */


          /*
           * Return a new Decimal whose value is the exponential of n,
           *
           * n {number|string|Decimal} The power to which to raise the base of the natural log.
           *
           */
          function exp(n) { return new this(n)['exp'](); }


          /*
           * Return a new Decimal whose value is n round to an integer using ROUND_FLOOR.
           *
           * n {number|string|Decimal}
           *
          function floor(n) { return new this(n)['floor']() }
           */




          /*
           * Return a new Decimal whose value is the natural logarithm of n.
           *
           * n {number|string|Decimal}
           *
           */
          function ln(n) { return new this(n)['ln'](); }


          /*
           * Return a new Decimal whose value is the log of x to the base y, or to base 10 if no
           * base is specified.
           *
           * log[y](x)
           *
           * x {number|string|Decimal} The argument of the logarithm.
           * y {number|string|Decimal} The base of the logarithm.
           *
           */
          function log( x, y ) { return new this(x)['log'](y); }


          /*
           * Handle max and min. ltgt is 'lt' or 'gt'.
           */
          function maxOrMin( Decimal, args, ltgt ) {
              var m, n,
                  i = 0;

              if ( toString.call( args[0] ) == '[object Array]' ) {
                  args = args[0];
              }

              m = new Decimal( args[0] );

              for ( ; ++i < args.length; ) {
                  n = new Decimal( args[i] );

                  if ( !n['s'] ) {
                      m = n;

                      break;
                  } else if ( m[ltgt](n) ) {
                      m = n;
                  }
              }

              return m;
          }


          /*
           * Return a new Decimal whose value is the maximum of the arguments.
           *
           * arguments {number|string|Decimal}
           *
           */
          function max() { return maxOrMin( this, arguments, 'lt' ); }


          /*
           * Return a new Decimal whose value is the minimum of the arguments.
           *
           * arguments {number|string|Decimal}
           *
           */
          function min() { return maxOrMin( this, arguments, 'gt' ); }


          /*
           * Parse the value of a new Decimal from a number or string.
           */
          var parseDecimal = (function () {
              var isValid = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
                  trim = String.prototype.trim ||
                    function () { return this.replace(/^\s+|\s+$/g, ''); };

              return function ( Decimal, x, n, b ) {
                  var d, e, i, isNum, orig, valid;

                  if ( typeof n != 'string' ) {

                      // If n is a number, check if minus zero.
                      n = ( isNum = typeof n == 'number' || toString.call(n) == '[object Number]' ) &&
                          n === 0 && 1 / n < 0 ? '-0' : n + '';
                  }
                  orig = n;

                  if ( b == null && isValid.test(n) ) {

                      // Determine sign.
                      x['s'] = n.charCodeAt(0) === 45 ? ( n = n.slice(1), -1 ) : 1;

                  // Either n is not a valid Decimal or a base has been specified.
                  } else {

                      /*
                       Enable exponential notation to be used with base 10 argument.
                       Ensure return value is rounded to precision as with other bases.
                       */
                      if ( b == 10 ) {

                          return rnd( new Decimal(n), Decimal['precision'], Decimal['rounding'] );
                      }

                      n = trim.call(n).replace( /^\+(?!-)/, '' );

                      x['s'] = n.charCodeAt(0) === 45 ? ( n = n.replace( /^-(?!-)/, '' ), -1 ) : 1;

                      if ( b != null ) {

                          if ( ( b == (b | 0) || !Decimal['errors'] ) &&
                            !( outOfRange = !( b >= 2 && b < 65 ) ) ) {
                              d = '[' + NUMERALS.slice( 0, b = b | 0 ) + ']+';

                             // Remove the `.` from e.g. '1.', and replace e.g. '.1' with '0.1'.
                              n = n.replace( /\.$/, '' ).replace( /^\./, '0.' );

                              // Any number in exponential form will fail due to the e+/-.
                              if ( valid = new RegExp(
                                '^' + d + '(?:\\.' + d + ')?$', b < 37 ? 'i' : '' ).test(n) ) {

                                  if (isNum) {

                                      if ( n.replace( /^0\.0*|\./, '' ).length > 15 ) {

                                          // '{method} number type has more than 15 significant digits: {n}'
                                          ifExceptionsThrow( Decimal, 0, orig );
                                      }

                                      // Prevent later check for length on converted number.
                                      isNum = !isNum;
                                  }
                                  n = convertBase( Decimal, n, 10, b, x['s'] );

                              } else if ( n != 'Infinity' && n != 'NaN' ) {

                                  // '{method} not a base {b} number: {n}'
                                  ifExceptionsThrow( Decimal, 'not a base ' + b + ' number', orig );
                                  n = 'NaN';
                              }
                          } else {

                              // '{method} base not an integer: {b}'
                              // '{method} base out of range: {b}'
                              ifExceptionsThrow( Decimal, 'base', b, 0, 0 );

                              // Ignore base.
                              valid = isValid.test(n);
                          }
                      } else {
                          valid = isValid.test(n);
                      }

                      if ( !valid ) {

                          // Infinity/NaN
                          x['c'] = x['e'] = null;

                          // NaN
                          if ( n != 'Infinity' ) {

                              // No exception on NaN.
                              if ( n != 'NaN' ) {

                                  // '{method} not a number: {n}'
                                  ifExceptionsThrow( Decimal, 'not a number', orig );
                              }
                              x['s'] = null;
                          }
                          id = 0;

                          return x;
                      }
                  }

                  // Decimal point?
                  if ( ( e = n.indexOf('.') ) > -1 ) {
                      n = n.replace( '.', '' );
                  }

                  // Exponential form?
                  if ( ( i = n.search(/e/i) ) > 0 ) {

                      // Determine exponent.
                      if ( e < 0 ) {
                          e = i;
                      }
                      e += +n.slice( i + 1 );
                      n = n.substring( 0, i );

                  } else if ( e < 0 ) {

                      // Integer.
                      e = n.length;
                  }

                  // Determine leading zeros.
                  for ( i = 0; n.charCodeAt(i) === 48; i++ );

                  // Determine trailing zeros.
                  for ( b = n.length; n.charCodeAt(--b) === 48; );

                  n = n.slice( i, b + 1 );

                  if (n) {
                      b = n.length;

                      // Disallow numbers with over 15 significant digits if number type.
                      if ( isNum && b > 15 ) {

                          // '{method} number type has more than 15 significant digits: {n}'
                          ifExceptionsThrow( Decimal, 0, orig );
                      }

                      x['e'] = e = e - i - 1;
                      x['c'] = [];

                      // Transform base

                      // e is the base 10 exponent.
                      // i is where to slice n to get the first element of the coefficient array.
                      i = ( e + 1 ) % LOGBASE;

                      if ( e < 0 ) {
                          i += LOGBASE;
                      }

                      // b is n.length.
                      if ( i < b ) {

                          if (i) {
                              x['c'].push( +n.slice( 0, i ) );
                          }

                          for ( b -= LOGBASE; i < b; ) {
                              x['c'].push( +n.slice( i, i += LOGBASE ) );
                          }

                          n = n.slice(i);
                          i = LOGBASE - n.length;
                      } else {
                          i -= b;
                      }

                      for ( ; i--; n += '0' );

                      x['c'].push( +n );

                      if (external) {

                          // Overflow?
                          if ( x['e'] > Decimal['maxE'] ) {

                              // Infinity.
                              x['c'] = x['e'] = null;

                          // Underflow?
                          } else if ( x['e'] < Decimal['minE'] ) {

                              // Zero.
                              x['c'] = [ x['e'] = 0 ];
                          }
                      }
                  } else {

                      // Zero.
                      x['c'] = [ x['e'] = 0 ];
                  }
                  id = 0;

                  return x;
              };
          })();


          /*
           * Return a new Decimal whose value is x raised to the power y.
           *
           * x {number|string|Decimal} The base.
           * y {number|string|Decimal} The exponent.
           *
           */
          function pow( x, y ) { return new this(x)['pow'](y); }


          /*
           * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and
           * with dp, or Decimal.precision if dp is omitted, decimal places (or less if trailing
           * zeros are produced).
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
           *
           */
          function random(dp) {
              var a, n, v,
                  i = 0,
                  r = [],
                  Decimal = this,
                  rand = new Decimal( Decimal['ONE'] );

              if ( dp == null || !checkArg( rand, dp, 'random' ) ) {
                  dp = Decimal['precision'];
              } else {
                  dp |= 0;
              }

              n = Math.ceil( dp / LOGBASE );

              if ( Decimal['crypto'] ) {

                  // Browsers supporting crypto.getRandomValues.
                  if ( crypto && crypto['getRandomValues'] ) {

                      a = crypto['getRandomValues']( new Uint32Array(n) );

                      for ( ; i < n; ) {
                          v = a[i];

                          // 0 <= v < 4294967296
                          // Probability that v >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
                          if ( v >= 4.29e9 ) {

                              a[i] = crypto['getRandomValues']( new Uint32Array(1) )[0];
                          } else {

                              // 0 <= v <= 4289999999
                              // 0 <= ( v % 1e7 ) <= 9999999
                              r[i++] = v % 1e7;
                          }
                      }

                  // Node.js supporting crypto.randomBytes.
                  } else if ( crypto && crypto['randomBytes'] ) {

                      // buffer
                      a = crypto['randomBytes']( n *= 4 );

                      for ( ; i < n; ) {

                          // 0 <= v < 2147483648
                          v = a[i] + ( a[i + 1] << 8 ) + ( a[i + 2] << 16 ) +
                              ( ( a[i + 3] & 0x7f ) << 24 );

                          // Probability that v >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
                          if ( v >= 2.14e9 ) {
                              crypto['randomBytes'](4).copy( a, i );
                          } else {

                              // 0 <= v <= 2139999999
                              // 0 <= ( v % 1e7 ) <= 9999999
                              r.push( v % 1e7 );
                              i += 4;
                          }
                      }
                      i = n / 4;

                  } else {
                      ifExceptionsThrow( Decimal, 'crypto unavailable', crypto, 'random' );
                  }
              }

              // Use Math.random: either Decimal.crypto is false or crypto is unavailable and errors is false.
              if (!i) {

                  for ( ; i < n; ) {
                      r[i++] = Math.random() * 1e7 | 0;
                  }
              }

              n = r[--i];
              dp %= LOGBASE;

              // Convert trailing digits to zeros according to dp.
              if ( n && dp ) {
                  v = mathpow( 10, LOGBASE - dp );
                  r[i] = ( n / v | 0 ) * v;
              }

              // Remove trailing elements which are zero.
              for ( ; r[i] === 0; i-- ) {
                  r.pop();
              }

              // Zero?
              if ( i < 0 ) {
                  r = [ n = 0 ];
              } else {
                  n = -1;

                  // Remove leading elements which are zero and adjust exponent accordingly.
                  for ( ; r[0] === 0; ) {
                      r.shift();
                      n -= LOGBASE;
                  }

                  // Count the digits of the first element of r to determine leading zeros.
                  for ( i = 1, v = r[0]; v >= 10; ) {
                      v /= 10;
                      i++;
                  }

                  // Adjust the exponent for leading zeros of the first element of r.
                  if ( i < LOGBASE ) {
                      n -= LOGBASE - i;
                  }
              }

              rand['e'] = n;
              rand['c'] = r;

              return rand;
          }


          /*
           * Return a new Decimal whose value is n round to an integer using rounding mode rounding.
           *
           * To emulate Math.round, set rounding to 7 (ROUND_HALF_CEIL).
           *
           * n {number|string|Decimal}
           *
          function round(n) {
              var x = new this(n);

              return rnd( x, x['e'] + 1, this['rounding'] );
          }
           */


          /*
           * Return a new Decimal whose value is the sine of n.
           *
           * n {number|string|Decimal} A number given in radians.
           *
          function sin(n) { return new this( Math.sin(n) + '' ) }
           */


          /*
           * Return a new Decimal whose value is the square root of n.
           *
           * n {number|string|Decimal}
           *
           */
          function sqrt(n) { return new this(n)['sqrt'](); }


          /*
           * Return a new Decimal whose value is the tangent of n.
           *
           * n {number|string|Decimal} A number given in radians.
           *
          function tan(n) { return new this( Math.tan(n) + '' ) }
           */


          /*
           * Return a new Decimal whose value is n truncated to an integer.
           *
           * n {number|string|Decimal}
           *
          function trunc(n) { return new this(n)['trunc']() }
           */


          /*
           * Create and return a Decimal constructor.
           *
           */
          function decimalFactory(obj) {

              /*
               * The Decimal constructor and exported function.
               * Create and return a new instance of a Decimal object.
               *
               * n {number|string|Decimal} A numeric value.
               * [b] {number} The base of n. Integer, 2 to 64 inclusive.
               *
               */
              function Decimal( n, b ) {
                  var x = this;

                  // Constructor called without new.
                  if ( !( x instanceof Decimal ) ) {
                      ifExceptionsThrow( Decimal, 'Decimal called without new', n );

                      return new Decimal( n, b );
                  }

                  // Retain a reference to this Decimal constructor, and shadow
                  // Decimal.prototype.constructor which points to Object.
                  x['constructor'] = Decimal;

                  // Duplicate.
                  if ( n instanceof Decimal ) {

                      if ( b == null ) {
                          id = 0;
                          x['s'] = n['s'];
                          x['e'] = n['e'];
                          x['c'] = ( n = n['c'] ) ? n.slice() : n;

                          return x;
                      } else if ( b == 10 ) {

                          return rnd( new Decimal(n), Decimal['precision'], Decimal['rounding'] );
                      } else {
                          n += '';
                      }
                  }

                  return parseDecimal( Decimal, x, n, b );
              }


              /* ************************ CONSTRUCTOR DEFAULT PROPERTIES ************************** */

              /*
               These default values must be integers within the stated ranges (inclusive).
               Most of these values can be changed during run-time using Decimal.config.
               */

              /*
               The maximum number of significant digits of the result of a calculation or base
               conversion.
               E.g.  Decimal.config({ precision: 20 })
               */
              Decimal['precision'] = 20;                        // 1 to MAX_DIGITS

              /*
               The rounding mode used when rounding to precision.

               ROUND_UP         0 Away from zero.
               ROUND_DOWN       1 Towards zero.
               ROUND_CEIL       2 Towards +Infinity.
               ROUND_FLOOR      3 Towards -Infinity.
               ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
               ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
               ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
               ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
               ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.

               E.g.
               Decimal.rounding = 4;
               Decimal.rounding = Decimal.ROUND_HALF_UP;
               */
              Decimal['rounding'] = 4;                          // 0 to 8

              /*
               The modulo mode used when calculating the modulus: a mod n.
               The quotient (q = a / n) is calculated according to the corresponding rounding mode.
               The remainder (r) is calculated as: r = a - n * q.

               UP         0 The remainder is positive if the dividend is negative, else is negative.
               DOWN       1 The remainder has the same sign as the dividend.
                            This modulo mode is commonly known as "truncated division" and matches
                            as closely as possible, the behaviour of JS remainder operator (a % n).
               FLOOR      3 The remainder has the same sign as the divisor (Python %).
               HALF_EVEN  6 This modulo mode implements the IEEE 754 remainder function.
               EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)).
                            The remainder is always positive.

               The above modes - truncated division, floored division, Euclidian division and IEEE 754
               remainder - are commonly used for the modulus operation. Although any other of the
               rounding modes can be used, they may not give useful results.
               */
              Decimal['modulo'] = 1;                            // 0 to 9

              // The exponent value at and beneath which toString returns exponential notation.
              // Number type: -7
              Decimal['toExpNeg'] = -7;                         // 0 to -EXP_LIMIT

              // The exponent value at and above which toString returns exponential notation.
              // Number type: 21
              Decimal['toExpPos'] = 21;                         // 0 to EXP_LIMIT

              // The minimum exponent value, beneath which underflow to zero occurs.
              // Number type: -324  (5e-324)
              Decimal['minE'] = -EXP_LIMIT;                     // -1 to -EXP_LIMIT

              // The maximum exponent value, above which overflow to Infinity occurs.
              // Number type:  308  (1.7976931348623157e+308)
              Decimal['maxE'] = EXP_LIMIT;                      // 1 to EXP_LIMIT

              // Whether Decimal Errors are ever thrown.
              Decimal['errors'] = true;                         // true/false

              // Whether to use cryptographically-secure random number generation, if available.
              Decimal['crypto'] = false;                        // true/false

              // Format specification for the Decimal.prototype.toFormat method
              Decimal.format = {
                  decimalSeparator: '.',
                  groupSeparator: ',',
                  groupSize: 3,
                  secondaryGroupSize: 0,
                  fractionGroupSeparator: '\xA0',              // non-breaking space
                  fractionGroupSize: 0
              };


              /* ********************** END OF CONSTRUCTOR DEFAULT PROPERTIES ********************* */


              Decimal.prototype = P;

              Decimal['ONE'] = new Decimal(1);

              /*
              // Pi to 80 s.d.
              Decimal['PI'] = new Decimal(
                  '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089'
              );
               */

              Decimal['ROUND_UP'] = 0;
              Decimal['ROUND_DOWN'] = 1;
              Decimal['ROUND_CEIL'] = 2;
              Decimal['ROUND_FLOOR'] = 3;
              Decimal['ROUND_HALF_UP'] = 4;
              Decimal['ROUND_HALF_DOWN'] = 5;
              Decimal['ROUND_HALF_EVEN'] = 6;
              Decimal['ROUND_HALF_CEIL'] = 7;
              Decimal['ROUND_HALF_FLOOR'] = 8;

              // modulo mode
              Decimal['EUCLID'] = 9;

              //Decimal['abs'] = abs;
              //Decimal['acos'] = acos;
              //Decimal['asin'] = asin;
              //Decimal['atan'] = atan;
              //Decimal['atan2'] = atan2;
              //Decimal['ceil'] = ceil;
              //Decimal['cos'] = cos;
              //Decimal['floor'] = floor;
              //Decimal['round'] = round;
              //Decimal['sin'] = sin;
              //Decimal['tan'] = tan;
              //Decimal['trunc'] = trunc;

              Decimal['config'] = config;
              Decimal['constructor'] = decimalFactory;
              Decimal['exp'] = exp;
              Decimal['ln'] = ln;
              Decimal['log'] = log;
              Decimal['max'] = max;
              Decimal['min'] = min;
              Decimal['pow'] = pow;
              Decimal['sqrt'] = sqrt;
              Decimal['random'] = random;

              if ( obj != null ) {
                  Decimal['config'](obj);
              }

              return Decimal;
          }

          return decimalFactory();
      })();


      // Export.


      // AMD.
      if ( true ) {

          !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
              return decimal;
          }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

      // Node and other environments that support module.exports.
      } else if ( typeof module != 'undefined' && module.exports ) {
          module.exports = decimal;

          if ( !crypto ) {

              try {
                  crypto = require('crypto');
              } catch (e) {}
          }

      // Browser.
      } else {
          noConflict = global['Decimal'];

          decimal['noConflict'] = function () {
              global['Decimal'] = noConflict;

              return decimal;
          };

          global['Decimal'] = decimal;
      }
  })(this);


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _ = __webpack_require__(76);
  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(101);

  var slice = _require.slice;

  var _require2 = __webpack_require__(119);

  var Hash160 = _require2.Hash160;

  var ISO_REGEX = /^[A-Z0-9]{3}$/;
  var HEX_REGEX = /^[A-F0-9]{40}$/;

  function isoToBytes(iso) {
    var bytes = new Uint8Array(20);
    if (iso !== 'XRP') {
      var isoBytes = iso.split('').map(function (c) {
        return c.charCodeAt(0);
      });
      bytes.set(isoBytes, 12);
    }
    return bytes;
  }

  function isISOCode(val) {
    return val.length === 3; // ISO_REGEX.test(val);
  }

  function isHex(val) {
    return HEX_REGEX.test(val);
  }

  function isStringRepr(val) {
    return _.isString(val) && (isISOCode(val) || isHex(val));
  }

  function isBytesArray(val) {
    return val.length === 20;
  }

  function isValidRepr(val) {
    return isStringRepr(val) || isBytesArray(val);
  }

  function bytesFromRepr(val) {
    if (isValidRepr(val)) {
      // We assume at this point that we have an object with a length, either 3,
      // 20 or 40.
      return val.length === 3 ? isoToBytes(val) : val;
    }
    throw new Error('Unsupported Currency repr: ' + val);
  }

  var $uper = Hash160.prototype;
  var Currency = makeClass({
    inherits: Hash160,
    getters: ['isNative', 'iso'],
    statics: {
      init: function init() {
        this.XRP = new this(new Uint8Array(20));
      },
      from: function from(val) {
        return val instanceof this ? val : new this(bytesFromRepr(val));
      }
    },
    Currency: function Currency(bytes) {
      Hash160.call(this, bytes);
      this.classify();
    },
    classify: function classify() {
      // We only have a non null iso() property available if the currency can be
      // losslessly represented by the 3 letter iso code. If none is available a
      // hex encoding of the full 20 bytes is the canonical representation.
      var onlyISO = true;

      var bytes = this._bytes;
      var code = slice(this._bytes, 12, 15, Array);
      var iso = code.map(function (c) {
        return String.fromCharCode(c);
      }).join('');

      for (var i = bytes.length - 1; i >= 0; i--) {
        if (bytes[i] !== 0 && !(i === 12 || i === 13 || i === 14)) {
          onlyISO = false;
          break;
        }
      }
      var lossLessISO = onlyISO && iso !== 'XRP' && ISO_REGEX.test(iso);
      this._isNative = onlyISO && _.isEqual(code, [0, 0, 0]);
      this._iso = this._isNative ? 'XRP' : lossLessISO ? iso : null;
    },
    toJSON: function toJSON() {
      if (this.iso()) {
        return this.iso();
      }
      return $uper.toJSON.call(this);
    }
  });

  module.exports = {
    Currency: Currency
  };

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var assert = __webpack_require__(78);
  var BN = __webpack_require__(129);
  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(101);

  var bytesToHex = _require.bytesToHex;
  var parseBytes = _require.parseBytes;
  var serializeUIntN = _require.serializeUIntN;

  var _require2 = __webpack_require__(133);

  var UInt = _require2.UInt;

  var HEX_REGEX = /^[A-F0-9]{16}$/;

  var UInt64 = makeClass({
    inherits: UInt,
    statics: { width: 8 },
    UInt64: function UInt64() {
      var arg = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

      var argType = typeof arg;
      if (argType === 'number') {
        assert(arg >= 0);
        this._bytes = new Uint8Array(8);
        this._bytes.set(serializeUIntN(arg, 4), 4);
      } else if (arg instanceof BN) {
        this._bytes = parseBytes(arg.toArray('be', 8), Uint8Array);
        this._toBN = arg;
      } else {
        if (argType === 'string') {
          if (!HEX_REGEX.test(arg)) {
            throw new Error(arg + ' is not a valid UInt64 hex string');
          }
        }
        this._bytes = parseBytes(arg, Uint8Array);
      }
      assert(this._bytes.length === 8);
    },
    toJSON: function toJSON() {
      return bytesToHex(this._bytes);
    },
    valueOf: function valueOf() {
      return this.toBN();
    },
    cached: {
      toBN: function toBN() {
        return new BN(this._bytes);
      }
    },
    toBytes: function toBytes() {
      return this._bytes;
    }
  });

  module.exports = {
    UInt64: UInt64
  };

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var assert = __webpack_require__(78);
  var BN = __webpack_require__(129);
  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(121);

  var Comparable = _require.Comparable;
  var SerializedType = _require.SerializedType;

  var _require2 = __webpack_require__(101);

  var serializeUIntN = _require2.serializeUIntN;

  var MAX_VALUES = [0, 255, 65535, 16777215, 4294967295];

  function signum(a, b) {
    return a < b ? -1 : a === b ? 0 : 1;
  }

  var UInt = makeClass({
    mixins: [Comparable, SerializedType],
    UInt: function UInt() {
      var val = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

      var max = MAX_VALUES[this.constructor.width];
      if (val < 0 || !(val <= max)) {
        throw new Error(val + ' not in range 0 <= $val <= ' + max);
      }
      this.val = val;
    },
    statics: {
      width: 0,
      fromParser: function fromParser(parser) {
        var val = this.width > 4 ? parser.read(this.width) : parser.readUIntN(this.width);
        return new this(val);
      },
      from: function from(val) {
        return val instanceof this ? val : new this(val);
      }
    },
    toJSON: function toJSON() {
      return this.val;
    },
    valueOf: function valueOf() {
      return this.val;
    },
    compareTo: function compareTo(other) {
      var thisValue = this.valueOf();
      var otherValue = other.valueOf();
      if (thisValue instanceof BN) {
        return otherValue instanceof BN ? thisValue.cmp(otherValue) : thisValue.cmpn(otherValue);
      } else if (otherValue instanceof BN) {
        return -other.compareTo(this);
      }
      assert(typeof otherValue === 'number');
      return signum(thisValue, otherValue);
    },
    toBytesSink: function toBytesSink(sink) {
      sink.put(this.toBytes());
    },
    toBytes: function toBytes() {
      return serializeUIntN(this.val, this.constructor.width);
    }
  });

  module.exports = {
    UInt: UInt
  };

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(101);

  var parseBytes = _require.parseBytes;

  var _require2 = __webpack_require__(121);

  var SerializedType = _require2.SerializedType;

  var Blob = makeClass({
    mixins: SerializedType,
    Blob: function Blob(bytes) {
      if (bytes) {
        this._bytes = parseBytes(bytes, Uint8Array);
      } else {
        this._bytes = new Uint8Array(0);
      }
    },
    statics: {
      fromParser: function fromParser(parser, hint) {
        return new this(parser.read(hint));
      },
      from: function from(value) {
        if (value instanceof this) {
          return value;
        }
        return new this(value);
      }
    }
  });

  module.exports = {
    Blob: Blob
  };

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(120);

  var Hash = _require.Hash;

  var Hash128 = makeClass({
    inherits: Hash,
    statics: { width: 16 }
  });

  module.exports = {
    Hash128: Hash128
  };

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(120);

  var Hash = _require.Hash;

  var Hash256 = makeClass({
    inherits: Hash,
    statics: {
      width: 32,
      init: function init() {
        this.ZERO_256 = new this(new Uint8Array(this.width));
      }
    }
  });

  module.exports = {
    Hash256: Hash256
  };

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  /* eslint-disable no-unused-expressions */

  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(121);

  var SerializedType = _require.SerializedType;
  var ensureArrayLikeIs = _require.ensureArrayLikeIs;

  var _require2 = __webpack_require__(131);

  var Currency = _require2.Currency;

  var _require3 = __webpack_require__(106);

  var AccountID = _require3.AccountID;

  var PATHSET_END_BYTE = 0x00;
  var PATH_SEPARATOR_BYTE = 0xFF;
  var TYPE_ACCOUNT = 0x01;
  var TYPE_CURRENCY = 0x10;
  var TYPE_ISSUER = 0x20;

  var Hop = makeClass({
    statics: {
      from: function from(value) {
        if (value instanceof this) {
          return value;
        }
        var hop = new Hop();
        value.issuer && (hop.issuer = AccountID.from(value.issuer));
        value.account && (hop.account = AccountID.from(value.account));
        value.currency && (hop.currency = Currency.from(value.currency));
        return hop;
      },
      parse: function parse(parser, type) {
        var hop = new Hop();
        type & TYPE_ACCOUNT && (hop.account = AccountID.fromParser(parser));
        type & TYPE_CURRENCY && (hop.currency = Currency.fromParser(parser));
        type & TYPE_ISSUER && (hop.issuer = AccountID.fromParser(parser));
        return hop;
      }
    },
    toJSON: function toJSON() {
      var type = this.type();
      var ret = {};
      type & TYPE_ACCOUNT && (ret.account = this.account.toJSON());
      type & TYPE_ISSUER && (ret.issuer = this.issuer.toJSON());
      type & TYPE_CURRENCY && (ret.currency = this.currency.toJSON());
      return ret;
    },
    type: function type() {
      var type = 0;
      this.issuer && (type += TYPE_ISSUER);
      this.account && (type += TYPE_ACCOUNT);
      this.currency && (type += TYPE_CURRENCY);
      return type;
    }
  });

  var Path = makeClass({
    inherits: Array,
    statics: {
      from: function from(value) {
        return ensureArrayLikeIs(Path, value).withChildren(Hop);
      }
    },
    toJSON: function toJSON() {
      return this.map(function (k) {
        return k.toJSON();
      });
    }
  });

  var PathSet = makeClass({
    mixins: SerializedType,
    inherits: Array,
    statics: {
      from: function from(value) {
        return ensureArrayLikeIs(PathSet, value).withChildren(Path);
      },
      fromParser: function fromParser(parser) {
        var pathSet = new this();
        var path = undefined;
        while (!parser.end()) {
          var type = parser.readUInt8();
          if (type === PATHSET_END_BYTE) {
            break;
          }
          if (type === PATH_SEPARATOR_BYTE) {
            path = null;
            continue;
          }
          if (!path) {
            path = new Path();
            pathSet.push(path);
          }
          path.push(Hop.parse(parser, type));
        }
        return pathSet;
      }
    },
    toJSON: function toJSON() {
      return this.map(function (k) {
        return k.toJSON();
      });
    },
    toBytesSink: function toBytesSink(sink) {
      var n = 0;
      this.forEach(function (path) {
        if (n++ !== 0) {
          sink.put([PATH_SEPARATOR_BYTE]);
        }
        path.forEach(function (hop) {
          sink.put([hop.type()]);
          hop.account && hop.account.toBytesSink(sink);
          hop.currency && hop.currency.toBytesSink(sink);
          hop.issuer && hop.issuer.toBytesSink(sink);
        });
      });
      sink.put([PATHSET_END_BYTE]);
    }
  });

  module.exports = {
    PathSet: PathSet
  };

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(121);

  var ensureArrayLikeIs = _require.ensureArrayLikeIs;
  var SerializedType = _require.SerializedType;

  var _require2 = __webpack_require__(93);

  var Field = _require2.Field;

  var _require3 = __webpack_require__(139);

  var STObject = _require3.STObject;
  var ArrayEndMarker = Field.ArrayEndMarker;

  var STArray = makeClass({
    mixins: SerializedType,
    inherits: Array,
    statics: {
      fromParser: function fromParser(parser) {
        var array = new STArray();
        while (!parser.end()) {
          var field = parser.readField();
          if (field === ArrayEndMarker) {
            break;
          }
          var outer = new STObject();
          outer[field] = parser.readFieldValue(field);
          array.push(outer);
        }
        return array;
      },
      from: function from(value) {
        return ensureArrayLikeIs(STArray, value).withChildren(STObject);
      }
    },
    toJSON: function toJSON() {
      return this.map(function (v) {
        return v.toJSON();
      });
    },
    toBytesSink: function toBytesSink(sink) {
      this.forEach(function (so) {
        return so.toBytesSink(sink);
      });
    }
  });

  module.exports = {
    STArray: STArray
  };

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  // const assert = require('assert');

  var _Object$keys = __webpack_require__(72)['default'];

  var _ = __webpack_require__(76);
  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(93);

  var Field = _require.Field;

  var _require2 = __webpack_require__(122);

  var BinarySerializer = _require2.BinarySerializer;
  var ObjectEndMarker = Field.ObjectEndMarker;

  var _require3 = __webpack_require__(121);

  var SerializedType = _require3.SerializedType;

  var STObject = makeClass({
    mixins: SerializedType,
    statics: {
      fromParser: function fromParser(parser, hint) {
        var end = typeof hint === 'number' ? parser.pos() + hint : null;
        var so = new this();
        while (!parser.end(end)) {
          var field = parser.readField();
          if (field === ObjectEndMarker) {
            break;
          }
          so[field] = parser.readFieldValue(field);
        }
        return so;
      },
      from: function from(value) {
        if (value instanceof this) {
          return value;
        }
        if (typeof value === 'object') {
          return _.transform(value, function (so, val, key) {
            var field = Field[key];
            if (field) {
              so[field] = field.associatedType.from(val);
            } else {
              so[key] = val;
            }
          }, new this());
        }
        throw new Error(value + ' is unsupported');
      }
    },
    fieldKeys: function fieldKeys() {
      return _Object$keys(this).map(function (k) {
        return Field[k];
      }).filter(Boolean);
    },
    toJSON: function toJSON() {
      return _.transform(this, function (result, value, key) {
        result[key] = value && value.toJSON ? value.toJSON() : value;
      });
    },
    toBytesSink: function toBytesSink(sink) {
      var _this = this;

      var filter = arguments.length <= 1 || arguments[1] === undefined ? function () {
        return true;
      } : arguments[1];

      var serializer = new BinarySerializer(sink);
      var fields = this.fieldKeys();
      var sorted = _.sortBy(fields, 'ordinal');
      sorted.filter(filter).forEach(function (field) {
        var value = _this[field];
        if (!field.isSerialized) {
          return;
        }
        serializer.writeFieldAndValue(field, value);
      });
    }
  });

  module.exports = {
    STObject: STObject
  };

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(133);

  var UInt = _require.UInt;

  var UInt16 = makeClass({
    inherits: UInt,
    statics: { width: 2 }
  });

  module.exports = {
    UInt16: UInt16
  };

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(133);

  var UInt = _require.UInt;

  var UInt32 = makeClass({
    inherits: UInt,
    statics: { width: 4 }
  });

  module.exports = {
    UInt32: UInt32
  };

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(133);

  var UInt = _require.UInt;

  var UInt8 = makeClass({
    inherits: UInt,
    statics: { width: 1 }
  });

  module.exports = {
    UInt8: UInt8
  };

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(136);

  var Hash256 = _require.Hash256;

  var _require2 = __webpack_require__(121);

  var ensureArrayLikeIs = _require2.ensureArrayLikeIs;
  var SerializedType = _require2.SerializedType;

  var Vector256 = makeClass({
    mixins: SerializedType,
    inherits: Array,
    statics: {
      fromParser: function fromParser(parser, hint) {
        var vector256 = new this();
        var bytes = hint !== null ? hint : parser.size() - parser.pos();
        var hashes = bytes / 32;
        for (var i = 0; i < hashes; i++) {
          vector256.push(Hash256.fromParser(parser));
        }
        return vector256;
      },
      from: function from(value) {
        return ensureArrayLikeIs(Vector256, value).withChildren(Hash256);
      }
    },
    toBytesSink: function toBytesSink(sink) {
      this.forEach(function (h) {
        return h.toBytesSink(sink);
      });
    },
    toJSON: function toJSON() {
      return this.map(function (hash) {
        return hash.toJSON();
      });
    }
  });

  module.exports = {
    Vector256: Vector256
  };

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

  /* eslint-disable func-style */

  'use strict';

  var types = __webpack_require__(105);

  var _require = __webpack_require__(145);

  var HashPrefix = _require.HashPrefix;

  var _require2 = __webpack_require__(146);

  var BinaryParser = _require2.BinaryParser;

  var _require3 = __webpack_require__(122);

  var BinarySerializer = _require3.BinarySerializer;
  var BytesList = _require3.BytesList;

  var _require4 = __webpack_require__(101);

  var bytesToHex = _require4.bytesToHex;
  var slice = _require4.slice;
  var parseBytes = _require4.parseBytes;

  var _require5 = __webpack_require__(147);

  var sha512Half = _require5.sha512Half;
  var transactionID = _require5.transactionID;

  var makeParser = function makeParser(bytes) {
    return new BinaryParser(bytes);
  };
  var readJSON = function readJSON(parser) {
    return parser.readType(types.STObject).toJSON();
  };
  var binaryToJSON = function binaryToJSON(bytes) {
    return readJSON(makeParser(bytes));
  };

  function serializeObject(object) {
    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var prefix = opts.prefix;
    var suffix = opts.suffix;
    var _opts$signingFieldsOnly = opts.signingFieldsOnly;
    var signingFieldsOnly = _opts$signingFieldsOnly === undefined ? false : _opts$signingFieldsOnly;

    var bytesList = new BytesList();
    if (prefix) {
      bytesList.put(prefix);
    }
    var filter = signingFieldsOnly ? function (f) {
      return f.isSigningField;
    } : undefined;
    types.STObject.from(object).toBytesSink(bytesList, filter);
    if (suffix) {
      bytesList.put(suffix);
    }
    return bytesList.toBytes();
  }

  function signingData(tx) {
    var prefix = arguments.length <= 1 || arguments[1] === undefined ? HashPrefix.transactionSig : arguments[1];

    return serializeObject(tx, { prefix: prefix, signingFieldsOnly: true });
  }

  function multiSigningData(tx, signingAccount) {
    var prefix = HashPrefix.transactionMultiSig;
    var suffix = types.AccountID.from(signingAccount).toBytes();
    return serializeObject(tx, { prefix: prefix, suffix: suffix, signingFieldsOnly: true });
  }

  module.exports = {
    BinaryParser: BinaryParser,
    BinarySerializer: BinarySerializer,
    BytesList: BytesList,
    makeParser: makeParser,
    serializeObject: serializeObject,
    readJSON: readJSON,
    bytesToHex: bytesToHex,
    parseBytes: parseBytes,
    multiSigningData: multiSigningData,
    signingData: signingData,
    binaryToJSON: binaryToJSON,
    sha512Half: sha512Half,
    transactionID: transactionID,
    slice: slice
  };

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _require = __webpack_require__(101);

  var serializeUIntN = _require.serializeUIntN;

  function bytes(uint32) {
    return serializeUIntN(uint32, 4);
  }

  var HashPrefix = {
    transactionID: bytes(0x54584E00),
    // transaction plus metadata
    transaction: bytes(0x534E4400),
    // account state
    accountStateEntry: bytes(0x4D4C4E00),
    // inner node in tree
    innerNode: bytes(0x4D494E00),
    // ledger master data for signing
    ledgerHeader: bytes(0x4C575200),
    // inner transaction to sign
    transactionSig: bytes(0x53545800),
    // inner transaction to sign
    transactionMultiSig: bytes(0x534D5400),
    // validation for signing
    validation: bytes(0x56414C00),
    // proposal for signing
    proposal: bytes(0x50525000)
  };

  module.exports = {
    HashPrefix: HashPrefix
  };

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var assert = __webpack_require__(78);
  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(93);

  var Field = _require.Field;

  var _require2 = __webpack_require__(101);

  var slice = _require2.slice;
  var parseBytes = _require2.parseBytes;

  var BinaryParser = makeClass({
    BinaryParser: function BinaryParser(buf) {
      this._buf = parseBytes(buf, Uint8Array);
      this._length = this._buf.length;
      this._cursor = 0;
    },
    skip: function skip(n) {
      this._cursor += n;
    },
    read: function read(n) {
      var to = arguments.length <= 1 || arguments[1] === undefined ? Uint8Array : arguments[1];

      var start = this._cursor;
      var end = this._cursor + n;
      assert(end <= this._buf.length);
      this._cursor = end;
      return slice(this._buf, start, end, to);
    },
    readUIntN: function readUIntN(n) {
      return this.read(n, Array).reduce(function (a, b) {
        return a << 8 | b;
      }) >>> 0;
    },
    readUInt8: function readUInt8() {
      return this._buf[this._cursor++];
    },
    readUInt16: function readUInt16() {
      return this.readUIntN(2);
    },
    readUInt32: function readUInt32() {
      return this.readUIntN(4);
    },
    pos: function pos() {
      return this._cursor;
    },
    size: function size() {
      return this._buf.length;
    },
    end: function end(customEnd) {
      var cursor = this.pos();
      return cursor >= this._length || customEnd !== null && cursor >= customEnd;
    },
    readVL: function readVL() {
      return this.read(this.readVLLength());
    },
    readVLLength: function readVLLength() {
      var b1 = this.readUInt8();
      if (b1 <= 192) {
        return b1;
      } else if (b1 <= 240) {
        var b2 = this.readUInt8();
        return 193 + (b1 - 193) * 256 + b2;
      } else if (b1 <= 254) {
        var b2 = this.readUInt8();
        var b3 = this.readUInt8();
        return 12481 + (b1 - 241) * 65536 + b2 * 256 + b3;
      }
      throw new Error('Invalid varint length indicator');
    },
    readFieldOrdinal: function readFieldOrdinal() {
      var tagByte = this.readUInt8();
      var type = (tagByte & 0xF0) >>> 4 || this.readUInt8();
      var nth = tagByte & 0x0F || this.readUInt8();
      return type << 16 | nth;
    },
    readField: function readField() {
      return Field.from(this.readFieldOrdinal());
    },
    readType: function readType(type) {
      return type.fromParser(this);
    },
    typeForField: function typeForField(field) {
      return field.associatedType;
    },
    readFieldValue: function readFieldValue(field) {
      var kls = this.typeForField(field);
      if (!kls) {
        throw new Error('unsupported: (' + field.name + ', ' + field.type.name + ')');
      }
      var sizeHint = field.isVLEncoded ? this.readVLLength() : null;
      var value = kls.fromParser(this, sizeHint);
      if (value === undefined) {
        throw new Error('fromParser for (' + field.name + ', ' + field.type.name + ') -> undefined ');
      }
      return value;
    },
    readFieldAndValue: function readFieldAndValue() {
      var field = this.readField();
      return [field, this.readFieldValue(field)];
    }
  });

  module.exports = {
    BinaryParser: BinaryParser
  };

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(145);

  var HashPrefix = _require.HashPrefix;

  var _require2 = __webpack_require__(105);

  var Hash256 = _require2.Hash256;

  var _require3 = __webpack_require__(101);

  var parseBytes = _require3.parseBytes;

  var createHash = __webpack_require__(148);

  var Sha512Half = makeClass({
    Sha512Half: function Sha512Half() {
      this.hash = createHash('sha512');
    },
    statics: {
      put: function put(bytes) {
        return new this().put(bytes);
      }
    },
    put: function put(bytes) {
      this.hash.update(parseBytes(bytes, Buffer));
      return this;
    },
    finish256: function finish256() {
      var bytes = this.hash.digest();
      return bytes.slice(0, 32);
    },
    finish: function finish() {
      return new Hash256(this.finish256());
    }
  });

  function sha512Half() {
    var hash = new Sha512Half();

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    args.forEach(function (a) {
      return hash.put(a);
    });
    return parseBytes(hash.finish256(), Uint8Array);
  }

  function transactionID(serialized) {
    return new Hash256(sha512Half(HashPrefix.transactionID, serialized));
  }

  module.exports = {
    Sha512Half: Sha512Half,
    sha512Half: sha512Half,
    transactionID: transactionID
  };
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85).Buffer))

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
  var inherits = __webpack_require__(103)
  var md5 = __webpack_require__(149)
  var rmd160 = __webpack_require__(151)
  var sha = __webpack_require__(152)

  var Base = __webpack_require__(160)

  function HashNoConstructor(hash) {
    Base.call(this, 'digest')

    this._hash = hash
    this.buffers = []
  }

  inherits(HashNoConstructor, Base)

  HashNoConstructor.prototype._update = function (data) {
    this.buffers.push(data)
  }

  HashNoConstructor.prototype._final = function () {
    var buf = Buffer.concat(this.buffers)
    var r = this._hash(buf)
    this.buffers = null

    return r
  }

  function Hash(hash) {
    Base.call(this, 'digest')

    this._hash = hash
  }

  inherits(Hash, Base)

  Hash.prototype._update = function (data) {
    this._hash.update(data)
  }

  Hash.prototype._final = function () {
    return this._hash.digest()
  }

  module.exports = function createHash (alg) {
    alg = alg.toLowerCase()
    if ('md5' === alg) return new HashNoConstructor(md5)
    if ('rmd160' === alg || 'ripemd160' === alg) return new HashNoConstructor(rmd160)

    return new Hash(sha(alg))
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85).Buffer))

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  /*
   * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
   * Digest Algorithm, as defined in RFC 1321.
   * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for more info.
   */

  var helpers = __webpack_require__(150);

  /*
   * Calculate the MD5 of an array of little-endian words, and a bit length
   */
  function core_md5(x, len)
  {
    /* append padding */
    x[len >> 5] |= 0x80 << ((len) % 32);
    x[(((len + 64) >>> 9) << 4) + 14] = len;

    var a =  1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d =  271733878;

    for(var i = 0; i < x.length; i += 16)
    {
      var olda = a;
      var oldb = b;
      var oldc = c;
      var oldd = d;

      a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
      d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
      c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
      b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
      a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
      d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
      c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
      b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
      a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
      d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
      c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
      b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
      a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
      d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
      c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
      b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

      a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
      d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
      c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
      b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
      a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
      d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
      c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
      b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
      a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
      d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
      c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
      b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
      a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
      d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
      c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
      b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

      a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
      d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
      c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
      b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
      a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
      d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
      c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
      b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
      a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
      d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
      c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
      b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
      a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
      d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
      c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
      b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

      a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
      d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
      c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
      b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
      a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
      d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
      c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
      b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
      a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
      d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
      c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
      b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
      a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
      d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
      c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
      b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

      a = safe_add(a, olda);
      b = safe_add(b, oldb);
      c = safe_add(c, oldc);
      d = safe_add(d, oldd);
    }
    return Array(a, b, c, d);

  }

  /*
   * These functions implement the four basic operations the algorithm uses.
   */
  function md5_cmn(q, a, b, x, s, t)
  {
    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
  }
  function md5_ff(a, b, c, d, x, s, t)
  {
    return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
  }
  function md5_gg(a, b, c, d, x, s, t)
  {
    return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
  }
  function md5_hh(a, b, c, d, x, s, t)
  {
    return md5_cmn(b ^ c ^ d, a, b, x, s, t);
  }
  function md5_ii(a, b, c, d, x, s, t)
  {
    return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
  }

  /*
   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
   * to work around bugs in some JS interpreters.
   */
  function safe_add(x, y)
  {
    var lsw = (x & 0xFFFF) + (y & 0xFFFF);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return (msw << 16) | (lsw & 0xFFFF);
  }

  /*
   * Bitwise rotate a 32-bit number to the left.
   */
  function bit_rol(num, cnt)
  {
    return (num << cnt) | (num >>> (32 - cnt));
  }

  module.exports = function md5(buf) {
    return helpers.hash(buf, core_md5, 16);
  };

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
  var intSize = 4;
  var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
  var chrsz = 8;

  function toArray(buf, bigEndian) {
    if ((buf.length % intSize) !== 0) {
      var len = buf.length + (intSize - (buf.length % intSize));
      buf = Buffer.concat([buf, zeroBuffer], len);
    }

    var arr = [];
    var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
    for (var i = 0; i < buf.length; i += intSize) {
      arr.push(fn.call(buf, i));
    }
    return arr;
  }

  function toBuffer(arr, size, bigEndian) {
    var buf = new Buffer(size);
    var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
    for (var i = 0; i < arr.length; i++) {
      fn.call(buf, arr[i], i * 4, true);
    }
    return buf;
  }

  function hash(buf, fn, hashSize, bigEndian) {
    if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
    var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
    return toBuffer(arr, hashSize, bigEndian);
  }
  exports.hash = hash;
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85).Buffer))

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {/*
  CryptoJS v3.1.2
  code.google.com/p/crypto-js
  (c) 2009-2013 by Jeff Mott. All rights reserved.
  code.google.com/p/crypto-js/wiki/License
  */
  /** @preserve
  (c) 2012 by Cédric Mesnil. All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

      - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
      - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */

  // constants table
  var zl = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  ]

  var zr = [
    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  ]

  var sl = [
    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  ]

  var sr = [
    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  ]

  var hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]
  var hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]

  function bytesToWords (bytes) {
    var words = []
    for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
      words[b >>> 5] |= bytes[i] << (24 - b % 32)
    }
    return words
  }

  function wordsToBytes (words) {
    var bytes = []
    for (var b = 0; b < words.length * 32; b += 8) {
      bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)
    }
    return bytes
  }

  function processBlock (H, M, offset) {
    // swap endian
    for (var i = 0; i < 16; i++) {
      var offset_i = offset + i
      var M_offset_i = M[offset_i]

      // Swap
      M[offset_i] = (
        (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
        (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
      )
    }

    // Working variables
    var al, bl, cl, dl, el
    var ar, br, cr, dr, er

    ar = al = H[0]
    br = bl = H[1]
    cr = cl = H[2]
    dr = dl = H[3]
    er = el = H[4]

    // computation
    var t
    for (i = 0; i < 80; i += 1) {
      t = (al + M[offset + zl[i]]) | 0
      if (i < 16) {
        t += f1(bl, cl, dl) + hl[0]
      } else if (i < 32) {
        t += f2(bl, cl, dl) + hl[1]
      } else if (i < 48) {
        t += f3(bl, cl, dl) + hl[2]
      } else if (i < 64) {
        t += f4(bl, cl, dl) + hl[3]
      } else {// if (i<80) {
        t += f5(bl, cl, dl) + hl[4]
      }
      t = t | 0
      t = rotl(t, sl[i])
      t = (t + el) | 0
      al = el
      el = dl
      dl = rotl(cl, 10)
      cl = bl
      bl = t

      t = (ar + M[offset + zr[i]]) | 0
      if (i < 16) {
        t += f5(br, cr, dr) + hr[0]
      } else if (i < 32) {
        t += f4(br, cr, dr) + hr[1]
      } else if (i < 48) {
        t += f3(br, cr, dr) + hr[2]
      } else if (i < 64) {
        t += f2(br, cr, dr) + hr[3]
      } else {// if (i<80) {
        t += f1(br, cr, dr) + hr[4]
      }

      t = t | 0
      t = rotl(t, sr[i])
      t = (t + er) | 0
      ar = er
      er = dr
      dr = rotl(cr, 10)
      cr = br
      br = t
    }

    // intermediate hash value
    t = (H[1] + cl + dr) | 0
    H[1] = (H[2] + dl + er) | 0
    H[2] = (H[3] + el + ar) | 0
    H[3] = (H[4] + al + br) | 0
    H[4] = (H[0] + bl + cr) | 0
    H[0] = t
  }

  function f1 (x, y, z) {
    return ((x) ^ (y) ^ (z))
  }

  function f2 (x, y, z) {
    return (((x) & (y)) | ((~x) & (z)))
  }

  function f3 (x, y, z) {
    return (((x) | (~(y))) ^ (z))
  }

  function f4 (x, y, z) {
    return (((x) & (z)) | ((y) & (~(z))))
  }

  function f5 (x, y, z) {
    return ((x) ^ ((y) | (~(z))))
  }

  function rotl (x, n) {
    return (x << n) | (x >>> (32 - n))
  }

  function ripemd160 (message) {
    var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]

    if (typeof message === 'string') {
      message = new Buffer(message, 'utf8')
    }

    var m = bytesToWords(message)

    var nBitsLeft = message.length * 8
    var nBitsTotal = message.length * 8

    // Add padding
    m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)
    m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
      (((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
      (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00)
    )

    for (var i = 0; i < m.length; i += 16) {
      processBlock(H, m, i)
    }

    // swap endian
    for (i = 0; i < 5; i++) {
      // shortcut
      var H_i = H[i]

      // Swap
      H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
        (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00)
    }

    var digestbytes = wordsToBytes(H)
    return new Buffer(digestbytes)
  }

  module.exports = ripemd160

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85).Buffer))

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

  var exports = module.exports = function SHA (algorithm) {
    algorithm = algorithm.toLowerCase()

    var Algorithm = exports[algorithm]
    if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

    return new Algorithm()
  }

  exports.sha = __webpack_require__(153)
  exports.sha1 = __webpack_require__(155)
  exports.sha224 = __webpack_require__(156)
  exports.sha256 = __webpack_require__(157)
  exports.sha384 = __webpack_require__(158)
  exports.sha512 = __webpack_require__(159)


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {/*
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
   * in FIPS PUB 180-1
   * This source code is derived from sha1.js of the same repository.
   * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
   * operation was added.
   */

  var inherits = __webpack_require__(103)
  var Hash = __webpack_require__(154)

  var W = new Array(80)

  function Sha () {
    this.init()
    this._w = W

    Hash.call(this, 64, 56)
  }

  inherits(Sha, Hash)

  Sha.prototype.init = function () {
    this._a = 0x67452301 | 0
    this._b = 0xefcdab89 | 0
    this._c = 0x98badcfe | 0
    this._d = 0x10325476 | 0
    this._e = 0xc3d2e1f0 | 0

    return this
  }

  /*
   * Bitwise rotate a 32-bit number to the left.
   */
  function rol (num, cnt) {
    return (num << cnt) | (num >>> (32 - cnt))
  }

  Sha.prototype._update = function (M) {
    var W = this._w

    var a = this._a
    var b = this._b
    var c = this._c
    var d = this._d
    var e = this._e

    var j = 0
    var k

    /*
     * SHA-1 has a bitwise rotate left operation. But, SHA is not
     * function calcW() { return rol(W[j - 3] ^ W[j -  8] ^ W[j - 14] ^ W[j - 16], 1) }
     */
    function calcW () { return W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16] }
    function loop (w, f) {
      W[j] = w

      var t = rol(a, 5) + f + e + w + k

      e = d
      d = c
      c = rol(b, 30)
      b = a
      a = t
      j++
    }

    k = 1518500249
    while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))
    while (j < 20) loop(calcW(), (b & c) | ((~b) & d))
    k = 1859775393
    while (j < 40) loop(calcW(), b ^ c ^ d)
    k = -1894007588
    while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))
    k = -899497514
    while (j < 80) loop(calcW(), b ^ c ^ d)

    this._a = (a + this._a) | 0
    this._b = (b + this._b) | 0
    this._c = (c + this._c) | 0
    this._d = (d + this._d) | 0
    this._e = (e + this._e) | 0
  }

  Sha.prototype._hash = function () {
    var H = new Buffer(20)

    H.writeInt32BE(this._a | 0, 0)
    H.writeInt32BE(this._b | 0, 4)
    H.writeInt32BE(this._c | 0, 8)
    H.writeInt32BE(this._d | 0, 12)
    H.writeInt32BE(this._e | 0, 16)

    return H
  }

  module.exports = Sha


  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85).Buffer))

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {// prototype class for hash functions
  function Hash (blockSize, finalSize) {
    this._block = new Buffer(blockSize)
    this._finalSize = finalSize
    this._blockSize = blockSize
    this._len = 0
    this._s = 0
  }

  Hash.prototype.update = function (data, enc) {
    if (typeof data === 'string') {
      enc = enc || 'utf8'
      data = new Buffer(data, enc)
    }

    var l = this._len += data.length
    var s = this._s || 0
    var f = 0
    var buffer = this._block

    while (s < l) {
      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
      var ch = (t - f)

      for (var i = 0; i < ch; i++) {
        buffer[(s % this._blockSize) + i] = data[i + f]
      }

      s += ch
      f += ch

      if ((s % this._blockSize) === 0) {
        this._update(buffer)
      }
    }
    this._s = s

    return this
  }

  Hash.prototype.digest = function (enc) {
    // Suppose the length of the message M, in bits, is l
    var l = this._len * 8

    // Append the bit 1 to the end of the message
    this._block[this._len % this._blockSize] = 0x80

    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
    this._block.fill(0, this._len % this._blockSize + 1)

    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
      this._update(this._block)
      this._block.fill(0)
    }

    // to this append the block which is equal to the number l written in binary
    // TODO: handle case where l is > Math.pow(2, 29)
    this._block.writeInt32BE(l, this._blockSize - 4)

    var hash = this._update(this._block) || this._hash()

    return enc ? hash.toString(enc) : hash
  }

  Hash.prototype._update = function () {
    throw new Error('_update must be implemented by subclass')
  }

  module.exports = Hash

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85).Buffer))

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {/*
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
   * in FIPS PUB 180-1
   * Version 2.1a Copyright Paul Johnston 2000 - 2002.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for details.
   */

  var inherits = __webpack_require__(103)
  var Hash = __webpack_require__(154)

  var W = new Array(80)

  function Sha1 () {
    this.init()
    this._w = W

    Hash.call(this, 64, 56)
  }

  inherits(Sha1, Hash)

  Sha1.prototype.init = function () {
    this._a = 0x67452301 | 0
    this._b = 0xefcdab89 | 0
    this._c = 0x98badcfe | 0
    this._d = 0x10325476 | 0
    this._e = 0xc3d2e1f0 | 0

    return this
  }

  /*
   * Bitwise rotate a 32-bit number to the left.
   */
  function rol (num, cnt) {
    return (num << cnt) | (num >>> (32 - cnt))
  }

  Sha1.prototype._update = function (M) {
    var W = this._w

    var a = this._a
    var b = this._b
    var c = this._c
    var d = this._d
    var e = this._e

    var j = 0
    var k

    function calcW () { return rol(W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16], 1) }
    function loop (w, f) {
      W[j] = w

      var t = rol(a, 5) + f + e + w + k

      e = d
      d = c
      c = rol(b, 30)
      b = a
      a = t
      j++
    }

    k = 1518500249
    while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))
    while (j < 20) loop(calcW(), (b & c) | ((~b) & d))
    k = 1859775393
    while (j < 40) loop(calcW(), b ^ c ^ d)
    k = -1894007588
    while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))
    k = -899497514
    while (j < 80) loop(calcW(), b ^ c ^ d)

    this._a = (a + this._a) | 0
    this._b = (b + this._b) | 0
    this._c = (c + this._c) | 0
    this._d = (d + this._d) | 0
    this._e = (e + this._e) | 0
  }

  Sha1.prototype._hash = function () {
    var H = new Buffer(20)

    H.writeInt32BE(this._a | 0, 0)
    H.writeInt32BE(this._b | 0, 4)
    H.writeInt32BE(this._c | 0, 8)
    H.writeInt32BE(this._d | 0, 12)
    H.writeInt32BE(this._e | 0, 16)

    return H
  }

  module.exports = Sha1

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85).Buffer))

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {/**
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
   * in FIPS 180-2
   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   *
   */

  var inherits = __webpack_require__(103)
  var Sha256 = __webpack_require__(157)
  var Hash = __webpack_require__(154)

  var W = new Array(64)

  function Sha224 () {
    this.init()

    this._w = W // new Array(64)

    Hash.call(this, 64, 56)
  }

  inherits(Sha224, Sha256)

  Sha224.prototype.init = function () {
    this._a = 0xc1059ed8 | 0
    this._b = 0x367cd507 | 0
    this._c = 0x3070dd17 | 0
    this._d = 0xf70e5939 | 0
    this._e = 0xffc00b31 | 0
    this._f = 0x68581511 | 0
    this._g = 0x64f98fa7 | 0
    this._h = 0xbefa4fa4 | 0

    return this
  }

  Sha224.prototype._hash = function () {
    var H = new Buffer(28)

    H.writeInt32BE(this._a, 0)
    H.writeInt32BE(this._b, 4)
    H.writeInt32BE(this._c, 8)
    H.writeInt32BE(this._d, 12)
    H.writeInt32BE(this._e, 16)
    H.writeInt32BE(this._f, 20)
    H.writeInt32BE(this._g, 24)

    return H
  }

  module.exports = Sha224

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85).Buffer))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {/**
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
   * in FIPS 180-2
   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   *
   */

  var inherits = __webpack_require__(103)
  var Hash = __webpack_require__(154)

  var K = [
    0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
    0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
    0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
    0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
    0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
    0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
    0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
    0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
    0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
    0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
    0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
    0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
    0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
    0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
    0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
    0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
  ]

  var W = new Array(64)

  function Sha256 () {
    this.init()

    this._w = W // new Array(64)

    Hash.call(this, 64, 56)
  }

  inherits(Sha256, Hash)

  Sha256.prototype.init = function () {
    this._a = 0x6a09e667 | 0
    this._b = 0xbb67ae85 | 0
    this._c = 0x3c6ef372 | 0
    this._d = 0xa54ff53a | 0
    this._e = 0x510e527f | 0
    this._f = 0x9b05688c | 0
    this._g = 0x1f83d9ab | 0
    this._h = 0x5be0cd19 | 0

    return this
  }

  function Ch (x, y, z) {
    return z ^ (x & (y ^ z))
  }

  function Maj (x, y, z) {
    return (x & y) | (z & (x | y))
  }

  function Sigma0 (x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
  }

  function Sigma1 (x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
  }

  function Gamma0 (x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
  }

  function Gamma1 (x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
  }

  Sha256.prototype._update = function (M) {
    var W = this._w

    var a = this._a | 0
    var b = this._b | 0
    var c = this._c | 0
    var d = this._d | 0
    var e = this._e | 0
    var f = this._f | 0
    var g = this._g | 0
    var h = this._h | 0

    var j = 0

    function calcW () { return Gamma1(W[j - 2]) + W[j - 7] + Gamma0(W[j - 15]) + W[j - 16] }
    function loop (w) {
      W[j] = w

      var T1 = h + Sigma1(e) + Ch(e, f, g) + K[j] + w
      var T2 = Sigma0(a) + Maj(a, b, c)

      h = g
      g = f
      f = e
      e = d + T1
      d = c
      c = b
      b = a
      a = T1 + T2

      j++
    }

    while (j < 16) loop(M.readInt32BE(j * 4))
    while (j < 64) loop(calcW())

    this._a = (a + this._a) | 0
    this._b = (b + this._b) | 0
    this._c = (c + this._c) | 0
    this._d = (d + this._d) | 0
    this._e = (e + this._e) | 0
    this._f = (f + this._f) | 0
    this._g = (g + this._g) | 0
    this._h = (h + this._h) | 0
  }

  Sha256.prototype._hash = function () {
    var H = new Buffer(32)

    H.writeInt32BE(this._a, 0)
    H.writeInt32BE(this._b, 4)
    H.writeInt32BE(this._c, 8)
    H.writeInt32BE(this._d, 12)
    H.writeInt32BE(this._e, 16)
    H.writeInt32BE(this._f, 20)
    H.writeInt32BE(this._g, 24)
    H.writeInt32BE(this._h, 28)

    return H
  }

  module.exports = Sha256

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85).Buffer))

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {var inherits = __webpack_require__(103)
  var SHA512 = __webpack_require__(159)
  var Hash = __webpack_require__(154)

  var W = new Array(160)

  function Sha384 () {
    this.init()
    this._w = W

    Hash.call(this, 128, 112)
  }

  inherits(Sha384, SHA512)

  Sha384.prototype.init = function () {
    this._a = 0xcbbb9d5d | 0
    this._b = 0x629a292a | 0
    this._c = 0x9159015a | 0
    this._d = 0x152fecd8 | 0
    this._e = 0x67332667 | 0
    this._f = 0x8eb44a87 | 0
    this._g = 0xdb0c2e0d | 0
    this._h = 0x47b5481d | 0

    this._al = 0xc1059ed8 | 0
    this._bl = 0x367cd507 | 0
    this._cl = 0x3070dd17 | 0
    this._dl = 0xf70e5939 | 0
    this._el = 0xffc00b31 | 0
    this._fl = 0x68581511 | 0
    this._gl = 0x64f98fa7 | 0
    this._hl = 0xbefa4fa4 | 0

    return this
  }

  Sha384.prototype._hash = function () {
    var H = new Buffer(48)

    function writeInt64BE (h, l, offset) {
      H.writeInt32BE(h, offset)
      H.writeInt32BE(l, offset + 4)
    }

    writeInt64BE(this._a, this._al, 0)
    writeInt64BE(this._b, this._bl, 8)
    writeInt64BE(this._c, this._cl, 16)
    writeInt64BE(this._d, this._dl, 24)
    writeInt64BE(this._e, this._el, 32)
    writeInt64BE(this._f, this._fl, 40)

    return H
  }

  module.exports = Sha384

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85).Buffer))

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {var inherits = __webpack_require__(103)
  var Hash = __webpack_require__(154)

  var K = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  ]

  var W = new Array(160)

  function Sha512 () {
    this.init()
    this._w = W

    Hash.call(this, 128, 112)
  }

  inherits(Sha512, Hash)

  Sha512.prototype.init = function () {
    this._a = 0x6a09e667 | 0
    this._b = 0xbb67ae85 | 0
    this._c = 0x3c6ef372 | 0
    this._d = 0xa54ff53a | 0
    this._e = 0x510e527f | 0
    this._f = 0x9b05688c | 0
    this._g = 0x1f83d9ab | 0
    this._h = 0x5be0cd19 | 0

    this._al = 0xf3bcc908 | 0
    this._bl = 0x84caa73b | 0
    this._cl = 0xfe94f82b | 0
    this._dl = 0x5f1d36f1 | 0
    this._el = 0xade682d1 | 0
    this._fl = 0x2b3e6c1f | 0
    this._gl = 0xfb41bd6b | 0
    this._hl = 0x137e2179 | 0

    return this
  }

  function Ch (x, y, z) {
    return z ^ (x & (y ^ z))
  }

  function Maj (x, y, z) {
    return (x & y) | (z & (x | y))
  }

  function Sigma0 (x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
  }

  function Sigma1 (x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
  }

  function Gamma0 (x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
  }

  function Gamma0l (x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
  }

  function Gamma1 (x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
  }

  function Gamma1l (x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
  }

  Sha512.prototype._update = function (M) {
    var W = this._w

    var a = this._a | 0
    var b = this._b | 0
    var c = this._c | 0
    var d = this._d | 0
    var e = this._e | 0
    var f = this._f | 0
    var g = this._g | 0
    var h = this._h | 0

    var al = this._al | 0
    var bl = this._bl | 0
    var cl = this._cl | 0
    var dl = this._dl | 0
    var el = this._el | 0
    var fl = this._fl | 0
    var gl = this._gl | 0
    var hl = this._hl | 0

    var i = 0
    var j = 0
    var Wi, Wil
    function calcW () {
      var x = W[j - 15 * 2]
      var xl = W[j - 15 * 2 + 1]
      var gamma0 = Gamma0(x, xl)
      var gamma0l = Gamma0l(xl, x)

      x = W[j - 2 * 2]
      xl = W[j - 2 * 2 + 1]
      var gamma1 = Gamma1(x, xl)
      var gamma1l = Gamma1l(xl, x)

      // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
      var Wi7 = W[j - 7 * 2]
      var Wi7l = W[j - 7 * 2 + 1]

      var Wi16 = W[j - 16 * 2]
      var Wi16l = W[j - 16 * 2 + 1]

      Wil = gamma0l + Wi7l
      Wi = gamma0 + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
      Wil = Wil + gamma1l
      Wi = Wi + gamma1 + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
      Wil = Wil + Wi16l
      Wi = Wi + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)
    }

    function loop () {
      W[j] = Wi
      W[j + 1] = Wil

      var maj = Maj(a, b, c)
      var majl = Maj(al, bl, cl)

      var sigma0h = Sigma0(a, al)
      var sigma0l = Sigma0(al, a)
      var sigma1h = Sigma1(e, el)
      var sigma1l = Sigma1(el, e)

      // t1 = h + sigma1 + ch + K[i] + W[i]
      var Ki = K[j]
      var Kil = K[j + 1]

      var ch = Ch(e, f, g)
      var chl = Ch(el, fl, gl)

      var t1l = hl + sigma1l
      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
      t1l = t1l + chl
      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
      t1l = t1l + Kil
      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
      t1l = t1l + Wil
      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

      // t2 = sigma0 + maj
      var t2l = sigma0l + majl
      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

      h = g
      hl = gl
      g = f
      gl = fl
      f = e
      fl = el
      el = (dl + t1l) | 0
      e = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
      d = c
      dl = cl
      c = b
      cl = bl
      b = a
      bl = al
      al = (t1l + t2l) | 0
      a = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0

      i++
      j += 2
    }

    while (i < 16) {
      Wi = M.readInt32BE(j * 4)
      Wil = M.readInt32BE(j * 4 + 4)

      loop()
    }

    while (i < 80) {
      calcW()
      loop()
    }

    this._al = (this._al + al) | 0
    this._bl = (this._bl + bl) | 0
    this._cl = (this._cl + cl) | 0
    this._dl = (this._dl + dl) | 0
    this._el = (this._el + el) | 0
    this._fl = (this._fl + fl) | 0
    this._gl = (this._gl + gl) | 0
    this._hl = (this._hl + hl) | 0

    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
  }

  Sha512.prototype._hash = function () {
    var H = new Buffer(64)

    function writeInt64BE (h, l, offset) {
      H.writeInt32BE(h, offset)
      H.writeInt32BE(l, offset + 4)
    }

    writeInt64BE(this._a, this._al, 0)
    writeInt64BE(this._b, this._bl, 8)
    writeInt64BE(this._c, this._cl, 16)
    writeInt64BE(this._d, this._dl, 24)
    writeInt64BE(this._e, this._el, 32)
    writeInt64BE(this._f, this._fl, 40)
    writeInt64BE(this._g, this._gl, 48)
    writeInt64BE(this._h, this._hl, 56)

    return H
  }

  module.exports = Sha512

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85).Buffer))

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {var Transform = __webpack_require__(161).Transform
  var inherits = __webpack_require__(103)
  var StringDecoder = __webpack_require__(171).StringDecoder
  module.exports = CipherBase
  inherits(CipherBase, Transform)
  function CipherBase (hashMode) {
    Transform.call(this)
    this.hashMode = typeof hashMode === 'string'
    if (this.hashMode) {
      this[hashMode] = this._finalOrDigest
    } else {
      this.final = this._finalOrDigest
    }
    this._decoder = null
    this._encoding = null
  }
  CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
    if (typeof data === 'string') {
      data = new Buffer(data, inputEnc)
    }
    var outData = this._update(data)
    if (this.hashMode) {
      return this
    }
    if (outputEnc) {
      outData = this._toString(outData, outputEnc)
    }
    return outData
  }

  CipherBase.prototype.setAutoPadding = function () {}

  CipherBase.prototype.getAuthTag = function () {
    throw new Error('trying to get auth tag in unsupported state')
  }

  CipherBase.prototype.setAuthTag = function () {
    throw new Error('trying to set auth tag in unsupported state')
  }

  CipherBase.prototype.setAAD = function () {
    throw new Error('trying to set aad in unsupported state')
  }

  CipherBase.prototype._transform = function (data, _, next) {
    var err
    try {
      if (this.hashMode) {
        this._update(data)
      } else {
        this.push(this._update(data))
      }
    } catch (e) {
      err = e
    } finally {
      next(err)
    }
  }
  CipherBase.prototype._flush = function (done) {
    var err
    try {
      this.push(this._final())
    } catch (e) {
      err = e
    } finally {
      done(err)
    }
  }
  CipherBase.prototype._finalOrDigest = function (outputEnc) {
    var outData = this._final() || new Buffer('')
    if (outputEnc) {
      outData = this._toString(outData, outputEnc, true)
    }
    return outData
  }

  CipherBase.prototype._toString = function (value, enc, final) {
    if (!this._decoder) {
      this._decoder = new StringDecoder(enc)
      this._encoding = enc
    }
    if (this._encoding !== enc) {
      throw new Error('can\'t switch encodings')
    }
    var out = this._decoder.write(value)
    if (final) {
      out += this._decoder.end()
    }
    return out
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85).Buffer))

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  module.exports = Stream;

  var EE = __webpack_require__(83).EventEmitter;
  var inherits = __webpack_require__(162);

  inherits(Stream, EE);
  Stream.Readable = __webpack_require__(163);
  Stream.Writable = __webpack_require__(174);
  Stream.Duplex = __webpack_require__(175);
  Stream.Transform = __webpack_require__(176);
  Stream.PassThrough = __webpack_require__(177);

  // Backwards-compat with node 0.4.x
  Stream.Stream = Stream;



  // old-style streams.  Note that the pipe method (the only relevant
  // part of this class) is overridden in the Readable class.

  function Stream() {
    EE.call(this);
  }

  Stream.prototype.pipe = function(dest, options) {
    var source = this;

    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }

    source.on('data', ondata);

    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }

    dest.on('drain', ondrain);

    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on('end', onend);
      source.on('close', onclose);
    }

    var didOnEnd = false;
    function onend() {
      if (didOnEnd) return;
      didOnEnd = true;

      dest.end();
    }


    function onclose() {
      if (didOnEnd) return;
      didOnEnd = true;

      if (typeof dest.destroy === 'function') dest.destroy();
    }

    // don't leave dangling pipes when there are errors.
    function onerror(er) {
      cleanup();
      if (EE.listenerCount(this, 'error') === 0) {
        throw er; // Unhandled stream error in pipe.
      }
    }

    source.on('error', onerror);
    dest.on('error', onerror);

    // remove all the event listeners that were added.
    function cleanup() {
      source.removeListener('data', ondata);
      dest.removeListener('drain', ondrain);

      source.removeListener('end', onend);
      source.removeListener('close', onclose);

      source.removeListener('error', onerror);
      dest.removeListener('error', onerror);

      source.removeListener('end', cleanup);
      source.removeListener('close', cleanup);

      dest.removeListener('close', cleanup);
    }

    source.on('end', cleanup);
    source.on('close', cleanup);

    dest.on('close', cleanup);

    dest.emit('pipe', source);

    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
  };


/***/ },
/* 162 */
/***/ function(module, exports) {

  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

  exports = module.exports = __webpack_require__(164);
  exports.Stream = __webpack_require__(161);
  exports.Readable = exports;
  exports.Writable = __webpack_require__(170);
  exports.Duplex = __webpack_require__(169);
  exports.Transform = __webpack_require__(172);
  exports.PassThrough = __webpack_require__(173);


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  module.exports = Readable;

  /*<replacement>*/
  var isArray = __webpack_require__(165);
  /*</replacement>*/


  /*<replacement>*/
  var Buffer = __webpack_require__(85).Buffer;
  /*</replacement>*/

  Readable.ReadableState = ReadableState;

  var EE = __webpack_require__(83).EventEmitter;

  /*<replacement>*/
  if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
    return emitter.listeners(type).length;
  };
  /*</replacement>*/

  var Stream = __webpack_require__(161);

  /*<replacement>*/
  var util = __webpack_require__(166);
  util.inherits = __webpack_require__(167);
  /*</replacement>*/

  var StringDecoder;


  /*<replacement>*/
  var debug = __webpack_require__(168);
  if (debug && debug.debuglog) {
    debug = debug.debuglog('stream');
  } else {
    debug = function () {};
  }
  /*</replacement>*/


  util.inherits(Readable, Stream);

  function ReadableState(options, stream) {
    var Duplex = __webpack_require__(169);

    options = options || {};

    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    var hwm = options.highWaterMark;
    var defaultHwm = options.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

    // cast to ints.
    this.highWaterMark = ~~this.highWaterMark;

    this.buffer = [];
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;


    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex)
      this.objectMode = this.objectMode || !!options.readableObjectMode;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // when piping, we only care about 'readable' events that happen
    // after read()ing all the bytes and not getting any pushback.
    this.ranOut = false;

    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;

    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;

    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      if (!StringDecoder)
        StringDecoder = __webpack_require__(171).StringDecoder;
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }

  function Readable(options) {
    var Duplex = __webpack_require__(169);

    if (!(this instanceof Readable))
      return new Readable(options);

    this._readableState = new ReadableState(options, this);

    // legacy
    this.readable = true;

    Stream.call(this);
  }

  // Manually shove something into the read() buffer.
  // This returns true if the highWaterMark has not been hit yet,
  // similar to how Writable.write() returns true if you should
  // write() some more.
  Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;

    if (util.isString(chunk) && !state.objectMode) {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = new Buffer(chunk, encoding);
        encoding = '';
      }
    }

    return readableAddChunk(this, state, chunk, encoding, false);
  };

  // Unshift should *always* be something directly out of read()
  Readable.prototype.unshift = function(chunk) {
    var state = this._readableState;
    return readableAddChunk(this, state, chunk, '', true);
  };

  function readableAddChunk(stream, state, chunk, encoding, addToFront) {
    var er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (util.isNullOrUndefined(chunk)) {
      state.reading = false;
      if (!state.ended)
        onEofChunk(stream, state);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (state.ended && !addToFront) {
        var e = new Error('stream.push() after EOF');
        stream.emit('error', e);
      } else if (state.endEmitted && addToFront) {
        var e = new Error('stream.unshift() after end event');
        stream.emit('error', e);
      } else {
        if (state.decoder && !addToFront && !encoding)
          chunk = state.decoder.write(chunk);

        if (!addToFront)
          state.reading = false;

        // if we want the data now, just emit it.
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront)
            state.buffer.unshift(chunk);
          else
            state.buffer.push(chunk);

          if (state.needReadable)
            emitReadable(stream);
        }

        maybeReadMore(stream, state);
      }
    } else if (!addToFront) {
      state.reading = false;
    }

    return needMoreData(state);
  }



  // if it's past the high water mark, we can push in some more.
  // Also, if we have no data yet, we can stand some
  // more bytes.  This is to work around cases where hwm=0,
  // such as the repl.  Also, if the push() triggered a
  // readable event, and the user called read(largeNumber) such that
  // needReadable was set, then we ought to push more, so that another
  // 'readable' event will be triggered.
  function needMoreData(state) {
    return !state.ended &&
           (state.needReadable ||
            state.length < state.highWaterMark ||
            state.length === 0);
  }

  // backwards compatibility.
  Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder)
      StringDecoder = __webpack_require__(171).StringDecoder;
    this._readableState.decoder = new StringDecoder(enc);
    this._readableState.encoding = enc;
    return this;
  };

  // Don't raise the hwm > 128MB
  var MAX_HWM = 0x800000;
  function roundUpToNextPowerOf2(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      // Get the next highest power of 2
      n--;
      for (var p = 1; p < 32; p <<= 1) n |= n >> p;
      n++;
    }
    return n;
  }

  function howMuchToRead(n, state) {
    if (state.length === 0 && state.ended)
      return 0;

    if (state.objectMode)
      return n === 0 ? 0 : 1;

    if (isNaN(n) || util.isNull(n)) {
      // only flow one buffer at a time
      if (state.flowing && state.buffer.length)
        return state.buffer[0].length;
      else
        return state.length;
    }

    if (n <= 0)
      return 0;

    // If we're asking for more than the target buffer level,
    // then raise the water mark.  Bump up to the next highest
    // power of 2, to prevent increasing it excessively in tiny
    // amounts.
    if (n > state.highWaterMark)
      state.highWaterMark = roundUpToNextPowerOf2(n);

    // don't have that much.  return null, unless we've ended.
    if (n > state.length) {
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      } else
        return state.length;
    }

    return n;
  }

  // you can override either this method, or the async _read(n) below.
  Readable.prototype.read = function(n) {
    debug('read', n);
    var state = this._readableState;
    var nOrig = n;

    if (!util.isNumber(n) || n > 0)
      state.emittedReadable = false;

    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 &&
        state.needReadable &&
        (state.length >= state.highWaterMark || state.ended)) {
      debug('read: emitReadable', state.length, state.ended);
      if (state.length === 0 && state.ended)
        endReadable(this);
      else
        emitReadable(this);
      return null;
    }

    n = howMuchToRead(n, state);

    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
      if (state.length === 0)
        endReadable(this);
      return null;
    }

    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.

    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead);

    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
      doRead = true;
      debug('length less than watermark', doRead);
    }

    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
      doRead = false;
      debug('reading or ended', doRead);
    }

    if (doRead) {
      debug('do read');
      state.reading = true;
      state.sync = true;
      // if the length is currently zero, then we *need* a readable event.
      if (state.length === 0)
        state.needReadable = true;
      // call internal read method
      this._read(state.highWaterMark);
      state.sync = false;
    }

    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (doRead && !state.reading)
      n = howMuchToRead(nOrig, state);

    var ret;
    if (n > 0)
      ret = fromList(n, state);
    else
      ret = null;

    if (util.isNull(ret)) {
      state.needReadable = true;
      n = 0;
    }

    state.length -= n;

    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (state.length === 0 && !state.ended)
      state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended && state.length === 0)
      endReadable(this);

    if (!util.isNull(ret))
      this.emit('data', ret);

    return ret;
  };

  function chunkInvalid(state, chunk) {
    var er = null;
    if (!util.isBuffer(chunk) &&
        !util.isString(chunk) &&
        !util.isNullOrUndefined(chunk) &&
        !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    return er;
  }


  function onEofChunk(stream, state) {
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }
    state.ended = true;

    // emit 'readable' now to make sure it gets picked up.
    emitReadable(stream);
  }

  // Don't emit readable right away in sync mode, because this can trigger
  // another read() call => stack overflow.  This way, it might trigger
  // a nextTick recursion warning, but that's not so bad.
  function emitReadable(stream) {
    var state = stream._readableState;
    state.needReadable = false;
    if (!state.emittedReadable) {
      debug('emitReadable', state.flowing);
      state.emittedReadable = true;
      if (state.sync)
        process.nextTick(function() {
          emitReadable_(stream);
        });
      else
        emitReadable_(stream);
    }
  }

  function emitReadable_(stream) {
    debug('emit readable');
    stream.emit('readable');
    flow(stream);
  }


  // at this point, the user has presumably seen the 'readable' event,
  // and called read() to consume some data.  that may have triggered
  // in turn another _read(n) call, in which case reading = true if
  // it's in progress.
  // However, if we're not ended, or reading, and the length < hwm,
  // then go ahead and try to read some more preemptively.
  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      process.nextTick(function() {
        maybeReadMore_(stream, state);
      });
    }
  }

  function maybeReadMore_(stream, state) {
    var len = state.length;
    while (!state.reading && !state.flowing && !state.ended &&
           state.length < state.highWaterMark) {
      debug('maybeReadMore read 0');
      stream.read(0);
      if (len === state.length)
        // didn't get any data, stop spinning.
        break;
      else
        len = state.length;
    }
    state.readingMore = false;
  }

  // abstract method.  to be overridden in specific implementation classes.
  // call cb(er, data) where data is <= n in length.
  // for virtual (non-string, non-buffer) streams, "length" is somewhat
  // arbitrary, and perhaps not very meaningful.
  Readable.prototype._read = function(n) {
    this.emit('error', new Error('not implemented'));
  };

  Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;

    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;
      case 1:
        state.pipes = [state.pipes, dest];
        break;
      default:
        state.pipes.push(dest);
        break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

    var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
                dest !== process.stdout &&
                dest !== process.stderr;

    var endFn = doEnd ? onend : cleanup;
    if (state.endEmitted)
      process.nextTick(endFn);
    else
      src.once('end', endFn);

    dest.on('unpipe', onunpipe);
    function onunpipe(readable) {
      debug('onunpipe');
      if (readable === src) {
        cleanup();
      }
    }

    function onend() {
      debug('onend');
      dest.end();
    }

    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);

    function cleanup() {
      debug('cleanup');
      // cleanup event handlers once the pipe is broken
      dest.removeListener('close', onclose);
      dest.removeListener('finish', onfinish);
      dest.removeListener('drain', ondrain);
      dest.removeListener('error', onerror);
      dest.removeListener('unpipe', onunpipe);
      src.removeListener('end', onend);
      src.removeListener('end', cleanup);
      src.removeListener('data', ondata);

      // if the reader is waiting for a drain event from this
      // specific writer, then it would cause it to never start
      // flowing again.
      // So, if this is awaiting a drain, then we just call it now.
      // If we don't know, then assume that we are waiting for one.
      if (state.awaitDrain &&
          (!dest._writableState || dest._writableState.needDrain))
        ondrain();
    }

    src.on('data', ondata);
    function ondata(chunk) {
      debug('ondata');
      var ret = dest.write(chunk);
      if (false === ret) {
        debug('false write response, pause',
              src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        src.pause();
      }
    }

    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
      debug('onerror', er);
      unpipe();
      dest.removeListener('error', onerror);
      if (EE.listenerCount(dest, 'error') === 0)
        dest.emit('error', er);
    }
    // This is a brutally ugly hack to make sure that our error handler
    // is attached before any userland ones.  NEVER DO THIS.
    if (!dest._events || !dest._events.error)
      dest.on('error', onerror);
    else if (isArray(dest._events.error))
      dest._events.error.unshift(onerror);
    else
      dest._events.error = [onerror, dest._events.error];



    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
      dest.removeListener('finish', onfinish);
      unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
      debug('onfinish');
      dest.removeListener('close', onclose);
      unpipe();
    }
    dest.once('finish', onfinish);

    function unpipe() {
      debug('unpipe');
      src.unpipe(dest);
    }

    // tell the dest that it's being piped to
    dest.emit('pipe', src);

    // start the flow if it hasn't been started already.
    if (!state.flowing) {
      debug('pipe resume');
      src.resume();
    }

    return dest;
  };

  function pipeOnDrain(src) {
    return function() {
      var state = src._readableState;
      debug('pipeOnDrain', state.awaitDrain);
      if (state.awaitDrain)
        state.awaitDrain--;
      if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
        state.flowing = true;
        flow(src);
      }
    };
  }


  Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;

    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0)
      return this;

    // just one destination.  most common case.
    if (state.pipesCount === 1) {
      // passed in one, but it's not the right one.
      if (dest && dest !== state.pipes)
        return this;

      if (!dest)
        dest = state.pipes;

      // got a match.
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest)
        dest.emit('unpipe', this);
      return this;
    }

    // slow case. multiple pipe destinations.

    if (!dest) {
      // remove all.
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;

      for (var i = 0; i < len; i++)
        dests[i].emit('unpipe', this);
      return this;
    }

    // try to find the right one.
    var i = indexOf(state.pipes, dest);
    if (i === -1)
      return this;

    state.pipes.splice(i, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1)
      state.pipes = state.pipes[0];

    dest.emit('unpipe', this);

    return this;
  };

  // set up data events if they are asked for
  // Ensure readable listeners eventually get something
  Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);

    // If listening to data, and it has not explicitly been paused,
    // then call resume to start the flow of data on the next tick.
    if (ev === 'data' && false !== this._readableState.flowing) {
      this.resume();
    }

    if (ev === 'readable' && this.readable) {
      var state = this._readableState;
      if (!state.readableListening) {
        state.readableListening = true;
        state.emittedReadable = false;
        state.needReadable = true;
        if (!state.reading) {
          var self = this;
          process.nextTick(function() {
            debug('readable nexttick read 0');
            self.read(0);
          });
        } else if (state.length) {
          emitReadable(this, state);
        }
      }
    }

    return res;
  };
  Readable.prototype.addListener = Readable.prototype.on;

  // pause() and resume() are remnants of the legacy readable stream API
  // If the user uses them, then switch into old mode.
  Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
      debug('resume');
      state.flowing = true;
      if (!state.reading) {
        debug('resume read 0');
        this.read(0);
      }
      resume(this, state);
    }
    return this;
  };

  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      process.nextTick(function() {
        resume_(stream, state);
      });
    }
  }

  function resume_(stream, state) {
    state.resumeScheduled = false;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading)
      stream.read(0);
  }

  Readable.prototype.pause = function() {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (false !== this._readableState.flowing) {
      debug('pause');
      this._readableState.flowing = false;
      this.emit('pause');
    }
    return this;
  };

  function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    if (state.flowing) {
      do {
        var chunk = stream.read();
      } while (null !== chunk && state.flowing);
    }
  }

  // wrap an old-style stream as the async data source.
  // This is *not* part of the readable stream interface.
  // It is an ugly unfortunate mess of history.
  Readable.prototype.wrap = function(stream) {
    var state = this._readableState;
    var paused = false;

    var self = this;
    stream.on('end', function() {
      debug('wrapped end');
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length)
          self.push(chunk);
      }

      self.push(null);
    });

    stream.on('data', function(chunk) {
      debug('wrapped data');
      if (state.decoder)
        chunk = state.decoder.write(chunk);
      if (!chunk || !state.objectMode && !chunk.length)
        return;

      var ret = self.push(chunk);
      if (!ret) {
        paused = true;
        stream.pause();
      }
    });

    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for (var i in stream) {
      if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
        this[i] = function(method) { return function() {
          return stream[method].apply(stream, arguments);
        }}(i);
      }
    }

    // proxy certain important events.
    var events = ['error', 'close', 'destroy', 'pause', 'resume'];
    forEach(events, function(ev) {
      stream.on(ev, self.emit.bind(self, ev));
    });

    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    self._read = function(n) {
      debug('wrapped _read', n);
      if (paused) {
        paused = false;
        stream.resume();
      }
    };

    return self;
  };



  // exposed for testing purposes only.
  Readable._fromList = fromList;

  // Pluck off n bytes from an array of buffers.
  // Length is the combined lengths of all the buffers in the list.
  function fromList(n, state) {
    var list = state.buffer;
    var length = state.length;
    var stringMode = !!state.decoder;
    var objectMode = !!state.objectMode;
    var ret;

    // nothing in the list, definitely empty.
    if (list.length === 0)
      return null;

    if (length === 0)
      ret = null;
    else if (objectMode)
      ret = list.shift();
    else if (!n || n >= length) {
      // read it all, truncate the array.
      if (stringMode)
        ret = list.join('');
      else
        ret = Buffer.concat(list, length);
      list.length = 0;
    } else {
      // read just some of it.
      if (n < list[0].length) {
        // just take a part of the first list item.
        // slice is the same for buffers and strings.
        var buf = list[0];
        ret = buf.slice(0, n);
        list[0] = buf.slice(n);
      } else if (n === list[0].length) {
        // first list is a perfect match
        ret = list.shift();
      } else {
        // complex case.
        // we have enough to cover it, but it spans past the first buffer.
        if (stringMode)
          ret = '';
        else
          ret = new Buffer(n);

        var c = 0;
        for (var i = 0, l = list.length; i < l && c < n; i++) {
          var buf = list[0];
          var cpy = Math.min(n - c, buf.length);

          if (stringMode)
            ret += buf.slice(0, cpy);
          else
            buf.copy(ret, c, 0, cpy);

          if (cpy < buf.length)
            list[0] = buf.slice(cpy);
          else
            list.shift();

          c += cpy;
        }
      }
    }

    return ret;
  }

  function endReadable(stream) {
    var state = stream._readableState;

    // If we get here before consuming all the bytes, then that is a
    // bug in node.  Should never happen.
    if (state.length > 0)
      throw new Error('endReadable called on non-empty stream');

    if (!state.endEmitted) {
      state.ended = true;
      process.nextTick(function() {
        // Check that we didn't get one last unshift.
        if (!state.endEmitted && state.length === 0) {
          state.endEmitted = true;
          stream.readable = false;
          stream.emit('end');
        }
      });
    }
  }

  function forEach (xs, f) {
    for (var i = 0, l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }

  function indexOf (xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x) return i;
    }
    return -1;
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(80)))

/***/ },
/* 165 */
/***/ function(module, exports) {

  module.exports = Array.isArray || function (arr) {
    return Object.prototype.toString.call(arr) == '[object Array]';
  };


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.

  function isArray(arg) {
    if (Array.isArray) {
      return Array.isArray(arg);
    }
    return objectToString(arg) === '[object Array]';
  }
  exports.isArray = isArray;

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }
  exports.isBoolean = isBoolean;

  function isNull(arg) {
    return arg === null;
  }
  exports.isNull = isNull;

  function isNullOrUndefined(arg) {
    return arg == null;
  }
  exports.isNullOrUndefined = isNullOrUndefined;

  function isNumber(arg) {
    return typeof arg === 'number';
  }
  exports.isNumber = isNumber;

  function isString(arg) {
    return typeof arg === 'string';
  }
  exports.isString = isString;

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }
  exports.isSymbol = isSymbol;

  function isUndefined(arg) {
    return arg === void 0;
  }
  exports.isUndefined = isUndefined;

  function isRegExp(re) {
    return objectToString(re) === '[object RegExp]';
  }
  exports.isRegExp = isRegExp;

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  exports.isObject = isObject;

  function isDate(d) {
    return objectToString(d) === '[object Date]';
  }
  exports.isDate = isDate;

  function isError(e) {
    return (objectToString(e) === '[object Error]' || e instanceof Error);
  }
  exports.isError = isError;

  function isFunction(arg) {
    return typeof arg === 'function';
  }
  exports.isFunction = isFunction;

  function isPrimitive(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }
  exports.isPrimitive = isPrimitive;

  exports.isBuffer = Buffer.isBuffer;

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85).Buffer))

/***/ },
/* 167 */
/***/ function(module, exports) {

  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }


/***/ },
/* 168 */
/***/ function(module, exports) {

  /* (ignored) */

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // a duplex stream is just a stream that is both readable and writable.
  // Since JS doesn't have multiple prototypal inheritance, this class
  // prototypally inherits from Readable, and then parasitically from
  // Writable.

  module.exports = Duplex;

  /*<replacement>*/
  var objectKeys = Object.keys || function (obj) {
    var keys = [];
    for (var key in obj) keys.push(key);
    return keys;
  }
  /*</replacement>*/


  /*<replacement>*/
  var util = __webpack_require__(166);
  util.inherits = __webpack_require__(167);
  /*</replacement>*/

  var Readable = __webpack_require__(164);
  var Writable = __webpack_require__(170);

  util.inherits(Duplex, Readable);

  forEach(objectKeys(Writable.prototype), function(method) {
    if (!Duplex.prototype[method])
      Duplex.prototype[method] = Writable.prototype[method];
  });

  function Duplex(options) {
    if (!(this instanceof Duplex))
      return new Duplex(options);

    Readable.call(this, options);
    Writable.call(this, options);

    if (options && options.readable === false)
      this.readable = false;

    if (options && options.writable === false)
      this.writable = false;

    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false)
      this.allowHalfOpen = false;

    this.once('end', onend);
  }

  // the no-half-open enforcer
  function onend() {
    // if we allow half-open state, or if the writable side ended,
    // then we're ok.
    if (this.allowHalfOpen || this._writableState.ended)
      return;

    // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(this.end.bind(this));
  }

  function forEach (xs, f) {
    for (var i = 0, l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(80)))

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // A bit simpler than readable streams.
  // Implement an async ._write(chunk, cb), and it'll handle all
  // the drain event emission and buffering.

  module.exports = Writable;

  /*<replacement>*/
  var Buffer = __webpack_require__(85).Buffer;
  /*</replacement>*/

  Writable.WritableState = WritableState;


  /*<replacement>*/
  var util = __webpack_require__(166);
  util.inherits = __webpack_require__(167);
  /*</replacement>*/

  var Stream = __webpack_require__(161);

  util.inherits(Writable, Stream);

  function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
  }

  function WritableState(options, stream) {
    var Duplex = __webpack_require__(169);

    options = options || {};

    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    var hwm = options.highWaterMark;
    var defaultHwm = options.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex)
      this.objectMode = this.objectMode || !!options.writableObjectMode;

    // cast to ints.
    this.highWaterMark = ~~this.highWaterMark;

    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;

    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;

    // a flag to see when we're in the middle of a write.
    this.writing = false;

    // when true all writes will be buffered until .uncork() call
    this.corked = 0;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;

    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
      onwrite(stream, er);
    };

    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;

    // the amount that is being written when _write is called.
    this.writelen = 0;

    this.buffer = [];

    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;

    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;

    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;
  }

  function Writable(options) {
    var Duplex = __webpack_require__(169);

    // Writable ctor is applied to Duplexes, though they're not
    // instanceof Writable, they're instanceof Readable.
    if (!(this instanceof Writable) && !(this instanceof Duplex))
      return new Writable(options);

    this._writableState = new WritableState(options, this);

    // legacy.
    this.writable = true;

    Stream.call(this);
  }

  // Otherwise people can pipe Writable streams, which is just wrong.
  Writable.prototype.pipe = function() {
    this.emit('error', new Error('Cannot pipe. Not readable.'));
  };


  function writeAfterEnd(stream, state, cb) {
    var er = new Error('write after end');
    // TODO: defer error events consistently everywhere, not just the cb
    stream.emit('error', er);
    process.nextTick(function() {
      cb(er);
    });
  }

  // If we get something that is not a buffer, string, null, or undefined,
  // and we're not in objectMode, then that's an error.
  // Otherwise stream chunks are all considered to be of length=1, and the
  // watermarks determine how many objects to keep in the buffer, rather than
  // how many bytes or characters.
  function validChunk(stream, state, chunk, cb) {
    var valid = true;
    if (!util.isBuffer(chunk) &&
        !util.isString(chunk) &&
        !util.isNullOrUndefined(chunk) &&
        !state.objectMode) {
      var er = new TypeError('Invalid non-string/buffer chunk');
      stream.emit('error', er);
      process.nextTick(function() {
        cb(er);
      });
      valid = false;
    }
    return valid;
  }

  Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;

    if (util.isFunction(encoding)) {
      cb = encoding;
      encoding = null;
    }

    if (util.isBuffer(chunk))
      encoding = 'buffer';
    else if (!encoding)
      encoding = state.defaultEncoding;

    if (!util.isFunction(cb))
      cb = function() {};

    if (state.ended)
      writeAfterEnd(this, state, cb);
    else if (validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, chunk, encoding, cb);
    }

    return ret;
  };

  Writable.prototype.cork = function() {
    var state = this._writableState;

    state.corked++;
  };

  Writable.prototype.uncork = function() {
    var state = this._writableState;

    if (state.corked) {
      state.corked--;

      if (!state.writing &&
          !state.corked &&
          !state.finished &&
          !state.bufferProcessing &&
          state.buffer.length)
        clearBuffer(this, state);
    }
  };

  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode &&
        state.decodeStrings !== false &&
        util.isString(chunk)) {
      chunk = new Buffer(chunk, encoding);
    }
    return chunk;
  }

  // if we're already writing something, then just put this
  // in the queue, and wait our turn.  Otherwise, call _write
  // If we return false, then we need a drain event, so set that flag.
  function writeOrBuffer(stream, state, chunk, encoding, cb) {
    chunk = decodeChunk(state, chunk, encoding);
    if (util.isBuffer(chunk))
      encoding = 'buffer';
    var len = state.objectMode ? 1 : chunk.length;

    state.length += len;

    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret)
      state.needDrain = true;

    if (state.writing || state.corked)
      state.buffer.push(new WriteReq(chunk, encoding, cb));
    else
      doWrite(stream, state, false, len, chunk, encoding, cb);

    return ret;
  }

  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (writev)
      stream._writev(chunk, state.onwrite);
    else
      stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }

  function onwriteError(stream, state, sync, er, cb) {
    if (sync)
      process.nextTick(function() {
        state.pendingcb--;
        cb(er);
      });
    else {
      state.pendingcb--;
      cb(er);
    }

    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  }

  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }

  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;

    onwriteStateUpdate(state);

    if (er)
      onwriteError(stream, state, sync, er, cb);
    else {
      // Check if we're actually ready to finish, but don't emit yet
      var finished = needFinish(stream, state);

      if (!finished &&
          !state.corked &&
          !state.bufferProcessing &&
          state.buffer.length) {
        clearBuffer(stream, state);
      }

      if (sync) {
        process.nextTick(function() {
          afterWrite(stream, state, finished, cb);
        });
      } else {
        afterWrite(stream, state, finished, cb);
      }
    }
  }

  function afterWrite(stream, state, finished, cb) {
    if (!finished)
      onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  }

  // Must force callback to be called on nextTick, so that we don't
  // emit 'drain' before the write() consumer gets the 'false' return
  // value, and has a chance to attach a 'drain' listener.
  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit('drain');
    }
  }


  // if there's something in the buffer waiting, then process it
  function clearBuffer(stream, state) {
    state.bufferProcessing = true;

    if (stream._writev && state.buffer.length > 1) {
      // Fast case, write everything using _writev()
      var cbs = [];
      for (var c = 0; c < state.buffer.length; c++)
        cbs.push(state.buffer[c].callback);

      // count the one we are adding, as well.
      // TODO(isaacs) clean this up
      state.pendingcb++;
      doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
        for (var i = 0; i < cbs.length; i++) {
          state.pendingcb--;
          cbs[i](err);
        }
      });

      // Clear buffer
      state.buffer = [];
    } else {
      // Slow case, write chunks one-by-one
      for (var c = 0; c < state.buffer.length; c++) {
        var entry = state.buffer[c];
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;

        doWrite(stream, state, false, len, chunk, encoding, cb);

        // if we didn't call the onwrite immediately, then
        // it means that we need to wait until it does.
        // also, that means that the chunk and cb are currently
        // being processed, so move the buffer counter past them.
        if (state.writing) {
          c++;
          break;
        }
      }

      if (c < state.buffer.length)
        state.buffer = state.buffer.slice(c);
      else
        state.buffer.length = 0;
    }

    state.bufferProcessing = false;
  }

  Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new Error('not implemented'));

  };

  Writable.prototype._writev = null;

  Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;

    if (util.isFunction(chunk)) {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (util.isFunction(encoding)) {
      cb = encoding;
      encoding = null;
    }

    if (!util.isNullOrUndefined(chunk))
      this.write(chunk, encoding);

    // .end() fully uncorks
    if (state.corked) {
      state.corked = 1;
      this.uncork();
    }

    // ignore unnecessary end() calls.
    if (!state.ending && !state.finished)
      endWritable(this, state, cb);
  };


  function needFinish(stream, state) {
    return (state.ending &&
            state.length === 0 &&
            !state.finished &&
            !state.writing);
  }

  function prefinish(stream, state) {
    if (!state.prefinished) {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }

  function finishMaybe(stream, state) {
    var need = needFinish(stream, state);
    if (need) {
      if (state.pendingcb === 0) {
        prefinish(stream, state);
        state.finished = true;
        stream.emit('finish');
      } else
        prefinish(stream, state);
    }
    return need;
  }

  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
      if (state.finished)
        process.nextTick(cb);
      else
        stream.once('finish', cb);
    }
    state.ended = true;
  }

  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(80)))

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  var Buffer = __webpack_require__(85).Buffer;

  var isBufferEncoding = Buffer.isEncoding
    || function(encoding) {
         switch (encoding && encoding.toLowerCase()) {
           case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
           default: return false;
         }
       }


  function assertEncoding(encoding) {
    if (encoding && !isBufferEncoding(encoding)) {
      throw new Error('Unknown encoding: ' + encoding);
    }
  }

  // StringDecoder provides an interface for efficiently splitting a series of
  // buffers into a series of JS strings without breaking apart multi-byte
  // characters. CESU-8 is handled as part of the UTF-8 encoding.
  //
  // @TODO Handling all encodings inside a single object makes it very difficult
  // to reason about this code, so it should be split up in the future.
  // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
  // points as used by CESU-8.
  var StringDecoder = exports.StringDecoder = function(encoding) {
    this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
    assertEncoding(encoding);
    switch (this.encoding) {
      case 'utf8':
        // CESU-8 represents each of Surrogate Pair by 3-bytes
        this.surrogateSize = 3;
        break;
      case 'ucs2':
      case 'utf16le':
        // UTF-16 represents each of Surrogate Pair by 2-bytes
        this.surrogateSize = 2;
        this.detectIncompleteChar = utf16DetectIncompleteChar;
        break;
      case 'base64':
        // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
        this.surrogateSize = 3;
        this.detectIncompleteChar = base64DetectIncompleteChar;
        break;
      default:
        this.write = passThroughWrite;
        return;
    }

    // Enough space to store all bytes of a single character. UTF-8 needs 4
    // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
    this.charBuffer = new Buffer(6);
    // Number of bytes received for the current incomplete multi-byte character.
    this.charReceived = 0;
    // Number of bytes expected for the current incomplete multi-byte character.
    this.charLength = 0;
  };


  // write decodes the given buffer and returns it as JS string that is
  // guaranteed to not contain any partial multi-byte characters. Any partial
  // character found at the end of the buffer is buffered up, and will be
  // returned when calling write again with the remaining bytes.
  //
  // Note: Converting a Buffer containing an orphan surrogate to a String
  // currently works, but converting a String to a Buffer (via `new Buffer`, or
  // Buffer#write) will replace incomplete surrogates with the unicode
  // replacement character. See https://codereview.chromium.org/121173009/ .
  StringDecoder.prototype.write = function(buffer) {
    var charStr = '';
    // if our last write ended with an incomplete multibyte character
    while (this.charLength) {
      // determine how many remaining bytes this buffer has to offer for this char
      var available = (buffer.length >= this.charLength - this.charReceived) ?
          this.charLength - this.charReceived :
          buffer.length;

      // add the new bytes to the char buffer
      buffer.copy(this.charBuffer, this.charReceived, 0, available);
      this.charReceived += available;

      if (this.charReceived < this.charLength) {
        // still not enough chars in this buffer? wait for more ...
        return '';
      }

      // remove bytes belonging to the current character from the buffer
      buffer = buffer.slice(available, buffer.length);

      // get the character that was split
      charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

      // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
      var charCode = charStr.charCodeAt(charStr.length - 1);
      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        this.charLength += this.surrogateSize;
        charStr = '';
        continue;
      }
      this.charReceived = this.charLength = 0;

      // if there are no more bytes in this buffer, just emit our char
      if (buffer.length === 0) {
        return charStr;
      }
      break;
    }

    // determine and set charLength / charReceived
    this.detectIncompleteChar(buffer);

    var end = buffer.length;
    if (this.charLength) {
      // buffer the incomplete character bytes we got
      buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
      end -= this.charReceived;
    }

    charStr += buffer.toString(this.encoding, 0, end);

    var end = charStr.length - 1;
    var charCode = charStr.charCodeAt(end);
    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      var size = this.surrogateSize;
      this.charLength += size;
      this.charReceived += size;
      this.charBuffer.copy(this.charBuffer, size, 0, size);
      buffer.copy(this.charBuffer, 0, 0, size);
      return charStr.substring(0, end);
    }

    // or just emit the charStr
    return charStr;
  };

  // detectIncompleteChar determines if there is an incomplete UTF-8 character at
  // the end of the given buffer. If so, it sets this.charLength to the byte
  // length that character, and sets this.charReceived to the number of bytes
  // that are available for this character.
  StringDecoder.prototype.detectIncompleteChar = function(buffer) {
    // determine how many bytes we have to check at the end of this buffer
    var i = (buffer.length >= 3) ? 3 : buffer.length;

    // Figure out if one of the last i bytes of our buffer announces an
    // incomplete char.
    for (; i > 0; i--) {
      var c = buffer[buffer.length - i];

      // See http://en.wikipedia.org/wiki/UTF-8#Description

      // 110XXXXX
      if (i == 1 && c >> 5 == 0x06) {
        this.charLength = 2;
        break;
      }

      // 1110XXXX
      if (i <= 2 && c >> 4 == 0x0E) {
        this.charLength = 3;
        break;
      }

      // 11110XXX
      if (i <= 3 && c >> 3 == 0x1E) {
        this.charLength = 4;
        break;
      }
    }
    this.charReceived = i;
  };

  StringDecoder.prototype.end = function(buffer) {
    var res = '';
    if (buffer && buffer.length)
      res = this.write(buffer);

    if (this.charReceived) {
      var cr = this.charReceived;
      var buf = this.charBuffer;
      var enc = this.encoding;
      res += buf.slice(0, cr).toString(enc);
    }

    return res;
  };

  function passThroughWrite(buffer) {
    return buffer.toString(this.encoding);
  }

  function utf16DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 2;
    this.charLength = this.charReceived ? 2 : 0;
  }

  function base64DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 3;
    this.charLength = this.charReceived ? 3 : 0;
  }


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.


  // a transform stream is a readable/writable stream where you do
  // something with the data.  Sometimes it's called a "filter",
  // but that's not a great name for it, since that implies a thing where
  // some bits pass through, and others are simply ignored.  (That would
  // be a valid example of a transform, of course.)
  //
  // While the output is causally related to the input, it's not a
  // necessarily symmetric or synchronous transformation.  For example,
  // a zlib stream might take multiple plain-text writes(), and then
  // emit a single compressed chunk some time in the future.
  //
  // Here's how this works:
  //
  // The Transform stream has all the aspects of the readable and writable
  // stream classes.  When you write(chunk), that calls _write(chunk,cb)
  // internally, and returns false if there's a lot of pending writes
  // buffered up.  When you call read(), that calls _read(n) until
  // there's enough pending readable data buffered up.
  //
  // In a transform stream, the written data is placed in a buffer.  When
  // _read(n) is called, it transforms the queued up data, calling the
  // buffered _write cb's as it consumes chunks.  If consuming a single
  // written chunk would result in multiple output chunks, then the first
  // outputted bit calls the readcb, and subsequent chunks just go into
  // the read buffer, and will cause it to emit 'readable' if necessary.
  //
  // This way, back-pressure is actually determined by the reading side,
  // since _read has to be called to start processing a new chunk.  However,
  // a pathological inflate type of transform can cause excessive buffering
  // here.  For example, imagine a stream where every byte of input is
  // interpreted as an integer from 0-255, and then results in that many
  // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
  // 1kb of data being output.  In this case, you could write a very small
  // amount of input, and end up with a very large amount of output.  In
  // such a pathological inflating mechanism, there'd be no way to tell
  // the system to stop doing the transform.  A single 4MB write could
  // cause the system to run out of memory.
  //
  // However, even in such a pathological case, only a single written chunk
  // would be consumed, and then the rest would wait (un-transformed) until
  // the results of the previous transformed chunk were consumed.

  module.exports = Transform;

  var Duplex = __webpack_require__(169);

  /*<replacement>*/
  var util = __webpack_require__(166);
  util.inherits = __webpack_require__(167);
  /*</replacement>*/

  util.inherits(Transform, Duplex);


  function TransformState(options, stream) {
    this.afterTransform = function(er, data) {
      return afterTransform(stream, er, data);
    };

    this.needTransform = false;
    this.transforming = false;
    this.writecb = null;
    this.writechunk = null;
  }

  function afterTransform(stream, er, data) {
    var ts = stream._transformState;
    ts.transforming = false;

    var cb = ts.writecb;

    if (!cb)
      return stream.emit('error', new Error('no writecb in Transform class'));

    ts.writechunk = null;
    ts.writecb = null;

    if (!util.isNullOrUndefined(data))
      stream.push(data);

    if (cb)
      cb(er);

    var rs = stream._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      stream._read(rs.highWaterMark);
    }
  }


  function Transform(options) {
    if (!(this instanceof Transform))
      return new Transform(options);

    Duplex.call(this, options);

    this._transformState = new TransformState(options, this);

    // when the writable side finishes, then flush out anything remaining.
    var stream = this;

    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;

    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;

    this.once('prefinish', function() {
      if (util.isFunction(this._flush))
        this._flush(function(er) {
          done(stream, er);
        });
      else
        done(stream);
    });
  }

  Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  };

  // This is the part where you do stuff!
  // override this function in implementation classes.
  // 'chunk' is an input chunk.
  //
  // Call `push(newChunk)` to pass along transformed output
  // to the readable side.  You may call 'push' zero or more times.
  //
  // Call `cb(err)` when you are done with this chunk.  If you pass
  // an error, then that'll put the hurt on the whole operation.  If you
  // never call cb(), then you'll never get another chunk.
  Transform.prototype._transform = function(chunk, encoding, cb) {
    throw new Error('not implemented');
  };

  Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform ||
          rs.needReadable ||
          rs.length < rs.highWaterMark)
        this._read(rs.highWaterMark);
    }
  };

  // Doesn't matter what the args are here.
  // _transform does all the work.
  // That we got here means that the readable side wants more data.
  Transform.prototype._read = function(n) {
    var ts = this._transformState;

    if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      // mark that we need a transform, so that any data that comes in
      // will get processed, now that we've asked for it.
      ts.needTransform = true;
    }
  };


  function done(stream, er) {
    if (er)
      return stream.emit('error', er);

    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    var ws = stream._writableState;
    var ts = stream._transformState;

    if (ws.length)
      throw new Error('calling transform done when ws.length != 0');

    if (ts.transforming)
      throw new Error('calling transform done when still transforming');

    return stream.push(null);
  }


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // a passthrough stream.
  // basically just the most minimal sort of Transform stream.
  // Every written chunk gets output as-is.

  module.exports = PassThrough;

  var Transform = __webpack_require__(172);

  /*<replacement>*/
  var util = __webpack_require__(166);
  util.inherits = __webpack_require__(167);
  /*</replacement>*/

  util.inherits(PassThrough, Transform);

  function PassThrough(options) {
    if (!(this instanceof PassThrough))
      return new PassThrough(options);

    Transform.call(this, options);
  }

  PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
  };


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(170)


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(169)


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(172)


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(173)


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var assert = __webpack_require__(78);
  var makeClass = __webpack_require__(102);

  var _require = __webpack_require__(105);

  var Hash256 = _require.Hash256;

  var _require2 = __webpack_require__(145);

  var HashPrefix = _require2.HashPrefix;

  var _require3 = __webpack_require__(147);

  var Hasher = _require3.Sha512Half;

  var ShaMapNode = makeClass({
    virtuals: {
      hashPrefix: function hashPrefix() {},
      isLeaf: function isLeaf() {},
      isInner: function isInner() {}
    },
    cached: {
      hash: function hash() {
        var hasher = Hasher.put(this.hashPrefix());
        this.toBytesSink(hasher);
        return hasher.finish();
      }
    }
  });

  var ShaMapLeaf = makeClass({
    inherits: ShaMapNode,
    ShaMapLeaf: function ShaMapLeaf(index, item) {
      ShaMapNode.call(this);
      this.index = index;
      this.item = item;
    },
    isLeaf: function isLeaf() {
      return true;
    },
    isInner: function isInner() {
      return false;
    },
    hashPrefix: function hashPrefix() {
      return this.item.hashPrefix();
    },
    toBytesSink: function toBytesSink(sink) {
      this.item.toBytesSink(sink);
      this.index.toBytesSink(sink);
    }
  });

  var $uper = ShaMapNode.prototype;

  var ShaMapInner = makeClass({
    inherits: ShaMapNode,
    ShaMapInner: function ShaMapInner() {
      var depth = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

      ShaMapNode.call(this);
      this.depth = depth;
      this.slotBits = 0;
      this.branches = Array(16);
    },
    isInner: function isInner() {
      return true;
    },
    isLeaf: function isLeaf() {
      return false;
    },
    hashPrefix: function hashPrefix() {
      return HashPrefix.innerNode;
    },
    setBranch: function setBranch(slot, branch) {
      this.slotBits = this.slotBits | 1 << slot;
      this.branches[slot] = branch;
    },
    empty: function empty() {
      return this.slotBits === 0;
    },
    hash: function hash() {
      if (this.empty()) {
        return Hash256.ZERO_256;
      }
      return $uper.hash.call(this);
    },
    toBytesSink: function toBytesSink(sink) {
      for (var i = 0; i < this.branches.length; i++) {
        var branch = this.branches[i];
        var hash = branch ? branch.hash() : Hash256.ZERO_256;
        hash.toBytesSink(sink);
      }
    },
    addItem: function addItem(index, item, leaf) {
      assert(index instanceof Hash256);
      var nibble = index.nibblet(this.depth);
      var existing = this.branches[nibble];
      if (!existing) {
        this.setBranch(nibble, leaf || new ShaMapLeaf(index, item));
      } else if (existing.isLeaf()) {
        var newInner = new ShaMapInner(this.depth + 1);
        newInner.addItem(existing.index, null, existing);
        newInner.addItem(index, item, leaf);
        this.setBranch(nibble, newInner);
      } else if (existing.isInner()) {
        existing.addItem(index, item, leaf);
      } else {
        assert(false);
      }
    }
  });

  var ShaMap = makeClass({
    inherits: ShaMapInner
  });

  module.exports = {
    ShaMap: ShaMap
  };

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  var _toConsumableArray = __webpack_require__(124)['default'];

  var _ = __webpack_require__(76);
  var BN = __webpack_require__(129);
  var assert = __webpack_require__(78);
  var types = __webpack_require__(105);
  var STObject = types.STObject;
  var Hash256 = types.Hash256;

  var _require = __webpack_require__(178);

  var ShaMap = _require.ShaMap;

  var _require2 = __webpack_require__(145);

  var HashPrefix = _require2.HashPrefix;

  var _require3 = __webpack_require__(147);

  var Sha512Half = _require3.Sha512Half;

  var _require4 = __webpack_require__(144);

  var BinarySerializer = _require4.BinarySerializer;
  var serializeObject = _require4.serializeObject;

  function computeHash(itemizer, itemsJson) {
    var map = new ShaMap();
    itemsJson.forEach(function (item) {
      return map.addItem.apply(map, _toConsumableArray(itemizer(item)));
    });
    return map.hash();
  }

  function transactionItem(json) {
    assert(json.hash);
    var index = Hash256.from(json.hash);
    var item = {
      hashPrefix: function hashPrefix() {
        return HashPrefix.transaction;
      },
      toBytesSink: function toBytesSink(sink) {
        var serializer = new BinarySerializer(sink);
        serializer.writeLengthEncoded(STObject.from(json));
        serializer.writeLengthEncoded(STObject.from(json.metaData));
      }
    };
    return [index, item];
  }

  function entryItem(json) {
    var index = Hash256.from(json.index);
    var bytes = serializeObject(json);
    var item = {
      hashPrefix: function hashPrefix() {
        return HashPrefix.accountStateEntry;
      },
      toBytesSink: function toBytesSink(sink) {
        sink.put(bytes);
      }
    };
    return [index, item];
  }

  var transactionTreeHash = _.partial(computeHash, transactionItem);
  var accountStateHash = _.partial(computeHash, entryItem);

  function ledgerHash(header) {
    var hash = new Sha512Half();
    hash.put(HashPrefix.ledgerHeader);
    assert(header.parent_close_time !== undefined);
    assert(header.close_flags !== undefined);

    types.UInt32.from(header.ledger_index).toBytesSink(hash);
    types.UInt64.from(new BN(header.total_coins)).toBytesSink(hash);
    types.Hash256.from(header.parent_hash).toBytesSink(hash);
    types.Hash256.from(header.transaction_hash).toBytesSink(hash);
    types.Hash256.from(header.account_hash).toBytesSink(hash);
    types.UInt32.from(header.parent_close_time).toBytesSink(hash);
    types.UInt32.from(header.close_time).toBytesSink(hash);
    types.UInt8.from(header.close_time_resolution).toBytesSink(hash);
    types.UInt8.from(header.close_flags).toBytesSink(hash);
    return hash.finish();
  }

  module.exports = {
    accountStateHash: accountStateHash,
    transactionTreeHash: transactionTreeHash,
    ledgerHash: ledgerHash
  };

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  var Decimal = __webpack_require__(130);

  var _require = __webpack_require__(101);

  var bytesToHex = _require.bytesToHex;
  var slice = _require.slice;
  var parseBytes = _require.parseBytes;

  var _require2 = __webpack_require__(105);

  var UInt64 = _require2.UInt64;

  var BN = __webpack_require__(129);

  module.exports = {
    encode: function encode(arg) {
      var quality = arg instanceof Decimal ? arg : new Decimal(arg);
      var exponent = quality.e - 15;
      var qualityString = quality.times('1e' + -exponent).abs().toString();
      var bytes = new UInt64(new BN(qualityString)).toBytes();
      bytes[0] = exponent + 100;
      return bytes;
    },
    decode: function decode(arg) {
      var bytes = slice(parseBytes(arg), -8);
      var exponent = bytes[0] - 100;
      var mantissa = new Decimal(bytesToHex(slice(bytes, 1)), 16);
      return mantissa.times('1e' + exponent);
    }
  };

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';
  /* eslint-disable func-style */

  var _ = __webpack_require__(76);

  var _require = __webpack_require__(105);

  var AccountID = _require.AccountID;

  var binary = __webpack_require__(144);
  var serializeObject = binary.serializeObject;
  var bytesToHex = binary.bytesToHex;
  var multiSigningData = binary.multiSigningData;
  var transactionID = binary.transactionID;
  var signingData = binary.signingData;

  var FULL_CANONICAL_SIGNATURE = 0x80000000;

  var toHex = function toHex(v) {
    return bytesToHex(v);
  };
  var getSigner = function getSigner(o) {
    return AccountID.from(o.Signer.Account);
  };
  var signerComparator = function signerComparator(a, b) {
    return getSigner(a).compareTo(getSigner(b));
  };

  function setCanonicalSignatureFlag(tx_json) {
    tx_json.Flags |= FULL_CANONICAL_SIGNATURE;
    tx_json.Flags >>>= 0;
  }

  function serializedBundle(tx_json) {
    var serialized = serializeObject(tx_json);
    var hash = transactionID(serialized).toHex();
    var tx_blob = toHex(serialized);
    return { tx_json: tx_json, tx_blob: tx_blob, hash: hash };
  }

  function signFor(tx_json_, keyPair) {
    var signingAccount = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

    var tx_json = _.clone(tx_json_);
    tx_json.SigningPubKey = '';
    setCanonicalSignatureFlag(tx_json);
    var signerID = signingAccount || keyPair.id();
    var signature = keyPair.sign(multiSigningData(tx_json, signerID));
    var signer = {
      Signer: {
        SigningPubKey: toHex(keyPair.publicBytes()),
        TxnSignature: toHex(signature),
        Account: signerID
      }
    };

    var signers = tx_json.Signers = tx_json.Signers || [];
    signers.push(signer);
    signers.sort(signerComparator);

    return serializedBundle(tx_json);
  }

  function sign(tx_json_, keyPair) {
    var tx_json = _.clone(tx_json_);
    setCanonicalSignatureFlag(tx_json);

    tx_json.SigningPubKey = toHex(keyPair.publicBytes());
    tx_json.TxnSignature = toHex(keyPair.sign(signingData(tx_json)));

    return serializedBundle(tx_json);
  }

  module.exports = {
    signFor: signFor,
    sign: sign
  };

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

  'use strict';

  module.exports = {
    XRPValue: __webpack_require__(183).XRPValue,
    IOUValue: __webpack_require__(186).IOUValue
  };

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {



  'use strict';

  var _get = __webpack_require__(2)['default'];

  var _inherits = __webpack_require__(18)['default'];

  var _createClass = __webpack_require__(27)['default'];

  var _classCallCheck = __webpack_require__(30)['default'];

  var GlobalBigNumber = __webpack_require__(184);
  var BigNumber = GlobalBigNumber.another({
    ROUNDING_MODE: GlobalBigNumber.ROUND_HALF_UP,
    DECIMAL_PLACES: 40
  });

  var Value = __webpack_require__(185).Value;
  var rippleUnits = new BigNumber(1e6);

  var XRPValue = (function (_Value) {
    _inherits(XRPValue, _Value);

    function XRPValue(value) {
      _classCallCheck(this, XRPValue);

      _get(Object.getPrototypeOf(XRPValue.prototype), 'constructor', this).call(this, value);
      if (this._value.dp() > 6) {
        throw new Error('Value has more than 6 digits of precision past the decimal point, ' + 'an IOUValue may be being cast to an XRPValue');
      }
    }

    _createClass(XRPValue, [{
      key: 'multiply',
      value: function multiply(multiplicand) {
        if (multiplicand instanceof XRPValue) {
          return _get(Object.getPrototypeOf(XRPValue.prototype), 'multiply', this).call(this, new XRPValue(multiplicand._value.times(rippleUnits)));
        }
        return _get(Object.getPrototypeOf(XRPValue.prototype), 'multiply', this).call(this, multiplicand);
      }
    }, {
      key: 'divide',
      value: function divide(divisor) {
        if (divisor instanceof XRPValue) {
          return _get(Object.getPrototypeOf(XRPValue.prototype), 'divide', this).call(this, new XRPValue(divisor._value.times(rippleUnits)));
        }
        return _get(Object.getPrototypeOf(XRPValue.prototype), 'divide', this).call(this, divisor);
      }
    }, {
      key: 'negate',
      value: function negate() {
        return new XRPValue(this._value.neg());
      }
    }, {
      key: '_canonicalize',
      value: function _canonicalize(value) {
        if (value.isNaN()) {
          throw new Error('Invalid result');
        }
        return new XRPValue(value.round(6, BigNumber.ROUND_DOWN));
      }
    }, {
      key: 'equals',
      value: function equals(comparator) {
        return comparator instanceof XRPValue && this._value.equals(comparator._value);
      }
    }]);

    return XRPValue;
  })(Value);

  exports.XRPValue = XRPValue;

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

  var __WEBPACK_AMD_DEFINE_RESULT__;/*! bignumber.js v2.0.8 https://github.com/MikeMcl/bignumber.js/LICENCE */

  ;(function (global) {
      'use strict';

      /*
        bignumber.js v2.0.8
        A JavaScript library for arbitrary-precision arithmetic.
        https://github.com/MikeMcl/bignumber.js
        Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>
        MIT Expat Licence
      */


      var BigNumber, crypto, parseNumeric,
          isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
          mathceil = Math.ceil,
          mathfloor = Math.floor,
          notBool = ' not a boolean or binary digit',
          roundingMode = 'rounding mode',
          tooManyDigits = 'number type has more than 15 significant digits',
          ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
          BASE = 1e14,
          LOG_BASE = 14,
          MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
          // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
          POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
          SQRT_BASE = 1e7,

          /*
           * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
           * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an
           * exception is thrown (if ERRORS is true).
           */
          MAX = 1E9;                                   // 0 to MAX_INT32


      /*
       * Create and return a BigNumber constructor.
       */
      function another(configObj) {
          var div,

              // id tracks the caller function, so its name can be included in error messages.
              id = 0,
              P = BigNumber.prototype,
              ONE = new BigNumber(1),


              /********************************* EDITABLE DEFAULTS **********************************/


              /*
               * The default values below must be integers within the inclusive ranges stated.
               * The values can also be changed at run-time using BigNumber.config.
               */

              // The maximum number of decimal places for operations involving division.
              DECIMAL_PLACES = 20,                     // 0 to MAX

              /*
               * The rounding mode used when rounding to the above decimal places, and when using
               * toExponential, toFixed, toFormat and toPrecision, and round (default value).
               * UP         0 Away from zero.
               * DOWN       1 Towards zero.
               * CEIL       2 Towards +Infinity.
               * FLOOR      3 Towards -Infinity.
               * HALF_UP    4 Towards nearest neighbour. If equidistant, up.
               * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
               * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
               * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
               * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
               */
              ROUNDING_MODE = 4,                       // 0 to 8

              // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

              // The exponent value at and beneath which toString returns exponential notation.
              // Number type: -7
              TO_EXP_NEG = -7,                         // 0 to -MAX

              // The exponent value at and above which toString returns exponential notation.
              // Number type: 21
              TO_EXP_POS = 21,                         // 0 to MAX

              // RANGE : [MIN_EXP, MAX_EXP]

              // The minimum exponent value, beneath which underflow to zero occurs.
              // Number type: -324  (5e-324)
              MIN_EXP = -1e7,                          // -1 to -MAX

              // The maximum exponent value, above which overflow to Infinity occurs.
              // Number type:  308  (1.7976931348623157e+308)
              // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
              MAX_EXP = 1e7,                           // 1 to MAX

              // Whether BigNumber Errors are ever thrown.
              ERRORS = true,                           // true or false

              // Change to intValidatorNoErrors if ERRORS is false.
              isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors

              // Whether to use cryptographically-secure random number generation, if available.
              CRYPTO = false,                          // true or false

              /*
               * The modulo mode used when calculating the modulus: a mod n.
               * The quotient (q = a / n) is calculated according to the corresponding rounding mode.
               * The remainder (r) is calculated as: r = a - n * q.
               *
               * UP        0 The remainder is positive if the dividend is negative, else is negative.
               * DOWN      1 The remainder has the same sign as the dividend.
               *             This modulo mode is commonly known as 'truncated division' and is
               *             equivalent to (a % n) in JavaScript.
               * FLOOR     3 The remainder has the same sign as the divisor (Python %).
               * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
               * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
               *             The remainder is always positive.
               *
               * The truncated division, floored division, Euclidian division and IEEE 754 remainder
               * modes are commonly used for the modulus operation.
               * Although the other rounding modes can also be used, they may not give useful results.
               */
              MODULO_MODE = 1,                         // 0 to 9

              // The maximum number of significant digits of the result of the toPower operation.
              // If POW_PRECISION is 0, there will be unlimited significant digits.
              POW_PRECISION = 100,                     // 0 to MAX

              // The format specification used by the BigNumber.prototype.toFormat method.
              FORMAT = {
                  decimalSeparator: '.',
                  groupSeparator: ',',
                  groupSize: 3,
                  secondaryGroupSize: 0,
                  fractionGroupSeparator: '\xA0',      // non-breaking space
                  fractionGroupSize: 0
              };


          /******************************************************************************************/


          // CONSTRUCTOR


          /*
           * The BigNumber constructor and exported function.
           * Create and return a new instance of a BigNumber object.
           *
           * n {number|string|BigNumber} A numeric value.
           * [b] {number} The base of n. Integer, 2 to 64 inclusive.
           */
          function BigNumber( n, b ) {
              var c, e, i, num, len, str,
                  x = this;

              // Enable constructor usage without new.
              if ( !( x instanceof BigNumber ) ) {

                  // 'BigNumber() constructor call without new: {n}'
                  if (ERRORS) raise( 26, 'constructor call without new', n );
                  return new BigNumber( n, b );
              }

              // 'new BigNumber() base not an integer: {b}'
              // 'new BigNumber() base out of range: {b}'
              if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {

                  // Duplicate.
                  if ( n instanceof BigNumber ) {
                      x.s = n.s;
                      x.e = n.e;
                      x.c = ( n = n.c ) ? n.slice() : n;
                      id = 0;
                      return;
                  }

                  if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {
                      x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;

                      // Fast path for integers.
                      if ( n === ~~n ) {
                          for ( e = 0, i = n; i >= 10; i /= 10, e++ );
                          x.e = e;
                          x.c = [n];
                          id = 0;
                          return;
                      }

                      str = n + '';
                  } else {
                      if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );
                      x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;
                  }
              } else {
                  b = b | 0;
                  str = n + '';

                  // Ensure return value is rounded to DECIMAL_PLACES as with other bases.
                  // Allow exponential notation to be used with base 10 argument.
                  if ( b == 10 ) {
                      x = new BigNumber( n instanceof BigNumber ? n : str );
                      return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );
                  }

                  // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                  // Any number in exponential form will fail due to the [Ee][+-].
                  if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||
                    !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +
                      '(?:\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {
                      return parseNumeric( x, str, num, b );
                  }

                  if (num) {
                      x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;

                      if ( ERRORS && str.replace( /^0\.0*|\./, '' ).length > 15 ) {

                          // 'new BigNumber() number type has more than 15 significant digits: {n}'
                          raise( id, tooManyDigits, n );
                      }

                      // Prevent later check for length on converted number.
                      num = false;
                  } else {
                      x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;
                  }

                  str = convertBase( str, 10, b, x.s );
              }

              // Decimal point?
              if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );

              // Exponential form?
              if ( ( i = str.search( /e/i ) ) > 0 ) {

                  // Determine exponent.
                  if ( e < 0 ) e = i;
                  e += +str.slice( i + 1 );
                  str = str.substring( 0, i );
              } else if ( e < 0 ) {

                  // Integer.
                  e = str.length;
              }

              // Determine leading zeros.
              for ( i = 0; str.charCodeAt(i) === 48; i++ );

              // Determine trailing zeros.
              for ( len = str.length; str.charCodeAt(--len) === 48; );
              str = str.slice( i, len + 1 );

              if (str) {
                  len = str.length;

                  // Disallow numbers with over 15 significant digits if number type.
                  // 'new BigNumber() number type has more than 15 significant digits: {n}'
                  if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );

                  e = e - i - 1;

                   // Overflow?
                  if ( e > MAX_EXP ) {

                      // Infinity.
                      x.c = x.e = null;

                  // Underflow?
                  } else if ( e < MIN_EXP ) {

                      // Zero.
                      x.c = [ x.e = 0 ];
                  } else {
                      x.e = e;
                      x.c = [];

                      // Transform base

                      // e is the base 10 exponent.
                      // i is where to slice str to get the first element of the coefficient array.
                      i = ( e + 1 ) % LOG_BASE;
                      if ( e < 0 ) i += LOG_BASE;

                      if ( i < len ) {
                          if (i) x.c.push( +str.slice( 0, i ) );

                          for ( len -= LOG_BASE; i < len; ) {
                              x.c.push( +str.slice( i, i += LOG_BASE ) );
                          }

                          str = str.slice(i);
                          i = LOG_BASE - str.length;
                      } else {
                          i -= len;
                      }

                      for ( ; i--; str += '0' );
                      x.c.push( +str );
                  }
              } else {

                  // Zero.
                  x.c = [ x.e = 0 ];
              }

              id = 0;
          }


          // CONSTRUCTOR PROPERTIES


          BigNumber.another = another;

          BigNumber.ROUND_UP = 0;
          BigNumber.ROUND_DOWN = 1;
          BigNumber.ROUND_CEIL = 2;
          BigNumber.ROUND_FLOOR = 3;
          BigNumber.ROUND_HALF_UP = 4;
          BigNumber.ROUND_HALF_DOWN = 5;
          BigNumber.ROUND_HALF_EVEN = 6;
          BigNumber.ROUND_HALF_CEIL = 7;
          BigNumber.ROUND_HALF_FLOOR = 8;
          BigNumber.EUCLID = 9;


          /*
           * Configure infrequently-changing library-wide settings.
           *
           * Accept an object or an argument list, with one or many of the following properties or
           * parameters respectively:
           *
           *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive
           *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive
           *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or
           *                                      [integer -MAX to 0 incl., 0 to MAX incl.]
           *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or
           *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]
           *   ERRORS          {boolean|number}   true, false, 1 or 0
           *   CRYPTO          {boolean|number}   true, false, 1 or 0
           *   MODULO_MODE     {number}           0 to 9 inclusive
           *   POW_PRECISION   {number}           0 to MAX inclusive
           *   FORMAT          {object}           See BigNumber.prototype.toFormat
           *      decimalSeparator       {string}
           *      groupSeparator         {string}
           *      groupSize              {number}
           *      secondaryGroupSize     {number}
           *      fractionGroupSeparator {string}
           *      fractionGroupSize      {number}
           *
           * (The values assigned to the above FORMAT object properties are not checked for validity.)
           *
           * E.g.
           * BigNumber.config(20, 4) is equivalent to
           * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
           *
           * Ignore properties/parameters set to null or undefined.
           * Return an object with the properties current values.
           */
          BigNumber.config = function () {
              var v, p,
                  i = 0,
                  r = {},
                  a = arguments,
                  o = a[0],
                  has = o && typeof o == 'object'
                    ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }
                    : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };

              // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
              // 'config() DECIMAL_PLACES not an integer: {v}'
              // 'config() DECIMAL_PLACES out of range: {v}'
              if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {
                  DECIMAL_PLACES = v | 0;
              }
              r[p] = DECIMAL_PLACES;

              // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
              // 'config() ROUNDING_MODE not an integer: {v}'
              // 'config() ROUNDING_MODE out of range: {v}'
              if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {
                  ROUNDING_MODE = v | 0;
              }
              r[p] = ROUNDING_MODE;

              // EXPONENTIAL_AT {number|number[]}
              // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].
              // 'config() EXPONENTIAL_AT not an integer: {v}'
              // 'config() EXPONENTIAL_AT out of range: {v}'
              if ( has( p = 'EXPONENTIAL_AT' ) ) {

                  if ( isArray(v) ) {
                      if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {
                          TO_EXP_NEG = v[0] | 0;
                          TO_EXP_POS = v[1] | 0;
                      }
                  } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {
                      TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );
                  }
              }
              r[p] = [ TO_EXP_NEG, TO_EXP_POS ];

              // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
              // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
              // 'config() RANGE not an integer: {v}'
              // 'config() RANGE cannot be zero: {v}'
              // 'config() RANGE out of range: {v}'
              if ( has( p = 'RANGE' ) ) {

                  if ( isArray(v) ) {
                      if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {
                          MIN_EXP = v[0] | 0;
                          MAX_EXP = v[1] | 0;
                      }
                  } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {
                      if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );
                      else if (ERRORS) raise( 2, p + ' cannot be zero', v );
                  }
              }
              r[p] = [ MIN_EXP, MAX_EXP ];

              // ERRORS {boolean|number} true, false, 1 or 0.
              // 'config() ERRORS not a boolean or binary digit: {v}'
              if ( has( p = 'ERRORS' ) ) {

                  if ( v === !!v || v === 1 || v === 0 ) {
                      id = 0;
                      isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;
                  } else if (ERRORS) {
                      raise( 2, p + notBool, v );
                  }
              }
              r[p] = ERRORS;

              // CRYPTO {boolean|number} true, false, 1 or 0.
              // 'config() CRYPTO not a boolean or binary digit: {v}'
              // 'config() crypto unavailable: {crypto}'
              if ( has( p = 'CRYPTO' ) ) {

                  if ( v === !!v || v === 1 || v === 0 ) {
                      CRYPTO = !!( v && crypto && typeof crypto == 'object' );
                      if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );
                  } else if (ERRORS) {
                      raise( 2, p + notBool, v );
                  }
              }
              r[p] = CRYPTO;

              // MODULO_MODE {number} Integer, 0 to 9 inclusive.
              // 'config() MODULO_MODE not an integer: {v}'
              // 'config() MODULO_MODE out of range: {v}'
              if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {
                  MODULO_MODE = v | 0;
              }
              r[p] = MODULO_MODE;

              // POW_PRECISION {number} Integer, 0 to MAX inclusive.
              // 'config() POW_PRECISION not an integer: {v}'
              // 'config() POW_PRECISION out of range: {v}'
              if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {
                  POW_PRECISION = v | 0;
              }
              r[p] = POW_PRECISION;

              // FORMAT {object}
              // 'config() FORMAT not an object: {v}'
              if ( has( p = 'FORMAT' ) ) {

                  if ( typeof v == 'object' ) {
                      FORMAT = v;
                  } else if (ERRORS) {
                      raise( 2, p + ' not an object', v );
                  }
              }
              r[p] = FORMAT;

              return r;
          };


          /*
           * Return a new BigNumber whose value is the maximum of the arguments.
           *
           * arguments {number|string|BigNumber}
           */
          BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };


          /*
           * Return a new BigNumber whose value is the minimum of the arguments.
           *
           * arguments {number|string|BigNumber}
           */
          BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };


          /*
           * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
           * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
           * zeros are produced).
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           *
           * 'random() decimal places not an integer: {dp}'
           * 'random() decimal places out of range: {dp}'
           * 'random() crypto unavailable: {crypto}'
           */
          BigNumber.random = (function () {
              var pow2_53 = 0x20000000000000;

              // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
              // Check if Math.random() produces more than 32 bits of randomness.
              // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
              // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
              var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
                ? function () { return mathfloor( Math.random() * pow2_53 ); }
                : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
                    (Math.random() * 0x800000 | 0); };

              return function (dp) {
                  var a, b, e, k, v,
                      i = 0,
                      c = [],
                      rand = new BigNumber(ONE);

                  dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;
                  k = mathceil( dp / LOG_BASE );

                  if (CRYPTO) {

                      // Browsers supporting crypto.getRandomValues.
                      if ( crypto && crypto.getRandomValues ) {

                          a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );

                          for ( ; i < k; ) {

                              // 53 bits:
                              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                              // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                              //                                     11111 11111111 11111111
                              // 0x20000 is 2^21.
                              v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                              // Rejection sampling:
                              // 0 <= v < 9007199254740992
                              // Probability that v >= 9e15, is
                              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                              if ( v >= 9e15 ) {
                                  b = crypto.getRandomValues( new Uint32Array(2) );
                                  a[i] = b[0];
                                  a[i + 1] = b[1];
                              } else {

                                  // 0 <= v <= 8999999999999999
                                  // 0 <= (v % 1e14) <= 99999999999999
                                  c.push( v % 1e14 );
                                  i += 2;
                              }
                          }
                          i = k / 2;

                      // Node.js supporting crypto.randomBytes.
                      } else if ( crypto && crypto.randomBytes ) {

                          // buffer
                          a = crypto.randomBytes( k *= 7 );

                          for ( ; i < k; ) {

                              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                              // 0x100000000 is 2^32, 0x1000000 is 2^24
                              // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                              // 0 <= v < 9007199254740992
                              v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +
                                    ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +
                                    ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];

                              if ( v >= 9e15 ) {
                                  crypto.randomBytes(7).copy( a, i );
                              } else {

                                  // 0 <= (v % 1e14) <= 99999999999999
                                  c.push( v % 1e14 );
                                  i += 7;
                              }
                          }
                          i = k / 7;
                      } else if (ERRORS) {
                          raise( 14, 'crypto unavailable', crypto );
                      }
                  }

                  // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.
                  if (!i) {

                      for ( ; i < k; ) {
                          v = random53bitInt();
                          if ( v < 9e15 ) c[i++] = v % 1e14;
                      }
                  }

                  k = c[--i];
                  dp %= LOG_BASE;

                  // Convert trailing digits to zeros according to dp.
                  if ( k && dp ) {
                      v = POWS_TEN[LOG_BASE - dp];
                      c[i] = mathfloor( k / v ) * v;
                  }

                  // Remove trailing elements which are zero.
                  for ( ; c[i] === 0; c.pop(), i-- );

                  // Zero?
                  if ( i < 0 ) {
                      c = [ e = 0 ];
                  } else {

                      // Remove leading elements which are zero and adjust exponent accordingly.
                      for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);

                      // Count the digits of the first element of c to determine leading zeros, and...
                      for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);

                      // adjust the exponent accordingly.
                      if ( i < LOG_BASE ) e -= LOG_BASE - i;
                  }

                  rand.e = e;
                  rand.c = c;
                  return rand;
              };
          })();


          // PRIVATE FUNCTIONS


          // Convert a numeric string of baseIn to a numeric string of baseOut.
          function convertBase( str, baseOut, baseIn, sign ) {
              var d, e, k, r, x, xc, y,
                  i = str.indexOf( '.' ),
                  dp = DECIMAL_PLACES,
                  rm = ROUNDING_MODE;

              if ( baseIn < 37 ) str = str.toLowerCase();

              // Non-integer.
              if ( i >= 0 ) {
                  k = POW_PRECISION;

                  // Unlimited precision.
                  POW_PRECISION = 0;
                  str = str.replace( '.', '' );
                  y = new BigNumber(baseIn);
                  x = y.pow( str.length - i );
                  POW_PRECISION = k;

                  // Convert str as if an integer, then restore the fraction part by dividing the
                  // result by its base raised to a power.
                  y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );
                  y.e = y.c.length;
              }

              // Convert the number as integer.
              xc = toBaseOut( str, baseIn, baseOut );
              e = k = xc.length;

              // Remove trailing zeros.
              for ( ; xc[--k] == 0; xc.pop() );
              if ( !xc[0] ) return '0';

              if ( i < 0 ) {
                  --e;
              } else {
                  x.c = xc;
                  x.e = e;

                  // sign is needed for correct rounding.
                  x.s = sign;
                  x = div( x, y, dp, rm, baseOut );
                  xc = x.c;
                  r = x.r;
                  e = x.e;
              }

              d = e + dp + 1;

              // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.
              i = xc[d];
              k = baseOut / 2;
              r = r || d < 0 || xc[d + 1] != null;

              r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
                         : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
                           rm == ( x.s < 0 ? 8 : 7 ) );

              if ( d < 1 || !xc[0] ) {

                  // 1^-dp or 0.
                  str = r ? toFixedPoint( '1', -dp ) : '0';
              } else {
                  xc.length = d;

                  if (r) {

                      // Rounding up may mean the previous digit has to be rounded up and so on.
                      for ( --baseOut; ++xc[--d] > baseOut; ) {
                          xc[d] = 0;

                          if ( !d ) {
                              ++e;
                              xc.unshift(1);
                          }
                      }
                  }

                  // Determine trailing zeros.
                  for ( k = xc.length; !xc[--k]; );

                  // E.g. [4, 11, 15] becomes 4bf.
                  for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );
                  str = toFixedPoint( str, e );
              }

              // The caller will add the sign.
              return str;
          }


          // Perform division in the specified base. Called by div and convertBase.
          div = (function () {

              // Assume non-zero x and k.
              function multiply( x, k, base ) {
                  var m, temp, xlo, xhi,
                      carry = 0,
                      i = x.length,
                      klo = k % SQRT_BASE,
                      khi = k / SQRT_BASE | 0;

                  for ( x = x.slice(); i--; ) {
                      xlo = x[i] % SQRT_BASE;
                      xhi = x[i] / SQRT_BASE | 0;
                      m = khi * xlo + xhi * klo;
                      temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;
                      carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;
                      x[i] = temp % base;
                  }

                  if (carry) x.unshift(carry);

                  return x;
              }

              function compare( a, b, aL, bL ) {
                  var i, cmp;

                  if ( aL != bL ) {
                      cmp = aL > bL ? 1 : -1;
                  } else {

                      for ( i = cmp = 0; i < aL; i++ ) {

                          if ( a[i] != b[i] ) {
                              cmp = a[i] > b[i] ? 1 : -1;
                              break;
                          }
                      }
                  }
                  return cmp;
              }

              function subtract( a, b, aL, base ) {
                  var i = 0;

                  // Subtract b from a.
                  for ( ; aL--; ) {
                      a[aL] -= i;
                      i = a[aL] < b[aL] ? 1 : 0;
                      a[aL] = i * base + a[aL] - b[aL];
                  }

                  // Remove leading zeros.
                  for ( ; !a[0] && a.length > 1; a.shift() );
              }

              // x: dividend, y: divisor.
              return function ( x, y, dp, rm, base ) {
                  var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
                      yL, yz,
                      s = x.s == y.s ? 1 : -1,
                      xc = x.c,
                      yc = y.c;

                  // Either NaN, Infinity or 0?
                  if ( !xc || !xc[0] || !yc || !yc[0] ) {

                      return new BigNumber(

                        // Return NaN if either NaN, or both Infinity or 0.
                        !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :

                          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                          xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                      );
                  }

                  q = new BigNumber(s);
                  qc = q.c = [];
                  e = x.e - y.e;
                  s = dp + e + 1;

                  if ( !base ) {
                      base = BASE;
                      e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );
                      s = s / LOG_BASE | 0;
                  }

                  // Result exponent may be one less then the current value of e.
                  // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                  for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );
                  if ( yc[i] > ( xc[i] || 0 ) ) e--;

                  if ( s < 0 ) {
                      qc.push(1);
                      more = true;
                  } else {
                      xL = xc.length;
                      yL = yc.length;
                      i = 0;
                      s += 2;

                      // Normalise xc and yc so highest order digit of yc is >= base / 2.

                      n = mathfloor( base / ( yc[0] + 1 ) );

                      // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.
                      // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {
                      if ( n > 1 ) {
                          yc = multiply( yc, n, base );
                          xc = multiply( xc, n, base );
                          yL = yc.length;
                          xL = xc.length;
                      }

                      xi = yL;
                      rem = xc.slice( 0, yL );
                      remL = rem.length;

                      // Add zeros to make remainder as long as divisor.
                      for ( ; remL < yL; rem[remL++] = 0 );
                      yz = yc.slice();
                      yz.unshift(0);
                      yc0 = yc[0];
                      if ( yc[1] >= base / 2 ) yc0++;
                      // Not necessary, but to prevent trial digit n > base, when using base 3.
                      // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;

                      do {
                          n = 0;

                          // Compare divisor and remainder.
                          cmp = compare( yc, rem, yL, remL );

                          // If divisor < remainder.
                          if ( cmp < 0 ) {

                              // Calculate trial digit, n.

                              rem0 = rem[0];
                              if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );

                              // n is how many times the divisor goes into the current remainder.
                              n = mathfloor( rem0 / yc0 );

                              //  Algorithm:
                              //  1. product = divisor * trial digit (n)
                              //  2. if product > remainder: product -= divisor, n--
                              //  3. remainder -= product
                              //  4. if product was < remainder at 2:
                              //    5. compare new remainder and divisor
                              //    6. If remainder > divisor: remainder -= divisor, n++

                              if ( n > 1 ) {

                                  // n may be > base only when base is 3.
                                  if (n >= base) n = base - 1;

                                  // product = divisor * trial digit.
                                  prod = multiply( yc, n, base );
                                  prodL = prod.length;
                                  remL = rem.length;

                                  // Compare product and remainder.
                                  // If product > remainder.
                                  // Trial digit n too high.
                                  // n is 1 too high about 5% of the time, and is not known to have
                                  // ever been more than 1 too high.
                                  while ( compare( prod, rem, prodL, remL ) == 1 ) {
                                      n--;

                                      // Subtract divisor from product.
                                      subtract( prod, yL < prodL ? yz : yc, prodL, base );
                                      prodL = prod.length;
                                      cmp = 1;
                                  }
                              } else {

                                  // n is 0 or 1, cmp is -1.
                                  // If n is 0, there is no need to compare yc and rem again below,
                                  // so change cmp to 1 to avoid it.
                                  // If n is 1, leave cmp as -1, so yc and rem are compared again.
                                  if ( n == 0 ) {

                                      // divisor < remainder, so n must be at least 1.
                                      cmp = n = 1;
                                  }

                                  // product = divisor
                                  prod = yc.slice();
                                  prodL = prod.length;
                              }

                              if ( prodL < remL ) prod.unshift(0);

                              // Subtract product from remainder.
                              subtract( rem, prod, remL, base );
                              remL = rem.length;

                               // If product was < remainder.
                              if ( cmp == -1 ) {

                                  // Compare divisor and new remainder.
                                  // If divisor < new remainder, subtract divisor from remainder.
                                  // Trial digit n too low.
                                  // n is 1 too low about 5% of the time, and very rarely 2 too low.
                                  while ( compare( yc, rem, yL, remL ) < 1 ) {
                                      n++;

                                      // Subtract divisor from remainder.
                                      subtract( rem, yL < remL ? yz : yc, remL, base );
                                      remL = rem.length;
                                  }
                              }
                          } else if ( cmp === 0 ) {
                              n++;
                              rem = [0];
                          } // else cmp === 1 and n will be 0

                          // Add the next digit, n, to the result array.
                          qc[i++] = n;

                          // Update the remainder.
                          if ( rem[0] ) {
                              rem[remL++] = xc[xi] || 0;
                          } else {
                              rem = [ xc[xi] ];
                              remL = 1;
                          }
                      } while ( ( xi++ < xL || rem[0] != null ) && s-- );

                      more = rem[0] != null;

                      // Leading zero?
                      if ( !qc[0] ) qc.shift();
                  }

                  if ( base == BASE ) {

                      // To calculate q.e, first get the number of digits of qc[0].
                      for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );
                      round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );

                  // Caller is convertBase.
                  } else {
                      q.e = e;
                      q.r = +more;
                  }

                  return q;
              };
          })();


          /*
           * Return a string representing the value of BigNumber n in fixed-point or exponential
           * notation rounded to the specified decimal places or significant digits.
           *
           * n is a BigNumber.
           * i is the index of the last digit required (i.e. the digit that may be rounded up).
           * rm is the rounding mode.
           * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.
           */
          function format( n, i, rm, caller ) {
              var c0, e, ne, len, str;

              rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )
                ? rm | 0 : ROUNDING_MODE;

              if ( !n.c ) return n.toString();
              c0 = n.c[0];
              ne = n.e;

              if ( i == null ) {
                  str = coeffToString( n.c );
                  str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG
                    ? toExponential( str, ne )
                    : toFixedPoint( str, ne );
              } else {
                  n = round( new BigNumber(n), i, rm );

                  // n.e may have changed if the value was rounded up.
                  e = n.e;

                  str = coeffToString( n.c );
                  len = str.length;

                  // toPrecision returns exponential notation if the number of significant digits
                  // specified is less than the number of digits necessary to represent the integer
                  // part of the value in fixed-point notation.

                  // Exponential notation.
                  if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {

                      // Append zeros?
                      for ( ; len < i; str += '0', len++ );
                      str = toExponential( str, e );

                  // Fixed-point notation.
                  } else {
                      i -= ne;
                      str = toFixedPoint( str, e );

                      // Append zeros?
                      if ( e + 1 > len ) {
                          if ( --i > 0 ) for ( str += '.'; i--; str += '0' );
                      } else {
                          i += e - len;
                          if ( i > 0 ) {
                              if ( e + 1 == len ) str += '.';
                              for ( ; i--; str += '0' );
                          }
                      }
                  }
              }

              return n.s < 0 && c0 ? '-' + str : str;
          }


          // Handle BigNumber.max and BigNumber.min.
          function maxOrMin( args, method ) {
              var m, n,
                  i = 0;

              if ( isArray( args[0] ) ) args = args[0];
              m = new BigNumber( args[0] );

              for ( ; ++i < args.length; ) {
                  n = new BigNumber( args[i] );

                  // If any number is NaN, return NaN.
                  if ( !n.s ) {
                      m = n;
                      break;
                  } else if ( method.call( m, n ) ) {
                      m = n;
                  }
              }

              return m;
          }


          /*
           * Return true if n is an integer in range, otherwise throw.
           * Use for argument validation when ERRORS is true.
           */
          function intValidatorWithErrors( n, min, max, caller, name ) {
              if ( n < min || n > max || n != truncate(n) ) {
                  raise( caller, ( name || 'decimal places' ) +
                    ( n < min || n > max ? ' out of range' : ' not an integer' ), n );
              }

              return true;
          }


          /*
           * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
           * Called by minus, plus and times.
           */
          function normalise( n, c, e ) {
              var i = 1,
                  j = c.length;

               // Remove trailing zeros.
              for ( ; !c[--j]; c.pop() );

              // Calculate the base 10 exponent. First get the number of digits of c[0].
              for ( j = c[0]; j >= 10; j /= 10, i++ );

              // Overflow?
              if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {

                  // Infinity.
                  n.c = n.e = null;

              // Underflow?
              } else if ( e < MIN_EXP ) {

                  // Zero.
                  n.c = [ n.e = 0 ];
              } else {
                  n.e = e;
                  n.c = c;
              }

              return n;
          }


          // Handle values that fail the validity test in BigNumber.
          parseNumeric = (function () {
              var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
                  dotAfter = /^([^.]+)\.$/,
                  dotBefore = /^\.([^.]+)$/,
                  isInfinityOrNaN = /^-?(Infinity|NaN)$/,
                  whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

              return function ( x, str, num, b ) {
                  var base,
                      s = num ? str : str.replace( whitespaceOrPlus, '' );

                  // No exception on ±Infinity or NaN.
                  if ( isInfinityOrNaN.test(s) ) {
                      x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                  } else {
                      if ( !num ) {

                          // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                          s = s.replace( basePrefix, function ( m, p1, p2 ) {
                              base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                              return !b || b == base ? p1 : m;
                          });

                          if (b) {
                              base = b;

                              // E.g. '1.' to '1', '.1' to '0.1'
                              s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );
                          }

                          if ( str != s ) return new BigNumber( s, base );
                      }

                      // 'new BigNumber() not a number: {n}'
                      // 'new BigNumber() not a base {b} number: {n}'
                      if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );
                      x.s = null;
                  }

                  x.c = x.e = null;
                  id = 0;
              }
          })();


          // Throw a BigNumber Error.
          function raise( caller, msg, val ) {
              var error = new Error( [
                  'new BigNumber',     // 0
                  'cmp',               // 1
                  'config',            // 2
                  'div',               // 3
                  'divToInt',          // 4
                  'eq',                // 5
                  'gt',                // 6
                  'gte',               // 7
                  'lt',                // 8
                  'lte',               // 9
                  'minus',             // 10
                  'mod',               // 11
                  'plus',              // 12
                  'precision',         // 13
                  'random',            // 14
                  'round',             // 15
                  'shift',             // 16
                  'times',             // 17
                  'toDigits',          // 18
                  'toExponential',     // 19
                  'toFixed',           // 20
                  'toFormat',          // 21
                  'toFraction',        // 22
                  'pow',               // 23
                  'toPrecision',       // 24
                  'toString',          // 25
                  'BigNumber'          // 26
              ][caller] + '() ' + msg + ': ' + val );

              error.name = 'BigNumber Error';
              id = 0;
              throw error;
          }


          /*
           * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
           * If r is truthy, it is known that there are more digits after the rounding digit.
           */
          function round( x, sd, rm, r ) {
              var d, i, j, k, n, ni, rd,
                  xc = x.c,
                  pows10 = POWS_TEN;

              // if x is not Infinity or NaN...
              if (xc) {

                  // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                  // n is a base 1e14 number, the value of the element of array x.c containing rd.
                  // ni is the index of n within x.c.
                  // d is the number of digits of n.
                  // i is the index of rd within n including leading zeros.
                  // j is the actual index of rd within n (if < 0, rd is a leading zero).
                  out: {

                      // Get the number of digits of the first element of xc.
                      for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );
                      i = sd - d;

                      // If the rounding digit is in the first element of xc...
                      if ( i < 0 ) {
                          i += LOG_BASE;
                          j = sd;
                          n = xc[ ni = 0 ];

                          // Get the rounding digit at index j of n.
                          rd = n / pows10[ d - j - 1 ] % 10 | 0;
                      } else {
                          ni = mathceil( ( i + 1 ) / LOG_BASE );

                          if ( ni >= xc.length ) {

                              if (r) {

                                  // Needed by sqrt.
                                  for ( ; xc.length <= ni; xc.push(0) );
                                  n = rd = 0;
                                  d = 1;
                                  i %= LOG_BASE;
                                  j = i - LOG_BASE + 1;
                              } else {
                                  break out;
                              }
                          } else {
                              n = k = xc[ni];

                              // Get the number of digits of n.
                              for ( d = 1; k >= 10; k /= 10, d++ );

                              // Get the index of rd within n.
                              i %= LOG_BASE;

                              // Get the index of rd within n, adjusted for leading zeros.
                              // The number of leading zeros of n is given by LOG_BASE - d.
                              j = i - LOG_BASE + d;

                              // Get the rounding digit at index j of n.
                              rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;
                          }
                      }

                      r = r || sd < 0 ||

                      // Are there any non-zero digits after the rounding digit?
                      // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right
                      // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                        xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );

                      r = rm < 4
                        ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
                        : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&

                          // Check whether the digit to the left of the rounding digit is odd.
                          ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||
                            rm == ( x.s < 0 ? 8 : 7 ) );

                      if ( sd < 1 || !xc[0] ) {
                          xc.length = 0;

                          if (r) {

                              // Convert sd to decimal places.
                              sd -= x.e + 1;

                              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                              xc[0] = pows10[ ( LOG_BASE - sd % LOG_BASE ) % LOG_BASE ];
                              x.e = -sd || 0;
                          } else {

                              // Zero.
                              xc[0] = x.e = 0;
                          }

                          return x;
                      }

                      // Remove excess digits.
                      if ( i == 0 ) {
                          xc.length = ni;
                          k = 1;
                          ni--;
                      } else {
                          xc.length = ni + 1;
                          k = pows10[ LOG_BASE - i ];

                          // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                          // j > 0 means i > number of leading zeros of n.
                          xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;
                      }

                      // Round up?
                      if (r) {

                          for ( ; ; ) {

                              // If the digit to be rounded up is in the first element of xc...
                              if ( ni == 0 ) {

                                  // i will be the length of xc[0] before k is added.
                                  for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );
                                  j = xc[0] += k;
                                  for ( k = 1; j >= 10; j /= 10, k++ );

                                  // if i != k the length has increased.
                                  if ( i != k ) {
                                      x.e++;
                                      if ( xc[0] == BASE ) xc[0] = 1;
                                  }

                                  break;
                              } else {
                                  xc[ni] += k;
                                  if ( xc[ni] != BASE ) break;
                                  xc[ni--] = 0;
                                  k = 1;
                              }
                          }
                      }

                      // Remove trailing zeros.
                      for ( i = xc.length; xc[--i] === 0; xc.pop() );
                  }

                  // Overflow? Infinity.
                  if ( x.e > MAX_EXP ) {
                      x.c = x.e = null;

                  // Underflow? Zero.
                  } else if ( x.e < MIN_EXP ) {
                      x.c = [ x.e = 0 ];
                  }
              }

              return x;
          }


          // PROTOTYPE/INSTANCE METHODS


          /*
           * Return a new BigNumber whose value is the absolute value of this BigNumber.
           */
          P.absoluteValue = P.abs = function () {
              var x = new BigNumber(this);
              if ( x.s < 0 ) x.s = 1;
              return x;
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
           * number in the direction of Infinity.
           */
          P.ceil = function () {
              return round( new BigNumber(this), this.e + 1, 2 );
          };


          /*
           * Return
           * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
           * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
           * 0 if they have the same value,
           * or null if the value of either is NaN.
           */
          P.comparedTo = P.cmp = function ( y, b ) {
              id = 1;
              return compare( this, new BigNumber( y, b ) );
          };


          /*
           * Return the number of decimal places of the value of this BigNumber, or null if the value
           * of this BigNumber is ±Infinity or NaN.
           */
          P.decimalPlaces = P.dp = function () {
              var n, v,
                  c = this.c;

              if ( !c ) return null;
              n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;

              // Subtract the number of trailing zeros of the last number.
              if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );
              if ( n < 0 ) n = 0;

              return n;
          };


          /*
           *  n / 0 = I
           *  n / N = N
           *  n / I = 0
           *  0 / n = 0
           *  0 / 0 = N
           *  0 / N = N
           *  0 / I = 0
           *  N / n = N
           *  N / 0 = N
           *  N / N = N
           *  N / I = N
           *  I / n = I
           *  I / 0 = I
           *  I / N = N
           *  I / I = N
           *
           * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
           * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
           */
          P.dividedBy = P.div = function ( y, b ) {
              id = 3;
              return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );
          };


          /*
           * Return a new BigNumber whose value is the integer part of dividing the value of this
           * BigNumber by the value of BigNumber(y, b).
           */
          P.dividedToIntegerBy = P.divToInt = function ( y, b ) {
              id = 4;
              return div( this, new BigNumber( y, b ), 0, 1 );
          };


          /*
           * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
           * otherwise returns false.
           */
          P.equals = P.eq = function ( y, b ) {
              id = 5;
              return compare( this, new BigNumber( y, b ) ) === 0;
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
           * number in the direction of -Infinity.
           */
          P.floor = function () {
              return round( new BigNumber(this), this.e + 1, 3 );
          };


          /*
           * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
           * otherwise returns false.
           */
          P.greaterThan = P.gt = function ( y, b ) {
              id = 6;
              return compare( this, new BigNumber( y, b ) ) > 0;
          };


          /*
           * Return true if the value of this BigNumber is greater than or equal to the value of
           * BigNumber(y, b), otherwise returns false.
           */
          P.greaterThanOrEqualTo = P.gte = function ( y, b ) {
              id = 7;
              return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;

          };


          /*
           * Return true if the value of this BigNumber is a finite number, otherwise returns false.
           */
          P.isFinite = function () {
              return !!this.c;
          };


          /*
           * Return true if the value of this BigNumber is an integer, otherwise return false.
           */
          P.isInteger = P.isInt = function () {
              return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;
          };


          /*
           * Return true if the value of this BigNumber is NaN, otherwise returns false.
           */
          P.isNaN = function () {
              return !this.s;
          };


          /*
           * Return true if the value of this BigNumber is negative, otherwise returns false.
           */
          P.isNegative = P.isNeg = function () {
              return this.s < 0;
          };


          /*
           * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.
           */
          P.isZero = function () {
              return !!this.c && this.c[0] == 0;
          };


          /*
           * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
           * otherwise returns false.
           */
          P.lessThan = P.lt = function ( y, b ) {
              id = 8;
              return compare( this, new BigNumber( y, b ) ) < 0;
          };


          /*
           * Return true if the value of this BigNumber is less than or equal to the value of
           * BigNumber(y, b), otherwise returns false.
           */
          P.lessThanOrEqualTo = P.lte = function ( y, b ) {
              id = 9;
              return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;
          };


          /*
           *  n - 0 = n
           *  n - N = N
           *  n - I = -I
           *  0 - n = -n
           *  0 - 0 = 0
           *  0 - N = N
           *  0 - I = -I
           *  N - n = N
           *  N - 0 = N
           *  N - N = N
           *  N - I = N
           *  I - n = I
           *  I - 0 = I
           *  I - N = N
           *  I - I = N
           *
           * Return a new BigNumber whose value is the value of this BigNumber minus the value of
           * BigNumber(y, b).
           */
          P.minus = P.sub = function ( y, b ) {
              var i, j, t, xLTy,
                  x = this,
                  a = x.s;

              id = 10;
              y = new BigNumber( y, b );
              b = y.s;

              // Either NaN?
              if ( !a || !b ) return new BigNumber(NaN);

              // Signs differ?
              if ( a != b ) {
                  y.s = -b;
                  return x.plus(y);
              }

              var xe = x.e / LOG_BASE,
                  ye = y.e / LOG_BASE,
                  xc = x.c,
                  yc = y.c;

              if ( !xe || !ye ) {

                  // Either Infinity?
                  if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );

                  // Either zero?
                  if ( !xc[0] || !yc[0] ) {

                      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                      return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :

                        // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                        ROUNDING_MODE == 3 ? -0 : 0 );
                  }
              }

              xe = bitFloor(xe);
              ye = bitFloor(ye);
              xc = xc.slice();

              // Determine which is the bigger number.
              if ( a = xe - ye ) {

                  if ( xLTy = a < 0 ) {
                      a = -a;
                      t = xc;
                  } else {
                      ye = xe;
                      t = yc;
                  }

                  t.reverse();

                  // Prepend zeros to equalise exponents.
                  for ( b = a; b--; t.push(0) );
                  t.reverse();
              } else {

                  // Exponents equal. Check digit by digit.
                  j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;

                  for ( a = b = 0; b < j; b++ ) {

                      if ( xc[b] != yc[b] ) {
                          xLTy = xc[b] < yc[b];
                          break;
                      }
                  }
              }

              // x < y? Point xc to the array of the bigger number.
              if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

              b = ( j = yc.length ) - ( i = xc.length );

              // Append zeros to xc if shorter.
              // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
              if ( b > 0 ) for ( ; b--; xc[i++] = 0 );
              b = BASE - 1;

              // Subtract yc from xc.
              for ( ; j > a; ) {

                  if ( xc[--j] < yc[j] ) {
                      for ( i = j; i && !xc[--i]; xc[i] = b );
                      --xc[i];
                      xc[j] += BASE;
                  }

                  xc[j] -= yc[j];
              }

              // Remove leading zeros and adjust exponent accordingly.
              for ( ; xc[0] == 0; xc.shift(), --ye );

              // Zero?
              if ( !xc[0] ) {

                  // Following IEEE 754 (2008) 6.3,
                  // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                  y.s = ROUNDING_MODE == 3 ? -1 : 1;
                  y.c = [ y.e = 0 ];
                  return y;
              }

              // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
              // for finite x and y.
              return normalise( y, xc, ye );
          };


          /*
           *   n % 0 =  N
           *   n % N =  N
           *   n % I =  n
           *   0 % n =  0
           *  -0 % n = -0
           *   0 % 0 =  N
           *   0 % N =  N
           *   0 % I =  0
           *   N % n =  N
           *   N % 0 =  N
           *   N % N =  N
           *   N % I =  N
           *   I % n =  N
           *   I % 0 =  N
           *   I % N =  N
           *   I % I =  N
           *
           * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
           * BigNumber(y, b). The result depends on the value of MODULO_MODE.
           */
          P.modulo = P.mod = function ( y, b ) {
              var q, s,
                  x = this;

              id = 11;
              y = new BigNumber( y, b );

              // Return NaN if x is Infinity or NaN, or y is NaN or zero.
              if ( !x.c || !y.s || y.c && !y.c[0] ) {
                  return new BigNumber(NaN);

              // Return x if y is Infinity or x is zero.
              } else if ( !y.c || x.c && !x.c[0] ) {
                  return new BigNumber(x);
              }

              if ( MODULO_MODE == 9 ) {

                  // Euclidian division: q = sign(y) * floor(x / abs(y))
                  // r = x - qy    where  0 <= r < abs(y)
                  s = y.s;
                  y.s = 1;
                  q = div( x, y, 0, 3 );
                  y.s = s;
                  q.s *= s;
              } else {
                  q = div( x, y, 0, MODULO_MODE );
              }

              return x.minus( q.times(y) );
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber negated,
           * i.e. multiplied by -1.
           */
          P.negated = P.neg = function () {
              var x = new BigNumber(this);
              x.s = -x.s || null;
              return x;
          };


          /*
           *  n + 0 = n
           *  n + N = N
           *  n + I = I
           *  0 + n = n
           *  0 + 0 = 0
           *  0 + N = N
           *  0 + I = I
           *  N + n = N
           *  N + 0 = N
           *  N + N = N
           *  N + I = N
           *  I + n = I
           *  I + 0 = I
           *  I + N = N
           *  I + I = I
           *
           * Return a new BigNumber whose value is the value of this BigNumber plus the value of
           * BigNumber(y, b).
           */
          P.plus = P.add = function ( y, b ) {
              var t,
                  x = this,
                  a = x.s;

              id = 12;
              y = new BigNumber( y, b );
              b = y.s;

              // Either NaN?
              if ( !a || !b ) return new BigNumber(NaN);

              // Signs differ?
               if ( a != b ) {
                  y.s = -b;
                  return x.minus(y);
              }

              var xe = x.e / LOG_BASE,
                  ye = y.e / LOG_BASE,
                  xc = x.c,
                  yc = y.c;

              if ( !xe || !ye ) {

                  // Return ±Infinity if either ±Infinity.
                  if ( !xc || !yc ) return new BigNumber( a / 0 );

                  // Either zero?
                  // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                  if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );
              }

              xe = bitFloor(xe);
              ye = bitFloor(ye);
              xc = xc.slice();

              // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
              if ( a = xe - ye ) {
                  if ( a > 0 ) {
                      ye = xe;
                      t = yc;
                  } else {
                      a = -a;
                      t = xc;
                  }

                  t.reverse();
                  for ( ; a--; t.push(0) );
                  t.reverse();
              }

              a = xc.length;
              b = yc.length;

              // Point xc to the longer array, and b to the shorter length.
              if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;

              // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
              for ( a = 0; b; ) {
                  a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;
                  xc[b] %= BASE;
              }

              if (a) {
                  xc.unshift(a);
                  ++ye;
              }

              // No need to check for zero, as +x + +y != 0 && -x + -y != 0
              // ye = MAX_EXP + 1 possible
              return normalise( y, xc, ye );
          };


          /*
           * Return the number of significant digits of the value of this BigNumber.
           *
           * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
           */
          P.precision = P.sd = function (z) {
              var n, v,
                  x = this,
                  c = x.c;

              // 'precision() argument not a boolean or binary digit: {z}'
              if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {
                  if (ERRORS) raise( 13, 'argument' + notBool, z );
                  if ( z != !!z ) z = null;
              }

              if ( !c ) return null;
              v = c.length - 1;
              n = v * LOG_BASE + 1;

              if ( v = c[v] ) {

                  // Subtract the number of trailing zeros of the last element.
                  for ( ; v % 10 == 0; v /= 10, n-- );

                  // Add the number of digits of the first element.
                  for ( v = c[0]; v >= 10; v /= 10, n++ );
              }

              if ( z && x.e + 1 > n ) n = x.e + 1;

              return n;
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
           * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if
           * omitted.
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * 'round() decimal places out of range: {dp}'
           * 'round() decimal places not an integer: {dp}'
           * 'round() rounding mode not an integer: {rm}'
           * 'round() rounding mode out of range: {rm}'
           */
          P.round = function ( dp, rm ) {
              var n = new BigNumber(this);

              if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {
                  round( n, ~~dp + this.e + 1, rm == null ||
                    !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );
              }

              return n;
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
           * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
           *
           * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
           *
           * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity
           * otherwise.
           *
           * 'shift() argument not an integer: {k}'
           * 'shift() argument out of range: {k}'
           */
          P.shift = function (k) {
              var n = this;
              return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )

                // k < 1e+21, or truncate(k) will produce exponential notation.
                ? n.times( '1e' + truncate(k) )
                : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )
                  ? n.s * ( k < 0 ? 0 : 1 / 0 )
                  : n );
          };


          /*
           *  sqrt(-n) =  N
           *  sqrt( N) =  N
           *  sqrt(-I) =  N
           *  sqrt( I) =  I
           *  sqrt( 0) =  0
           *  sqrt(-0) = -0
           *
           * Return a new BigNumber whose value is the square root of the value of this BigNumber,
           * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
           */
          P.squareRoot = P.sqrt = function () {
              var m, n, r, rep, t,
                  x = this,
                  c = x.c,
                  s = x.s,
                  e = x.e,
                  dp = DECIMAL_PLACES + 4,
                  half = new BigNumber('0.5');

              // Negative/NaN/Infinity/zero?
              if ( s !== 1 || !c || !c[0] ) {
                  return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );
              }

              // Initial estimate.
              s = Math.sqrt( +x );

              // Math.sqrt underflow/overflow?
              // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
              if ( s == 0 || s == 1 / 0 ) {
                  n = coeffToString(c);
                  if ( ( n.length + e ) % 2 == 0 ) n += '0';
                  s = Math.sqrt(n);
                  e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );

                  if ( s == 1 / 0 ) {
                      n = '1e' + e;
                  } else {
                      n = s.toExponential();
                      n = n.slice( 0, n.indexOf('e') + 1 ) + e;
                  }

                  r = new BigNumber(n);
              } else {
                  r = new BigNumber( s + '' );
              }

              // Check for zero.
              // r could be zero if MIN_EXP is changed after the this value was created.
              // This would cause a division by zero (x/t) and hence Infinity below, which would cause
              // coeffToString to throw.
              if ( r.c[0] ) {
                  e = r.e;
                  s = e + dp;
                  if ( s < 3 ) s = 0;

                  // Newton-Raphson iteration.
                  for ( ; ; ) {
                      t = r;
                      r = half.times( t.plus( div( x, t, dp, 1 ) ) );

                      if ( coeffToString( t.c   ).slice( 0, s ) === ( n =
                           coeffToString( r.c ) ).slice( 0, s ) ) {

                          // The exponent of r may here be one less than the final result exponent,
                          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                          // are indexed correctly.
                          if ( r.e < e ) --s;
                          n = n.slice( s - 3, s + 1 );

                          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                          // iteration.
                          if ( n == '9999' || !rep && n == '4999' ) {

                              // On the first iteration only, check to see if rounding up gives the
                              // exact result as the nines may infinitely repeat.
                              if ( !rep ) {
                                  round( t, t.e + DECIMAL_PLACES + 2, 0 );

                                  if ( t.times(t).eq(x) ) {
                                      r = t;
                                      break;
                                  }
                              }

                              dp += 4;
                              s += 4;
                              rep = 1;
                          } else {

                              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                              // result. If not, then there are further digits and m will be truthy.
                              if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {

                                  // Truncate to the first rounding digit.
                                  round( r, r.e + DECIMAL_PLACES + 2, 1 );
                                  m = !r.times(r).eq(x);
                              }

                              break;
                          }
                      }
                  }
              }

              return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );
          };


          /*
           *  n * 0 = 0
           *  n * N = N
           *  n * I = I
           *  0 * n = 0
           *  0 * 0 = 0
           *  0 * N = N
           *  0 * I = N
           *  N * n = N
           *  N * 0 = N
           *  N * N = N
           *  N * I = N
           *  I * n = I
           *  I * 0 = N
           *  I * N = N
           *  I * I = I
           *
           * Return a new BigNumber whose value is the value of this BigNumber times the value of
           * BigNumber(y, b).
           */
          P.times = P.mul = function ( y, b ) {
              var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
                  base, sqrtBase,
                  x = this,
                  xc = x.c,
                  yc = ( id = 17, y = new BigNumber( y, b ) ).c;

              // Either NaN, ±Infinity or ±0?
              if ( !xc || !yc || !xc[0] || !yc[0] ) {

                  // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                  if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {
                      y.c = y.e = y.s = null;
                  } else {
                      y.s *= x.s;

                      // Return ±Infinity if either is ±Infinity.
                      if ( !xc || !yc ) {
                          y.c = y.e = null;

                      // Return ±0 if either is ±0.
                      } else {
                          y.c = [0];
                          y.e = 0;
                      }
                  }

                  return y;
              }

              e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );
              y.s *= x.s;
              xcL = xc.length;
              ycL = yc.length;

              // Ensure xc points to longer array and xcL to its length.
              if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

              // Initialise the result array with zeros.
              for ( i = xcL + ycL, zc = []; i--; zc.push(0) );

              base = BASE;
              sqrtBase = SQRT_BASE;

              for ( i = ycL; --i >= 0; ) {
                  c = 0;
                  ylo = yc[i] % sqrtBase;
                  yhi = yc[i] / sqrtBase | 0;

                  for ( k = xcL, j = i + k; j > i; ) {
                      xlo = xc[--k] % sqrtBase;
                      xhi = xc[k] / sqrtBase | 0;
                      m = yhi * xlo + xhi * ylo;
                      xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;
                      c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;
                      zc[j--] = xlo % base;
                  }

                  zc[j] = c;
              }

              if (c) {
                  ++e;
              } else {
                  zc.shift();
              }

              return normalise( y, zc, e );
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
           * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.
           *
           * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * 'toDigits() precision out of range: {sd}'
           * 'toDigits() precision not an integer: {sd}'
           * 'toDigits() rounding mode not an integer: {rm}'
           * 'toDigits() rounding mode out of range: {rm}'
           */
          P.toDigits = function ( sd, rm ) {
              var n = new BigNumber(this);
              sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;
              rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;
              return sd ? round( n, sd, rm ) : n;
          };


          /*
           * Return a string representing the value of this BigNumber in exponential notation and
           * rounded using ROUNDING_MODE to dp fixed decimal places.
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * 'toExponential() decimal places not an integer: {dp}'
           * 'toExponential() decimal places out of range: {dp}'
           * 'toExponential() rounding mode not an integer: {rm}'
           * 'toExponential() rounding mode out of range: {rm}'
           */
          P.toExponential = function ( dp, rm ) {
              return format( this,
                dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );
          };


          /*
           * Return a string representing the value of this BigNumber in fixed-point notation rounding
           * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
           *
           * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
           * but e.g. (-0.00001).toFixed(0) is '-0'.
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * 'toFixed() decimal places not an integer: {dp}'
           * 'toFixed() decimal places out of range: {dp}'
           * 'toFixed() rounding mode not an integer: {rm}'
           * 'toFixed() rounding mode out of range: {rm}'
           */
          P.toFixed = function ( dp, rm ) {
              return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )
                ? ~~dp + this.e + 1 : null, rm, 20 );
          };


          /*
           * Return a string representing the value of this BigNumber in fixed-point notation rounded
           * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
           * of the FORMAT object (see BigNumber.config).
           *
           * FORMAT = {
           *      decimalSeparator : '.',
           *      groupSeparator : ',',
           *      groupSize : 3,
           *      secondaryGroupSize : 0,
           *      fractionGroupSeparator : '\xA0',    // non-breaking space
           *      fractionGroupSize : 0
           * };
           *
           * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * 'toFormat() decimal places not an integer: {dp}'
           * 'toFormat() decimal places out of range: {dp}'
           * 'toFormat() rounding mode not an integer: {rm}'
           * 'toFormat() rounding mode out of range: {rm}'
           */
          P.toFormat = function ( dp, rm ) {
              var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )
                ? ~~dp + this.e + 1 : null, rm, 21 );

              if ( this.c ) {
                  var i,
                      arr = str.split('.'),
                      g1 = +FORMAT.groupSize,
                      g2 = +FORMAT.secondaryGroupSize,
                      groupSeparator = FORMAT.groupSeparator,
                      intPart = arr[0],
                      fractionPart = arr[1],
                      isNeg = this.s < 0,
                      intDigits = isNeg ? intPart.slice(1) : intPart,
                      len = intDigits.length;

                  if (g2) i = g1, g1 = g2, g2 = i, len -= i;

                  if ( g1 > 0 && len > 0 ) {
                      i = len % g1 || g1;
                      intPart = intDigits.substr( 0, i );

                      for ( ; i < len; i += g1 ) {
                          intPart += groupSeparator + intDigits.substr( i, g1 );
                      }

                      if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);
                      if (isNeg) intPart = '-' + intPart;
                  }

                  str = fractionPart
                    ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )
                      ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),
                        '$&' + FORMAT.fractionGroupSeparator )
                      : fractionPart )
                    : intPart;
              }

              return str;
          };


          /*
           * Return a string array representing the value of this BigNumber as a simple fraction with
           * an integer numerator and an integer denominator. The denominator will be a positive
           * non-zero value less than or equal to the specified maximum denominator. If a maximum
           * denominator is not specified, the denominator will be the lowest value necessary to
           * represent the number exactly.
           *
           * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.
           *
           * 'toFraction() max denominator not an integer: {md}'
           * 'toFraction() max denominator out of range: {md}'
           */
          P.toFraction = function (md) {
              var arr, d0, d2, e, exp, n, n0, q, s,
                  k = ERRORS,
                  x = this,
                  xc = x.c,
                  d = new BigNumber(ONE),
                  n1 = d0 = new BigNumber(ONE),
                  d1 = n0 = new BigNumber(ONE);

              if ( md != null ) {
                  ERRORS = false;
                  n = new BigNumber(md);
                  ERRORS = k;

                  if ( !( k = n.isInt() ) || n.lt(ONE) ) {

                      if (ERRORS) {
                          raise( 22,
                            'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );
                      }

                      // ERRORS is false:
                      // If md is a finite non-integer >= 1, round it to an integer and use it.
                      md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;
                  }
              }

              if ( !xc ) return x.toString();
              s = coeffToString(xc);

              // Determine initial denominator.
              // d is a power of 10 and the minimum max denominator that specifies the value exactly.
              e = d.e = s.length - x.e - 1;
              d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];
              md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;

              exp = MAX_EXP;
              MAX_EXP = 1 / 0;
              n = new BigNumber(s);

              // n0 = d1 = 0
              n0.c[0] = 0;

              for ( ; ; )  {
                  q = div( n, d, 0, 1 );
                  d2 = d0.plus( q.times(d1) );
                  if ( d2.cmp(md) == 1 ) break;
                  d0 = d1;
                  d1 = d2;
                  n1 = n0.plus( q.times( d2 = n1 ) );
                  n0 = d2;
                  d = n.minus( q.times( d2 = d ) );
                  n = d2;
              }

              d2 = div( md.minus(d0), d1, 0, 1 );
              n0 = n0.plus( d2.times(n1) );
              d0 = d0.plus( d2.times(d1) );
              n0.s = n1.s = x.s;
              e *= 2;

              // Determine which fraction is closer to x, n0/d0 or n1/d1
              arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(
                    div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1
                      ? [ n1.toString(), d1.toString() ]
                      : [ n0.toString(), d0.toString() ];

              MAX_EXP = exp;
              return arr;
          };


          /*
           * Return the value of this BigNumber converted to a number primitive.
           */
          P.toNumber = function () {
              var x = this;

              // Ensure zero has correct sign.
              return +x || ( x.s ? x.s * 0 : NaN );
          };


          /*
           * Return a BigNumber whose value is the value of this BigNumber raised to the power n.
           * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
           * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.
           *
           * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.
           * (Performs 54 loop iterations for n of 9007199254740992.)
           *
           * 'pow() exponent not an integer: {n}'
           * 'pow() exponent out of range: {n}'
           */
          P.toPower = P.pow = function (n) {
              var k, y,
                  i = mathfloor( n < 0 ? -n : +n ),
                  x = this;

              // Pass ±Infinity to Math.pow if exponent is out of range.
              if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&
                ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||
                  parseFloat(n) != n && !( n = NaN ) ) ) {
                  return new BigNumber( Math.pow( +x, n ) );
              }

              // Truncating each coefficient array to a length of k after each multiplication equates
              // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a
              // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)
              k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;
              y = new BigNumber(ONE);

              for ( ; ; ) {

                  if ( i % 2 ) {
                      y = y.times(x);
                      if ( !y.c ) break;
                      if ( k && y.c.length > k ) y.c.length = k;
                  }

                  i = mathfloor( i / 2 );
                  if ( !i ) break;

                  x = x.times(x);
                  if ( k && x.c && x.c.length > k ) x.c.length = k;
              }

              if ( n < 0 ) y = ONE.div(y);
              return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;
          };


          /*
           * Return a string representing the value of this BigNumber rounded to sd significant digits
           * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
           * necessary to represent the integer part of the value in fixed-point notation, then use
           * exponential notation.
           *
           * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
           * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
           *
           * 'toPrecision() precision not an integer: {sd}'
           * 'toPrecision() precision out of range: {sd}'
           * 'toPrecision() rounding mode not an integer: {rm}'
           * 'toPrecision() rounding mode out of range: {rm}'
           */
          P.toPrecision = function ( sd, rm ) {
              return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )
                ? sd | 0 : null, rm, 24 );
          };


          /*
           * Return a string representing the value of this BigNumber in base b, or base 10 if b is
           * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
           * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
           * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
           * TO_EXP_NEG, return exponential notation.
           *
           * [b] {number} Integer, 2 to 64 inclusive.
           *
           * 'toString() base not an integer: {b}'
           * 'toString() base out of range: {b}'
           */
          P.toString = function (b) {
              var str,
                  n = this,
                  s = n.s,
                  e = n.e;

              // Infinity or NaN?
              if ( e === null ) {

                  if (s) {
                      str = 'Infinity';
                      if ( s < 0 ) str = '-' + str;
                  } else {
                      str = 'NaN';
                  }
              } else {
                  str = coeffToString( n.c );

                  if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {
                      str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                        ? toExponential( str, e )
                        : toFixedPoint( str, e );
                  } else {
                      str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );
                  }

                  if ( s < 0 && n.c[0] ) str = '-' + str;
              }

              return str;
          };


          /*
           * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole
           * number.
           */
          P.truncated = P.trunc = function () {
              return round( new BigNumber(this), this.e + 1, 1 );
          };



          /*
           * Return as toString, but do not accept a base argument.
           */
          P.valueOf = P.toJSON = function () {
              return this.toString();
          };


          // Aliases for BigDecimal methods.
          //P.add = P.plus;         // P.add included above
          //P.subtract = P.minus;   // P.sub included above
          //P.multiply = P.times;   // P.mul included above
          //P.divide = P.div;
          //P.remainder = P.mod;
          //P.compareTo = P.cmp;
          //P.negate = P.neg;


          if ( configObj != null ) BigNumber.config(configObj);

          return BigNumber;
      }


      // PRIVATE HELPER FUNCTIONS


      function bitFloor(n) {
          var i = n | 0;
          return n > 0 || n === i ? i : i - 1;
      }


      // Return a coefficient array as a string of base 10 digits.
      function coeffToString(a) {
          var s, z,
              i = 1,
              j = a.length,
              r = a[0] + '';

          for ( ; i < j; ) {
              s = a[i++] + '';
              z = LOG_BASE - s.length;
              for ( ; z--; s = '0' + s );
              r += s;
          }

          // Determine trailing zeros.
          for ( j = r.length; r.charCodeAt(--j) === 48; );
          return r.slice( 0, j + 1 || 1 );
      }


      // Compare the value of BigNumbers x and y.
      function compare( x, y ) {
          var a, b,
              xc = x.c,
              yc = y.c,
              i = x.s,
              j = y.s,
              k = x.e,
              l = y.e;

          // Either NaN?
          if ( !i || !j ) return null;

          a = xc && !xc[0];
          b = yc && !yc[0];

          // Either zero?
          if ( a || b ) return a ? b ? 0 : -j : i;

          // Signs differ?
          if ( i != j ) return i;

          a = i < 0;
          b = k == l;

          // Either Infinity?
          if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;

          // Compare exponents.
          if ( !b ) return k > l ^ a ? 1 : -1;

          j = ( k = xc.length ) < ( l = yc.length ) ? k : l;

          // Compare digit by digit.
          for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;

          // Compare lengths.
          return k == l ? 0 : k > l ^ a ? 1 : -1;
      }


      /*
       * Return true if n is a valid number in range, otherwise false.
       * Use for argument validation when ERRORS is false.
       * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.
       */
      function intValidatorNoErrors( n, min, max ) {
          return ( n = truncate(n) ) >= min && n <= max;
      }


      function isArray(obj) {
          return Object.prototype.toString.call(obj) == '[object Array]';
      }


      /*
       * Convert string of baseIn to an array of numbers of baseOut.
       * Eg. convertBase('255', 10, 16) returns [15, 15].
       * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
       */
      function toBaseOut( str, baseIn, baseOut ) {
          var j,
              arr = [0],
              arrL,
              i = 0,
              len = str.length;

          for ( ; i < len; ) {
              for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );
              arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );

              for ( ; j < arr.length; j++ ) {

                  if ( arr[j] > baseOut - 1 ) {
                      if ( arr[j + 1] == null ) arr[j + 1] = 0;
                      arr[j + 1] += arr[j] / baseOut | 0;
                      arr[j] %= baseOut;
                  }
              }
          }

          return arr.reverse();
      }


      function toExponential( str, e ) {
          return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +
            ( e < 0 ? 'e' : 'e+' ) + e;
      }


      function toFixedPoint( str, e ) {
          var len, z;

          // Negative exponent?
          if ( e < 0 ) {

              // Prepend zeros.
              for ( z = '0.'; ++e; z += '0' );
              str = z + str;

          // Positive exponent
          } else {
              len = str.length;

              // Append zeros.
              if ( ++e > len ) {
                  for ( z = '0', e -= len; --e; z += '0' );
                  str += z;
              } else if ( e < len ) {
                  str = str.slice( 0, e ) + '.' + str.slice(e);
              }
          }

          return str;
      }


      function truncate(n) {
          n = parseFloat(n);
          return n < 0 ? mathceil(n) : mathfloor(n);
      }


      // EXPORT


      BigNumber = another();

      // AMD.
      if ( true ) {
          !(__WEBPACK_AMD_DEFINE_RESULT__ = function () { return BigNumber; }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

      // Node and other environments that support module.exports.
      } else if ( typeof module != 'undefined' && module.exports ) {
          module.exports = BigNumber;
          if ( !crypto ) try { crypto = require('crypto'); } catch (e) {}

      // Browser.
      } else {
          global.BigNumber = BigNumber;
      }
  })(this);


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {



  'use strict';

  var _createClass = __webpack_require__(27)['default'];

  var _classCallCheck = __webpack_require__(30)['default'];

  var GlobalBigNumber = __webpack_require__(184);

  var BigNumber = GlobalBigNumber.another({
    ROUNDING_MODE: GlobalBigNumber.ROUND_HALF_UP,
    DECIMAL_PLACES: 40
  });

  var assert = __webpack_require__(78);

  var Value = (function () {
    function Value(value) {
      _classCallCheck(this, Value);

      if (this.constructor === 'Value') {
        throw new Error('Cannot instantiate Value directly, it is an abstract base class');
      }
      this._value = new BigNumber(value);
    }

    _createClass(Value, [{
      key: 'abs',
      value: function abs() {
        var result = this._value.abs();
        return this._canonicalize(result);
      }
    }, {
      key: 'add',
      value: function add(addend) {
        assert(this.constructor === addend.constructor);
        var result = this._value.plus(addend._value);
        return this._canonicalize(result);
      }
    }, {
      key: 'subtract',
      value: function subtract(subtrahend) {
        assert(this.constructor === subtrahend.constructor);
        var result = this._value.minus(subtrahend._value);
        return this._canonicalize(result);
      }
    }, {
      key: 'multiply',
      value: function multiply(multiplicand) {
        var result = this._value.times(multiplicand._value);
        return this._canonicalize(result);
      }
    }, {
      key: 'divide',
      value: function divide(divisor) {
        if (divisor.isZero()) {
          throw new Error('divide by zero');
        }
        var result = this._value.dividedBy(divisor._value);
        return this._canonicalize(result);
      }
    }, {
      key: 'invert',
      value: function invert() {
        var result = new BigNumber(this._value).toPower(-1);
        return this._canonicalize(result);
      }
    }, {
      key: 'round',
      value: function round(decimalPlaces, roundingMode) {
        var result = this._value.round(decimalPlaces, roundingMode);
        return this._canonicalize(result);
      }
    }, {
      key: 'toFixed',
      value: function toFixed(decimalPlaces, roundingMode) {
        return this._value.toFixed(decimalPlaces, roundingMode);
      }
    }, {
      key: 'getExponent',
      value: function getExponent() {
        return this._value.e;
      }
    }, {
      key: 'isNaN',
      value: function isNaN() {
        return this._value.isNaN();
      }
    }, {
      key: 'isZero',
      value: function isZero() {
        return this._value.isZero();
      }
    }, {
      key: 'isNegative',
      value: function isNegative() {
        return this._value.isNegative();
      }
    }, {
      key: 'toString',
      value: function toString() {
        return this._value.toString();
      }
    }, {
      key: 'greaterThan',
      value: function greaterThan(comparator) {
        assert(this.constructor === comparator.constructor);
        return this._value.greaterThan(comparator._value);
      }
    }, {
      key: 'lessThan',
      value: function lessThan(comparator) {
        assert(this.constructor === comparator.constructor);
        return this._value.lessThan(comparator._value);
      }
    }, {
      key: 'comparedTo',
      value: function comparedTo(comparator) {
        assert(this.constructor === comparator.constructor);
        return this._value.comparedTo(comparator._value);
      }
    }], [{
      key: 'getBNRoundDown',
      value: function getBNRoundDown() {
        return BigNumber.ROUND_DOWN;
      }
    }]);

    return Value;
  })();

  exports.Value = Value;

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {



  'use strict';

  var _get = __webpack_require__(2)['default'];

  var _inherits = __webpack_require__(18)['default'];

  var _createClass = __webpack_require__(27)['default'];

  var _classCallCheck = __webpack_require__(30)['default'];

  var Value = __webpack_require__(185).Value;
  var XRPValue = __webpack_require__(183).XRPValue;
  var GlobalBigNumber = __webpack_require__(184);
  var BigNumber = GlobalBigNumber.another({
    ROUNDING_MODE: GlobalBigNumber.ROUND_HALF_UP,
    DECIMAL_PLACES: 40
  });
  var rippleUnits = new BigNumber(1e6);

  var IOUValue = (function (_Value) {
    _inherits(IOUValue, _Value);

    function IOUValue(value) {
      var roundingMode = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
      var base = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

      _classCallCheck(this, IOUValue);

      _get(Object.getPrototypeOf(IOUValue.prototype), 'constructor', this).call(this, new BigNumber(value, base).toDigits(16, roundingMode));
    }

    _createClass(IOUValue, [{
      key: 'multiply',
      value: function multiply(multiplicand) {
        if (multiplicand instanceof XRPValue) {
          return _get(Object.getPrototypeOf(IOUValue.prototype), 'multiply', this).call(this, new IOUValue(multiplicand._value.times(rippleUnits)));
        }
        return _get(Object.getPrototypeOf(IOUValue.prototype), 'multiply', this).call(this, multiplicand);
      }
    }, {
      key: 'divide',
      value: function divide(divisor) {
        if (divisor instanceof XRPValue) {
          return _get(Object.getPrototypeOf(IOUValue.prototype), 'divide', this).call(this, new IOUValue(divisor._value.times(rippleUnits)));
        }
        return _get(Object.getPrototypeOf(IOUValue.prototype), 'divide', this).call(this, divisor);
      }
    }, {
      key: 'negate',
      value: function negate() {
        return new IOUValue(this._value.neg());
      }
    }, {
      key: '_canonicalize',
      value: function _canonicalize(value) {
        if (value.isNaN()) {
          throw new Error('Invalid result');
        }
        return new IOUValue(value.toPrecision(16));
      }
    }, {
      key: 'equals',
      value: function equals(comparator) {
        return comparator instanceof IOUValue && this._value.equals(comparator._value);
      }
    }]);

    return IOUValue;
  })(Value);

  exports.IOUValue = IOUValue;

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {


  'use strict';

  var assert = __webpack_require__(78);

  /**
   * Logging functionality for ripple-lib and any applications built on it.
   *
   * @param {String} namespace logging prefix
   * @return {Void} this function does not return...
   */
  function Log(namespace) {

    if (!namespace) {
      var _t = [];
      this._namespace = _t;
    } else if (Array.isArray(namespace)) {
      this._namespace = namespace;
    } else {
      this._namespace = [String(namespace)];
    }

    this._prefix = this._namespace.concat(['']).join(': ');
  }

  /**
   * Create a sub-logger.
   *
   * You can have a hierarchy of loggers.
   *
   * @example
   *
   *   var log = require('ripple').log.sub('server');
   *
   *   log.info('connection successful');
   *   // prints: 'server: connection successful'
   *
   * @param {String} namespace logging prefix
   * @return {Log} sub logger
   */
  Log.prototype.sub = function (namespace) {
    var subNamespace = this._namespace.slice();

    if (namespace && typeof namespace === 'string') {
      subNamespace.push(namespace);
    }

    var subLogger = new Log(subNamespace);
    subLogger._setParent(this);
    return subLogger;
  };

  Log.prototype._setParent = function (parentLogger) {
    this._parent = parentLogger;
  };

  Log.makeLevel = function (level) {
    return function () {
      var args = Array.prototype.slice.apply(arguments);
      args[0] = this._prefix + args[0];
      Log.engine.logObject.apply(Log, [level].concat(args[0], [args.slice(1)]));
    };
  };

  Log.prototype.debug = Log.makeLevel(1);
  Log.prototype.info = Log.makeLevel(2);
  Log.prototype.warn = Log.makeLevel(3);
  Log.prototype.error = Log.makeLevel(4);

  /**
   * @param {String} message
   * @param {Array} details
   * @return {Array} prepared log info
   */

  function getLogInfo(message, args) {
    var stack = new Error().stack;

    return [
    // Timestamp
    '[' + new Date().toISOString() + ']', message, '--',
    // Location
    typeof stack === 'string' ? stack.split('\n')[4].replace(/^\s+/, '') : '', '\n'].concat(args);
  }

  /**
   * @param {Number} log level
   * @param {Array} log info
   */

  function logMessage(logLevel, args) {
    switch (logLevel) {
      case 1:
      case 2:
        console.log.apply(console, args);
        break;
      case 3:
        console.warn.apply(console, args);
        break;
      case 4:
        console.error.apply(console, args);
        break;
    }
  }

  var engines = {};

  /**
   * Basic logging connector.
   *
   * This engine has no formatting and works with the most basic of 'console.log'
   * implementations. This is the logging engine used in Node.js.
   */
  engines.basic = {
    logObject: function logObject(level, message, args_) {
      var args = args_.map(function (arg) {
        return JSON.stringify(arg, null, 2);
      });

      logMessage(level, getLogInfo(message, args));
    }
  };

  /**
   * Log engine for browser consoles.
   *
   * Browsers tend to have better consoles that support nicely formatted
   * JavaScript objects. This connector passes objects through to the logging
   * function without any stringification.
   */
  engines.interactive = {
    logObject: function logObject(level, message, args_) {
      var args = args_.map(function (arg) {
        return (/MSIE/.test(navigator.userAgent) ? JSON.stringify(arg, null, 2) : arg
        );
      });

      logMessage(level, getLogInfo(message, args));
    }
  };

  /**
   * Null logging connector.
   *
   * This engine simply swallows all messages. Used when console.log is not
   * available.
   */
  engines.none = {
    logObject: function logObject() {}
  };

  Log.getEngine = Log.prototype.getEngine = function () {
    return Log.engine;
  };

  Log.setEngine = Log.prototype.setEngine = function (engine) {
    assert.strictEqual(typeof engine, 'object');
    assert.strictEqual(typeof engine.logObject, 'function');
    Log.engine = engine;
  };

  if (typeof window !== 'undefined' && typeof console !== 'undefined') {
    Log.setEngine(engines.interactive);
  } else if (typeof console !== 'undefined' && console.log) {
    Log.setEngine(engines.basic);
  } else {
    Log.setEngine(engines.none);
  }

  /**
   * Provide a root logger as our main export.
   *
   * This means you can use the logger easily on the fly:
   *     ripple.log.debug('My object is', myObj);
   */
  module.exports = new Log();

  /**
   * This is the logger for ripple-lib internally.
   */
  module.exports.internal = module.exports.sub();

  /**
   * Expose the class as well.
   */
  module.exports.Log = Log;

  /**
   * Expose log engines
   */
  module.exports.engines = engines;

/***/ }
/******/ ]);
